(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{"./node_modules/php-parser/dist/php-parser.js":function(module,exports,__webpack_require__){eval('/*!\n * \n *   Package: php-parser\n *   Parse PHP code from JS and returns its AST\n *   Build: 6da88e7e7acbe4a154b4 - 3/27/2020\n *   Copyright (C) 2020 Glayzzle (BSD-3-Clause)\n *   @authors https://github.com/glayzzle/php-parser/graphs/contributors\n *   @url http://glayzzle.com        \n *       \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != \'string\') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module[\'default\']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, \'a\', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "statement";\n/**\n * Any statement.\n * @constructor Statement\n * @extends {Node}\n */\n\nmodule.exports = Node["extends"](KIND, function Statement(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "expression";\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @extends {Node}\n */\n\nmodule.exports = Node["extends"](KIND, function Expression(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * A generic AST node\n * @constructor Node\n * @property {Location|null} loc\n * @property {Comment[]} leadingComments\n * @property {Comment[]?} trailingComments\n * @property {String} kind\n */\n\nvar Node = function Node(kind, docs, location) {\n  this.kind = kind;\n\n  if (docs) {\n    this.leadingComments = docs;\n  }\n\n  if (location) {\n    this.loc = location;\n  }\n};\n/**\n * Attach comments to current node\n * @param {*} docs\n */\n\n\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n/**\n * Destroying an unused node\n */\n\n\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    throw new Error("Node already initialized, you must swap with another node");\n  }\n\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(this.leadingComments, node.leadingComments);\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(this.trailingComments, node.trailingComments);\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n\n  return node;\n};\n/**\n * Includes current token position of the parser\n * @param {*} parser\n */\n\n\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(this.loc.start.offset, parser.lexer.offset);\n    }\n  }\n\n  return this;\n};\n/**\n * Helper for extending the Node class\n * @param {String} type\n * @param {Function} constructor\n * @return {Function}\n */\n\n\nNode["extends"] = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor["extends"] = this["extends"];\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nmodule.exports = Node;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "literal";\n/**\n * Defines an array structure\n * @constructor Literal\n * @extends {Expression}\n * @property {string} raw\n * @property {Node|string|number|boolean|null} value\n */\n\nmodule.exports = Expression["extends"](KIND, function Literal(kind, value, raw, docs, location) {\n  Expression.apply(this, [kind || KIND, docs, location]);\n  this.value = value;\n\n  if (raw) {\n    this.raw = raw;\n  }\n});\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expr = __webpack_require__(1);\n\nvar KIND = "operation";\n/**\n * Defines binary operations\n * @constructor Operation\n * @extends {Expression}\n */\n\nmodule.exports = Expr["extends"](KIND, function Operation(kind, docs, location) {\n  Expr.apply(this, [kind || KIND, docs, location]);\n});\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "declaration";\nvar IS_UNDEFINED = "";\nvar IS_PUBLIC = "public";\nvar IS_PROTECTED = "protected";\nvar IS_PRIVATE = "private";\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @extends {Statement}\n * @property {Identifier|string} name\n */\n\nvar Declaration = Statement["extends"](KIND, function Declaration(kind, name, docs, location) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.name = name;\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n\n  if (this.kind !== "class") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nmodule.exports = Declaration;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "reference";\n/**\n * Defines a reference node\n * @constructor Reference\n * @extends {Node}\n */\n\nvar Reference = Node["extends"](KIND, function Reference(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\nmodule.exports = Reference;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "block";\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @extends {Statement}\n * @property {Node[]} children\n */\n\nmodule.exports = Statement["extends"](KIND, function Block(kind, children, docs, location) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.children = children.filter(Boolean);\n});\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expr = __webpack_require__(1);\n\nvar KIND = "lookup";\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\n\nmodule.exports = Expr["extends"](KIND, function Lookup(kind, what, offset, docs, location) {\n  Expr.apply(this, [kind || KIND, docs, location]);\n  this.what = what;\n  this.offset = offset;\n});\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @extends {Node}\n * @property {String} value\n */\n\n\nmodule.exports = Node["extends"]("comment", function Comment(kind, value, docs, location) {\n  Node.apply(this, [kind, docs, location]);\n  this.value = value;\n});\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "constantstatement";\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @extends {Statement}\n * @property {Constant[]} constants\n */\n\nmodule.exports = Statement["extends"](KIND, function ConstantStatement(kind, constants, docs, location) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.constants = constants;\n});\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Declaration = __webpack_require__(5);\n\nvar KIND = "function";\n/**\n * Defines a classic function\n * @constructor Function\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n */\n\nmodule.exports = Declaration["extends"](KIND, function _Function(name, args, byref, type, nullable, docs, location) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.body = null;\n});\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2020 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar lexer = __webpack_require__(13);\n\nvar parser = __webpack_require__(23);\n\nvar tokens = __webpack_require__(39);\n\nvar AST = __webpack_require__(40);\n/**\n * @private\n */\n\n\nfunction combine(src, to) {\n  var keys = Object.keys(src);\n  var i = keys.length;\n\n  while (i--) {\n    var k = keys[i];\n    var val = src[k];\n\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === "function") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (_typeof(val) === "object") {\n      to[k] = _typeof(to[k]) === "object" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n\n  return to;\n}\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @tutorial Engine\n * @example\n * var parser = require(\'php-parser\');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or \'7.4\'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval(\'some php code\');\n * var codeAST = instance.parseCode(\'<?php some php code\', \'foo.php\');\n * var tokens = instance.tokenGetAll(\'<?php some php code\');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\n\n\nvar engine = function engine(options) {\n  if (typeof this === "function") {\n    return new this(options);\n  }\n\n  this.tokens = tokens;\n  this.lexer = new lexer(this);\n  this.ast = new AST();\n  this.parser = new parser(this.lexer, this.ast);\n\n  if (options && _typeof(options) === "object") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n\n      if (options.parser.version) {\n        if (typeof options.parser.version === "string") {\n          var version = options.parser.version.split(".");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n\n          if (isNaN(version)) {\n            throw new Error("Bad version number : " + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== "number") {\n          throw new Error("Expecting a number for version");\n        }\n\n        if (options.parser.version < 500 || options.parser.version > 704) {\n          throw new Error("Can only handle versions between 5.x to 7.x");\n        }\n      }\n    }\n\n    combine(options, this); // same version flags based on parser options\n\n    this.lexer.version = this.parser.version;\n  }\n};\n/**\n * Check if the inpyt is a buffer or a string\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\n\n\nvar getStringBuffer = function getStringBuffer(buffer) {\n  return typeof buffer.write === "function" ? buffer.toString() : buffer;\n};\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\n\n\nengine.create = function (options) {\n  return new engine(options);\n};\n/**\n * Evaluate the buffer\n * @private\n */\n\n\nengine.parseEval = function (buffer, options) {\n  var self = new engine(options);\n  return self.parseEval(buffer);\n};\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\n\n\nengine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, "eval");\n};\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\n\n\nengine.parseCode = function (buffer, filename, options) {\n  if (_typeof(filename) === "object" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = "unknown";\n  }\n\n  var self = new engine(options);\n  return self.parseCode(buffer, filename);\n};\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require(\'php-parser\');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode(\'...php code...\', \'foo.php\');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\n\n\nengine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n/**\n * Split the buffer into tokens\n * @private\n */\n\n\nengine.tokenGetAll = function (buffer, options) {\n  var self = new engine(options);\n  return self.tokenGetAll(buffer);\n};\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {String} buffer\n * @return {String[]} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\n\n\nengine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  var EOF = this.lexer.EOF;\n  var names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  var token = this.lexer.lex() || EOF;\n  var result = [];\n\n  while (token != EOF) {\n    var entry = this.lexer.yytext;\n\n    if (names.hasOwnProperty(token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n\n  return result;\n}; // exports the function\n\n\nmodule.exports = engine; // makes libraries public\n\nmodule.exports.tokens = tokens;\nmodule.exports.lexer = lexer;\nmodule.exports.AST = AST;\nmodule.exports.parser = parser;\nmodule.exports.combine = combine; // allow the default export in index.d.ts\n\nmodule.exports["default"] = engine;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @class\n * @property {Integer} EOF\n * @property {Boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {Boolean} comment_tokens extracts comments tokens\n * @property {Boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {Boolean} asp_tags disables by default asp tags mode\n * @property {Boolean} short_tags enables by default short tags mode\n * @property {Object} keywords List of php keyword\n * @property {Object} castKeywords List of php keywords for type casting\n */\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar lexer = function lexer(engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 704;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    "function": this.tok.T_FUNCTION,\n    "const": this.tok.T_CONST,\n    "return": this.tok.T_RETURN,\n    "try": this.tok.T_TRY,\n    "catch": this.tok.T_CATCH,\n    "finally": this.tok.T_FINALLY,\n    "throw": this.tok.T_THROW,\n    "if": this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    "else": this.tok.T_ELSE,\n    "while": this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    "do": this.tok.T_DO,\n    "for": this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    "instanceof": this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    "switch": this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    "case": this.tok.T_CASE,\n    "default": this.tok.T_DEFAULT,\n    "break": this.tok.T_BREAK,\n    "continue": this.tok.T_CONTINUE,\n    "goto": this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    "class": this.tok.T_CLASS,\n    "interface": this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    "extends": this.tok.T_EXTENDS,\n    "implements": this.tok.T_IMPLEMENTS,\n    "new": this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    "var": this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    "static": this.tok.T_STATIC,\n    "abstract": this.tok.T_ABSTRACT,\n    "final": this.tok.T_FINAL,\n    "private": this.tok.T_PRIVATE,\n    "protected": this.tok.T_PROTECTED,\n    "public": this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR\n  };\n  this.castKeywords = {\n    "int": this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    "double": this.tok.T_DOUBLE_CAST,\n    "float": this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    "boolean": this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST\n  };\n};\n/**\n * Initialize the lexer with the specified input\n */\n\n\nlexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = "";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0\n  };\n  this.tokens = [];\n\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n\n  this.done = this.offset >= this.size;\n\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = ["INITIAL"];\n    this.begin("ST_IN_SCRIPTING");\n  } else {\n    this.conditionStack = [];\n    this.begin("INITIAL");\n  } // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n\n\n  this.heredoc_label = {\n    label: "",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n\n    /**\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable \'}\' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    toString: function toString() {\n      this.label;\n    }\n  };\n  return this;\n};\n/**\n * consumes and returns one char from the input\n */\n\n\nlexer.prototype.input = function () {\n  var ch = this._input[this.offset];\n  if (!ch) return "";\n  this.yytext += ch;\n  this.offset++;\n\n  if (ch === "\\r" && this._input[this.offset] === "\\n") {\n    this.yytext += "\\n";\n    this.offset++;\n  }\n\n  if (ch === "\\n" || ch === "\\r") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n\n  return ch;\n};\n/**\n * revert eating specified size\n */\n\n\nlexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n\n    if (this._input[this.offset] === "\\n" && this._input[this.offset - 1] === "\\r") {\n      this.offset--;\n      size++;\n    }\n\n    if (this._input[this.offset] === "\\r" || this._input[this.offset] === "\\n") {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size); // re-calculate position\n\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n\n      for (var i = 0; i < this.yytext.length; i++) {\n        var c = this.yytext[i];\n\n        if (c === "\\r") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n\n          if (c !== "\\n") {\n            if (c === "\\r") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === "\\n") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = "";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n}; // check if the text matches\n\n\nlexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n}; // check if the text matches\n\n\nlexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n}; // look ahead\n\n\nlexer.prototype.ahead = function (size) {\n  var text = this._input.substring(this.offset, this.offset + size);\n\n  if (text[text.length - 1] === "\\r" && this._input[this.offset + size + 1] === "\\n") {\n    text += "\\n";\n  }\n\n  return text;\n}; // consume the specified size\n\n\nlexer.prototype.consume = function (size) {\n  for (var i = 0; i < size; i++) {\n    var ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n\n    if (ch === "\\r" && this._input[this.offset] === "\\n") {\n      this.yytext += "\\n";\n      this.offset++;\n      i++;\n    }\n\n    if (ch === "\\n" || ch === "\\r") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n\n  return this;\n};\n/**\n * Gets the current state\n */\n\n\nlexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column\n    },\n    heredoc_label: this.heredoc_label\n  };\n};\n/**\n * Sets the current lexer state\n */\n\n\nlexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n\n  return this;\n}; // prepend next token\n\n\nlexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n}; // return next match that has a token\n\n\nlexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  var token = this.next() || this.lex();\n\n  if (!this.all_tokens) {\n    while (token === this.tok.T_WHITESPACE || // ignore white space\n    !this.comment_tokens && (token === this.tok.T_COMMENT || // ignore single lines comments\n    token === this.tok.T_DOC_COMMENT) || // ignore doc comments\n    // ignore open tags\n    token === this.tok.T_OPEN_TAG) {\n      token = this.next() || this.lex();\n    }\n\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return ";";\n      /* implicit ; */\n    }\n  }\n\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error(\'Infinite loop @ \' + this.offset + \' / \' + this.size);\n  }*/\n\n\n  return token;\n}; // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n\n\nlexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this["match" + condition];\n\n  if (typeof this.stateCb !== "function") {\n    throw new Error(\'Undefined condition state "\' + condition + \'"\');\n  }\n\n  return this;\n}; // pop the previously active lexer condition state off the condition stack\n\n\nlexer.prototype.popState = function () {\n  var n = this.conditionStack.length - 1;\n  var condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this["match" + this.curCondition];\n\n  if (typeof this.stateCb !== "function") {\n    throw new Error(\'Undefined condition state "\' + this.curCondition + \'"\');\n  }\n\n  return condition;\n}; // return next match in input\n\n\nlexer.prototype.next = function () {\n  var token;\n\n  if (!this._input) {\n    this.done = true;\n  }\n\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = "";\n\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n\n    if (_typeof(token[1]) === "object") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n\n  if (this.debug) {\n    var tName = token;\n\n    if (typeof tName === "number") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = \'"\' + tName + \'"\';\n    }\n\n    var e = new Error(tName + "\\tfrom " + this.yylloc.first_line + "," + this.yylloc.first_column + "\\t - to " + this.yylloc.last_line + "," + this.yylloc.last_column + \'\\t"\' + this.yytext + \'"\'); // eslint-disable-next-line no-console\n\n    console.error(e.stack);\n  }\n\n  return token;\n}; // extends the lexer with states\n\n\n[__webpack_require__(14), __webpack_require__(15), __webpack_require__(16), __webpack_require__(18), __webpack_require__(19), __webpack_require__(20), __webpack_require__(21), __webpack_require__(22)].forEach(function (ext) {\n  for (var k in ext) {\n    lexer.prototype[k] = ext[k];\n  }\n});\nmodule.exports = lexer;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a single line comment\n   */\n  T_COMMENT: function T_COMMENT() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch === "\\n" || ch === "\\r") {\n        return this.tok.T_COMMENT;\n      } else if (ch === "?" && !this.aspTagMode && this._input[this.offset] === ">") {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (ch === "%" && this.aspTagMode && this._input[this.offset] === ">") {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n\n    return this.tok.T_COMMENT;\n  },\n\n  /**\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function T_DOC_COMMENT() {\n    var ch = this.input();\n    var token = this.tok.T_COMMENT;\n\n    if (ch === "*") {\n      // started with \'/*\' , check is next is \'*\'\n      ch = this.input();\n\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n\n      if (ch === "/") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch === "*" && this._input[this.offset] === "/") {\n        this.input();\n        break;\n      }\n    }\n\n    return token;\n  }\n};\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  nextINITIAL: function nextINITIAL() {\n    if (this.conditionStack.length > 1 && this.conditionStack[this.conditionStack.length - 1] === "INITIAL") {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin("ST_IN_SCRIPTING");\n    }\n\n    return this;\n  },\n  matchINITIAL: function matchINITIAL() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch == "<") {\n        ch = this.ahead(1);\n\n        if (ch == "?") {\n          if (this.tryMatch("?=")) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3).nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless("?php")) {\n            ch = this._input[this.offset + 4];\n\n            if (ch === " " || ch === "\\t" || ch === "\\n" || ch === "\\r") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == "%") {\n          if (this.tryMatch("%=")) {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3).nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  }\n};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/* WEBPACK VAR INJECTION */(function(process) {/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/* istanbul ignore else  */\n\nvar MAX_LENGTH_OF_LONG = 10;\nvar long_min_digits = "2147483648";\n\nif (process.arch == "x64") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = "9223372036854775808";\n}\n\nmodule.exports = {\n  consume_NUM: function consume_NUM() {\n    var ch = this.yytext[0];\n    var hasPoint = ch === ".";\n\n    if (ch === "0") {\n      ch = this.input(); // check if hexa\n\n      if (ch === "x" || ch === "X") {\n        ch = this.input();\n\n        if (ch !== "_" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        } // check binary notation\n\n      } else if (ch === "b" || ch === "B") {\n        ch = this.input();\n\n        if (ch !== "_" && ch === "0" || ch === "1") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        } // @fixme check octal notation ? not usefull\n\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      var prev = ch;\n      ch = this.input();\n\n      if (ch === "_") {\n        if (prev === "_") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n\n          break;\n        }\n\n        if (prev === ".") {\n          // next to decimal point  "1._0"\n          this.unput(1); // keep 1.\n\n          break;\n        }\n\n        if (prev === "e" || prev === "E") {\n          // next to e "1e_10"\n          this.unput(2); // keep 1\n\n          break;\n        }\n      } else if (ch === ".") {\n        if (hasPoint) {\n          // no multiple points "1.0.5"\n          this.unput(1); // keep 1.0\n\n          break;\n        }\n\n        if (prev === "_") {\n          // next to decimal point  "1_.0"\n          this.unput(2); // keep 1\n\n          break;\n        }\n\n        hasPoint = true;\n        continue;\n      } else if (ch === "e" || ch === "E") {\n        if (prev === "_") {\n          // next to e "1_e10"\n          this.unput(1);\n          break;\n        }\n\n        var undo = 2;\n        ch = this.input();\n\n        if (ch === "+" || ch === "-") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n\n        this.unput(ch ? undo : undo - 1); // keep only 1\n\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (this.yytext.length < MAX_LENGTH_OF_LONG || this.yytext.length == MAX_LENGTH_OF_LONG && this.yytext < long_min_digits) {\n        return this.tok.T_LNUMBER;\n      }\n\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function consume_HNUM() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function consume_LNUM() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function consume_BNUM() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch !== "0" && ch !== "1" && ch !== "_") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this.tok.T_LNUMBER;\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(17)))\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don\'t break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn\'t define any globals.  It\'s inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error(\'setTimeout has not been defined\');\n}\nfunction defaultClearTimeout () {\n    throw new Error(\'clearTimeout has not been defined\');\n}\n(function () {\n    try {\n        if (typeof setTimeout === \'function\') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \'function\') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn\'t available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn\'t trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn\'t available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn\'t  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it\'s a version of I.E. that must have the global object for \'this\', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = \'browser\';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \'\'; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error(\'process.binding is not supported\');\n};\n\nprocess.cwd = function () { return \'/\' };\nprocess.chdir = function (dir) {\n    throw new Error(\'process.chdir is not supported\');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  matchST_LOOKING_FOR_PROPERTY: function matchST_LOOKING_FOR_PROPERTY() {\n    var ch = this.input();\n\n    if (ch === "-") {\n      ch = this.input();\n\n      if (ch === ">") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    } // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n\n\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function matchST_LOOKING_FOR_VARNAME() {\n    var ch = this.input(); // SHIFT STATE\n\n    this.popState();\n    this.begin("ST_IN_SCRIPTING");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n\n      if (ch === "[" || ch === "}") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that\'s started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    } // stops looking for a varname and starts the scripting mode\n\n\n    return false;\n  },\n  matchST_VAR_OFFSET: function matchST_VAR_OFFSET() {\n    var ch = this.input();\n\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === "]") {\n      this.popState();\n      return "]";\n    } else if (ch === "$") {\n      this.input();\n\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        throw new Error("Unexpected terminal");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (this.is_WHITESPACE() || ch === "\\\\" || ch === "\'" || ch === "#") {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (ch === "[" || ch === "{" || ch === "}" || ch === \'"\' || ch === "`" || this.is_TOKEN()) {\n      return ch;\n    } else {\n      throw new Error("Unexpected terminal");\n    }\n  }\n};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  matchST_IN_SCRIPTING: function matchST_IN_SCRIPTING() {\n    var ch = this.input();\n\n    switch (ch) {\n      case " ":\n      case "\\t":\n      case "\\n":\n      case "\\r":\n      case "\\r\\n":\n        return this.T_WHITESPACE();\n\n      case "#":\n        return this.T_COMMENT();\n\n      case "/":\n        if (this._input[this.offset] === "/") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === "*") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n\n        return this.consume_TOKEN();\n\n      case "\'":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n\n      case \'"\':\n        return this.ST_DOUBLE_QUOTES();\n\n      case "`":\n        this.begin("ST_BACKQUOTE");\n        return "`";\n\n      case "?":\n        if (!this.aspTagMode && this.tryMatch(">")) {\n          this.input();\n          var nextCH = this._input[this.offset];\n          if (nextCH === "\\n" || nextCH === "\\r") this.input();\n\n          if (this.conditionStack.length > 1) {\n            this.begin("INITIAL");\n          }\n\n          return this.tok.T_CLOSE_TAG;\n        }\n\n        return this.consume_TOKEN();\n\n      case "%":\n        if (this.aspTagMode && this._input[this.offset] === ">") {\n          this.input(); // consume the \'>\'\n\n          ch = this._input[this.offset]; // read next\n\n          if (ch === "\\n" || ch === "\\r") {\n            this.input(); // consume the newline\n          }\n\n          this.aspTagMode = false;\n\n          if (this.conditionStack.length > 1) {\n            this.begin("INITIAL");\n          }\n\n          return this.tok.T_CLOSE_TAG;\n        }\n\n        return this.consume_TOKEN();\n\n      case "{":\n        this.begin("ST_IN_SCRIPTING");\n        return "{";\n\n      case "}":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n\n        return "}";\n\n      default:\n        if (ch === ".") {\n          ch = this.input();\n\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n\n    }\n\n    throw new Error(\'Bad terminal sequence "\' + ch + \'" at line \' + this.yylineno + " (offset " + this.offset + ")");\n  },\n  T_WHITESPACE: function T_WHITESPACE() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (ch === " " || ch === "\\t" || ch === "\\n" || ch === "\\r") {\n        continue;\n      }\n\n      if (ch) this.unput(1);\n      break;\n    }\n\n    return this.tok.T_WHITESPACE;\n  }\n};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar newline = ["\\n", "\\r"];\nvar valid_after_heredoc = ["\\n", "\\r", ";"];\nvar valid_after_heredoc_73 = valid_after_heredoc.concat(["\\t", " ", ",", "]", ")", "/", "=", "!"]);\nmodule.exports = {\n  T_CONSTANT_ENCAPSED_STRING: function T_CONSTANT_ENCAPSED_STRING() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch == "\\\\") {\n        this.input();\n      } else if (ch == "\'") {\n        break;\n      }\n    }\n\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function is_HEREDOC() {\n    var revert = this.offset;\n\n    if (this._input[this.offset - 1] === "<" && this._input[this.offset] === "<" && this._input[this.offset + 1] === "<") {\n      this.offset += 3; // optional tabs / spaces\n\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      } // optional quotes\n\n\n      var tChar = this._input[this.offset - 1];\n\n      if (tChar === "\'" || tChar === \'"\') {\n        this.offset++;\n      } else {\n        tChar = null;\n      } // required label\n\n\n      if (this.is_LABEL_START()) {\n        var yyoffset = this.offset - 1;\n\n        while (this.offset < this.size) {\n          this.offset++;\n\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n\n        var yylabel = this._input.substring(yyoffset, this.offset - 1);\n\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++; // require newline\n\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n\n            if (tChar === "\'") {\n              this.begin("ST_NOWDOC");\n            } else {\n              this.begin("ST_HEREDOC");\n            } // prematch to get the indentation information from end of doc\n\n\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function ST_DOUBLE_QUOTES() {\n    var ch;\n\n    while (this.offset < this.size) {\n      ch = this.input();\n\n      if (ch == "\\\\") {\n        this.input();\n      } else if (ch == \'"\') {\n        break;\n      } else if (ch == "$") {\n        ch = this.input();\n\n        if (ch == "{" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n\n        if (ch) this.unput(1);\n      } else if (ch == "{") {\n        ch = this.input();\n\n        if (ch == "$") {\n          this.unput(2);\n          break;\n        }\n\n        if (ch) this.unput(1);\n      }\n    }\n\n    if (ch == \'"\') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      var prefix = 1;\n\n      if (this.yytext[0] === "b" || this.yytext[0] === "B") {\n        prefix = 2;\n      }\n\n      if (this.yytext.length > 2) {\n        this.appendToken(this.tok.T_ENCAPSED_AND_WHITESPACE, this.yytext.length - prefix);\n      }\n\n      this.unput(this.yytext.length - prefix);\n      this.begin("ST_DOUBLE_QUOTES");\n      return this.yytext;\n    }\n  },\n  // check if its a DOC end sequence\n  isDOC_MATCH: function isDOC_MATCH(offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    var prev_ch = this._input[offset - 2];\n\n    if (!newline.includes(prev_ch)) {\n      return false;\n    } // skip leading spaces or tabs\n\n\n    var indentation_uses_spaces = false;\n    var indentation_uses_tabs = false; // reset heredoc_label structure\n\n    var indentation = 0;\n    var leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === "\\t" || leading_ch === " ") {\n        if (leading_ch === " ") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === "\\t") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      } // Move offset to skip leading whitespace\n\n\n      offset = offset + indentation; // return out if there was only whitespace on this line\n\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (this._input.substring(offset - 1, offset - 1 + this.heredoc_label.length) === this.heredoc_label.label) {\n      var ch = this._input[offset - 1 + this.heredoc_label.length];\n\n      if ((this.version >= 703 ? valid_after_heredoc_73 : valid_after_heredoc).includes(ch)) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation); // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error("Parse error:  mixing spaces and tabs in ending marker at line " + this.yylineno + " (offset " + this.offset + ")");\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function prematch_ENDOFDOC() {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    var offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (!newline.includes(this._input[offset++]) && offset < this._input.length) {// skip\n        }\n      }\n\n      offset++;\n    }\n  },\n  matchST_NOWDOC: function matchST_NOWDOC() {\n    /** edge case : empty now doc **/\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n\n\n    var ch = this._input[this.offset - 1];\n\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    } // too bad ! reached end of document (will get a parse error)\n\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  matchST_HEREDOC: function matchST_HEREDOC() {\n    /** edge case : empty here doc **/\n    var ch = this.input();\n\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n\n\n    while (this.offset < this.size) {\n      if (ch === "\\\\") {\n        ch = this.input(); // ignore next\n\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === "$") {\n        ch = this.input();\n\n        if (ch === "{") {\n          // start of ${\n          this.begin("ST_LOOKING_FOR_VARNAME");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          } //console.log(this.yytext);\n\n        }\n      } else if (ch === "{") {\n        ch = this.input();\n\n        if (ch === "$") {\n          // start of {$...\n          this.begin("ST_IN_SCRIPTING");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    } // too bad ! reached end of document (will get a parse error)\n\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  consume_VARIABLE: function consume_VARIABLE() {\n    this.consume_LABEL();\n    var ch = this.input();\n\n    if (ch == "[") {\n      this.unput(1);\n      this.begin("ST_VAR_OFFSET");\n      return this.tok.T_VARIABLE;\n    } else if (ch === "-") {\n      if (this.input() === ">") {\n        this.input();\n\n        if (this.is_LABEL_START()) {\n          this.begin("ST_LOOKING_FOR_PROPERTY");\n        }\n\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function matchST_BACKQUOTE() {\n    var ch = this.input();\n\n    if (ch === "$") {\n      ch = this.input();\n\n      if (ch === "{") {\n        this.begin("ST_LOOKING_FOR_VARNAME");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        var tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === "{") {\n      if (this._input[this.offset] === "$") {\n        this.begin("ST_IN_SCRIPTING");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === "`") {\n      this.popState();\n      return "`";\n    } // any char\n\n\n    while (this.offset < this.size) {\n      if (ch === "\\\\") {\n        this.input();\n      } else if (ch === "`") {\n        this.unput(1);\n        this.popState();\n        this.appendToken("`", 1);\n        break;\n      } else if (ch === "$") {\n        ch = this.input();\n\n        if (ch === "{") {\n          this.begin("ST_LOOKING_FOR_VARNAME");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n\n        continue;\n      } else if (ch === "{") {\n        ch = this.input();\n\n        if (ch === "$") {\n          // start of {$...\n          this.begin("ST_IN_SCRIPTING");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n\n        continue;\n      }\n\n      ch = this.input();\n    }\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n  matchST_DOUBLE_QUOTES: function matchST_DOUBLE_QUOTES() {\n    var ch = this.input();\n\n    if (ch === "$") {\n      ch = this.input();\n\n      if (ch === "{") {\n        this.begin("ST_LOOKING_FOR_VARNAME");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        var tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === "{") {\n      if (this._input[this.offset] === "$") {\n        this.begin("ST_IN_SCRIPTING");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \'"\') {\n      this.popState();\n      return \'"\';\n    } // any char\n\n\n    while (this.offset < this.size) {\n      if (ch === "\\\\") {\n        this.input();\n      } else if (ch === \'"\') {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\'"\', 1);\n        break;\n      } else if (ch === "$") {\n        ch = this.input();\n\n        if (ch === "{") {\n          this.begin("ST_LOOKING_FOR_VARNAME");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          var yyoffset = this.offset;\n          var next = this.consume_VARIABLE();\n\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n\n        if (ch) this.unput(1);\n      } else if (ch === "{") {\n        ch = this.input();\n\n        if (ch === "$") {\n          // start of {$...\n          this.begin("ST_IN_SCRIPTING");\n\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = \'"{$\' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n\n        if (ch) this.unput(1);\n      }\n\n      ch = this.input();\n    }\n\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  }\n};\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  T_STRING: function T_STRING() {\n    var token = this.yytext.toLowerCase();\n    var id = this.keywords[token];\n\n    if (typeof id !== "number") {\n      if (token === "yield") {\n        if (this.version >= 700 && this.tryMatch(" from")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n\n        if (token === "b" || token === "B") {\n          var ch = this.input(1);\n\n          if (ch === \'"\') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === "\'") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function consume_TOKEN() {\n    var ch = this._input[this.offset - 1];\n    var fn = this.tokenTerminals[ch];\n\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function $() {\n      this.offset++;\n\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return "$";\n      }\n    },\n    "-": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === ">") {\n        this.begin("ST_LOOKING_FOR_PROPERTY").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === "-") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === "=") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n\n      return "-";\n    },\n    "\\\\": function _() {\n      return this.tok.T_NS_SEPARATOR;\n    },\n    "/": function _() {\n      if (this._input[this.offset] === "=") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n\n      return "/";\n    },\n    ":": function _() {\n      if (this._input[this.offset] === ":") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return ":";\n      }\n    },\n    "(": function _() {\n      var initial = this.offset;\n      this.input();\n\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n\n      if (this.is_LABEL_START()) {\n        var yylen = this.yytext.length;\n        this.consume_LABEL();\n        var castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        var castId = this.castKeywords[castToken];\n\n        if (typeof castId === "number") {\n          this.input();\n\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n\n          if (this._input[this.offset - 1] === ")") {\n            return castId;\n          }\n        }\n      } // revert the check\n\n\n      this.unput(this.offset - initial);\n      return "(";\n    },\n    "=": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === ">") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === "=") {\n        if (this._input[this.offset + 1] === "=") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n\n      return "=";\n    },\n    "+": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "+") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === "=") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n\n      return "+";\n    },\n    "!": function _() {\n      if (this._input[this.offset] === "=") {\n        if (this._input[this.offset + 1] === "=") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n\n      return "!";\n    },\n    "?": function _() {\n      if (this.version >= 700 && this._input[this.offset] === "?") {\n        if (this.version >= 704 && this._input[this.offset + 1] === "=") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n\n      return "?";\n    },\n    "<": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "<") {\n        nchar = this._input[this.offset + 1];\n\n        if (nchar === "=") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === "<") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === "=") {\n        this.input();\n\n        if (this.version >= 700 && this._input[this.offset] === ">") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === ">") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n\n      return "<";\n    },\n    ">": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "=") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === ">") {\n        nchar = this._input[this.offset + 1];\n\n        if (nchar === "=") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n\n      return ">";\n    },\n    "*": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "=") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === "*") {\n        this.input();\n\n        if (this._input[this.offset] === "=") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n\n      return "*";\n    },\n    ".": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "=") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === "." && this._input[this.offset + 1] === ".") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n\n      return ".";\n    },\n    "%": function _() {\n      if (this._input[this.offset] === "=") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n\n      return "%";\n    },\n    "&": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "=") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === "&") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n\n      return "&";\n    },\n    "|": function _() {\n      var nchar = this._input[this.offset];\n\n      if (nchar === "=") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === "|") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n\n      return "|";\n    },\n    "^": function _() {\n      if (this._input[this.offset] === "=") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n\n      return "^";\n    }\n  }\n};\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar tokens = ";:,.\\\\[]()|^&+-/*=%!~$<>?@";\nmodule.exports = {\n  // check if the char can be a numeric\n  is_NUM: function is_NUM() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 47 && ch < 58 || ch === 95;\n  },\n  // check if the char can be a numeric\n  is_NUM_START: function is_NUM_START() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 47 && ch < 58;\n  },\n  // check if current char can be a label\n  is_LABEL: function is_LABEL() {\n    var ch = this._input.charCodeAt(this.offset - 1);\n\n    return ch > 96 && ch < 123 || ch > 64 && ch < 91 || ch === 95 || ch > 47 && ch < 58 || ch > 126;\n  },\n  // check if current char can be a label\n  is_LABEL_START: function is_LABEL_START() {\n    var ch = this._input.charCodeAt(this.offset - 1); // A - Z\n\n\n    if (ch > 64 && ch < 91) return true; // a - z\n\n    if (ch > 96 && ch < 123) return true; // _ (95)\n\n    if (ch === 95) return true; // utf8 / extended\n\n    if (ch > 126) return true; // else\n\n    return false;\n  },\n  // reads each char of the label\n  consume_LABEL: function consume_LABEL() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this;\n  },\n  // check if current char is a token char\n  is_TOKEN: function is_TOKEN() {\n    var ch = this._input[this.offset - 1];\n    return tokens.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function is_WHITESPACE() {\n    var ch = this._input[this.offset - 1];\n    return ch === " " || ch === "\\t" || ch === "\\n" || ch === "\\r";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function is_TABSPACE() {\n    var ch = this._input[this.offset - 1];\n    return ch === " " || ch === "\\t";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function consume_TABSPACE() {\n    while (this.offset < this.size) {\n      var ch = this.input();\n\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function is_HEX() {\n    var ch = this._input.charCodeAt(this.offset - 1); // 0 - 9\n\n\n    if (ch > 47 && ch < 58) return true; // A - F\n\n    if (ch > 64 && ch < 71) return true; // a - f\n\n    if (ch > 96 && ch < 103) return true; // _ (code 95)\n\n    if (ch === 95) return true; // else\n\n    return false;\n  }\n};\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * @private\n */\n\nfunction isNumber(n) {\n  return n != "." && n != "," && !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @class\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {Integer|String} token - current token\n * @property {Boolean} extractDoc - should extract documentation as AST node\n * @property {Boolean} extractTokens - should extract each token\n * @property {Boolean} suppressErrors - should ignore parsing errors and continue\n * @property {Boolean} debug - should output debug informations\n */\n\n\nvar parser = function parser(lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 704;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n\n  var mapIt = function mapIt(item) {\n    return [item, null];\n  };\n\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map([this.tok.T_ABSTRACT, this.tok.T_ARRAY, this.tok.T_AS, this.tok.T_BREAK, this.tok.T_CALLABLE, this.tok.T_CASE, this.tok.T_CATCH, this.tok.T_CLASS, this.tok.T_CLASS_C, this.tok.T_CLONE, this.tok.T_CONST, this.tok.T_CONTINUE, this.tok.T_DECLARE, this.tok.T_DEFAULT, this.tok.T_DIR, this.tok.T_DO, this.tok.T_ECHO, this.tok.T_ELSE, this.tok.T_ELSEIF, this.tok.T_EMPTY, this.tok.T_ENDDECLARE, this.tok.T_ENDFOR, this.tok.T_ENDFOREACH, this.tok.T_ENDIF, this.tok.T_ENDSWITCH, this.tok.T_ENDWHILE, this.tok.T_EVAL, this.tok.T_EXIT, this.tok.T_EXTENDS, this.tok.T_FILE, this.tok.T_FINAL, this.tok.T_FINALLY, this.tok.T_FN, this.tok.T_FOR, this.tok.T_FOREACH, this.tok.T_FUNC_C, this.tok.T_FUNCTION, this.tok.T_GLOBAL, this.tok.T_GOTO, this.tok.T_IF, this.tok.T_IMPLEMENTS, this.tok.T_INCLUDE, this.tok.T_INCLUDE_ONCE, this.tok.T_INSTANCEOF, this.tok.T_INSTEADOF, this.tok.T_INTERFACE, this.tok.T_ISSET, this.tok.T_LINE, this.tok.T_LIST, this.tok.T_LOGICAL_AND, this.tok.T_LOGICAL_OR, this.tok.T_LOGICAL_XOR, this.tok.T_METHOD_C, this.tok.T_NAMESPACE, this.tok.T_NEW, this.tok.T_NS_C, this.tok.T_PRINT, this.tok.T_PRIVATE, this.tok.T_PROTECTED, this.tok.T_PUBLIC, this.tok.T_REQUIRE, this.tok.T_REQUIRE_ONCE, this.tok.T_RETURN, this.tok.T_STATIC, this.tok.T_SWITCH, this.tok.T_THROW, this.tok.T_TRAIT, this.tok.T_TRY, this.tok.T_UNSET, this.tok.T_USE, this.tok.T_VAR, this.tok.T_WHILE, this.tok.T_YIELD].map(mapIt)),\n    VARIABLE: new Map([this.tok.T_VARIABLE, "$", "&", this.tok.T_NS_SEPARATOR, this.tok.T_STRING, this.tok.T_NAMESPACE, this.tok.T_STATIC].map(mapIt)),\n    SCALAR: new Map([this.tok.T_CONSTANT_ENCAPSED_STRING, this.tok.T_START_HEREDOC, this.tok.T_LNUMBER, this.tok.T_DNUMBER, this.tok.T_ARRAY, "[", this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C, \'"\', \'b"\', \'B"\', "-", this.tok.T_NS_SEPARATOR].map(mapIt)),\n    T_MAGIC_CONST: new Map([this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C].map(mapIt)),\n    T_MEMBER_FLAGS: new Map([this.tok.T_PUBLIC, this.tok.T_PRIVATE, this.tok.T_PROTECTED, this.tok.T_STATIC, this.tok.T_ABSTRACT, this.tok.T_FINAL].map(mapIt)),\n    EOS: new Map([";", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map(["@", "-", "+", "!", "~", "(", "`", this.tok.T_LIST, this.tok.T_CLONE, this.tok.T_INC, this.tok.T_DEC, this.tok.T_NEW, this.tok.T_ISSET, this.tok.T_EMPTY, this.tok.T_INCLUDE, this.tok.T_INCLUDE_ONCE, this.tok.T_REQUIRE, this.tok.T_REQUIRE_ONCE, this.tok.T_EVAL, this.tok.T_INT_CAST, this.tok.T_DOUBLE_CAST, this.tok.T_STRING_CAST, this.tok.T_ARRAY_CAST, this.tok.T_OBJECT_CAST, this.tok.T_BOOL_CAST, this.tok.T_UNSET_CAST, this.tok.T_EXIT, this.tok.T_PRINT, this.tok.T_YIELD, this.tok.T_STATIC, this.tok.T_FUNCTION, this.tok.T_FN, // using VARIABLES :\n    this.tok.T_VARIABLE, "$", this.tok.T_NS_SEPARATOR, this.tok.T_STRING, // using SCALAR :\n    this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n    this.tok.T_CONSTANT_ENCAPSED_STRING, this.tok.T_START_HEREDOC, this.tok.T_LNUMBER, this.tok.T_DNUMBER, this.tok.T_ARRAY, "[", this.tok.T_CLASS_C, this.tok.T_TRAIT_C, this.tok.T_FUNC_C, this.tok.T_METHOD_C, this.tok.T_LINE, this.tok.T_FILE, this.tok.T_DIR, this.tok.T_NS_C].map(mapIt))\n  };\n};\n/**\n * helper : gets a token name\n */\n\n\nparser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return "\'" + token + "\'";\n  } else {\n    if (token == this.EOF) return "the end of file (EOF)";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n/**\n * main entry point : converts a source code to AST\n */\n\n\nparser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || "eval";\n  this.currentNamespace = [""];\n\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  var program = this.node("program");\n  var childs = [];\n  this.next();\n\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  } // append last comment\n\n\n  if (childs.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n    childs.push(this.node("noop")());\n  } // #176 : register latest position\n\n\n  this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n  var result = program(childs, this._errors, this._docs, this._tokens);\n\n  if (this.debug) {\n    var errors = this.ast.checkNodes();\n\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log("Node at line " + error.position.line + ", column " + error.position.column);\n        } // eslint-disable-next-line no-console\n\n\n        console.log(error.stack.join("\\n"));\n      });\n      throw new Error("Some nodes are not closed");\n    }\n  }\n\n  return result;\n};\n/**\n * Raise an error\n */\n\n\nparser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += " on line " + this.lexer.yylloc.first_line;\n\n  if (!this.suppressErrors) {\n    var err = new SyntaxError(message, this.filename, this.lexer.yylloc.first_line);\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  } // Error node :\n\n\n  var node = this.ast.prepare("error", null, this)(message, token, this.lexer.yylloc.first_line, expect);\n\n  this._errors.push(node);\n\n  return node;\n};\n/**\n * handling errors\n */\n\n\nparser.prototype.error = function (expect) {\n  var msg = "Parse Error : syntax error";\n  var token = this.getTokenName(this.token);\n  var msgExpect = "";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      var symbol = this.text();\n\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + "...";\n      }\n\n      token = "\'" + symbol + "\' (" + token + ")";\n    }\n\n    msg += ", unexpected " + token;\n  }\n\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = ", expecting " + this.getTokenName(expect);\n    }\n\n    msg += msgExpect;\n  }\n\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n/**\n * Creates a new AST node\n */\n\n\nparser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    var docs = null;\n\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error("Append docs on " + name)); // eslint-disable-next-line no-console\n\n        console.log(docs);\n      }\n    }\n\n    var node = this.ast.prepare(name, docs, this);\n    /**\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it\'s trailingComment nodes\n     */\n\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          var offset = this.prev[2];\n          var max = this._docIndex;\n\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(this._docs.slice(this._docIndex, max));\n\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n\n      this._lastNode = self;\n    }.bind(this);\n\n    return node;\n  }\n\n  return this.ast.prepare(name, null, this);\n};\n/**\n * expects an end of statement or end of file\n * @return {boolean}\n */\n\n\nparser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === ";") {\n    // include only real \';\' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === ";") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(";");\n    return false;\n  }\n\n  this.next();\n  return true;\n};\n/** outputs some debug information on current token **/\n\n\nvar ignoreStack = ["parser.next", "parser.node", "parser.showlog"];\n\nparser.prototype.showlog = function () {\n  var stack = new Error().stack.split("\\n");\n  var line;\n\n  for (var offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    var found = false;\n\n    for (var i = 0; i < ignoreStack.length; i++) {\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      break;\n    }\n  } // eslint-disable-next-line no-console\n\n\n  console.log("Line " + this.lexer.yylloc.first_line + " : " + this.getTokenName(this.token) + ">" + this.lexer.yytext + "<" + " @--\x3e" + line);\n  return this;\n};\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\n\n\nparser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the current token contents\n * @return {String}\n */\n\n\nparser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n/** consume the next token **/\n\n\nparser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== ";" || this.lexer.yytext === ";") {\n    // ignore \'?>\' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n  } // eating the token\n\n\n  this.lex(); // showing the debug\n\n  if (this.debug) {\n    this.showlog();\n  } // handling comments\n\n\n  if (this.extractDoc) {\n    while (this.token === this.tok.T_COMMENT || this.token === this.tok.T_DOC_COMMENT) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n/**\n * Eating a token\n */\n\n\nparser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || this.EOF;\n      if (this.token === this.EOF) return this;\n      var entry = this.lexer.yytext;\n\n      if (this.lexer.engine.tokens.values.hasOwnProperty(this.token)) {\n        entry = [this.lexer.engine.tokens.values[this.token], entry, this.lexer.yylloc.first_line, this.lexer.yylloc.first_offset, this.lexer.offset];\n      } else {\n        entry = [null, entry, this.lexer.yylloc.first_line, this.lexer.yylloc.first_offset, this.lexer.offset];\n      }\n\n      this._tokens.push(entry);\n\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = ";";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (this.token === this.tok.T_WHITESPACE || // ignore white space\n    !this.extractDoc && (this.token === this.tok.T_COMMENT || // ignore single lines comments\n    this.token === this.tok.T_DOC_COMMENT) || // ignore doc comments\n    // ignore open tags\n    this.token === this.tok.T_OPEN_TAG);\n  } else {\n    this.token = this.lexer.lex() || this.EOF;\n  }\n\n  return this;\n};\n/**\n * Check if token is of specified type\n */\n\n\nparser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n\n  return this.entries[type].has(this.token);\n}; // extends the parser with syntax files\n\n\n[__webpack_require__(24), __webpack_require__(25), __webpack_require__(26), __webpack_require__(27), __webpack_require__(28), __webpack_require__(29), __webpack_require__(30), __webpack_require__(31), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38)].forEach(function (ext) {\n  for (var k in ext) {\n    if (parser.prototype.hasOwnProperty(k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error("Function " + k + " is already defined - collision");\n    }\n\n    parser.prototype[k] = ext[k];\n  }\n});\nmodule.exports = parser;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY \'(\' array_pair_list \')\' |\n   *   \'[\' array_pair_list \']\'\n   * ```\n   */\n  read_array: function read_array() {\n    var expect = null;\n    var shortForm = false;\n    var result = this.node("array");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect("(");\n      expect = ")";\n    } else {\n      shortForm = true;\n      expect = "]";\n    }\n\n    var items = [];\n\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n\n  /**\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (\',\' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function read_array_pair_list(shortForm) {\n    var self = this;\n    return this.read_list(function () {\n      return self.read_array_pair(shortForm);\n    }, ",", true);\n  },\n\n  /**\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW \'&\' variable\n   *  | \'&\' variable\n   *  | expr T_DOUBLE_ARROW T_LIST \'(\' array_pair_list \')\'\n   *  | T_LIST \'(\' array_pair_list \')\'\n   */\n  read_array_pair: function read_array_pair(shortForm) {\n    if (!shortForm && this.token === ")" || shortForm && this.token === "]") {\n      return;\n    }\n\n    if (this.token === ",") {\n      return this.node("noop")();\n    }\n\n    var entry = this.node("entry");\n    var key = null;\n    var value = null;\n    var byRef = false;\n    var unpack = false;\n\n    if (this.token === "&") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n\n      if (this.token === "&") {\n        this.error();\n      }\n\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      var expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === "&") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  }\n};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = {\n  /**\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME \',\')* NAMESPACE_NAME)? \'{\' CLASS_BODY \'}\'\n   * ```\n   */\n  read_class_declaration_statement: function read_class_declaration_statement() {\n    var result = this.node("class");\n    var flag = this.read_class_modifiers(); // graceful mode : ignore token & go next\n\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node("identifier");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    var propExtends = this.read_extends_from();\n    var propImplements = this.read_implements_list();\n    this.expect("{");\n    var body = this.next().read_class_body();\n    return result(propName, propExtends, propImplements, body, flag);\n  },\n  read_class_modifiers: function read_class_modifiers() {\n    return [0, 0, this.read_class_modifier()];\n  },\n  read_class_modifier: function read_class_modifier() {\n    var result = 0;\n\n    if (this.token === this.tok.T_ABSTRACT) {\n      this.next();\n      return 1;\n    } else if (this.token === this.tok.T_FINAL) {\n      this.next();\n      return 2;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function read_class_body() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== "}") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      } // check T_USE trait\n\n\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      } // read member flags\n\n\n      var flags = this.read_member_flags(false); // check constant\n\n      if (this.token === this.tok.T_CONST) {\n        var constants = this.read_constant_list(flags);\n\n        if (this.expect(";")) {\n          this.next();\n        }\n\n        result = result.concat(constants);\n        continue;\n      } // jump over T_VAR then land on T_VARIABLE\n\n\n      if (this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags));\n      } else if (this.token === this.tok.T_VARIABLE || // support https://wiki.php.net/rfc/typed_properties_v2\n      this.version >= 704 && (this.token === "?" || this.token === this.tok.T_CALLABLE || this.token === this.tok.T_ARRAY || this.token === this.tok.T_NS_SEPARATOR || this.token === this.tok.T_STRING || this.token === this.tok.T_NAMESPACE)) {\n        // reads a variable\n        var variables = this.read_variable_list(flags);\n        this.expect(";");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_VARIABLE, this.tok.T_FUNCTION]); // ignore token\n\n        this.next();\n      }\n    }\n\n    this.expect("}");\n    this.next();\n    return result;\n  },\n\n  /**\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration \',\')* variable_declaration\n   * ```\n   */\n  read_variable_list: function read_variable_list(flags) {\n    var result = this.node("propertystatement");\n    var properties = this.read_list(\n    /**\n     * Reads a variable declaration\n     *\n     * ```ebnf\n     *  variable_declaration ::= T_VARIABLE \'=\' scalar\n     * ```\n     */\n    function read_variable_declaration() {\n      var result = this.node("property");\n\n      var _this$read_optional_t = this.read_optional_type(),\n          _this$read_optional_t2 = _slicedToArray(_this$read_optional_t, 2),\n          nullable = _this$read_optional_t2[0],\n          type = _this$read_optional_t2[1];\n\n      this.expect(this.tok.T_VARIABLE);\n      var propName = this.node("identifier");\n      var name = this.text().substring(1); // ignore $\n\n      this.next();\n      propName = propName(name);\n\n      if (this.token === ";" || this.token === ",") {\n        return result(propName, null, nullable, type);\n      } else if (this.token === "=") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n        return result(propName, this.next().read_expr(), nullable, type);\n      } else {\n        this.expect([",", ";", "="]);\n        return result(propName, null, nullable, type);\n      }\n    }, ",");\n    return result(null, properties, flags);\n  },\n\n  /**\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration \',\')* constant_declaration\n   * ```\n   */\n  read_constant_list: function read_constant_list(flags) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n\n    var result = this.node("classconstant");\n    var items = this.read_list(\n    /**\n     * Reads a constant declaration\n     *\n     * ```ebnf\n     *  constant_declaration ::= (T_STRING | IDENTIFIER) \'=\' expr\n     * ```\n     * @return {Constant} [:link:](AST.md#constant)\n     */\n    function read_constant_declaration() {\n      var result = this.node("constant");\n      var constName = null;\n      var value = null;\n\n      if (this.token === this.tok.T_STRING || this.version >= 700 && this.is("IDENTIFIER")) {\n        constName = this.node("identifier");\n        var name = this.text();\n        this.next();\n        constName = constName(name);\n      } else {\n        this.expect("IDENTIFIER");\n      }\n\n      if (this.expect("=")) {\n        value = this.next().read_expr();\n      }\n\n      return result(constName, value);\n    }, ",");\n    return result(null, items, flags);\n  },\n\n  /**\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function read_member_flags(asInterface) {\n    var result = [-1, -1, -1];\n\n    if (this.is("T_MEMBER_FLAGS")) {\n      var idx = 0,\n          val = 0;\n\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can\'t be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is("T_MEMBER_FLAGS"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /**\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t\'?\' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype \'|\' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type \'|\' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function read_optional_type() {\n    var nullable = false;\n\n    if (this.token === "?") {\n      nullable = true;\n      this.next();\n    }\n\n    var type = this.read_type();\n\n    if (nullable && !type) {\n      this.raiseError("Expecting a type definition combined with nullable operator");\n    }\n\n    if (!nullable && !type) {\n      return [false, null];\n    }\n\n    if (this.token === "|") {\n      type = [type];\n\n      do {\n        this.next();\n        var variant = this.read_type();\n\n        if (!variant) {\n          this.raiseError("Expecting a type definition");\n          break;\n        }\n\n        type.push(variant);\n      } while (this.token === "|");\n    }\n\n    return [nullable, type];\n  },\n\n  /**\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME \',\')* NAMESPACE_NAME)? \'{\' INTERFACE_BODY \'}\'\n   * ```\n   */\n  read_interface_declaration_statement: function read_interface_declaration_statement() {\n    var result = this.node("interface");\n\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node("identifier");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    var propExtends = this.read_interface_extends_list();\n    this.expect("{");\n    var body = this.next().read_interface_body();\n    return result(propName, propExtends, body);\n  },\n\n  /**\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function read_interface_body() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== "}") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      } // read member flags\n\n\n      var flags = this.read_member_flags(true); // check constant\n\n      if (this.token == this.tok.T_CONST) {\n        var constants = this.read_constant_list(flags);\n\n        if (this.expect(";")) {\n          this.next();\n        }\n\n        result = result.concat(constants);\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        var method = this.read_function_declaration(2, flags);\n        method.parseFlags(flags);\n        result.push(method);\n\n        if (this.expect(";")) {\n          this.next();\n        }\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n\n    if (this.expect("}")) {\n      this.next();\n    }\n\n    return result;\n  },\n\n  /**\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME \',\')* NAMESPACE_NAME)? \'{\' FUNCTION* \'}\'\n   * ```\n   */\n  read_trait_declaration_statement: function read_trait_declaration_statement() {\n    var result = this.node("trait"); // graceful mode : ignore token & go next\n\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n\n    this.next().expect(this.tok.T_STRING);\n    var propName = this.node("identifier");\n    var name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect("{");\n    var body = this.next().read_class_body();\n    return result(propName, body);\n  },\n\n  /**\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (\',\' namespace_name)* (\'{\' trait_use_alias \'}\')?\n   * ```\n   */\n  read_trait_use_statement: function read_trait_use_statement() {\n    // defines use statements\n    var node = this.node("traituse");\n    this.expect(this.tok.T_USE) && this.next();\n    var traits = [this.read_namespace_name()];\n    var adaptations = null;\n\n    while (this.token === ",") {\n      traits.push(this.next().read_namespace_name());\n    }\n\n    if (this.token === "{") {\n      adaptations = []; // defines alias statements\n\n      while (this.next().token !== this.EOF) {\n        if (this.token === "}") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(";");\n      }\n\n      if (this.expect("}")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(";")) {\n        this.next();\n      }\n    }\n\n    return node(traits, adaptations);\n  },\n\n  /**\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function read_trait_use_alias() {\n    var node = this.node();\n    var trait = null;\n    var method;\n\n    if (this.is("IDENTIFIER")) {\n      method = this.node("identifier");\n      var methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n\n        if (this.token === this.tok.T_STRING || this.version >= 700 && this.is("IDENTIFIER")) {\n          trait = method;\n          method = this.node("identifier");\n\n          var _methodName = this.text();\n\n          this.next();\n          method = method(_methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    } // handle trait precedence\n\n\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node("traitprecedence", trait, method, this.next().read_name_list());\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      var flags = null;\n      var alias = null;\n\n      if (this.next().is("T_MEMBER_FLAGS")) {\n        flags = this.read_member_flags();\n      }\n\n      if (this.token === this.tok.T_STRING || this.version >= 700 && this.is("IDENTIFIER")) {\n        alias = this.node("identifier");\n        var name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node("traitalias", trait, method, alias, flags);\n    } // handle errors\n\n\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node("traitalias", trait, method, null, null);\n  }\n};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function read_comment() {\n    var text = this.text();\n    var result = this.ast.prepare(text.substring(0, 2) === "/*" ? "commentblock" : "commentline", null, this);\n    var offset = this.lexer.yylloc.first_offset; // handle location on comment\n\n    var prev = this.prev;\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n\n  /**\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function read_doc_comment() {\n    var result = this.ast.prepare("commentblock", null, this);\n    var offset = this.lexer.yylloc.first_offset;\n    var text = this.text();\n    var prev = this.prev;\n    this.prev = [this.lexer.yylloc.last_line, this.lexer.yylloc.last_column, this.lexer.offset];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  }\n};\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  read_expr: function read_expr(expr) {\n    var result = this.node();\n\n    if (this.token === "@") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n\n      return result("silent", expr);\n    }\n\n    if (!expr) {\n      expr = this.read_expr_item();\n    } // binary operations\n\n\n    if (this.token === "|") return result("bin", "|", expr, this.next().read_expr());\n    if (this.token === "&") return result("bin", "&", expr, this.next().read_expr());\n    if (this.token === "^") return result("bin", "^", expr, this.next().read_expr());\n    if (this.token === ".") return result("bin", ".", expr, this.next().read_expr());\n    if (this.token === "+") return result("bin", "+", expr, this.next().read_expr());\n    if (this.token === "-") return result("bin", "-", expr, this.next().read_expr());\n    if (this.token === "*") return result("bin", "*", expr, this.next().read_expr());\n    if (this.token === "/") return result("bin", "/", expr, this.next().read_expr());\n    if (this.token === "%") return result("bin", "%", expr, this.next().read_expr());\n    if (this.token === this.tok.T_POW) return result("bin", "**", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SL) return result("bin", "<<", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SR) return result("bin", ">>", expr, this.next().read_expr()); // more binary operations (formerly bool)\n\n    if (this.token === this.tok.T_BOOLEAN_OR) return result("bin", "||", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_OR) return result("bin", "or", expr, this.next().read_expr());\n    if (this.token === this.tok.T_BOOLEAN_AND) return result("bin", "&&", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_AND) return result("bin", "and", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_XOR) return result("bin", "xor", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_IDENTICAL) return result("bin", "===", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL) return result("bin", "!==", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_EQUAL) return result("bin", "==", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_EQUAL) return result("bin", "!=", expr, this.next().read_expr());\n    if (this.token === "<") return result("bin", "<", expr, this.next().read_expr());\n    if (this.token === ">") return result("bin", ">", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL) return result("bin", "<=", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL) return result("bin", ">=", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SPACESHIP) return result("bin", "<=>", expr, this.next().read_expr());\n\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result("bin", "instanceof", expr, this.next().read_class_name_reference());\n\n      if (this.token !== ";" && this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n        expr = this.read_expr(expr);\n      }\n    } // extra operations :\n    // $username = $_GET[\'user\'] ?? \'nobody\';\n\n\n    if (this.token === this.tok.T_COALESCE) return result("bin", "??", expr, this.next().read_expr()); // extra operations :\n    // $username = $_GET[\'user\'] ? true : false;\n\n    if (this.token === "?") {\n      var trueArg = null;\n\n      if (this.next().token !== ":") {\n        trueArg = this.read_expr();\n      }\n\n      this.expect(":") && this.next();\n      return result("retif", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /**\n   * Reads a cast expression\n   */\n  read_expr_cast: function read_expr_cast(type) {\n    return this.node("cast")(type, this.text(), this.next().read_expr());\n  },\n\n  /**\n   * Read a isset variable\n   */\n  read_isset_variable: function read_isset_variable() {\n    return this.read_expr();\n  },\n\n  /**\n   * Reads isset variables\n   */\n  read_isset_variables: function read_isset_variables() {\n    return this.read_function_list(this.read_isset_variable, ",");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function read_internal_functions_in_yacc() {\n    var result = null;\n\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node("isset");\n\n          if (this.next().expect("(")) {\n            this.next();\n          }\n\n          var variables = this.read_isset_variables();\n\n          if (this.expect(")")) {\n            this.next();\n          }\n\n          result = result(variables);\n        }\n        break;\n\n      case this.tok.T_EMPTY:\n        {\n          result = this.node("empty");\n\n          if (this.next().expect("(")) {\n            this.next();\n          }\n\n          var expression = this.read_expr();\n\n          if (this.expect(")")) {\n            this.next();\n          }\n\n          result = result(expression);\n        }\n        break;\n\n      case this.tok.T_INCLUDE:\n        result = this.node("include")(false, false, this.next().read_expr());\n        break;\n\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node("include")(true, false, this.next().read_expr());\n        break;\n\n      case this.tok.T_EVAL:\n        {\n          result = this.node("eval");\n\n          if (this.next().expect("(")) {\n            this.next();\n          }\n\n          var expr = this.read_expr();\n\n          if (this.expect(")")) {\n            this.next();\n          }\n\n          result = result(expr);\n        }\n        break;\n\n      case this.tok.T_REQUIRE:\n        result = this.node("include")(false, true, this.next().read_expr());\n        break;\n\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node("include")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads optional expression\n   */\n  read_optional_expr: function read_optional_expr(stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /**\n   * Reads exit expression\n   */\n  read_exit_expr: function read_exit_expr() {\n    var expression = null;\n\n    if (this.token === "(") {\n      this.next();\n      expression = this.read_optional_expr(")");\n      this.expect(")") && this.next();\n    }\n\n    return expression;\n  },\n\n  /**\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function read_expr_item() {\n    var result, expr;\n    if (this.token === "+") return this.node("unary")("+", this.next().read_expr());\n    if (this.token === "-") return this.node("unary")("-", this.next().read_expr());\n    if (this.token === "!") return this.node("unary")("!", this.next().read_expr());\n    if (this.token === "~") return this.node("unary")("~", this.next().read_expr());\n\n    if (this.token === "(") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(")") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === "`") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string("`");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      var assign = null;\n      var isInner = this.innerList;\n      result = this.node("list");\n\n      if (!isInner) {\n        assign = this.node("assign");\n      }\n\n      if (this.next().expect("(")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true; // reads inner items\n\n      var assignList = this.read_array_pair_list(false);\n\n      if (this.expect(")")) {\n        this.next();\n      } // check if contains at least one assignment statement\n\n\n      var hasItem = false;\n\n      for (var i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== "noop") {\n          hasItem = true;\n          break;\n        }\n      }\n\n      if (!hasItem) {\n        this.raiseError("Fatal Error :  Cannot use empty list on line " + this.lexer.yylloc.first_line);\n      } // handles the node resolution\n\n\n      if (!isInner) {\n        this.innerList = false;\n\n        if (this.expect("=")) {\n          return assign(result(assignList, false), this.next().read_expr(), "=");\n        } else {\n          // error fallback : list($a, $b);\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_CLONE) return this.node("clone")(this.next().read_expr());\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node("pre")("+", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node("pre")("-", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast("int");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast("float");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(this.text().indexOf("binary") !== -1 ? "binary" : "string");\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast("array");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast("object");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast("bool");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast("unset");\n\n      case this.tok.T_EXIT:\n        {\n          var useDie = this.lexer.yytext.toLowerCase() === "die";\n          result = this.node("exit");\n          this.next();\n          var expression = this.read_exit_expr();\n          return result(expression, useDie);\n        }\n\n      case this.tok.T_PRINT:\n        return this.node("print")(this.next().read_expr());\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n\n      case this.tok.T_YIELD:\n        {\n          var value = null;\n          var key = null;\n          result = this.node("yield");\n\n          if (this.next().is("EXPR")) {\n            // reads the yield return value\n            value = this.read_expr();\n\n            if (this.token === this.tok.T_DOUBLE_ARROW) {\n              // reads the yield returned key\n              key = value;\n              value = this.next().read_expr();\n            }\n          }\n\n          return result(value, key);\n        }\n      // T_YIELD_FROM expr\n\n      case this.tok.T_YIELD_FROM:\n        result = this.node("yieldfrom");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function();\n\n      case this.tok.T_STATIC:\n        {\n          var backup = [this.token, this.lexer.getState()];\n          this.next();\n\n          if (this.token === this.tok.T_FUNCTION || this.version >= 704 && this.token === this.tok.T_FN) {\n            // handles static function\n            return this.read_inline_function([0, 1, 0]);\n          } else {\n            // rollback\n            this.lexer.tokens.push(backup);\n            this.next();\n          }\n        }\n    } // SCALAR | VARIABLE\n\n\n    if (this.is("VARIABLE")) {\n      result = this.node();\n      expr = this.read_variable(false, false); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n\n      var isConst = expr.kind === "identifier" || expr.kind === "staticlookup" && expr.offset.kind === "identifier"; // VARIABLES SPECIFIC OPERATIONS\n\n      switch (this.token) {\n        case "=":\n          {\n            if (isConst) this.error("VARIABLE");\n\n            if (this.next().token == "&") {\n              return this.read_assignref(result, expr);\n            }\n\n            return result("assign", expr, this.read_expr(), "=");\n          }\n        // operations :\n\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "+=");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "-=");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "*=");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "**=");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "/=");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), ".=");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "%=");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "&=");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "|=");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "^=");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "<<=");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), ">>=");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error("VARIABLE");\n          return result("assign", expr, this.next().read_expr(), "??=");\n\n        case this.tok.T_INC:\n          if (isConst) this.error("VARIABLE");\n          this.next();\n          return result("post", "+", expr);\n\n        case this.tok.T_DEC:\n          if (isConst) this.error("VARIABLE");\n          this.next();\n          return result("post", "-", expr);\n\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is("SCALAR")) {\n      result = this.node();\n      expr = this.read_scalar();\n\n      if (expr.kind === "array" && expr.shortForm && this.token === "=") {\n        // list assign\n        var list = this.node("list")(expr.items, true);\n        if (expr.loc) list.loc = expr.loc;\n        var right = this.next().read_expr();\n        return result("assign", list, right, "=");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      } // classic array\n\n\n      return this.handleDereferencable(expr);\n    } else {\n      this.error("EXPR");\n      this.next();\n    } // returns variable | scalar\n\n\n    return expr;\n  },\n\n  /**\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function read_assignref(result, left) {\n    this.next();\n    var right;\n\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result("assignref", left, right);\n  },\n\n  /**\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment \'(\' parameter_list \')\' lexical_vars return_type\n   * \t\tbackup_fn_flags \'{\' inner_statement_list \'}\' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init("{closure}", sizeof("{closure}") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref \'(\' parameter_list \')\' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init("{closure}", sizeof("{closure}") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function read_inline_function(flags) {\n    if (this.token === this.tok.T_FUNCTION) {\n      return this.read_function(true, flags);\n    } // introduced in PHP 7.4\n\n\n    if (!this.version >= 704) {\n      this.raiseError("Arrow Functions are not allowed");\n    } // as an arrowfunc\n\n\n    var node = this.node("arrowfunc"); // eat T_FN\n\n    if (this.expect(this.tok.T_FN)) this.next(); // check the &\n\n    var isRef = this.is_reference(); // ...\n\n    if (this.expect("(")) this.next();\n    var params = this.read_parameter_list();\n    if (this.expect(")")) this.next();\n    var nullable = false;\n    var returnType = null;\n\n    if (this.token === ":") {\n      if (this.next().token === "?") {\n        nullable = true;\n        this.next();\n      }\n\n      returnType = this.read_type();\n    }\n\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    var body = this.read_expr();\n    return node(params, isRef, body, returnType, nullable, flags ? true : false);\n  },\n\n  /**\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function read_new_expr() {\n    var result = this.node("new");\n    this.expect(this.tok.T_NEW) && this.next();\n    var args = [];\n\n    if (this.token === this.tok.T_CLASS) {\n      var what = this.node("class"); // Annonymous class declaration\n\n      if (this.next().token === "(") {\n        args = this.read_argument_list();\n      }\n\n      var propExtends = this.read_extends_from();\n      var propImplements = this.read_implements_list();\n      var body = null;\n\n      if (this.expect("{")) {\n        body = this.next().read_class_body();\n      }\n\n      return result(what(null, propExtends, propImplements, body, [0, 0, 0]), args);\n    } // Already existing class\n\n\n    var name = this.read_new_class_name();\n\n    if (this.token === "(") {\n      args = this.read_argument_list();\n    }\n\n    return result(name, args);\n  },\n\n  /**\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function read_new_class_name() {\n    if (this.token === this.tok.T_NS_SEPARATOR || this.token === this.tok.T_STRING || this.token === this.tok.T_NAMESPACE) {\n      var result = this.read_namespace_name(true);\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n\n      return result;\n    } else if (this.is("VARIABLE")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, "VARIABLE"]);\n    }\n  },\n  handleDereferencable: function handleDereferencable(expr) {\n    while (this.token !== this.EOF) {\n      if (this.token === this.tok.T_OBJECT_OPERATOR || this.token === this.tok.T_DOUBLE_COLON) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === "[") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === "(") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node("call")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n\n    return expr;\n  }\n};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * checks if current token is a reference keyword\n   */\n  is_reference: function is_reference() {\n    if (this.token == "&") {\n      this.next();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function is_variadic() {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function read_function(closure, flag) {\n    var result = this.read_function_declaration(closure ? 1 : flag ? 2 : 0, flag && flag[1] === 1);\n\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n\n      if (this.expect(";")) {\n        this.next();\n      }\n    } else {\n      if (this.expect("{")) {\n        result.body = this.read_code_block(false);\n\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION \'&\'?  T_STRING \'(\' parameter_list \')\'\n   * ```\n   */\n  read_function_declaration: function read_function_declaration(type, isStatic) {\n    var nodeName = "function";\n\n    if (type === 1) {\n      nodeName = "closure";\n    } else if (type === 2) {\n      nodeName = "method";\n    }\n\n    var result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n\n    var isRef = this.is_reference();\n    var name = false,\n        use = [],\n        returnType = null,\n        nullable = false;\n\n    if (type !== 1) {\n      var nameNode = this.node("identifier");\n\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is("IDENTIFIER")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error("IDENTIFIER");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error("IDENTIFIER");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect("(")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n\n          this.next();\n        }\n      }\n\n      name = nameNode(name);\n    }\n\n    if (this.expect("(")) this.next();\n    var params = this.read_parameter_list();\n    if (this.expect(")")) this.next();\n\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n\n    if (this.token === ":") {\n      if (this.next().token === "?") {\n        nullable = true;\n        this.next();\n      }\n\n      returnType = this.read_type();\n    }\n\n    if (type === 1) {\n      // closure\n      return result(params, isRef, use, returnType, nullable, isStatic);\n    }\n\n    return result(name, params, isRef, returnType, nullable);\n  },\n  read_lexical_vars: function read_lexical_vars() {\n    var result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect("(") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(")") && this.next();\n    }\n\n    return result;\n  },\n  read_lexical_var_list: function read_lexical_var_list() {\n    return this.read_list(this.read_lexical_var, ",");\n  },\n\n  /**\n   * ```ebnf\n   * lexical_var ::= \'&\'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function read_lexical_var() {\n    if (this.token === "&") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n\n    var result = this.node("variable");\n    this.expect(this.tok.T_VARIABLE);\n    var name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n\n  /**\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter \',\')* parameter?\n   * ```\n   */\n  read_parameter_list: function read_parameter_list() {\n    var result = [];\n\n    if (this.token != ")") {\n      while (this.token != this.EOF) {\n        result.push(this.read_parameter());\n\n        if (this.token == ",") {\n          this.next();\n        } else if (this.token == ")") {\n          break;\n        } else {\n          this.error([",", ")"]);\n          break;\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  parameter ::= type? \'&\'? T_ELLIPSIS? T_VARIABLE (\'=\' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function read_parameter() {\n    var node = this.node("parameter");\n    var parameterName = null;\n    var value = null;\n    var type = null;\n    var nullable = false;\n\n    if (this.token === "?") {\n      this.next();\n      nullable = true;\n    }\n\n    type = this.read_type();\n\n    if (nullable && !type) {\n      this.raiseError("Expecting a type definition combined with nullable operator");\n    }\n\n    var isRef = this.is_reference();\n    var isVariadic = this.is_variadic();\n\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node("identifier");\n      var name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n\n    if (this.token == "=") {\n      value = this.next().read_expr();\n    }\n\n    return node(parameterName, type, value, isRef, isVariadic, nullable);\n  },\n\n  /**\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= \'(\' (argument_list (\',\' argument_list)*)? \')\'\n   * ```\n   */\n  read_argument_list: function read_argument_list() {\n    var result = [];\n    this.expect("(") && this.next();\n\n    if (this.token !== ")") {\n      result = this.read_non_empty_argument_list();\n    }\n\n    this.expect(")") && this.next();\n    return result;\n  },\n\n  /**\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function read_non_empty_argument_list() {\n    var wasVariadic = false;\n    return this.read_function_list(function () {\n      var argument = this.read_argument();\n\n      if (argument) {\n        if (wasVariadic) {\n          this.raiseError("Unexpected argument after a variadic argument");\n        }\n\n        if (argument.kind === "variadic") {\n          wasVariadic = true;\n        }\n      }\n\n      return argument;\n    }.bind(this), ",");\n  },\n\n  /**\n   * ```ebnf\n   *    argument_list ::= T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function read_argument() {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node("variadic")(this.next().read_expr());\n    }\n\n    return this.read_expr();\n  },\n\n  /**\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function read_type() {\n    var result = this.node();\n\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      var type = this.text();\n      this.next();\n      return result("typereference", type.toLowerCase(), type);\n    } else if (this.token === this.tok.T_STRING) {\n      var _type = this.text();\n\n      var backup = [this.token, this.lexer.getState()];\n      this.next();\n\n      if (this.token !== this.tok.T_NS_SEPARATOR && this.ast.typereference.types.indexOf(_type.toLowerCase()) > -1) {\n        return result("typereference", _type.toLowerCase(), _type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next(); // fix : destroy not consumed node (release comments)\n\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    } else if (this.token === this.tok.T_NAMESPACE || this.token === this.tok.T_NS_SEPARATOR) {\n      // fix : destroy not consumed node (release comments)\n      result.destroy();\n      return this.read_namespace_name();\n    } // fix : destroy not consumed node (release comments)\n\n\n    result.destroy();\n    return null;\n  }\n};\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF \'(\' expr \')\' \':\' ...\n   * ```\n   */\n  read_if: function read_if() {\n    var result = this.node("if");\n    var test = this.next().read_if_expr();\n    var body = null;\n    var alternate = null;\n    var shortForm = false;\n\n    if (this.token === ":") {\n      shortForm = true;\n      this.next();\n      body = this.node("block");\n      var items = [];\n\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n\n        items.push(this.read_inner_statement());\n      }\n\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n\n    return result(test, body, alternate, shortForm);\n  },\n\n  /**\n   * reads an if expression : \'(\' expr \')\'\n   */\n  read_if_expr: function read_if_expr() {\n    this.expect("(") && this.next();\n    var result = this.read_expr();\n    this.expect(")") && this.next();\n    return result;\n  },\n\n  /**\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function read_elseif_short() {\n    var alternate = null;\n    var result = this.node("if");\n    var test = this.next().read_if_expr();\n    if (this.expect(":")) this.next();\n    var body = this.node("block");\n    var items = [];\n\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n\n      items.push(this.read_inner_statement());\n    }\n\n    return result(test, body(null, items), alternate, true);\n  },\n\n  /**\n   *\n   */\n  read_else_short: function read_else_short() {\n    if (this.next().expect(":")) this.next();\n    var body = this.node("block");\n    var items = [];\n\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n\n    return body(null, items);\n  }\n};\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | \':\' inner_statement_list T_ENDWHILE \';\')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function read_while() {\n    var result = this.node("while");\n    this.expect(this.tok.T_WHILE) && this.next();\n    var test = null;\n    var body = null;\n    var shortForm = false;\n    if (this.expect("(")) this.next();\n    test = this.read_expr();\n    if (this.expect(")")) this.next();\n\n    if (this.token === ":") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(test, body, shortForm);\n  },\n\n  /**\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE \'(\' expr \')\' \';\'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function read_do() {\n    var result = this.node("do");\n    this.expect(this.tok.T_DO) && this.next();\n    var test = null;\n    var body = null;\n    body = this.read_statement();\n\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect("(")) this.next();\n      test = this.read_expr();\n      if (this.expect(")")) this.next();\n      if (this.expect(";")) this.next();\n    }\n\n    return result(test, body);\n  },\n\n  /**\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR \'(\' for_exprs \';\' for_exprs \';\' for_exprs \')\' for_statement\n   * for_statement ::= statement | \':\' inner_statement_list T_ENDFOR \';\'\n   * for_exprs ::= expr? (\',\' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function read_for() {\n    var result = this.node("for");\n    this.expect(this.tok.T_FOR) && this.next();\n    var init = [];\n    var test = [];\n    var increment = [];\n    var body = null;\n    var shortForm = false;\n    if (this.expect("(")) this.next();\n\n    if (this.token !== ";") {\n      init = this.read_list(this.read_expr, ",");\n      if (this.expect(";")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token !== ";") {\n      test = this.read_list(this.read_expr, ",");\n      if (this.expect(";")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token !== ")") {\n      increment = this.read_list(this.read_expr, ",");\n      if (this.expect(")")) this.next();\n    } else {\n      this.next();\n    }\n\n    if (this.token === ":") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(init, test, increment, body, shortForm);\n  },\n\n  /**\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= \'(\' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? \')\' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function read_foreach() {\n    var result = this.node("foreach");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    var source = null;\n    var key = null;\n    var value = null;\n    var body = null;\n    var shortForm = false;\n    if (this.expect("(")) this.next();\n    source = this.read_expr();\n\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    } // grammatically correct but not supported by PHP\n\n\n    if (key && key.kind === "list") {\n      this.raiseError("Fatal Error : Cannot use list as key element");\n    }\n\n    if (this.expect(")")) this.next();\n\n    if (this.token === ":") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n\n    return result(source, key, value, body, shortForm);\n  },\n\n  /**\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    \'&\' variable |\n   *    T_LIST \'(\' assignment_list \')\' |\n   *    \'[\' assignment_list \']\'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function read_foreach_variable() {\n    if (this.token === this.tok.T_LIST || this.token === "[") {\n      var isShort = this.token === "[";\n      var result = this.node("list");\n      this.next();\n      if (!isShort && this.expect("(")) this.next();\n      var assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? "]" : ")")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  }\n};\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function read_start() {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  }\n};\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? \'{\'\n   *    top_statements\n   * \'}\'\n   * | T_NAMESPACE namespace_name \';\' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function read_namespace() {\n    var result = this.node("namespace");\n    var body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    var name;\n\n    if (this.token == "{") {\n      name = {\n        name: [""]\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n\n    this.currentNamespace = name;\n\n    if (this.token == ";") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token == "{") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect("}") && this.next();\n\n      if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n        body.push(this.node("noop")());\n      }\n\n      return result(name.name, body, true);\n    } else if (this.token === "(") {\n      // @fixme after merging #478\n      name.resolution = this.ast.reference.RELATIVE_NAME;\n      name.name = name.name.substring(1);\n      result.destroy();\n      return this.node("call")(name, this.read_argument_list());\n    } else {\n      this.error(["{", ";"]); // graceful mode :\n\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n\n  /**\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function read_namespace_name(resolveReference) {\n    var result = this.node();\n    var relative = false;\n\n    if (this.token === this.tok.T_NAMESPACE) {\n      this.next().expect(this.tok.T_NS_SEPARATOR) && this.next();\n      relative = true;\n    }\n\n    var names = this.read_list(this.tok.T_STRING, this.tok.T_NS_SEPARATOR, true);\n\n    if (!relative && names.length === 1 && (resolveReference || this.token !== "(")) {\n      if (names[0].toLowerCase() === "parent") {\n        return result("parentreference", names[0]);\n      } else if (names[0].toLowerCase() === "self") {\n        return result("selfreference", names[0]);\n      }\n    }\n\n    return result("name", names, relative);\n  },\n\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement \'{\' use_declarations \'}\' |\n   *   use_statement \'{\' use_declarations(=>typed) \'}\'\n   * \';\'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function read_use_statement() {\n    var result = this.node("usegroup");\n    var items = [];\n    var name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    var type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n\n    if (this.token === ",") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === "{") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect("}") && this.next();\n    }\n\n    result = result(name, type, items);\n    this.expect(";") && this.next();\n    return result;\n  },\n\n  /**\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function read_class_name_reference() {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n\n  /**\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function read_use_declaration(typed) {\n    var result = this.node("useitem");\n    var type = null;\n    if (typed) type = this.read_use_type();\n    var name = this.read_namespace_name();\n    var alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n\n  /**\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (\',\' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function read_use_declarations(typed) {\n    var result = [this.read_use_declaration(typed)];\n\n    while (this.token === ",") {\n      this.next();\n\n      if (typed) {\n        if (this.token !== this.tok.T_FUNCTION && this.token !== this.tok.T_CONST && this.token !== this.tok.T_STRING) {\n          break;\n        }\n      } else if (this.token !== this.tok.T_STRING && this.token !== this.tok.T_NS_SEPARATOR) {\n        break;\n      }\n\n      result.push(this.read_use_declaration(typed));\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function read_use_alias() {\n    var result = null;\n\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        var aliasName = this.node("identifier");\n        var name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function read_use_type() {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n\n    return null;\n  }\n};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar specialChar = {\n  "\\\\": "\\\\",\n  $: "$",\n  n: "\\n",\n  r: "\\r",\n  t: "\\t",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27)\n};\nmodule.exports = {\n  /**\n   * Unescape special chars\n   */\n  resolve_special_chars: function resolve_special_chars(text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, "\\\\").replace(/\\\\\'/g, "\'");\n    }\n\n    return text.replace(/\\\\"/, \'"\').replace(/\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g, function ($match, p1, p2) {\n      if (specialChar[p1]) {\n        return specialChar[p1];\n      } else if ("x" === p1[0] || "X" === p1[0]) {\n        return String.fromCodePoint(parseInt(p1.substr(1), 16));\n      } else if ("u" === p1[0]) {\n        return String.fromCodePoint(parseInt(p2, 16));\n      } else {\n        return String.fromCodePoint(parseInt(p1, 8));\n      }\n    });\n  },\n\n  /**\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function remove_heredoc_leading_whitespace_chars(text, indentation, indentation_uses_spaces, first_encaps_node) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(text, indentation, indentation_uses_spaces, first_encaps_node);\n    var matchedChar = indentation_uses_spaces ? " " : "\\t";\n    var removementRegExp = new RegExp("\\\\n".concat(matchedChar, "{").concat(indentation, "}"), "g");\n    var removementFirstEncapsNodeRegExp = new RegExp("^".concat(matchedChar, "{").concat(indentation, "}")); // Rough replace, need more check\n\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, "");\n    } // Remove leading whitespace after \\n\n\n\n    return text.replace(removementRegExp, "\\n");\n  },\n\n  /**\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function check_heredoc_indentation_level(text, indentation, indentation_uses_spaces, first_encaps_node) {\n    var textSize = text.length;\n    var offset = 0;\n    var leadingWhitespaceCharCount = 0;\n    /**\n     * @var inCoutingState {boolean} reset to true after a new line\n     */\n\n    var inCoutingState = true;\n    var chToCheck = indentation_uses_spaces ? " " : "\\t";\n    var inCheckState = false;\n\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf("\\n"); // if no \\n, just return\n\n      if (offset === -1) {\n        return;\n      }\n\n      offset++;\n    }\n\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (text[offset] !== "\\n" && inCheckState && leadingWhitespaceCharCount < indentation) {\n        this.raiseError("Invalid body indentation level (expecting an indentation at least ".concat(indentation, ")"));\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === "\\n") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n\n      offset++;\n    }\n  },\n\n  /**\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function read_dereferencable_scalar() {\n    var result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          var value = this.node("string");\n          var text = this.text();\n          var offset = 0;\n\n          if (text[0] === "b" || text[0] === "B") {\n            offset = 1;\n          }\n\n          var isDoubleQuote = text[offset] === \'"\';\n          this.next();\n          var textValue = this.resolve_special_chars(text.substring(offset + 1, text.length - 1), isDoubleQuote);\n          value = value(isDoubleQuote, textValue, offset === 1, // unicode flag\n          text);\n\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n\n      case this.tok.T_ARRAY:\n        // array parser\n        result = this.read_array();\n        break;\n\n      case "[":\n        // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | \'"\' encaps_list \'"\'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function read_scalar() {\n    if (this.is("T_MAGIC_CONST")) {\n      return this.get_magic_constant();\n    } else {\n      var value, node;\n\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n\n        case this.tok.T_DNUMBER:\n          {\n            // double\n            var result = this.node("number");\n            value = this.text();\n            this.next();\n            return result(value, null);\n          }\n\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === "ST_NOWDOC") {\n            var start = this.lexer.yylloc.first_offset;\n            node = this.node("nowdoc");\n            value = this.next().text(); // strip the last line return char\n\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(0, value.length - this.lexer.heredoc_label.indentation);\n            }\n\n            var lastCh = value[value.length - 1];\n\n            if (lastCh === "\\n") {\n              if (value[value.length - 2] === "\\r") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === "\\r") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n\n            var raw = this.lexer._input.substring(start, this.lexer.yylloc.first_offset);\n\n            node = node(this.remove_heredoc_leading_whitespace_chars(value, this.lexer.heredoc_label.indentation, this.lexer.heredoc_label.indentation_uses_spaces, this.lexer.heredoc_label.first_encaps_node), raw, this.lexer.heredoc_label.label);\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case \'"\':\n          return this.read_encapsed_string(\'"\');\n\n        case \'b"\':\n        case \'B"\':\n          {\n            return this.read_encapsed_string(\'"\', true);\n          }\n        // TEXTS\n\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n\n        case "[":\n          // short array format\n          return this.read_dereferencable_scalar();\n\n        default:\n          {\n            var err = this.error("SCALAR"); // graceful mode : ignore token & return error node\n\n            this.next();\n            return err;\n          }\n      }\n    }\n  },\n\n  /**\n   * Handles the dereferencing\n   */\n  read_dereferencable: function read_dereferencable(expr) {\n    var result, offset;\n    var node = this.node("offsetlookup");\n\n    if (this.token === "[") {\n      offset = this.next().read_expr();\n      if (this.expect("]")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr \'}\'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME \'}\'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME \'[\' expr \']\' \'}\'\n   *  | T_CURLY_OPEN variable \'}\'\n   *  | variable\n   *  | variable \'[\' expr \']\'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function read_encapsed_string_item(isDoubleQuote) {\n    var encapsedPart = this.node("encapsedpart");\n    var syntax = null;\n    var curly = false;\n    var result = this.node(),\n        offset,\n        node,\n        name; // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      var text = this.text();\n      this.next(); // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n\n      result = result("string", false, this.version >= 703 && !this.lexer.heredoc_label.finished ? this.remove_heredoc_leading_whitespace_chars(this.resolve_special_chars(text, isDoubleQuote), this.lexer.heredoc_label.indentation, this.lexer.heredoc_label.indentation_uses_spaces, this.lexer.heredoc_label.first_encaps_node) : text, false, text);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = "simple";\n      curly = true; // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n\n      name = null;\n\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node("variable");\n        var varName = this.text();\n        this.next(); // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n\n        if (this.token === "[") {\n          name = name(varName, false);\n          node = this.node("offsetlookup");\n          offset = this.next().read_expr();\n          this.expect("]") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result("variable", this.read_expr(), false);\n      }\n\n      this.expect("}") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = "complex";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect("}") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = "simple"; // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n\n      result.destroy();\n      result = this.read_simple_variable(); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n\n      if (this.token === "[") {\n        node = this.node("offsetlookup");\n        offset = this.next().read_encaps_var_offset();\n        this.expect("]") && this.next();\n        result = node(result, offset);\n      } // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n\n\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node("propertylookup");\n        this.next().expect(this.tok.T_STRING);\n        var what = this.node("identifier");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      } // error / fallback\n\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      var value = this.text();\n      this.next(); // consider it as string\n\n      result.destroy();\n      result = result("string", false, value, false, value);\n    } // reset first_encaps_node to false after access any node\n\n\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n\n  /**\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function read_encapsed_string(expect) {\n    var isBinary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var labelStart = this.lexer.yylloc.first_offset;\n    var node = this.node("encapsed");\n    this.next();\n    var start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    var value = [];\n    var type = null;\n\n    if (expect === "`") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === \'"\') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    } // reading encapsed parts\n\n\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n\n    if (value.length > 0 && value[value.length - 1].kind === "encapsedpart" && value[value.length - 1].expression.kind === "string") {\n      var _node = value[value.length - 1].expression;\n      var lastCh = _node.value[_node.value.length - 1];\n\n      if (lastCh === "\\n") {\n        if (_node.value[_node.value.length - 2] === "\\r") {\n          // windows style\n          _node.value = _node.value.substring(0, _node.value.length - 2);\n        } else {\n          // linux style\n          _node.value = _node.value.substring(0, _node.value.length - 1);\n        }\n      } else if (lastCh === "\\r") {\n        // mac style\n        _node.value = _node.value.substring(0, _node.value.length - 1);\n      }\n    }\n\n    this.expect(expect) && this.next();\n\n    var raw = this.lexer._input.substring(type === "heredoc" ? labelStart : start - 1, this.lexer.yylloc.first_offset);\n\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n\n    return node;\n  },\n\n  /**\n   * Constant token\n   */\n  get_magic_constant: function get_magic_constant() {\n    var result = this.node("magic");\n    var name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  }\n};\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function read_top_statements() {\n    var result = [];\n\n    while (this.token !== this.EOF && this.token !== "}") {\n      var statement = this.read_top_statement();\n\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function read_top_statement() {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n\n      case this.tok.T_USE:\n        return this.read_use_statement();\n\n      case this.tok.T_CONST:\n        {\n          var result = this.node("constantstatement");\n          var items = this.next().read_const_list();\n          this.expectEndOfStatement();\n          return result(null, items);\n        }\n\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n\n      case this.tok.T_HALT_COMPILER:\n        {\n          var _result = this.node("halt");\n\n          if (this.next().expect("(")) this.next();\n          if (this.expect(")")) this.next();\n          this.expect(";");\n          this.lexer.done = true;\n          return _result(this.lexer._input.substring(this.lexer.offset));\n        }\n\n      default:\n        return this.read_statement();\n    }\n  },\n\n  /**\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function read_inner_statements() {\n    var result = [];\n\n    while (this.token != this.EOF && this.token !== "}") {\n      var statement = this.read_inner_statement();\n\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING \'=\' expr (\',\' T_STRING \'=\' expr)* \';\'\n   * ```\n   */\n  read_const_list: function read_const_list() {\n    return this.read_list(function () {\n      this.expect(this.tok.T_STRING);\n      var result = this.node("constant");\n      var constName = this.node("identifier");\n      var name = this.text();\n      this.next();\n      constName = constName(name);\n\n      if (this.expect("=")) {\n        return result(constName, this.next().read_expr());\n      } else {\n        // fallback\n        return result(constName, null);\n      }\n    }, ",", false);\n  },\n\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER \'=\' expr (\',\' IDENTIFIER \'=\' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function read_declare_list() {\n    var result = [];\n\n    while (this.token != this.EOF && this.token !== ")") {\n      this.expect(this.tok.T_STRING);\n      var directive = this.node("declaredirective");\n      var key = this.node("identifier");\n      var name = this.text();\n      this.next();\n      key = key(name);\n      var value = null;\n\n      if (this.expect("=")) {\n        value = this.next().read_expr();\n      }\n\n      result.push(directive(key, value));\n      if (this.token !== ",") break;\n      this.next();\n    }\n\n    return result;\n  },\n\n  /**\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= \'{\' inner_statements \'}\' | token\n   * ```\n   */\n  read_inner_statement: function read_inner_statement() {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n\n      case this.tok.T_HALT_COMPILER:\n        {\n          this.raiseError("__HALT_COMPILER() can only be used from the outermost scope"); // fallback : returns a node but does not stop the parsing\n\n          var node = this.node("halt");\n          this.next().expect("(") && this.next();\n          this.expect(")") && this.next();\n          node = node(this.lexer._input.substring(this.lexer.offset));\n          this.expect(";") && this.next();\n          return node;\n        }\n\n      default:\n        return this.read_statement();\n    }\n  },\n\n  /**\n   * Reads statements\n   */\n  read_statement: function read_statement() {\n    switch (this.token) {\n      case "{":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN:\n        {\n          var result = this.node("return");\n          this.next();\n          var expr = this.read_optional_expr(";");\n          this.expectEndOfStatement();\n          return result(expr);\n        }\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE:\n        {\n          var _result2 = this.node(this.token === this.tok.T_CONTINUE ? "continue" : "break");\n\n          this.next();\n          var level = this.read_optional_expr(";");\n          this.expectEndOfStatement();\n          return _result2(level);\n        }\n\n      case this.tok.T_GLOBAL:\n        {\n          var _result3 = this.node("global");\n\n          var items = this.next().read_list(this.read_simple_variable, ",");\n          this.expectEndOfStatement();\n          return _result3(items);\n        }\n\n      case this.tok.T_STATIC:\n        {\n          var current = [this.token, this.lexer.getState()];\n\n          var _result4 = this.node();\n\n          if (this.next().token === this.tok.T_DOUBLE_COLON) {\n            // static keyword for a class\n            this.lexer.tokens.push(current);\n\n            var _expr = this.next().read_expr();\n\n            this.expectEndOfStatement(_expr);\n            return _result4("expressionstatement", _expr);\n          }\n\n          if (this.token === this.tok.T_FUNCTION) {\n            return this.read_function(true, [0, 1, 0]);\n          }\n\n          var _items = this.read_variable_declarations();\n\n          this.expectEndOfStatement();\n          return _result4("static", _items);\n        }\n\n      case this.tok.T_ECHO:\n        {\n          var _result5 = this.node("echo");\n\n          var text = this.text();\n          var shortForm = text === "<?=" || text === "<%=";\n          var expressions = this.next().read_function_list(this.read_expr, ",");\n          this.expectEndOfStatement();\n          return _result5(expressions, shortForm);\n        }\n\n      case this.tok.T_INLINE_HTML:\n        {\n          var value = this.text();\n          var prevChar = this.lexer.yylloc.first_offset > 0 ? this.lexer._input[this.lexer.yylloc.first_offset - 1] : null;\n          var fixFirstLine = prevChar === "\\r" || prevChar === "\\n"; // revert back the first stripped line\n\n          if (fixFirstLine) {\n            if (prevChar === "\\n" && this.lexer.yylloc.first_offset > 1 && this.lexer._input[this.lexer.yylloc.first_offset - 2] === "\\r") {\n              prevChar = "\\r\\n";\n            }\n          }\n\n          var _result6 = this.node("inline");\n\n          this.next();\n          return _result6(value, fixFirstLine ? prevChar + value : value);\n        }\n\n      case this.tok.T_UNSET:\n        {\n          var _result7 = this.node("unset");\n\n          this.next().expect("(") && this.next();\n          var variables = this.read_function_list(this.read_variable, ",");\n          this.expect(")") && this.next();\n          this.expect(";") && this.next();\n          return _result7(variables);\n        }\n\n      case this.tok.T_DECLARE:\n        {\n          var _result8 = this.node("declare");\n\n          var body = [];\n          var mode;\n          this.next().expect("(") && this.next();\n          var directives = this.read_declare_list();\n          this.expect(")") && this.next();\n\n          if (this.token === ":") {\n            this.next();\n\n            while (this.token != this.EOF && this.token !== this.tok.T_ENDDECLARE) {\n              // @todo : check declare_statement from php / not valid\n              body.push(this.read_top_statement());\n            }\n\n            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n              body.push(this.node("noop")());\n            }\n\n            this.expect(this.tok.T_ENDDECLARE) && this.next();\n            this.expectEndOfStatement();\n            mode = this.ast.declare.MODE_SHORT;\n          } else if (this.token === "{") {\n            this.next();\n\n            while (this.token != this.EOF && this.token !== "}") {\n              // @todo : check declare_statement from php / not valid\n              body.push(this.read_top_statement());\n            }\n\n            if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n              body.push(this.node("noop")());\n            }\n\n            this.expect("}") && this.next();\n            mode = this.ast.declare.MODE_BLOCK;\n          } else {\n            this.expect(";") && this.next();\n            mode = this.ast.declare.MODE_NONE;\n          }\n\n          return _result8(directives, body, mode);\n        }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW:\n        {\n          var _result9 = this.node("throw");\n\n          var _expr2 = this.next().read_expr();\n\n          this.expectEndOfStatement();\n          return _result9(_expr2);\n        }\n      // ignore this (extra ponctuation)\n\n      case ";":\n        {\n          this.next();\n          return null;\n        }\n\n      case this.tok.T_STRING:\n        {\n          var _result10 = this.node();\n\n          var _current = [this.token, this.lexer.getState()];\n          var labelNameText = this.text();\n          var labelName = this.node("identifier"); // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n\n          if (this.next().token === ":") {\n            labelName = labelName(labelNameText);\n            this.next();\n            return _result10("label", labelName);\n          } else {\n            labelName.destroy();\n          } // default fallback expr / T_STRING \'::\' (etc...)\n\n\n          _result10.destroy();\n\n          this.lexer.tokens.push(_current);\n          var statement = this.node("expressionstatement");\n\n          var _expr3 = this.next().read_expr();\n\n          this.expectEndOfStatement(_expr3);\n          return statement(_expr3);\n        }\n\n      case this.tok.T_GOTO:\n        {\n          var _result11 = this.node("goto");\n\n          var _labelName = null;\n\n          if (this.next().expect(this.tok.T_STRING)) {\n            _labelName = this.node("identifier");\n            var name = this.text();\n            this.next();\n            _labelName = _labelName(name);\n            this.expectEndOfStatement();\n          }\n\n          return _result11(_labelName);\n        }\n\n      default:\n        {\n          // default fallback expr\n          var _statement = this.node("expressionstatement");\n\n          var _expr4 = this.read_expr();\n\n          this.expectEndOfStatement(_expr4);\n          return _statement(_expr4);\n        }\n    }\n  },\n\n  /**\n   * ```ebnf\n   *  code_block ::= \'{\' (inner_statements | top_statements) \'}\'\n   * ```\n   */\n  read_code_block: function read_code_block(top) {\n    var result = this.node("block");\n    this.expect("{") && this.next();\n    var body = top ? this.read_top_statements() : this.read_inner_statements();\n\n    if (body.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      body.push(this.node("noop")());\n    }\n\n    this.expect("}") && this.next();\n    return result(null, body);\n  }\n};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH \'(\' expr \')\' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function read_switch() {\n    var result = this.node("switch");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect("(") && this.next();\n    var test = this.read_expr();\n    this.expect(")") && this.next();\n    var shortForm = this.token === ":";\n    var body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n\n  /**\n   * ```ebnf\n   *  switch_case_list ::= \'{\' \';\'? case_list* \'}\' | \':\' \';\'? case_list* T_ENDSWITCH \';\'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function read_switch_case_list() {\n    // DETECT SWITCH MODE\n    var expect = null;\n    var result = this.node("block");\n    var items = [];\n\n    if (this.token === "{") {\n      expect = "}";\n    } else if (this.token === ":") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect(["{", ":"]);\n    }\n\n    this.next(); // OPTIONNAL \';\'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n\n    if (this.token === ";") {\n      this.next();\n    } // EXTRACTING CASES\n\n\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n\n    if (items.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      items.push(this.node("noop")());\n    } // CHECK END TOKEN\n\n\n    this.expect(expect) && this.next();\n\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n\n    return result(null, items);\n  },\n\n  /**\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (\':\' | \';\') inner_statement*\n   * ```\n   */\n  read_case_list: function read_case_list(stopToken) {\n    var result = this.node("case");\n    var test = null;\n\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    } // case_separator\n\n\n    this.expect([":", ";"]) && this.next();\n    var body = this.node("block");\n    var items = [];\n\n    while (this.token !== this.EOF && this.token !== stopToken && this.token !== this.tok.T_CASE && this.token !== this.tok.T_DEFAULT) {\n      items.push(this.read_inner_statement());\n    }\n\n    return result(test, body(null, items));\n  }\n};\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * ```ebnf\n   *  try ::= T_TRY \'{\' inner_statement* \'}\'\n   *          (\n   *              T_CATCH \'(\' namespace_name variable \')\' \'{\'  inner_statement* \'}\'\n   *          )*\n   *          (T_FINALLY \'{\' inner_statement* \'}\')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function read_try() {\n    this.expect(this.tok.T_TRY);\n    var result = this.node("try");\n    var always = null;\n    var catches = [];\n    var body = this.next().read_statement(); // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n\n    while (this.token === this.tok.T_CATCH) {\n      var item = this.node("catch");\n      this.next().expect("(") && this.next();\n      var what = this.read_list(this.read_namespace_name, "|", false);\n      var variable = this.read_variable(true, false);\n      this.expect(")");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n\n    return result(body, catches, always);\n  }\n};\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function read_short_form(token) {\n    var body = this.node("block");\n    var items = [];\n    if (this.expect(":")) this.next();\n\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n\n    if (items.length === 0 && this.extractDoc && this._docs.length > this._docIndex) {\n      items.push(this.node("noop")());\n    }\n\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /**\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function read_function_list(item, separator) {\n    var result = [];\n\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node("noop")());\n        break;\n      }\n\n      result.push(item.apply(this, []));\n\n      if (this.token != separator) {\n        break;\n      }\n\n      if (this.next().token == ")" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n\n    return result;\n  },\n\n  /**\n   * Helper : reads a list of tokens / sample : T_STRING \',\' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function read_list(item, separator, preserveFirstSeparator) {\n    var result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === "function" ? this.node("noop")() : null);\n      }\n\n      this.next();\n    }\n\n    if (typeof item === "function") {\n      do {\n        var itemResult = item.apply(this, []);\n\n        if (itemResult) {\n          result.push(itemResult);\n        }\n\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break; // trim current separator & check item\n\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (\',\' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function read_name_list() {\n    return this.read_list(this.read_namespace_name, ",", false);\n  },\n\n  /**\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function read_byref(cb) {\n    var byref = this.node("byref");\n    this.next();\n    byref = byref(null);\n    var result = cb();\n\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE (\'=\' expr)?*\n   * variable_declarations ::= variable_declaration (\',\' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = \'hello\', $b = \'world\';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function read_variable_declarations() {\n    return this.read_list(function () {\n      var node = this.node("staticvariable");\n      var variable = this.node("variable"); // plain variable name\n\n      if (this.expect(this.tok.T_VARIABLE)) {\n        var name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable("#ERR", false);\n      }\n\n      if (this.token === "=") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, ",");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function read_extends_from() {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function read_interface_extends_list() {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function read_implements_list() {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  }\n};\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nmodule.exports = {\n  /**\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function read_variable(read_only, encapsed) {\n    var result; // check the byref flag\n\n    if (this.token === "&") {\n      return this.read_byref(this.read_variable.bind(this, read_only, encapsed));\n    } // reads the entry point\n\n\n    if (this.is([this.tok.T_VARIABLE, "$"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (this.is([this.tok.T_NS_SEPARATOR, this.tok.T_STRING, this.tok.T_NAMESPACE])) {\n      result = this.node();\n      var name = this.read_namespace_name();\n\n      if (this.token != this.tok.T_DOUBLE_COLON && this.token != "(" && ["parentreference", "selfreference"].indexOf(name.kind) === -1) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        var literal = name.name.toLowerCase();\n\n        if (literal === "true") {\n          result = name.destroy(result("boolean", true, name.name));\n        } else if (literal === "false") {\n          result = name.destroy(result("boolean", false, name.name));\n        } else if (literal === "null") {\n          result = name.destroy(result("nullkeyword", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node("staticreference");\n      var raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect("VARIABLE");\n    } // static mode\n\n\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n  // resolves a static call\n  read_static_getter: function read_static_getter(what, encapsed) {\n    var result = this.node("staticlookup");\n    var offset, name;\n\n    if (this.next().is([this.tok.T_VARIABLE, "$"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (this.token === this.tok.T_STRING || this.token === this.tok.T_CLASS || this.version >= 700 && this.is("IDENTIFIER")) {\n      offset = this.node("identifier");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === "{") {\n      offset = this.node("literal");\n      name = this.next().read_expr();\n      this.expect("}") && this.next();\n      offset = offset("literal", name, null);\n      this.expect("(");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]); // graceful mode : set getter as error node and continue\n\n      offset = this.node("identifier");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n\n    return result(what, offset);\n  },\n  read_what: function read_what() {\n    var is_static_lookup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var what = null;\n    var name = null;\n\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node("identifier");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n\n        break;\n\n      case this.tok.T_VARIABLE:\n        what = this.node("variable");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n\n      case "$":\n        what = this.node();\n        this.next().expect(["$", "{", this.tok.T_VARIABLE]);\n\n        if (this.token === "{") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect("}") && this.next();\n          what = what("variable", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what("variable", name, false);\n        }\n\n        break;\n\n      case "{":\n        what = this.node("encapsedpart");\n        name = this.next().read_expr();\n        this.expect("}") && this.next();\n        what = what(name, "complex", false);\n        break;\n\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, "$", "{"]); // graceful mode : set what as error mode & continue\n\n        what = this.node("identifier");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n  recursive_variable_chain_scan: function recursive_variable_chain_scan(result, read_only, encapsed) {\n    var node, offset;\n\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case "(":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node("call")(result, this.read_argument_list());\n          }\n\n          break;\n\n        case "[":\n        case "{":\n          {\n            var backet = this.token;\n            var isSquareBracket = backet === "[";\n            node = this.node("offsetlookup");\n            this.next();\n            offset = false;\n\n            if (encapsed) {\n              offset = this.read_encaps_var_offset();\n              this.expect(isSquareBracket ? "]" : "}") && this.next();\n            } else {\n              var isCallableVariable = isSquareBracket ? this.token !== "]" : this.token !== "}"; // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n\n              if (isCallableVariable) {\n                offset = this.read_expr();\n                this.expect(isSquareBracket ? "]" : "}") && this.next();\n              } else {\n                this.next();\n              }\n            }\n\n            result = node(result, offset);\n            break;\n          }\n\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (result.kind === "staticlookup" && result.offset.kind === "identifier") {\n            this.error();\n          }\n\n          node = this.node("staticlookup");\n          result = node(result, this.read_what(true)); // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n\n          /*if (dereferencable && this.token !== "(") {\n            this.error("(");\n          }*/\n\n          break;\n\n        case this.tok.T_OBJECT_OPERATOR:\n          {\n            node = this.node("propertylookup");\n            result = node(result, this.read_what());\n            break;\n          }\n\n        default:\n          break recursive_scan_loop;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function read_encaps_var_offset() {\n    var offset = this.node();\n\n    if (this.token === this.tok.T_STRING) {\n      var text = this.text();\n      this.next();\n      offset = offset("identifier", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      var num = this.text();\n      this.next();\n      offset = offset("number", num, null);\n    } else if (this.token === "-") {\n      this.next();\n\n      var _num = -1 * this.text();\n\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset("number", _num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      var name = this.text().substring(1);\n      this.next();\n      offset = offset("variable", name, false);\n    } else {\n      this.expect([this.tok.T_STRING, this.tok.T_NUM_STRING, "-", this.tok.T_VARIABLE]); // fallback : consider as identifier\n\n      var _text = this.text();\n\n      this.next();\n      offset = offset("identifier", _text);\n    }\n\n    return offset;\n  },\n\n  /**\n   * ```ebnf\n   *  reference_variable ::=  simple_variable (\'[\' OFFSET \']\')* | \'{\' EXPR \'}\'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${\'foo\'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function read_reference_variable(encapsed) {\n    var result = this.read_simple_variable();\n    var offset;\n\n    while (this.token != this.EOF) {\n      var node = this.node();\n\n      if (this.token == "{" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect("}") && this.next();\n        result = node("offsetlookup", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | \'$\' \'{\' expr \'}\' | \'$\' simple_variable\n   * ```\n   */\n  read_simple_variable: function read_simple_variable() {\n    var result = this.node("variable");\n    var name;\n\n    if (this.expect([this.tok.T_VARIABLE, "$"]) && this.token === this.tok.T_VARIABLE) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === "$") this.next(); // dynamic variable name\n\n      switch (this.token) {\n        case "{":\n          {\n            var expr = this.next().read_expr();\n            this.expect("}") && this.next();\n            result = result(expr, true);\n            break;\n          }\n\n        case "$":\n          // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n\n        case this.tok.T_VARIABLE:\n          {\n            // $$var\n            name = this.text().substring(1);\n            var node = this.node("variable");\n            this.next();\n            result = result(node(name, false), false);\n            break;\n          }\n\n        default:\n          this.error(["{", "$", this.tok.T_VARIABLE]); // graceful mode\n\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n\n    return result;\n  }\n};\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * PHP AST Tokens\n * @type {Object}\n */\n\nmodule.exports = {\n  values: {\n    101: "T_HALT_COMPILER",\n    102: "T_USE",\n    103: "T_ENCAPSED_AND_WHITESPACE",\n    104: "T_OBJECT_OPERATOR",\n    105: "T_STRING",\n    106: "T_DOLLAR_OPEN_CURLY_BRACES",\n    107: "T_STRING_VARNAME",\n    108: "T_CURLY_OPEN",\n    109: "T_NUM_STRING",\n    110: "T_ISSET",\n    111: "T_EMPTY",\n    112: "T_INCLUDE",\n    113: "T_INCLUDE_ONCE",\n    114: "T_EVAL",\n    115: "T_REQUIRE",\n    116: "T_REQUIRE_ONCE",\n    117: "T_NAMESPACE",\n    118: "T_NS_SEPARATOR",\n    119: "T_AS",\n    120: "T_IF",\n    121: "T_ENDIF",\n    122: "T_WHILE",\n    123: "T_DO",\n    124: "T_FOR",\n    125: "T_SWITCH",\n    126: "T_BREAK",\n    127: "T_CONTINUE",\n    128: "T_RETURN",\n    129: "T_GLOBAL",\n    130: "T_STATIC",\n    131: "T_ECHO",\n    132: "T_INLINE_HTML",\n    133: "T_UNSET",\n    134: "T_FOREACH",\n    135: "T_DECLARE",\n    136: "T_TRY",\n    137: "T_THROW",\n    138: "T_GOTO",\n    139: "T_FINALLY",\n    140: "T_CATCH",\n    141: "T_ENDDECLARE",\n    142: "T_LIST",\n    143: "T_CLONE",\n    144: "T_PLUS_EQUAL",\n    145: "T_MINUS_EQUAL",\n    146: "T_MUL_EQUAL",\n    147: "T_DIV_EQUAL",\n    148: "T_CONCAT_EQUAL",\n    149: "T_MOD_EQUAL",\n    150: "T_AND_EQUAL",\n    151: "T_OR_EQUAL",\n    152: "T_XOR_EQUAL",\n    153: "T_SL_EQUAL",\n    154: "T_SR_EQUAL",\n    155: "T_INC",\n    156: "T_DEC",\n    157: "T_BOOLEAN_OR",\n    158: "T_BOOLEAN_AND",\n    159: "T_LOGICAL_OR",\n    160: "T_LOGICAL_AND",\n    161: "T_LOGICAL_XOR",\n    162: "T_SL",\n    163: "T_SR",\n    164: "T_IS_IDENTICAL",\n    165: "T_IS_NOT_IDENTICAL",\n    166: "T_IS_EQUAL",\n    167: "T_IS_NOT_EQUAL",\n    168: "T_IS_SMALLER_OR_EQUAL",\n    169: "T_IS_GREATER_OR_EQUAL",\n    170: "T_INSTANCEOF",\n    171: "T_INT_CAST",\n    172: "T_DOUBLE_CAST",\n    173: "T_STRING_CAST",\n    174: "T_ARRAY_CAST",\n    175: "T_OBJECT_CAST",\n    176: "T_BOOL_CAST",\n    177: "T_UNSET_CAST",\n    178: "T_EXIT",\n    179: "T_PRINT",\n    180: "T_YIELD",\n    181: "T_YIELD_FROM",\n    182: "T_FUNCTION",\n    183: "T_DOUBLE_ARROW",\n    184: "T_DOUBLE_COLON",\n    185: "T_ARRAY",\n    186: "T_CALLABLE",\n    187: "T_CLASS",\n    188: "T_ABSTRACT",\n    189: "T_TRAIT",\n    190: "T_FINAL",\n    191: "T_EXTENDS",\n    192: "T_INTERFACE",\n    193: "T_IMPLEMENTS",\n    194: "T_VAR",\n    195: "T_PUBLIC",\n    196: "T_PROTECTED",\n    197: "T_PRIVATE",\n    198: "T_CONST",\n    199: "T_NEW",\n    200: "T_INSTEADOF",\n    201: "T_ELSEIF",\n    202: "T_ELSE",\n    203: "T_ENDSWITCH",\n    204: "T_CASE",\n    205: "T_DEFAULT",\n    206: "T_ENDFOR",\n    207: "T_ENDFOREACH",\n    208: "T_ENDWHILE",\n    209: "T_CONSTANT_ENCAPSED_STRING",\n    210: "T_LNUMBER",\n    211: "T_DNUMBER",\n    212: "T_LINE",\n    213: "T_FILE",\n    214: "T_DIR",\n    215: "T_TRAIT_C",\n    216: "T_METHOD_C",\n    217: "T_FUNC_C",\n    218: "T_NS_C",\n    219: "T_START_HEREDOC",\n    220: "T_END_HEREDOC",\n    221: "T_CLASS_C",\n    222: "T_VARIABLE",\n    223: "T_OPEN_TAG",\n    224: "T_OPEN_TAG_WITH_ECHO",\n    225: "T_CLOSE_TAG",\n    226: "T_WHITESPACE",\n    227: "T_COMMENT",\n    228: "T_DOC_COMMENT",\n    229: "T_ELLIPSIS",\n    230: "T_COALESCE",\n    231: "T_POW",\n    232: "T_POW_EQUAL",\n    233: "T_SPACESHIP",\n    234: "T_COALESCE_EQUAL",\n    235: "T_FN"\n  },\n  names: {\n    T_HALT_COMPILER: 101,\n    T_USE: 102,\n    T_ENCAPSED_AND_WHITESPACE: 103,\n    T_OBJECT_OPERATOR: 104,\n    T_STRING: 105,\n    T_DOLLAR_OPEN_CURLY_BRACES: 106,\n    T_STRING_VARNAME: 107,\n    T_CURLY_OPEN: 108,\n    T_NUM_STRING: 109,\n    T_ISSET: 110,\n    T_EMPTY: 111,\n    T_INCLUDE: 112,\n    T_INCLUDE_ONCE: 113,\n    T_EVAL: 114,\n    T_REQUIRE: 115,\n    T_REQUIRE_ONCE: 116,\n    T_NAMESPACE: 117,\n    T_NS_SEPARATOR: 118,\n    T_AS: 119,\n    T_IF: 120,\n    T_ENDIF: 121,\n    T_WHILE: 122,\n    T_DO: 123,\n    T_FOR: 124,\n    T_SWITCH: 125,\n    T_BREAK: 126,\n    T_CONTINUE: 127,\n    T_RETURN: 128,\n    T_GLOBAL: 129,\n    T_STATIC: 130,\n    T_ECHO: 131,\n    T_INLINE_HTML: 132,\n    T_UNSET: 133,\n    T_FOREACH: 134,\n    T_DECLARE: 135,\n    T_TRY: 136,\n    T_THROW: 137,\n    T_GOTO: 138,\n    T_FINALLY: 139,\n    T_CATCH: 140,\n    T_ENDDECLARE: 141,\n    T_LIST: 142,\n    T_CLONE: 143,\n    T_PLUS_EQUAL: 144,\n    T_MINUS_EQUAL: 145,\n    T_MUL_EQUAL: 146,\n    T_DIV_EQUAL: 147,\n    T_CONCAT_EQUAL: 148,\n    T_MOD_EQUAL: 149,\n    T_AND_EQUAL: 150,\n    T_OR_EQUAL: 151,\n    T_XOR_EQUAL: 152,\n    T_SL_EQUAL: 153,\n    T_SR_EQUAL: 154,\n    T_INC: 155,\n    T_DEC: 156,\n    T_BOOLEAN_OR: 157,\n    T_BOOLEAN_AND: 158,\n    T_LOGICAL_OR: 159,\n    T_LOGICAL_AND: 160,\n    T_LOGICAL_XOR: 161,\n    T_SL: 162,\n    T_SR: 163,\n    T_IS_IDENTICAL: 164,\n    T_IS_NOT_IDENTICAL: 165,\n    T_IS_EQUAL: 166,\n    T_IS_NOT_EQUAL: 167,\n    T_IS_SMALLER_OR_EQUAL: 168,\n    T_IS_GREATER_OR_EQUAL: 169,\n    T_INSTANCEOF: 170,\n    T_INT_CAST: 171,\n    T_DOUBLE_CAST: 172,\n    T_STRING_CAST: 173,\n    T_ARRAY_CAST: 174,\n    T_OBJECT_CAST: 175,\n    T_BOOL_CAST: 176,\n    T_UNSET_CAST: 177,\n    T_EXIT: 178,\n    T_PRINT: 179,\n    T_YIELD: 180,\n    T_YIELD_FROM: 181,\n    T_FUNCTION: 182,\n    T_DOUBLE_ARROW: 183,\n    T_DOUBLE_COLON: 184,\n    T_ARRAY: 185,\n    T_CALLABLE: 186,\n    T_CLASS: 187,\n    T_ABSTRACT: 188,\n    T_TRAIT: 189,\n    T_FINAL: 190,\n    T_EXTENDS: 191,\n    T_INTERFACE: 192,\n    T_IMPLEMENTS: 193,\n    T_VAR: 194,\n    T_PUBLIC: 195,\n    T_PROTECTED: 196,\n    T_PRIVATE: 197,\n    T_CONST: 198,\n    T_NEW: 199,\n    T_INSTEADOF: 200,\n    T_ELSEIF: 201,\n    T_ELSE: 202,\n    T_ENDSWITCH: 203,\n    T_CASE: 204,\n    T_DEFAULT: 205,\n    T_ENDFOR: 206,\n    T_ENDFOREACH: 207,\n    T_ENDWHILE: 208,\n    T_CONSTANT_ENCAPSED_STRING: 209,\n    T_LNUMBER: 210,\n    T_DNUMBER: 211,\n    T_LINE: 212,\n    T_FILE: 213,\n    T_DIR: 214,\n    T_TRAIT_C: 215,\n    T_METHOD_C: 216,\n    T_FUNC_C: 217,\n    T_NS_C: 218,\n    T_START_HEREDOC: 219,\n    T_END_HEREDOC: 220,\n    T_CLASS_C: 221,\n    T_VARIABLE: 222,\n    T_OPEN_TAG: 223,\n    T_OPEN_TAG_WITH_ECHO: 224,\n    T_CLOSE_TAG: 225,\n    T_WHITESPACE: 226,\n    T_COMMENT: 227,\n    T_DOC_COMMENT: 228,\n    T_ELLIPSIS: 229,\n    T_COALESCE: 230,\n    T_POW: 231,\n    T_POW_EQUAL: 232,\n    T_SPACESHIP: 233,\n    T_COALESCE_EQUAL: 234,\n    T_FN: 235\n  }\n};\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Location = __webpack_require__(41);\n\nvar Position = __webpack_require__(42);\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\n\n\nvar AST = function AST(withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n/**\n * Create a position node from specified parser\n * including it\'s lexer current state\n * @param {Parser}\n * @return {Position}\n * @private\n */\n\n\nAST.prototype.position = function (parser) {\n  return new Position(parser.lexer.yylloc.first_line, parser.lexer.yylloc.first_column, parser.lexer.yylloc.first_offset);\n}; // operators in ascending order of precedence\n\n\nAST.precedence = {};\n[["or"], ["xor"], ["and"], ["="], ["?"], ["??"], ["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "!=", "===", "!==",\n/* \'<>\', */\n"<=>"], ["<", "<=", ">", ">="], ["<<", ">>"], ["+", "-", "."], ["*", "/", "%"], ["!"], ["instanceof"], ["cast", "silent"], ["**"] // TODO: [ (array)\n// TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === "**" || operator === "??";\n};\n/**\n * Change parent node informations after swapping childs\n */\n\n\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(target.loc.start.offset, target.loc.end.offset);\n    }\n  }\n};\n/**\n * Includes locations from first & last into the target\n */\n\n\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(target.loc.start.offset, target.loc.end.offset);\n    }\n  }\n};\n/**\n * Check and fix precence, by default using right\n */\n\n\nAST.prototype.resolvePrecedence = function (result, parser) {\n  var buffer, lLevel, rLevel; // handling precendence\n\n  if (result.kind === "call") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (result.kind === "propertylookup" || result.kind === "staticlookup" || result.kind === "offsetlookup" && result.offset) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === "bin") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === "bin") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n\n        if (lLevel && rLevel && rLevel <= lLevel && !this.isRightAssociative(result.type)) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === "retif") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence["?"];\n\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if ((result.kind === "silent" || result.kind === "cast") && result.expr && !result.expr.parenthesizedExpression) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === "bin") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === "retif") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === "unary") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is allways lower\n      if (result.what.kind === "bin") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === "retif") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === "retif") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (result.falseExpr && result.falseExpr.kind === "retif" && !result.falseExpr.parenthesizedExpression) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === "assign") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (result.right && result.right.kind === "bin" && !result.right.parenthesizedExpression) {\n      lLevel = AST.precedence["="];\n      rLevel = AST.precedence[result.right.type]; // only shifts with and, xor, or\n\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === "expressionstatement") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n\n  return result;\n};\n/**\n * Prepares an AST node\n * @param {String|null} kind - Defines the node type\n * (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\n\n\nAST.prototype.prepare = function (kind, docs, parser) {\n  var start = null;\n\n  if (this.withPositions || this.withSource) {\n    start = this.position(parser);\n  }\n\n  var self = this; // returns the node\n\n  var result = function result() {\n    var location = null;\n    var args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n\n    if (self.withPositions || self.withSource) {\n      var src = null;\n\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      } // if with source, need location on swapLocations function\n\n\n      location = new Location(src, start, new Position(parser.prev[0], parser.prev[1], parser.prev[2])); // last argument is allways the location\n\n      args.push(location);\n    } // handle lazy kind definitions\n\n\n    if (!kind) {\n      kind = args.shift();\n    } // build the object\n\n\n    var node = self[kind];\n\n    if (typeof node !== "function") {\n      throw new Error(\'Undefined node "\' + kind + \'"\');\n    }\n\n    var astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n\n    if (typeof result.postBuild === "function") {\n      result.postBuild(astNode);\n    }\n\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n\n    return self.resolvePrecedence(astNode, parser);\n  };\n\n  if (parser.debug) {\n    if (!AST.stack) {\n      AST.stack = {};\n      AST.stackUid = 1;\n    }\n\n    AST.stack[++AST.stackUid] = {\n      position: start,\n      stack: new Error().stack.split("\\n").slice(3, 5)\n    };\n    result.stackUid = AST.stackUid;\n  }\n  /**\n   * Sets a list of trailing comments\n   * @param {*} docs\n   */\n\n\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n  /**\n   * Release a node without using it on the AST\n   */\n\n\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n  };\n\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  var errors = [];\n\n  for (var k in AST.stack) {\n    if (AST.stack.hasOwnProperty(k)) {\n      errors.push(AST.stack[k]);\n    }\n  }\n\n  AST.stack = {};\n  return errors;\n}; // Define all AST nodes\n\n\n[__webpack_require__(43), __webpack_require__(44), __webpack_require__(45), __webpack_require__(46), __webpack_require__(47), __webpack_require__(7), __webpack_require__(48), __webpack_require__(49), __webpack_require__(50), __webpack_require__(51), __webpack_require__(52), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(57), __webpack_require__(58), __webpack_require__(9), __webpack_require__(59), __webpack_require__(60), __webpack_require__(61), __webpack_require__(10), __webpack_require__(62), __webpack_require__(5), __webpack_require__(63), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(67), __webpack_require__(68), __webpack_require__(69), __webpack_require__(70), __webpack_require__(71), __webpack_require__(72), __webpack_require__(73), __webpack_require__(1), __webpack_require__(74), __webpack_require__(75), __webpack_require__(76), __webpack_require__(11), __webpack_require__(77), __webpack_require__(78), __webpack_require__(79), __webpack_require__(80), __webpack_require__(81), __webpack_require__(82), __webpack_require__(83), __webpack_require__(84), __webpack_require__(85), __webpack_require__(86), __webpack_require__(87), __webpack_require__(3), __webpack_require__(8), __webpack_require__(88), __webpack_require__(89), __webpack_require__(90), __webpack_require__(91), __webpack_require__(92), __webpack_require__(2), __webpack_require__(93), __webpack_require__(94), __webpack_require__(95), __webpack_require__(96), __webpack_require__(97), __webpack_require__(4), __webpack_require__(98), __webpack_require__(99), __webpack_require__(100), __webpack_require__(101), __webpack_require__(102), __webpack_require__(103), __webpack_require__(104), __webpack_require__(105), __webpack_require__(106), __webpack_require__(6), __webpack_require__(107), __webpack_require__(108), __webpack_require__(109), __webpack_require__(110), __webpack_require__(0), __webpack_require__(111), __webpack_require__(112), __webpack_require__(113), __webpack_require__(114), __webpack_require__(115), __webpack_require__(116), __webpack_require__(117), __webpack_require__(118), __webpack_require__(119), __webpack_require__(120), __webpack_require__(121), __webpack_require__(122), __webpack_require__(123), __webpack_require__(124), __webpack_require__(125), __webpack_require__(126), __webpack_require__(127), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130), __webpack_require__(131), __webpack_require__(132)].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\nmodule.exports = AST;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Defines the location of the node (with it\'s source contents as string)\n * @constructor Location\n * @property {String|null} source\n * @property {Position} start\n * @property {Position} end\n */\n\nvar Location = function Location(source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nmodule.exports = Location;\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @property {Number} line\n * @property {Number} column\n * @property {Number} offset\n */\n\nvar Position = function Position(line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nmodule.exports = Position;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expr = __webpack_require__(1);\n\nvar KIND = "array";\n/**\n * Defines an array structure\n * @constructor Array\n * @example\n * // PHP code :\n * [1, \'foo\' => \'bar\', 3]\n *\n * // AST structure :\n * {\n *  "kind": "array",\n *  "shortForm": true\n *  "items": [\n *    {"kind": "number", "value": "1"},\n *    {\n *      "kind": "entry",\n *      "key": {"kind": "string", "value": "foo", "isDoubleQuote": false},\n *      "value": {"kind": "string", "value": "bar", "isDoubleQuote": false}\n *    },\n *    {"kind": "number", "value": "3"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Entry|Expr|Variable} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\n\nmodule.exports = Expr["extends"](KIND, function Array(shortForm, items, docs, location) {\n  Expr.apply(this, [KIND, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "arrowfunc";\n/**\n * Defines an arrow function (it\'s like a closure)\n * @constructor ArrowFunc\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\n\nmodule.exports = Expression["extends"](KIND, function Closure(args, byref, body, type, nullable, isStatic, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.body = body;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n});\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "assign";\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\n\nmodule.exports = Expression["extends"](KIND, function Assign(left, right, operator, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.left = left;\n  this.right = right;\n  this.operator = operator;\n});\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "assignref";\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\n\nmodule.exports = Expression["extends"](KIND, function AssignRef(left, right, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.left = left;\n  this.right = right;\n});\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Operation = __webpack_require__(4);\n\nvar KIND = "bin";\n/**\n * Binary operations\n * @constructor Bin\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\n\nmodule.exports = Operation["extends"](KIND, function Bin(type, left, right, docs, location) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.left = left;\n  this.right = right;\n});\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "boolean";\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @extends {Literal}\n */\n\nmodule.exports = Literal["extends"](KIND, function Boolean(value, raw, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "break";\n/**\n * A break statement\n * @constructor Break\n * @extends {Statement}\n * @property {Number|Null} level\n */\n\nmodule.exports = Statement["extends"](KIND, function Break(level, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.level = level;\n});\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "byref";\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @extends {Expression}\n * @property {expr} what\n */\n\nmodule.exports = Expression["extends"](KIND, function ByRef(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "call";\n/**\n * Executes a call statement\n * @constructor Call\n * @extends {Expression}\n * @property {Identifier|Variable|??} what\n * @property {Arguments[]} arguments\n */\n\nmodule.exports = Expression["extends"](KIND, function Call(what, args, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "case";\n/**\n * A switch case statement\n * @constructor Case\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\n\nmodule.exports = Statement["extends"](KIND, function Case(test, body, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Operation = __webpack_require__(4);\n\nvar KIND = "cast";\n/**\n * Binary operations\n * @constructor Cast\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\n\nmodule.exports = Operation["extends"](KIND, function Cast(type, raw, expr, docs, location) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.raw = raw;\n  this.expr = expr;\n});\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "catch";\n/**\n * Defines a catch statement\n * @constructor Catch\n * @extends {Statement}\n * @property {Identifier[]} what\n * @property {Variable} variable\n * @property {Statement} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\n\nmodule.exports = Statement["extends"](KIND, function Catch(body, what, variable, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.body = body;\n  this.what = what;\n  this.variable = variable;\n});\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Declaration = __webpack_require__(5);\n\nvar KIND = "class";\n/**\n * A class definition\n * @constructor Class\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n */\n\nmodule.exports = Declaration["extends"](KIND, function Class(name, ext, impl, body, flags, docs, location) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.isAnonymous = name ? false : true;\n  this["extends"] = ext;\n  this["implements"] = impl;\n  this.body = body;\n  this.parseFlags(flags);\n});\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar ConstantStatement = __webpack_require__(10);\n\nvar KIND = "classconstant";\nvar IS_UNDEFINED = "";\nvar IS_PUBLIC = "public";\nvar IS_PROTECTED = "protected";\nvar IS_PRIVATE = "private";\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @extends {ConstantStatement}\n * @property {string} visibility\n */\n\nvar ClassConstant = ConstantStatement["extends"](KIND, function ClassConstant(kind, constants, flags, docs, location) {\n  ConstantStatement.apply(this, [kind || KIND, constants, docs, location]);\n  this.parseFlags(flags);\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n};\n\nmodule.exports = ClassConstant;\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "clone";\n/**\n * Defines a clone call\n * @constructor Clone\n * @extends {Expression}\n * @property {Expression} what\n */\n\nmodule.exports = Expression["extends"](KIND, function Clone(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "closure";\n/**\n * Defines a closure\n * @constructor Closure\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n */\n\nmodule.exports = Expression["extends"](KIND, function Closure(args, byref, uses, type, nullable, isStatic, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.uses = uses;\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n  this.body = null;\n});\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Comment = __webpack_require__(9);\n\nvar KIND = "commentblock";\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @extends {Comment}\n */\n\nmodule.exports = Comment["extends"](KIND, function CommentBlock(value, docs, location) {\n  Comment.apply(this, [KIND, value, docs, location]);\n});\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Comment = __webpack_require__(9);\n\nvar KIND = "commentline";\n/**\n * A single line comment\n * @constructor CommentLine\n * @extends {Comment}\n */\n\nmodule.exports = Comment["extends"](KIND, function CommentLine(value, docs, location) {\n  Comment.apply(this, [KIND, value, docs, location]);\n});\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "constant";\n/**\n * Defines a constant\n * @constructor Constant\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\n\nmodule.exports = Node["extends"](KIND, function Constant(name, value, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.value = value;\n});\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "continue";\n/**\n * A continue statement\n * @constructor Continue\n * @extends {Statement}\n * @property {Number|Null} level\n */\n\nmodule.exports = Statement["extends"](KIND, function Continue(level, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.level = level;\n});\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Block = __webpack_require__(7);\n\nvar KIND = "declare";\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @extends {Block}\n * @property {Array[]} directives\n * @property {String} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\n\nvar Declare = Block["extends"](KIND, function Declare(directives, body, mode, docs, location) {\n  Block.apply(this, [KIND, body, docs, location]);\n  this.directives = directives;\n  this.mode = mode;\n});\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} MODE_SHORT\n */\n\nDeclare.MODE_SHORT = "short";\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} MODE_BLOCK\n */\n\nDeclare.MODE_BLOCK = "block";\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} MODE_NONE\n */\n\nDeclare.MODE_NONE = "none";\nmodule.exports = Declare;\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "declaredirective";\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @extends {Node}\n * @property {Identifier} name\n * @property {Node|string|number|boolean|null} value\n */\n\nmodule.exports = Node["extends"](KIND, function DeclareDirective(key, value, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.key = key;\n  this.value = value;\n});\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "do";\n/**\n * Defines a do/while statement\n * @constructor Do\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n */\n\nmodule.exports = Statement["extends"](KIND, function Do(test, body, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "echo";\n/**\n * Defines system based call\n * @constructor Echo\n * @property {boolean} shortForm\n * @extends {Statement}\n */\n\nmodule.exports = Statement["extends"](KIND, function Echo(expressions, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.shortForm = shortForm;\n  this.expressions = expressions;\n});\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "empty";\n/**\n * Defines an empty check call\n * @constructor Empty\n * @extends {Expression}\n */\n\nmodule.exports = Expression["extends"](KIND, function Empty(expression, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n});\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "encapsed";\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n */\n\nvar Encapsed = Literal["extends"](KIND, function Encapsed(value, raw, type, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.type = type;\n});\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo "hello $world";\n * ```\n * @constant {String} TYPE_STRING - `string`\n */\n\nEncapsed.TYPE_STRING = "string";\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} TYPE_SHELL - `shell`\n */\n\nEncapsed.TYPE_SHELL = "shell";\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} TYPE_HEREDOC - `heredoc`\n */\n\nEncapsed.TYPE_HEREDOC = "heredoc";\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} TYPE_OFFSET - `offset`\n */\n\nEncapsed.TYPE_OFFSET = "offset";\nmodule.exports = Encapsed;\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "encapsedpart";\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\n\nmodule.exports = Expression["extends"](KIND, function EncapsedPart(expression, syntax, curly, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n  this.syntax = syntax;\n  this.curly = curly;\n});\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "entry";\n/**\n * An array entry - see [Array](#array)\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\n\nmodule.exports = Expression["extends"](KIND, function Entry(key, value, byRef, unpack, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.key = key;\n  this.value = value;\n  this.byRef = byRef;\n  this.unpack = unpack;\n});\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "error";\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\n\nmodule.exports = Node["extends"](KIND, function Error(message, token, line, expected, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.message = message;\n  this.token = token;\n  this.line = line;\n  this.expected = expected;\n});\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "eval";\n/**\n * Defines an eval statement\n * @constructor Eval\n * @extends {Expression}\n * @property {Node} source\n */\n\nmodule.exports = Expression["extends"](KIND, function Eval(source, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.source = source;\n});\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "exit";\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {Boolean} useDie\n */\n\nmodule.exports = Expression["extends"](KIND, function Exit(expression, useDie, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n  this.useDie = useDie;\n});\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "expressionstatement";\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @extends {Statement}\n * @property {Expression} expression\n */\n\nmodule.exports = Statement["extends"](KIND, function ExpressionStatement(expr, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.expression = expr;\n});\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "for";\n/**\n * Defines a for iterator\n * @constructor For\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\n\nmodule.exports = Statement["extends"](KIND, function For(init, test, increment, body, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.init = init;\n  this.test = test;\n  this.increment = increment;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "foreach";\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\n\nmodule.exports = Statement["extends"](KIND, function Foreach(source, key, value, body, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.source = source;\n  this.key = key;\n  this.value = value;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "global";\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @extends {Statement}\n * @property {Variable[]} items\n */\n\nmodule.exports = Statement["extends"](KIND, function Global(items, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.items = items;\n});\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "goto";\n/**\n * Defines goto statement\n * @constructor Goto\n * @extends {Statement}\n * @property {String} label\n * @see {Label}\n */\n\nmodule.exports = Statement["extends"](KIND, function Goto(label, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.label = label;\n});\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "halt";\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\n\nmodule.exports = Statement["extends"](KIND, function Halt(after, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.after = after;\n});\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "identifier";\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @extends {Node}\n * @property {string} name\n */\n\nvar Identifier = Node["extends"](KIND, function Identifier(name, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.name = name;\n});\nmodule.exports = Identifier;\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "if";\n/**\n * Defines a if statement\n * @constructor If\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\n\nmodule.exports = Statement["extends"](KIND, function If(test, body, alternate, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.alternate = alternate;\n  this.shortForm = shortForm;\n});\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "include";\n/**\n * Defines system include call\n * @constructor Include\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\n\nmodule.exports = Expression["extends"](KIND, function Include(once, require, target, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.once = once;\n  this.require = require;\n  this.target = target;\n});\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "inline";\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @extends {Literal}\n */\n\nmodule.exports = Literal["extends"](KIND, function Inline(value, raw, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Declaration = __webpack_require__(5);\n\nvar KIND = "interface";\n/**\n * An interface definition\n * @constructor Interface\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n */\n\nmodule.exports = Declaration["extends"](KIND, function Interface(name, ext, body, docs, location) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this["extends"] = ext;\n  this.body = body;\n});\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "isset";\n/**\n * Defines an isset call\n * @constructor Isset\n * @extends {Expression}\n */\n\nmodule.exports = Expression["extends"](KIND, function Isset(variables, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "label";\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @extends {Statement}\n * @property {String} name\n */\n\nmodule.exports = Statement["extends"](KIND, function Label(name, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n});\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "list";\n/**\n * Defines list assignment\n * @constructor List\n * @extends {Expression}\n * @property {boolean} shortForm\n */\n\nmodule.exports = Expression["extends"](KIND, function List(items, shortForm, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "magic";\n/**\n * Defines magic constant\n * @constructor Magic\n * @extends {Literal}\n */\n\nmodule.exports = Literal["extends"](KIND, function Magic(value, raw, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar _Function = __webpack_require__(11);\n\nvar KIND = "method";\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @extends {_Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\n\nmodule.exports = _Function["extends"](KIND, function Method() {\n  _Function.apply(this, arguments);\n\n  this.kind = KIND;\n});\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Reference = __webpack_require__(6);\n\nvar KIND = "name";\n/**\n * Defines a class reference node\n * @constructor Name\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\n\nvar Name = Reference["extends"](KIND, function Name(name, isRelative, docs, location) {\n  Reference.apply(this, [KIND, docs, location]);\n\n  if (isRelative) {\n    this.resolution = Name.RELATIVE_NAME;\n  } else if (name.length === 1) {\n    this.resolution = Name.UNQUALIFIED_NAME;\n  } else if (!name[0]) {\n    this.resolution = Name.FULL_QUALIFIED_NAME;\n  } else {\n    this.resolution = Name.QUALIFIED_NAME;\n  }\n\n  this.name = name.join("\\\\");\n});\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} UNQUALIFIED_NAME\n */\n\nName.UNQUALIFIED_NAME = "uqn";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} QUALIFIED_NAME\n */\n\nName.QUALIFIED_NAME = "qn";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} FULL_QUALIFIED_NAME\n */\n\nName.FULL_QUALIFIED_NAME = "fqn";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} RELATIVE_NAME\n */\n\nName.RELATIVE_NAME = "rn";\nmodule.exports = Name;\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Block = __webpack_require__(7);\n\nvar KIND = "namespace";\n/**\n * The main program node\n * @constructor Namespace\n * @extends {Block}\n * @property {String} name\n * @property {Boolean} withBrackets\n */\n\nmodule.exports = Block["extends"](KIND, function Namespace(name, children, withBrackets, docs, location) {\n  Block.apply(this, [KIND, children, docs, location]);\n  this.name = name;\n  this.withBrackets = withBrackets || false;\n});\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "new";\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Arguments[]} arguments\n */\n\nmodule.exports = Expression["extends"](KIND, function New(what, args, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "noop";\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @extends {Node}\n */\n\nmodule.exports = Node["extends"](KIND, function Noop(docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n});\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "nowdoc";\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @extends {Literal}\n * @property {String} label\n * @property {String} raw\n */\n\nmodule.exports = Literal["extends"](KIND, function Nowdoc(value, raw, label, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.label = label;\n});\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "nullkeyword";\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @extends {Node}\n */\n\nmodule.exports = Node["extends"](KIND, function NullKeyword(raw, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "number";\n/**\n * Defines a numeric value\n * @constructor Number\n * @extends {Literal}\n */\n\nmodule.exports = Literal["extends"](KIND, function Number(value, raw, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Lookup = __webpack_require__(8);\n\nvar KIND = "offsetlookup";\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @extends {Lookup}\n */\n\nmodule.exports = Lookup["extends"](KIND, function OffsetLookup(what, offset, docs, location) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Declaration = __webpack_require__(5);\n\nvar KIND = "parameter";\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} nullable\n */\n\nmodule.exports = Declaration["extends"](KIND, function Parameter(name, type, value, isRef, isVariadic, nullable, docs, location) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.value = value;\n  this.type = type;\n  this.byref = isRef;\n  this.variadic = isVariadic;\n  this.nullable = nullable;\n});\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Reference = __webpack_require__(6);\n\nvar KIND = "parentreference";\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @extends {Reference}\n */\n\nvar ParentReference = Reference["extends"](KIND, function ParentReference(raw, docs, location) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = ParentReference;\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Operation = __webpack_require__(4);\n\nvar KIND = "post";\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\n\nmodule.exports = Operation["extends"](KIND, function Post(type, what, docs, location) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Operation = __webpack_require__(4);\n\nvar KIND = "pre";\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\n\nmodule.exports = Operation["extends"](KIND, function Pre(type, what, docs, location) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "print";\n/**\n * Outputs\n * @constructor Print\n * @extends {Expression}\n */\n\nmodule.exports = Expression["extends"](KIND, function Print(expression, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n});\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Block = __webpack_require__(7);\n\nvar KIND = "program";\n/**\n * The main program node\n * @constructor Program\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Doc[]?} comments\n * @property {String[]?} tokens\n */\n\nmodule.exports = Block["extends"](KIND, function Program(children, errors, comments, tokens, docs, location) {\n  Block.apply(this, [KIND, children, docs, location]);\n  this.errors = errors;\n\n  if (comments) {\n    this.comments = comments;\n  }\n\n  if (tokens) {\n    this.tokens = tokens;\n  }\n});\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "property";\n/**\n * Defines a class property\n * @constructor Property\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n */\n\nmodule.exports = Statement["extends"](KIND, function Property(name, value, nullable, type, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.value = value;\n  this.nullable = nullable;\n  this.type = type;\n});\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Lookup = __webpack_require__(8);\n\nvar KIND = "propertylookup";\n/**\n * Lookup to an object property\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\n\nmodule.exports = Lookup["extends"](KIND, function PropertyLookup(what, offset, docs, location) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "propertystatement";\nvar IS_UNDEFINED = "";\nvar IS_PUBLIC = "public";\nvar IS_PROTECTED = "protected";\nvar IS_PRIVATE = "private";\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @extends {Statement}\n * @property {Property[]} properties\n */\n\nvar PropertyStatement = Statement["extends"](KIND, function PropertyStatement(kind, properties, flags, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.properties = properties;\n  this.parseFlags(flags);\n});\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\n\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nmodule.exports = PropertyStatement;\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "retif";\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\n\nmodule.exports = Expression["extends"](KIND, function RetIf(test, trueExpr, falseExpr, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.trueExpr = trueExpr;\n  this.falseExpr = falseExpr;\n});\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "return";\n/**\n * A continue statement\n * @constructor Return\n * @extends {Statement}\n * @property {Expression|null} expr\n */\n\nmodule.exports = Statement["extends"](KIND, function Return(expr, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.expr = expr;\n});\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Reference = __webpack_require__(6);\n\nvar KIND = "selfreference";\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @extends {Reference}\n */\n\nvar SelfReference = Reference["extends"](KIND, function SelfReference(raw, docs, location) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = SelfReference;\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "silent";\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @extends {Expression}\n * @property {Expression} expr\n */\n\nmodule.exports = Expression["extends"](KIND, function Silent(expr, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expr = expr;\n});\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "static";\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\n\nmodule.exports = Statement["extends"](KIND, function Static(variables, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "staticvariable";\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\n\nmodule.exports = Node["extends"](KIND, function StaticVariable(variable, defaultValue, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.variable = variable;\n  this.defaultValue = defaultValue;\n});\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Lookup = __webpack_require__(8);\n\nvar KIND = "staticlookup";\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @extends {Lookup}\n */\n\nmodule.exports = Lookup["extends"](KIND, function StaticLookup(what, offset, docs, location) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Reference = __webpack_require__(6);\n\nvar KIND = "staticreference";\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @extends {Reference}\n */\n\nvar StaticReference = Reference["extends"](KIND, function StaticReference(raw, docs, location) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = StaticReference;\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Literal = __webpack_require__(3);\n\nvar KIND = "string";\n/**\n * Defines a string (simple ou double quoted) - chars are already escaped\n * @constructor String\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n */\n\nmodule.exports = Literal["extends"](KIND, function String(isDoubleQuote, value, unicode, raw, docs, location) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.unicode = unicode;\n  this.isDoubleQuote = isDoubleQuote;\n});\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "switch";\n/**\n * Defines a switch statement\n * @constructor Switch\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\n\nmodule.exports = Statement["extends"](KIND, function Switch(test, body, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "throw";\n/**\n * Defines a throw statement\n * @constructor Throw\n * @extends {Statement}\n * @property {Expression} what\n */\n\nmodule.exports = Statement["extends"](KIND, function Throw(what, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Declaration = __webpack_require__(5);\n\nvar KIND = "trait";\n/**\n * A trait definition\n * @constructor Trait\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\n\nmodule.exports = Declaration["extends"](KIND, function Trait(name, body, docs, location) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.body = body;\n});\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "traitalias";\nvar IS_UNDEFINED = "";\nvar IS_PUBLIC = "public";\nvar IS_PROTECTED = "protected";\nvar IS_PRIVATE = "private";\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\n\nmodule.exports = Node["extends"](KIND, function TraitAlias(trait, method, as, flags, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.as = as;\n  this.visibility = IS_UNDEFINED;\n\n  if (flags) {\n    if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n  }\n});\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "traitprecedence";\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\n\nmodule.exports = Node["extends"](KIND, function TraitPrecedence(trait, method, instead, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.instead = instead;\n});\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Node = __webpack_require__(2);\n\nvar KIND = "traituse";\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\n\nmodule.exports = Node["extends"](KIND, function TraitUse(traits, adaptations, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.traits = traits;\n  this.adaptations = adaptations;\n});\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "try";\n/**\n * Defines a try statement\n * @constructor Try\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} allways\n */\n\nmodule.exports = Statement["extends"](KIND, function Try(body, catches, always, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.body = body;\n  this.catches = catches;\n  this.always = always;\n});\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Reference = __webpack_require__(6);\n\nvar KIND = "typereference";\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @extends {Reference}\n * @property {string} name\n */\n\nvar TypeReference = Reference["extends"](KIND, function TypeReference(name, raw, docs, location) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.raw = raw;\n});\nTypeReference.types = ["int", "float", "string", "bool", "object", "array", "callable", "iterable", "void"];\nmodule.exports = TypeReference;\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Operation = __webpack_require__(4);\n\nvar KIND = "unary";\n/**\n * Unary operations\n * @constructor Unary\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} what\n */\n\nmodule.exports = Operation["extends"](KIND, function Unary(type, what, docs, location) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "unset";\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @extends {Statement}\n */\n\nmodule.exports = Statement["extends"](KIND, function Unset(variables, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "usegroup";\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @extends {Statement}\n * @property {String|null} name\n * @property {String|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\n\nmodule.exports = Statement["extends"](KIND, function UseGroup(name, type, items, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.type = type;\n  this.items = items;\n});\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "useitem";\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @extends {Statement}\n * @property {String} name\n * @property {String|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\n\nvar UseItem = Statement["extends"](KIND, function UseItem(name, alias, type, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.alias = alias;\n  this.type = type;\n});\n/**\n * Importing a constant\n * @constant {String} TYPE_CONST\n */\n\nUseItem.TYPE_CONST = "const";\n/**\n * Importing a function\n * @constant {String} TYPE_FUNC\n */\n\nUseItem.TYPE_FUNCTION = "function";\nmodule.exports = UseItem;\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "variable";\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  "kind": "variable",\n *  "name": "foo",\n *  "curly": false\n * }\n * @property {String|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\n\nmodule.exports = Expression["extends"](KIND, function Variable(name, curly, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.curly = curly || false;\n});\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "variadic";\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor variadic\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\n\nmodule.exports = Expression["extends"](KIND, function variadic(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Statement = __webpack_require__(0);\n\nvar KIND = "while";\n/**\n * Defines a while statement\n * @constructor While\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n * @property {boolean} shortForm\n */\n\nmodule.exports = Statement["extends"](KIND, function While(test, body, shortForm, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "yield";\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @extends {Expression}\n * @property {Expression|Null} value\n * @property {Expression|Null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\n\nmodule.exports = Expression["extends"](KIND, function Yield(value, key, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.value = value;\n  this.key = key;\n});\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __webpack_require__) {\n\n"use strict";\n/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\n\nvar Expression = __webpack_require__(1);\n\nvar KIND = "yieldfrom";\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\n\nmodule.exports = Expression["extends"](KIND, function YieldFrom(value, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.value = value;\n});\n\n/***/ })\n/******/ ])["default"];\n});\n\n//# sourceURL=webpack:///./node_modules/php-parser/dist/php-parser.js?')}}]);