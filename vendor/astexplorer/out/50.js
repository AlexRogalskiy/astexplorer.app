(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __webpack_require__(\"./node_modules/os-browserify/browser.js\");\nconst types_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction noopReporter(err) {\n    throw new Error(`${err.type}: Line: ${err.loc.start.line}: ${err.message}`);\n}\nexports.noopReporter = noopReporter;\nfunction padLeft(num, str) {\n    while (str.length < num) {\n        str = ' ' + str;\n    }\n    return str;\n}\nfunction indicatorForLocaction(loc) {\n    const indicator = padLeft(loc.start.column, '^');\n    return indicator;\n}\nfunction padStart(length, str) {\n    let paddedStr = str;\n    while (length--) {\n        paddedStr = ' ' + paddedStr;\n    }\n    return paddedStr;\n}\nfunction errorType(type) {\n    switch (type) {\n        case types_1.ErrorType.ParseError:\n            return 'Parse Error:';\n        case types_1.ErrorType.ScanError:\n            return 'Scan Error:';\n    }\n}\nfunction createDebugger(source) {\n    const sourceLines = source.split(os.EOL);\n    const formattedErrors = [];\n    const rawErrors = [];\n    function getSourceLine(lineNumber) {\n        return sourceLines[lineNumber - 1];\n    }\n    function formatError(err) {\n        return {\n            sourceLine: getSourceLine(err.loc.start.line),\n            locIndicator: indicatorForLocaction(err.loc),\n            line: err.loc.start.line,\n            column: err.loc.start.column,\n            message: err.message,\n            type: err.type,\n        };\n    }\n    return {\n        hasError() {\n            return formattedErrors.length > 0;\n        },\n        getErrors() {\n            return rawErrors;\n        },\n        getFormattedErrors() {\n            return formattedErrors;\n        },\n        report(err) {\n            const formattedError = formatError(err);\n            formattedErrors.push(formattedError);\n            rawErrors.push(err);\n        },\n        print() {\n            console.log(`Parse Failure: ${formattedErrors.length} errors found:`);\n            console.log();\n            formattedErrors.forEach((err) => {\n                const prefix = `${err.line} | `;\n                console.log();\n                console.log(`${errorType(err.type)}\\n`);\n                console.log(`Message: ${err.message}`);\n                console.log();\n                console.log(`${prefix}${err.sourceLine}`);\n                console.log(padStart(prefix.length, err.locIndicator));\n                console.log();\n            });\n        },\n    };\n}\nexports.createDebugger = createDebugger;\n//# sourceMappingURL=debugger.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js?")},"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst types_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/types.js");\nfunction createParseError(message, loc) {\n    return {\n        type: types_1.ErrorType.ParseError,\n        message,\n        loc,\n    };\n}\nexports.createParseError = createParseError;\nfunction createScanError(message, loc) {\n    return {\n        type: types_1.ErrorType.ScanError,\n        message,\n        loc,\n    };\n}\nexports.createScanError = createScanError;\nfunction createTextLocation(start, end) {\n    return { start, end };\n}\nexports.createTextLocation = createTextLocation;\nfunction createTextPosition(line, column, index) {\n    return { line, column, index };\n}\nexports.createTextPosition = createTextPosition;\nfunction createToken(type, text, loc) {\n    return { type, text, loc };\n}\nexports.createToken = createToken;\nfunction createIdentifier(value, loc, annotations) {\n    return { type: types_1.SyntaxType.Identifier, value, loc, annotations };\n}\nexports.createIdentifier = createIdentifier;\nfunction creataePropertyAssignment(name, initializer, loc) {\n    return {\n        type: types_1.SyntaxType.PropertyAssignment,\n        name,\n        initializer,\n        loc,\n    };\n}\nexports.creataePropertyAssignment = creataePropertyAssignment;\nfunction createFieldDefinition(name, fieldID, requiredness, fieldType, loc, defaultValue = null, annotations, comments = []) {\n    return {\n        type: types_1.SyntaxType.FieldDefinition,\n        name,\n        fieldID,\n        requiredness,\n        fieldType,\n        defaultValue,\n        annotations,\n        comments,\n        loc,\n    };\n}\nexports.createFieldDefinition = createFieldDefinition;\nfunction createFieldID(value, loc) {\n    return {\n        type: types_1.SyntaxType.FieldID,\n        value,\n        loc,\n    };\n}\nexports.createFieldID = createFieldID;\nfunction createStructDefinition(name, fields, loc, comments = []) {\n    return {\n        type: types_1.SyntaxType.StructDefinition,\n        name,\n        fields,\n        comments,\n        loc,\n    };\n}\nexports.createStructDefinition = createStructDefinition;\nfunction createStringLiteral(value, loc) {\n    return {\n        type: types_1.SyntaxType.StringLiteral,\n        value,\n        loc,\n    };\n}\nexports.createStringLiteral = createStringLiteral;\nfunction createIntegerLiteral(value, loc) {\n    return { type: types_1.SyntaxType.IntegerLiteral, value, loc };\n}\nexports.createIntegerLiteral = createIntegerLiteral;\nfunction createHexLiteral(value, loc) {\n    return { type: types_1.SyntaxType.HexLiteral, value, loc };\n}\nexports.createHexLiteral = createHexLiteral;\nfunction createFloatLiteral(value, loc) {\n    return { type: types_1.SyntaxType.FloatLiteral, value, loc };\n}\nexports.createFloatLiteral = createFloatLiteral;\nfunction createExponentialLiteral(value, loc) {\n    return { type: types_1.SyntaxType.ExponentialLiteral, value, loc };\n}\nexports.createExponentialLiteral = createExponentialLiteral;\nfunction createIntConstant(value, loc) {\n    return { type: types_1.SyntaxType.IntConstant, value, loc };\n}\nexports.createIntConstant = createIntConstant;\nfunction createDoubleConstant(value, loc) {\n    return { type: types_1.SyntaxType.DoubleConstant, value, loc };\n}\nexports.createDoubleConstant = createDoubleConstant;\nfunction createBooleanLiteral(value, loc) {\n    return { type: types_1.SyntaxType.BooleanLiteral, value, loc };\n}\nexports.createBooleanLiteral = createBooleanLiteral;\nfunction createKeywordFieldType(type, loc, annotations) {\n    return { type, loc, annotations };\n}\nexports.createKeywordFieldType = createKeywordFieldType;\nfunction createMapFieldType(keyType, valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.MapType,\n        keyType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createMapFieldType = createMapFieldType;\nfunction createSetFieldType(valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.SetType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createSetFieldType = createSetFieldType;\nfunction createListFieldType(valueType, loc, annotations) {\n    return {\n        type: types_1.SyntaxType.ListType,\n        valueType,\n        loc,\n        annotations,\n    };\n}\nexports.createListFieldType = createListFieldType;\nfunction createConstMap(properties, loc) {\n    return {\n        type: types_1.SyntaxType.ConstMap,\n        properties,\n        loc,\n    };\n}\nexports.createConstMap = createConstMap;\nfunction createConstList(elements, loc) {\n    return {\n        type: types_1.SyntaxType.ConstList,\n        elements,\n        loc,\n    };\n}\nexports.createConstList = createConstList;\n//# sourceMappingURL=factory.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/factory.js?')},"./node_modules/@creditkarma/thrift-parser/dist/main/index.js":function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(process) {\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\nconst fs = __webpack_require__("./node_modules/node-libs-browser/mock/empty.js");\nconst path = __webpack_require__("./node_modules/path-browserify/index.js");\nconst debugger_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js");\nconst organizer_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js");\nconst parser_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/parser.js");\nconst scanner_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js");\nconst types_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/types.js");\n__export(__webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/types.js"));\n__export(__webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/factory.js"));\nvar scanner_2 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js");\nexports.createScanner = scanner_2.createScanner;\nvar parser_2 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/parser.js");\nexports.createParser = parser_2.createParser;\nexports.defaultOptions = {\n    fastFail: false,\n    rootDir: \'.\',\n    outDir: \'.\',\n    files: [],\n    organize: true,\n};\nfunction parseFiles(options = {}) {\n    const mergedOptions = Object.assign({}, exports.defaultOptions, options);\n    return mergedOptions.files.map((file) => {\n        const filePath = path.resolve(process.cwd(), mergedOptions.rootDir, file);\n        const content = fs.readFileSync(filePath, \'utf-8\');\n        return parse(content, mergedOptions);\n    });\n}\nexports.parseFiles = parseFiles;\nfunction parse(source, options = {}) {\n    const mergedOptions = Object.assign({}, exports.defaultOptions, options);\n    const debug = debugger_1.createDebugger(source);\n    const scanner = scanner_1.createScanner(source, handleError);\n    const tokens = scanner.scan();\n    const parser = parser_1.createParser(tokens, handleError);\n    const intermediate = parser.parse();\n    const thrift = mergedOptions.organize\n        ? organizer_1.organize(intermediate)\n        : intermediate;\n    /**\n     * This is a safe handler for errors that allows the parser and scanner to recover to a\n     * reasonable state after an error and continue with the parse. If an error occurs we will\n     * not return any output, but using this allows us to catch more errors and report them to\n     * the user at once instead of the work flow of find error -> fix error, find error -> fix error.\n     *\n     * @param err\n     */\n    function handleError(err) {\n        debug.report(err);\n        if (mergedOptions.fastFail) {\n            debug.print();\n            throw new Error(err.message);\n        }\n        else {\n            switch (err.type) {\n                case types_1.ErrorType.ParseError:\n                    parser.synchronize();\n                    break;\n                case types_1.ErrorType.ScanError:\n                    scanner.syncronize();\n                    break;\n            }\n        }\n    }\n    if (debug.hasError()) {\n        debug.print();\n        return {\n            type: types_1.SyntaxType.ThriftErrors,\n            errors: debug.getErrors(),\n        };\n    }\n    else {\n        return thrift;\n    }\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/process/browser.js")))\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/index.js?')},"./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst types_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/types.js");\nexports.KEYWORDS = {\n    namespace: types_1.SyntaxType.NamespaceKeyword,\n    include: types_1.SyntaxType.IncludeKeyword,\n    cpp_include: types_1.SyntaxType.CppIncludeKeyword,\n    const: types_1.SyntaxType.ConstKeyword,\n    struct: types_1.SyntaxType.StructKeyword,\n    service: types_1.SyntaxType.ServiceKeyword,\n    extends: types_1.SyntaxType.ExtendsKeyword,\n    throws: types_1.SyntaxType.ThrowsKeyword,\n    typedef: types_1.SyntaxType.TypedefKeyword,\n    union: types_1.SyntaxType.UnionKeyword,\n    enum: types_1.SyntaxType.EnumKeyword,\n    senum: types_1.SyntaxType.SenumKeyword,\n    list: types_1.SyntaxType.ListKeyword,\n    set: types_1.SyntaxType.SetKeyword,\n    map: types_1.SyntaxType.MapKeyword,\n    double: types_1.SyntaxType.DoubleKeyword,\n    i8: types_1.SyntaxType.I8Keyword,\n    i16: types_1.SyntaxType.I16Keyword,\n    i32: types_1.SyntaxType.I32Keyword,\n    i64: types_1.SyntaxType.I64Keyword,\n    exception: types_1.SyntaxType.ExceptionKeyword,\n    binary: types_1.SyntaxType.BinaryKeyword,\n    bool: types_1.SyntaxType.BoolKeyword,\n    byte: types_1.SyntaxType.ByteKeyword,\n    required: types_1.SyntaxType.RequiredKeyword,\n    optional: types_1.SyntaxType.OptionalKeyword,\n    string: types_1.SyntaxType.StringKeyword,\n    true: types_1.SyntaxType.TrueKeyword,\n    false: types_1.SyntaxType.FalseKeyword,\n    void: types_1.SyntaxType.VoidKeyword,\n    oneway: types_1.SyntaxType.OnewayKeyword,\n};\n//# sourceMappingURL=keywords.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js?')},"./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst types_1 = __webpack_require__("./node_modules/@creditkarma/thrift-parser/dist/main/types.js");\nfunction organize(raw) {\n    const namespaces = [];\n    const includes = [];\n    const constants = [];\n    const enums = [];\n    const typedefs = [];\n    const structs = [];\n    const unions = [];\n    const exceptions = [];\n    const services = [];\n    for (const next of raw.body) {\n        switch (next.type) {\n            case types_1.SyntaxType.NamespaceDefinition:\n                namespaces.push(next);\n                break;\n            case types_1.SyntaxType.IncludeDefinition:\n                includes.push(next);\n                break;\n            case types_1.SyntaxType.CppIncludeDefinition:\n                // We\'re not generating C++\n                break;\n            case types_1.SyntaxType.ConstDefinition:\n                constants.push(next);\n                break;\n            case types_1.SyntaxType.EnumDefinition:\n                enums.push(next);\n                break;\n            case types_1.SyntaxType.StructDefinition:\n                structs.push(next);\n                break;\n            case types_1.SyntaxType.UnionDefinition:\n                unions.push(next);\n                break;\n            case types_1.SyntaxType.ExceptionDefinition:\n                exceptions.push(next);\n                break;\n            case types_1.SyntaxType.TypedefDefinition:\n                typedefs.push(next);\n                break;\n            case types_1.SyntaxType.ServiceDefinition:\n                services.push(next);\n                break;\n            default:\n                const msg = next;\n                throw new Error(`Unexpected statement type found: ${msg}`);\n        }\n    }\n    return {\n        type: types_1.SyntaxType.ThriftDocument,\n        body: [\n            ...namespaces,\n            ...includes,\n            ...enums,\n            ...typedefs,\n            ...constants,\n            ...structs,\n            ...unions,\n            ...exceptions,\n            ...services,\n        ],\n        tokens: raw.tokens,\n    };\n}\nexports.organize = organize;\n//# sourceMappingURL=organizer.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/organizer.js?')},"./node_modules/@creditkarma/thrift-parser/dist/main/parser.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst types_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nconst factory_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\");\nconst debugger_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\");\nfunction isStatementBeginning(token) {\n    switch (token.type) {\n        case types_1.SyntaxType.NamespaceKeyword:\n        case types_1.SyntaxType.IncludeKeyword:\n        case types_1.SyntaxType.ConstKeyword:\n        case types_1.SyntaxType.StructKeyword:\n        case types_1.SyntaxType.UnionKeyword:\n        case types_1.SyntaxType.ExceptionKeyword:\n        case types_1.SyntaxType.ServiceKeyword:\n        case types_1.SyntaxType.TypedefKeyword:\n        case types_1.SyntaxType.EnumKeyword:\n            return true;\n        default:\n            return false;\n    }\n}\nclass ParseError extends Error {\n    constructor(msg, loc) {\n        super(msg);\n        this.message = msg;\n        this.loc = loc;\n    }\n}\nfunction createParser(tokens, report = debugger_1.noopReporter) {\n    let comments = [];\n    let currentIndex = 0;\n    // PUBLIC\n    function parse() {\n        const thrift = {\n            type: types_1.SyntaxType.ThriftDocument,\n            body: [],\n        };\n        while (!isAtEnd()) {\n            try {\n                const statement = parseStatement();\n                if (statement !== null) {\n                    thrift.body.push(statement);\n                }\n            }\n            catch (e) {\n                report(factory_1.createParseError(e.message, e.loc));\n            }\n        }\n        return thrift;\n    }\n    // Finds the beginning of the next statement so we can continue parse after error.\n    function synchronize() {\n        while (!isAtEnd() && !isStatementBeginning(currentToken())) {\n            advance();\n        }\n    }\n    function parseStatement() {\n        const next = currentToken();\n        // All Thrift statements must start with one of these types\n        switch (next.type) {\n            case types_1.SyntaxType.NamespaceKeyword:\n                return parseNamespace();\n            case types_1.SyntaxType.IncludeKeyword:\n                return parseInclude();\n            case types_1.SyntaxType.ConstKeyword:\n                return parseConst();\n            case types_1.SyntaxType.StructKeyword:\n                return parseStruct();\n            case types_1.SyntaxType.UnionKeyword:\n                return parseUnion();\n            case types_1.SyntaxType.ExceptionKeyword:\n                return parseException();\n            case types_1.SyntaxType.ServiceKeyword:\n                return parseService();\n            case types_1.SyntaxType.TypedefKeyword:\n                return parseTypedef();\n            case types_1.SyntaxType.EnumKeyword:\n                return parseEnum();\n            case types_1.SyntaxType.CommentBlock:\n            case types_1.SyntaxType.CommentLine:\n                consumeComments();\n                return null;\n            default:\n                throw reportError(`Invalid start to Thrift statement ${next.text}`);\n        }\n    }\n    // IncludeDefinition → 'include' StringLiteral\n    function parseInclude() {\n        const _keywordToken = consume(types_1.SyntaxType.IncludeKeyword);\n        const keywordToken = requireValue(_keywordToken, `'indcluded' keyword expected`);\n        const _pathToken = consume(types_1.SyntaxType.StringLiteral);\n        const pathToken = requireValue(_pathToken, `Include statement must include a path as string literal`);\n        return {\n            type: types_1.SyntaxType.IncludeDefinition,\n            path: factory_1.createStringLiteral(pathToken.text, pathToken.loc),\n            comments: getComments(),\n            loc: factory_1.createTextLocation(keywordToken.loc.start, pathToken.loc.end),\n        };\n    }\n    // ServiceDefinition → 'service' Identifier ( 'extends' Identifier )? '{' Function* '} Annotations?'\n    function parseService() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.ServiceKeyword);\n        const keywordToken = requireValue(_keywordToken, `Unable to find service keyword for service`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find identifier for service`);\n        const extendsId = parseExtends();\n        const _openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        const openBrace = requireValue(_openBrace, `Expected opening curly brace`);\n        const functions = parseFunctions();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Expected closing curly brace`);\n        const annotations = parseAnnotations();\n        const location = factory_1.createTextLocation(keywordToken.loc.start, closeBrace.loc.end);\n        return {\n            type: types_1.SyntaxType.ServiceDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            extends: extendsId,\n            functions,\n            annotations,\n            comments: leadingComments,\n            loc: location,\n        };\n    }\n    function parseExtends() {\n        if (checkText('extends')) {\n            const _keywordToken = consume(types_1.SyntaxType.ExtendsKeyword);\n            const keywordToken = requireValue(_keywordToken, `'extends keyword expected`);\n            const _nameToken = consume(types_1.SyntaxType.Identifier);\n            const nameToken = requireValue(_nameToken, `Identifier expected after 'extends' keyword`);\n            return factory_1.createIdentifier(nameToken.text, factory_1.createTextLocation(keywordToken.loc.start, nameToken.loc.end));\n        }\n        else {\n            return null;\n        }\n    }\n    function parseFunctions() {\n        const functions = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                functions.push(parseFunction());\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return functions;\n    }\n    // Function → 'oneway'? FunctionType Identifier '(' Field* ')' Throws? Annotations? ListSeparator?\n    function parseFunction() {\n        const leadingComments = getComments();\n        const onewayToken = consume(types_1.SyntaxType.OnewayKeyword);\n        const returnType = parseFunctionType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find function identifier`);\n        const params = parseParameterFields();\n        const throws = parseThrows();\n        const annotations = parseAnnotations();\n        const listSeparator = readListSeparator();\n        const endLoc = listSeparator !== null\n            ? listSeparator.loc\n            : throws !== null\n                ? throws.loc\n                : params.loc;\n        return {\n            type: types_1.SyntaxType.FunctionDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            returnType,\n            fields: params.fields,\n            throws: throws !== null ? throws.fields : [],\n            annotations,\n            comments: leadingComments,\n            oneway: onewayToken !== null,\n            modifiers: onewayToken !== null ? [onewayToken] : [],\n            loc: {\n                start: returnType.loc.start,\n                end: endLoc.end,\n            },\n        };\n    }\n    function parseParameterFields() {\n        const fields = [];\n        const _openParen = consume(types_1.SyntaxType.LeftParenToken);\n        const openParen = requireValue(_openParen, `Opening paren expected to start list of fields`);\n        while (!check(types_1.SyntaxType.RightParenToken)) {\n            readListSeparator();\n            fields.push(parseField());\n            if (isStatementBeginning(currentToken())) {\n                throw reportError(`Closing paren ')' expected, but new statement found`);\n            }\n            else if (check(types_1.SyntaxType.EOF)) {\n                throw reportError(`Closing paren ')' expected but reached end of file`);\n            }\n        }\n        const _closeParen = consume(types_1.SyntaxType.RightParenToken);\n        const closeParen = requireValue(_closeParen, `Closing paren expected to end list of fields`);\n        return {\n            type: types_1.SyntaxType.ParametersDefinition,\n            fields,\n            loc: {\n                start: openParen.loc.start,\n                end: closeParen.loc.end,\n            },\n        };\n    }\n    // Throws → 'throws' '(' Field* ')'\n    function parseThrows() {\n        if (check(types_1.SyntaxType.ThrowsKeyword)) {\n            const _keywordToken = consume(types_1.SyntaxType.ThrowsKeyword);\n            const keywordToken = requireValue(_keywordToken, `'throws' keyword expected`);\n            const params = parseParameterFields();\n            return {\n                type: types_1.SyntaxType.ThrowsDefinition,\n                fields: params.fields,\n                loc: {\n                    start: keywordToken.loc.start,\n                    end: params.loc.end,\n                },\n            };\n        }\n        return null;\n    }\n    // Namespace → 'namespace' ( NamespaceScope Identifier )\n    function parseNamespace() {\n        const _keywordToken = consume(types_1.SyntaxType.NamespaceKeyword);\n        const keywordToken = requireValue(_keywordToken, `'namespace' keyword expected`);\n        const _scopeToken = consume(types_1.SyntaxType.Identifier);\n        const scopeToken = requireValue(_scopeToken, `Unable to find scope identifier for namespace`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find name identifier for namespace`);\n        return {\n            type: types_1.SyntaxType.NamespaceDefinition,\n            scope: factory_1.createIdentifier(scopeToken.text, scopeToken.loc),\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            comments: getComments(),\n            loc: factory_1.createTextLocation(keywordToken.loc.start, nameToken.loc.end),\n        };\n    }\n    // ConstDefinition → 'const' FieldType Identifier '=' ConstValue Annotations? ListSeparator?\n    function parseConst() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.ConstKeyword);\n        const keywordToken = requireValue(_keywordToken, `'const' keyword expected`);\n        const fieldType = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Const definition must have a name`);\n        const _initializer = parseValueAssignment();\n        const initializer = requireValue(_initializer, `Const must be initialized to a value`);\n        const annotations = parseAnnotations();\n        readListSeparator();\n        return {\n            type: types_1.SyntaxType.ConstDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fieldType,\n            initializer,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: initializer.loc.end,\n            },\n        };\n    }\n    function parseValueAssignment() {\n        if (check(types_1.SyntaxType.EqualToken)) {\n            advance();\n            return parseValue();\n        }\n        return null;\n    }\n    // Annotations → '(' Annotation* ')'\n    function parseAnnotations() {\n        if (check(types_1.SyntaxType.LeftParenToken)) {\n            const annotations = [];\n            const startToken = advance();\n            while (!check(types_1.SyntaxType.RightParenToken)) {\n                annotations.push(parseAnnotation());\n            }\n            const endToken = advance();\n            return {\n                annotations,\n                type: types_1.SyntaxType.Annotations,\n                loc: factory_1.createTextLocation(startToken.loc.start, endToken.loc.end),\n            };\n        }\n        return undefined;\n    }\n    // Annotation → Identifier ('=' StringLiteral)? ListSeparator?\n    function parseAnnotation() {\n        const nameToken = requireValue(consume(types_1.SyntaxType.Identifier), `Annotation must have a name`);\n        let valueToken;\n        if (check(types_1.SyntaxType.EqualToken)) {\n            advance();\n            valueToken = requireValue(consume(types_1.SyntaxType.StringLiteral), `Annotation must have a value`);\n        }\n        readListSeparator();\n        return {\n            type: types_1.SyntaxType.Annotation,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            value: valueToken\n                ? factory_1.createStringLiteral(valueToken.text, valueToken.loc)\n                : undefined,\n            loc: factory_1.createTextLocation(nameToken.loc.start, (valueToken || nameToken).loc.end),\n        };\n    }\n    // TypedefDefinition → 'typedef' FieldType Identifier\n    function parseTypedef() {\n        const _keywordToken = consume(types_1.SyntaxType.TypedefKeyword);\n        const keywordToken = requireValue(_keywordToken, `'typedef' keyword expected`);\n        const type = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Typedef is expected to have name and none found`);\n        const leadingComments = getComments();\n        const annotations = parseAnnotations();\n        return {\n            type: types_1.SyntaxType.TypedefDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            definitionType: type,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: nameToken.loc.end,\n            },\n        };\n    }\n    // EnumDefinition → 'enum' Identifier '{' EnumMember* '} Annotations?'\n    function parseEnum() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.EnumKeyword);\n        const keywordToken = requireValue(_keywordToken, `'enum' keyword expected`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Expected identifier for enum definition`);\n        const openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        requireValue(openBrace, `Expected opening brace`);\n        const members = parseEnumMembers();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Expected closing brace`);\n        const annotations = parseAnnotations();\n        const loc = {\n            start: keywordToken.loc.start,\n            end: closeBrace.loc.end,\n        };\n        return {\n            type: types_1.SyntaxType.EnumDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            members,\n            annotations,\n            comments: leadingComments,\n            loc,\n        };\n    }\n    function parseEnumMembers() {\n        const members = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                members.push(parseEnumMember());\n                // consume list separator if there is one\n                readListSeparator();\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return members;\n    }\n    // EnumMember → (Identifier ('=' IntConstant)? Annotations? ListSeparator?)*\n    function parseEnumMember() {\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `EnumMember must have identifier`);\n        let loc = null;\n        let initializer = null;\n        if (consume(types_1.SyntaxType.EqualToken) !== null) {\n            const _numToken = consume(types_1.SyntaxType.IntegerLiteral, types_1.SyntaxType.HexLiteral);\n            const numToken = requireValue(_numToken, `Equals token \"=\" must be followed by an Integer`);\n            initializer = parseIntValue(numToken);\n            loc = factory_1.createTextLocation(nameToken.loc.start, initializer.loc.end);\n        }\n        else {\n            loc = factory_1.createTextLocation(nameToken.loc.start, nameToken.loc.end);\n        }\n        const annotations = parseAnnotations();\n        return {\n            type: types_1.SyntaxType.EnumMember,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            initializer,\n            annotations,\n            comments: getComments(),\n            loc,\n        };\n    }\n    // StructLike → ('struct' | 'union' | 'exception') Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseStructLikeInterface() {\n        const leadingComments = getComments();\n        const _keywordToken = consume(types_1.SyntaxType.StructKeyword, types_1.SyntaxType.UnionKeyword, types_1.SyntaxType.ExceptionKeyword);\n        const keywordToken = requireValue(_keywordToken, `'struct | union | exception' expected`);\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Struct-like must have an identifier`);\n        const openBrace = consume(types_1.SyntaxType.LeftBraceToken);\n        requireValue(openBrace, `Struct-like body must begin with opening curly brace '{'`);\n        const fields = parseFields();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Struct-like body must end with a closing curly brace '}'`);\n        const annotations = parseAnnotations();\n        return {\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fields,\n            annotations,\n            comments: leadingComments,\n            loc: {\n                start: keywordToken.loc.start,\n                end: closeBrace.loc.end,\n            },\n        };\n    }\n    // StructDefinition → 'struct' Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseStruct() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.StructDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields,\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    // UnioinDefinition → 'union' Identifier 'xsd_all'? '{' Field* '} Annotations?'\n    function parseUnion() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.UnionDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields.map((next) => {\n                // As per the Thrift spec, all union fields are optional\n                next.requiredness = 'optional';\n                return next;\n            }),\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    // ExceptionDefinition → 'exception' Identifier '{' Field* '} Annotations?'\n    function parseException() {\n        const parsedData = parseStructLikeInterface();\n        return {\n            type: types_1.SyntaxType.ExceptionDefinition,\n            name: parsedData.name,\n            fields: parsedData.fields,\n            annotations: parsedData.annotations,\n            comments: parsedData.comments,\n            loc: parsedData.loc,\n        };\n    }\n    function parseFields() {\n        const fields = [];\n        while (!check(types_1.SyntaxType.RightBraceToken)) {\n            if (check(types_1.SyntaxType.CommentBlock, types_1.SyntaxType.CommentLine)) {\n                advance();\n            }\n            else {\n                fields.push(parseField());\n                if (isStatementBeginning(currentToken())) {\n                    throw reportError(`Closing curly brace expected, but new statement found`);\n                }\n                else if (check(types_1.SyntaxType.EOF)) {\n                    throw reportError(`Closing curly brace expected but reached end of file`);\n                }\n            }\n        }\n        return fields;\n    }\n    // Field → FieldID? FieldReq? FieldType Identifier ('= ConstValue)? XsdFieldOptions Annotations? ListSeparator?\n    function parseField() {\n        const startLoc = currentToken().loc;\n        const fieldID = parseFieldId();\n        const fieldRequired = parserequireValuedness();\n        const fieldType = parseFieldType();\n        const _nameToken = consume(types_1.SyntaxType.Identifier);\n        const nameToken = requireValue(_nameToken, `Unable to find identifier for field`);\n        const defaultValue = parseValueAssignment();\n        const annotations = parseAnnotations();\n        const listSeparator = readListSeparator();\n        const endLoc = listSeparator !== null\n            ? listSeparator.loc\n            : defaultValue !== null\n                ? defaultValue.loc\n                : nameToken.loc;\n        const location = factory_1.createTextLocation(startLoc.start, endLoc.end);\n        return {\n            type: types_1.SyntaxType.FieldDefinition,\n            name: factory_1.createIdentifier(nameToken.text, nameToken.loc),\n            fieldID,\n            fieldType,\n            requiredness: fieldRequired,\n            defaultValue,\n            comments: getComments(),\n            annotations,\n            loc: location,\n        };\n    }\n    // ListSeparator → ',' | ';'\n    function readListSeparator() {\n        if (check(types_1.SyntaxType.CommaToken, types_1.SyntaxType.SemicolonToken)) {\n            return advance();\n        }\n        return null;\n    }\n    // FieldRequired → 'required' | 'optional'\n    function parserequireValuedness() {\n        const current = currentToken();\n        if (current.text === 'required' || current.text === 'optional') {\n            advance();\n            return current.text;\n        }\n        return null;\n    }\n    // FieldID → IntConstant ':'\n    function parseFieldId() {\n        if (currentToken().type === types_1.SyntaxType.IntegerLiteral &&\n            peek().type === types_1.SyntaxType.ColonToken) {\n            const fieldIDToken = consume(types_1.SyntaxType.IntegerLiteral);\n            const colonToken = consume(types_1.SyntaxType.ColonToken);\n            // return value of number token\n            return factory_1.createFieldID(parseInt(fieldIDToken.text, 10), factory_1.createTextLocation(fieldIDToken.loc.start, colonToken.loc.end));\n        }\n        else {\n            return null;\n        }\n    }\n    // ConstValue → Literal | ConstMap | ConstList\n    function parseValue() {\n        const next = advance();\n        switch (next.type) {\n            case types_1.SyntaxType.Identifier:\n                return factory_1.createIdentifier(next.text, next.loc);\n            case types_1.SyntaxType.StringLiteral:\n                return factory_1.createStringLiteral(next.text, next.loc);\n            case types_1.SyntaxType.IntegerLiteral:\n            case types_1.SyntaxType.HexLiteral:\n                return parseIntValue(next);\n            case types_1.SyntaxType.FloatLiteral:\n            case types_1.SyntaxType.ExponentialLiteral:\n                return parseDoubleValue(next);\n            case types_1.SyntaxType.TrueKeyword:\n                return factory_1.createBooleanLiteral(true, next.loc);\n            case types_1.SyntaxType.FalseKeyword:\n                return factory_1.createBooleanLiteral(false, next.loc);\n            case types_1.SyntaxType.LeftBraceToken:\n                return parseMapValue();\n            case types_1.SyntaxType.LeftBracketToken:\n                return parseListValue();\n            default:\n                return null;\n        }\n    }\n    function parseIntValue(token) {\n        switch (token.type) {\n            case types_1.SyntaxType.IntegerLiteral:\n                return factory_1.createIntConstant(factory_1.createIntegerLiteral(token.text, token.loc), token.loc);\n            case types_1.SyntaxType.HexLiteral:\n                return factory_1.createIntConstant(factory_1.createHexLiteral(token.text, token.loc), token.loc);\n            default:\n                throw reportError(`IntConstant expected but found: ${token.type}`);\n        }\n    }\n    function parseDoubleValue(token) {\n        switch (token.type) {\n            case types_1.SyntaxType.FloatLiteral:\n                return factory_1.createDoubleConstant(factory_1.createFloatLiteral(token.text, token.loc), token.loc);\n            case types_1.SyntaxType.ExponentialLiteral:\n                return factory_1.createDoubleConstant(factory_1.createExponentialLiteral(token.text, token.loc), token.loc);\n            default:\n                throw reportError(`DoubleConstant expected but found: ${token.type}`);\n        }\n    }\n    // ConstMap → '{' (ConstValue ':' ConstValue ListSeparator?)* '}'\n    function parseMapValue() {\n        // The parseValue method has already advanced the cursor\n        const startLoc = currentToken().loc;\n        const properties = check(types_1.SyntaxType.RightBraceToken)\n            ? []\n            : readMapValues();\n        const _closeBrace = consume(types_1.SyntaxType.RightBraceToken);\n        const closeBrace = requireValue(_closeBrace, `Closing brace missing from map definition`);\n        const endLoc = closeBrace.loc;\n        const location = {\n            start: startLoc.start,\n            end: endLoc.end,\n        };\n        return factory_1.createConstMap(properties, location);\n    }\n    // ConstList → '[' (ConstValue ListSeparator?)* ']'\n    function parseListValue() {\n        // The parseValue method has already advanced the cursor\n        const startLoc = currentToken().loc;\n        const elements = check(types_1.SyntaxType.RightBracketToken)\n            ? []\n            : readListValues();\n        const _closeBrace = consume(types_1.SyntaxType.RightBracketToken);\n        const closeBrace = requireValue(_closeBrace, `Closing square-bracket missing from list definition`);\n        const endLoc = closeBrace.loc;\n        return factory_1.createConstList(elements, {\n            start: startLoc.start,\n            end: endLoc.end,\n        });\n    }\n    function readMapValues() {\n        const properties = [];\n        while (true) {\n            const _key = parseValue();\n            const key = requireValue(_key, 'Key expected for map value');\n            const semicolon = consume(types_1.SyntaxType.ColonToken);\n            requireValue(semicolon, `Semicolon expected after key in map property assignment`);\n            const _value = parseValue();\n            const value = requireValue(_value, '');\n            properties.push(factory_1.creataePropertyAssignment(key, value, {\n                start: key.loc.start,\n                end: value.loc.end,\n            }));\n            if (check(types_1.SyntaxType.CommaToken)) {\n                advance();\n                // trailing comma\n                if (check(types_1.SyntaxType.RightBraceToken)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return properties;\n    }\n    function readListValues() {\n        const elements = [];\n        while (true) {\n            const value = parseValue();\n            if (value !== null) {\n                elements.push(value);\n            }\n            if (check(types_1.SyntaxType.CommaToken, types_1.SyntaxType.SemicolonToken)) {\n                advance();\n                // trailing comma\n                if (check(types_1.SyntaxType.RightBracketToken)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return elements;\n    }\n    // FunctionType → FieldType | 'void'\n    function parseFunctionType() {\n        const typeToken = consume(types_1.SyntaxType.VoidKeyword);\n        if (typeToken !== null) {\n            return {\n                type: types_1.SyntaxType.VoidKeyword,\n                loc: typeToken.loc,\n            };\n        }\n        else {\n            return parseFieldType();\n        }\n    }\n    // FieldType → Identifier | BaseType | ContainerType\n    function parseFieldType() {\n        const typeToken = advance();\n        switch (typeToken.type) {\n            case types_1.SyntaxType.Identifier:\n                return factory_1.createIdentifier(typeToken.text, typeToken.loc, parseAnnotations());\n            case types_1.SyntaxType.MapKeyword:\n                return parseMapType();\n            case types_1.SyntaxType.ListKeyword:\n                return parseListType();\n            case types_1.SyntaxType.SetKeyword:\n                return parseSetType();\n            case types_1.SyntaxType.BinaryKeyword:\n            case types_1.SyntaxType.BoolKeyword:\n            case types_1.SyntaxType.ByteKeyword:\n            case types_1.SyntaxType.StringKeyword:\n            case types_1.SyntaxType.I8Keyword:\n            case types_1.SyntaxType.I16Keyword:\n            case types_1.SyntaxType.I32Keyword:\n            case types_1.SyntaxType.I64Keyword:\n            case types_1.SyntaxType.DoubleKeyword:\n                return factory_1.createKeywordFieldType(typeToken.type, typeToken.loc, parseAnnotations());\n            default:\n                throw reportError(`FieldType expected but found: ${typeToken.type}`);\n        }\n    }\n    // MapType → 'map' CppType? '<' FieldType ',' FieldType '>'\n    function parseMapType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const keyType = parseFieldType();\n        const _commaToken = consume(types_1.SyntaxType.CommaToken);\n        const commaToken = requireValue(_commaToken, `Comma expected to separate map types <key, value>`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        const location = {\n            start: openBracket.loc.start,\n            end: closeBracket.loc.end,\n        };\n        return factory_1.createMapFieldType(keyType, valueType, location, parseAnnotations());\n    }\n    // SetType → 'set' CppType? '<' FieldType '>'\n    function parseSetType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        return {\n            type: types_1.SyntaxType.SetType,\n            valueType,\n            loc: {\n                start: openBracket.loc.start,\n                end: closeBracket.loc.end,\n            },\n            annotations: parseAnnotations(),\n        };\n    }\n    // ListType → 'list' '<' FieldType '>' CppType?\n    function parseListType() {\n        const _openBracket = consume(types_1.SyntaxType.LessThanToken);\n        const openBracket = requireValue(_openBracket, `Map needs to defined contained types`);\n        const valueType = parseFieldType();\n        const _closeBracket = consume(types_1.SyntaxType.GreaterThanToken);\n        const closeBracket = requireValue(_closeBracket, `Map needs to defined contained types`);\n        return {\n            type: types_1.SyntaxType.ListType,\n            valueType,\n            loc: {\n                start: openBracket.loc.start,\n                end: closeBracket.loc.end,\n            },\n            annotations: parseAnnotations(),\n        };\n    }\n    function consumeComments() {\n        while (true) {\n            const next = tokens[currentIndex];\n            switch (next.type) {\n                case types_1.SyntaxType.CommentBlock:\n                    comments.push({\n                        type: next.type,\n                        value: next.text.split('\\n'),\n                        loc: next.loc,\n                    });\n                    currentIndex++;\n                    break;\n                case types_1.SyntaxType.CommentLine:\n                    comments.push({\n                        type: next.type,\n                        value: next.text,\n                        loc: next.loc,\n                    });\n                    currentIndex++;\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n    function currentToken() {\n        consumeComments();\n        return tokens[currentIndex];\n    }\n    function previousToken() {\n        return tokens[currentIndex - 1];\n    }\n    function peek() {\n        return tokens[currentIndex + 1];\n    }\n    // Does the current token match the given type\n    function check(...types) {\n        for (const type of types) {\n            if (type === currentToken().type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Does the current token match the given text\n    function checkText(...strs) {\n        for (const str of strs) {\n            if (str === currentToken().text) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // requireToken the current token to match given type and advance, otherwise return null\n    function consume(...types) {\n        for (const type of types) {\n            if (check(type)) {\n                return advance();\n            }\n        }\n        return null;\n    }\n    // Move the cursor forward and return the previous token\n    function advance() {\n        if (!isAtEnd()) {\n            currentIndex += 1;\n        }\n        return previousToken();\n    }\n    function isAtEnd() {\n        return (currentIndex >= tokens.length ||\n            currentToken().type === types_1.SyntaxType.EOF);\n    }\n    function getComments() {\n        const current = comments;\n        comments = [];\n        return current;\n    }\n    function reportError(msg) {\n        return new ParseError(msg, previousToken().loc);\n    }\n    // Throw if the given value doesn't exist.\n    function requireValue(val, msg) {\n        if (val === null || val === undefined) {\n            throw reportError(msg);\n        }\n        else {\n            return val;\n        }\n    }\n    return {\n        parse,\n        synchronize,\n    };\n}\nexports.createParser = createParser;\n//# sourceMappingURL=parser.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/parser.js?")},"./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debugger_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/debugger.js\");\nconst factory_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/factory.js\");\nconst keywords_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/keywords.js\");\nconst types_1 = __webpack_require__(\"./node_modules/@creditkarma/thrift-parser/dist/main/types.js\");\nfunction isDigit(value) {\n    return value >= '0' && value <= '9';\n}\nfunction isAlpha(value) {\n    return (value >= 'a' && value <= 'z') || (value >= 'A' && value <= 'Z');\n}\n// The first character of an Identifier can be a letter or underscore\nfunction isAlphaOrUnderscore(value) {\n    return isAlpha(value) || value === '_';\n}\nfunction isValidIdentifier(value) {\n    return (isAlphaOrUnderscore(value) ||\n        isDigit(value) ||\n        value === '.' ||\n        value === '-');\n}\nfunction isHexDigit(value) {\n    return ((value >= '0' && value <= '9') ||\n        (value >= 'A' && value <= 'F') ||\n        (value >= 'a' && value <= 'f'));\n}\nfunction isWhiteSpace(char) {\n    switch (char) {\n        case ' ':\n        case '\\r':\n        case '\\t':\n        case '\\n':\n            return true;\n        default:\n            return false;\n    }\n}\nclass ScanError extends Error {\n    constructor(msg, loc) {\n        super(msg);\n        this.message = msg;\n        this.loc = loc;\n    }\n}\nfunction createScanner(src, report = debugger_1.noopReporter) {\n    const source = src;\n    const tokens = [];\n    let line = 1;\n    let column = 1;\n    let startLine = 1;\n    let startColumn = 1;\n    let startIndex = 0;\n    let currentIndex = 0;\n    function scan() {\n        while (!isAtEnd()) {\n            try {\n                startIndex = currentIndex;\n                startLine = line;\n                startColumn = column;\n                scanToken();\n            }\n            catch (e) {\n                report(factory_1.createScanError(e.message, e.loc));\n            }\n        }\n        startIndex = currentIndex;\n        addToken(types_1.SyntaxType.EOF);\n        return tokens;\n    }\n    // Find the beginning of the next word to restart parse after error\n    function syncronize() {\n        while (!isAtEnd() && !isWhiteSpace(current())) {\n            advance();\n        }\n    }\n    function scanToken() {\n        const next = advance();\n        switch (next) {\n            case ' ':\n            case '\\r':\n            case '\\t':\n                // Ignore whitespace.\n                break;\n            case '\\n':\n                nextLine();\n                break;\n            case '&':\n                // Thirft supports (undocumented by the grammar) a syntax for c-style pointers\n                // Pointers are indicated by the '&' token. As these are not relevant to JavaScript we\n                // drop them here. This may not be the best thing to do, perhaps should leave them in\n                // the parse tree and allow consumers to deal.\n                break;\n            case '=':\n                addToken(types_1.SyntaxType.EqualToken);\n                break;\n            case '(':\n                addToken(types_1.SyntaxType.LeftParenToken);\n                break;\n            case ')':\n                addToken(types_1.SyntaxType.RightParenToken);\n                break;\n            case '{':\n                addToken(types_1.SyntaxType.LeftBraceToken);\n                break;\n            case '}':\n                addToken(types_1.SyntaxType.RightBraceToken);\n                break;\n            case '[':\n                addToken(types_1.SyntaxType.LeftBracketToken);\n                break;\n            case ']':\n                addToken(types_1.SyntaxType.RightBracketToken);\n                break;\n            case ';':\n                addToken(types_1.SyntaxType.SemicolonToken);\n                break;\n            case ',':\n                addToken(types_1.SyntaxType.CommaToken);\n                break;\n            // Strings can use single or double quotes\n            case '\"':\n            case \"'\":\n                string(next);\n                break;\n            case ':':\n                addToken(types_1.SyntaxType.ColonToken);\n                break;\n            case '#':\n                singleLineComment();\n                break;\n            case '/':\n                if (peek() === '/') {\n                    singleLineComment();\n                }\n                else if (peek() === '*') {\n                    multilineComment();\n                }\n                else {\n                    reportError(`Unexpected token: ${next}`);\n                }\n                break;\n            case '<':\n                addToken(types_1.SyntaxType.LessThanToken);\n                break;\n            case '>':\n                addToken(types_1.SyntaxType.GreaterThanToken);\n                break;\n            case '-':\n                if (isDigit(peek())) {\n                    number();\n                }\n                else {\n                    addToken(types_1.SyntaxType.MinusToken);\n                }\n                break;\n            default:\n                if (isDigit(next)) {\n                    number();\n                }\n                else if (isAlphaOrUnderscore(next)) {\n                    identifier();\n                }\n                else if (isValidIdentifier(next)) {\n                    reportError(`Invalid identifier '${next}': Identifiers must begin with a letter or underscore`);\n                }\n                else {\n                    reportError(`Unexpected token: ${next}`);\n                }\n        }\n    }\n    function identifier() {\n        while (!isAtEnd() && peek() !== '\\n' && isValidIdentifier(peek())) {\n            advance();\n        }\n        const literal = source.substring(startIndex, currentIndex);\n        const type = keywords_1.KEYWORDS[literal];\n        if (type == null) {\n            addToken(types_1.SyntaxType.Identifier, literal);\n        }\n        else {\n            addToken(type, literal);\n        }\n    }\n    function number() {\n        if (current() === '0' && (consume('x') || consume('X'))) {\n            hexadecimal();\n        }\n        else {\n            integer();\n            if (peek() === 'e' || peek() === 'E') {\n                enotation();\n            }\n            else if (peek() === '.' && isDigit(peekNext())) {\n                float();\n            }\n            else {\n                commitToken(types_1.SyntaxType.IntegerLiteral);\n            }\n        }\n    }\n    function hexadecimal() {\n        while (!isAtEnd() && peek() !== '\\n' && isHexDigit(peek())) {\n            advance();\n        }\n        commitToken(types_1.SyntaxType.HexLiteral);\n    }\n    function enotation() {\n        consume('e') || consume('E');\n        consume('-') || consume('+');\n        if (isDigit(peek())) {\n            integer();\n            commitToken(types_1.SyntaxType.ExponentialLiteral);\n        }\n        else {\n            reportError(`Invalid use of e-notation`);\n        }\n    }\n    function float() {\n        consume('.');\n        integer();\n        if (peek() === 'e' || peek() === 'E') {\n            enotation();\n        }\n        else {\n            commitToken(types_1.SyntaxType.FloatLiteral);\n        }\n    }\n    function integer() {\n        while (!isAtEnd() && peek() !== '\\n' && isDigit(peek())) {\n            advance();\n        }\n    }\n    function singleLineComment() {\n        let comment = '';\n        while (true) {\n            if (current() === '\\n' ||\n                isAtEnd() ||\n                (current() !== '/' && current() !== '#' && current() !== ' ')) {\n                break;\n            }\n            else {\n                advance();\n            }\n        }\n        if (current() !== '\\n') {\n            // A comment goes until the end of the line.\n            while (peek() !== '\\n' && !isAtEnd()) {\n                comment += current();\n                advance();\n            }\n            comment += current();\n        }\n        addToken(types_1.SyntaxType.CommentLine, comment.trim());\n    }\n    function multilineComment() {\n        let comment = '';\n        let cursor = 0;\n        while (true) {\n            if (current() === '\\n' ||\n                isAtEnd() ||\n                (current() !== '/' && current() !== '*' && current() !== ' ')) {\n                break;\n            }\n            else {\n                advance();\n            }\n        }\n        while (true) {\n            if (current() === '\\n') {\n                nextLine();\n            }\n            if (comment.charAt(cursor - 1) === '\\n' &&\n                (peek() === ' ' || peek() === '*')) {\n                /**\n                 * We ignore stars and spaces after a new line to normalize comment formatting.\n                 * We're only keeping the text of the comment without the extranious formatting.\n                 */\n            }\n            else {\n                comment += current();\n                cursor += 1;\n            }\n            advance();\n            // A comment goes until we find a comment terminator (*/).\n            if ((peek() === '*' && peekNext() === '/') || isAtEnd()) {\n                advance();\n                advance();\n                break;\n            }\n        }\n        addToken(types_1.SyntaxType.CommentBlock, comment.trim());\n    }\n    function string(terminator) {\n        while (!isAtEnd() && peek() !== terminator) {\n            if (peek() === '\\n') {\n                nextLine();\n            }\n            if (peek() === '\\\\') {\n                advance();\n            }\n            advance();\n        }\n        if (isAtEnd() && previous() !== terminator) {\n            reportError(`String must be terminated with ${terminator}`);\n        }\n        else {\n            // advance past closing \"\n            advance();\n            // We use \"+ 1\" and \"- 1\" to remove the quote markes from the string and unsescape escaped terminators\n            const literal = source\n                .substring(startIndex + 1, currentIndex - 1)\n                .replace(/\\\\(\\\"|\\')/g, '$1');\n            addToken(types_1.SyntaxType.StringLiteral, literal);\n        }\n    }\n    function consume(text) {\n        if (peek() === text) {\n            advance();\n            return true;\n        }\n        return false;\n    }\n    function advance() {\n        currentIndex++;\n        column++;\n        return source.charAt(currentIndex - 1);\n    }\n    function previous() {\n        return source.charAt(currentIndex - 2);\n    }\n    function current() {\n        return source.charAt(currentIndex - 1);\n    }\n    function peek() {\n        return source.charAt(currentIndex);\n    }\n    function peekNext() {\n        return source.charAt(currentIndex + 1);\n    }\n    function nextLine() {\n        line++;\n        column = 1;\n    }\n    function commitToken(type) {\n        const literal = source.substring(startIndex, currentIndex);\n        addToken(type, literal);\n    }\n    function currentLocation() {\n        return {\n            start: {\n                line: startLine,\n                column: startColumn,\n                index: startIndex,\n            },\n            end: {\n                line,\n                column,\n                index: currentIndex,\n            },\n        };\n    }\n    function addToken(type, value = '') {\n        const loc = currentLocation();\n        tokens.push(factory_1.createToken(type, value, loc));\n    }\n    function isAtEnd() {\n        return currentIndex >= source.length;\n    }\n    function reportError(msg) {\n        throw new ScanError(msg, currentLocation());\n    }\n    return {\n        scan,\n        syncronize,\n    };\n}\nexports.createScanner = createScanner;\n//# sourceMappingURL=scanner.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/scanner.js?")},"./node_modules/@creditkarma/thrift-parser/dist/main/types.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ErrorType;\n(function (ErrorType) {\n    ErrorType["ParseError"] = "ParseError";\n    ErrorType["ScanError"] = "ScanError";\n})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));\nvar SyntaxType;\n(function (SyntaxType) {\n    SyntaxType["ThriftDocument"] = "ThriftDocument";\n    SyntaxType["ThriftErrors"] = "ThriftErrors";\n    SyntaxType["Identifier"] = "Identifier";\n    SyntaxType["FieldID"] = "FieldID";\n    // Statements\n    SyntaxType["NamespaceDefinition"] = "NamespaceDefinition";\n    SyntaxType["IncludeDefinition"] = "IncludeDefinition";\n    SyntaxType["CppIncludeDefinition"] = "CppIncludeDefinition";\n    SyntaxType["ConstDefinition"] = "ConstDefinition";\n    SyntaxType["StructDefinition"] = "StructDefinition";\n    SyntaxType["EnumDefinition"] = "EnumDefinition";\n    SyntaxType["ServiceDefinition"] = "ServiceDefinition";\n    SyntaxType["ExceptionDefinition"] = "ExceptionDefinition";\n    SyntaxType["TypedefDefinition"] = "TypedefDefinition";\n    SyntaxType["UnionDefinition"] = "UnionDefinition";\n    // Fields\n    SyntaxType["FieldDefinition"] = "FieldDefinition";\n    SyntaxType["FunctionDefinition"] = "FunctionDefinition";\n    SyntaxType["ParametersDefinition"] = "ParametersDefinition";\n    SyntaxType["ThrowsDefinition"] = "ThrowsDefinition";\n    // Type Annotations\n    SyntaxType["FieldType"] = "FieldType";\n    SyntaxType["BaseType"] = "BaseType";\n    SyntaxType["SetType"] = "SetType";\n    SyntaxType["MapType"] = "MapType";\n    SyntaxType["ListType"] = "ListType";\n    // Values\n    SyntaxType["ConstValue"] = "ConstValue";\n    SyntaxType["IntConstant"] = "IntConstant";\n    SyntaxType["DoubleConstant"] = "DoubleConstant";\n    SyntaxType["ConstList"] = "ConstList";\n    SyntaxType["ConstMap"] = "ConstMap";\n    SyntaxType["EnumMember"] = "EnumMember";\n    // Literals\n    SyntaxType["CommentLine"] = "CommentLine";\n    SyntaxType["CommentBlock"] = "CommentBlock";\n    SyntaxType["StringLiteral"] = "StringLiteral";\n    SyntaxType["IntegerLiteral"] = "IntegerLiteral";\n    SyntaxType["FloatLiteral"] = "FloatLiteral";\n    SyntaxType["HexLiteral"] = "HexLiteral";\n    SyntaxType["ExponentialLiteral"] = "ExponentialLiteral";\n    SyntaxType["BooleanLiteral"] = "BooleanLiteral";\n    SyntaxType["PropertyAssignment"] = "PropertyAssignment";\n    // Tokens\n    SyntaxType["LeftParenToken"] = "LeftParenToken";\n    SyntaxType["RightParenToken"] = "RightParenToken";\n    SyntaxType["LeftBraceToken"] = "LeftBraceToken";\n    SyntaxType["RightBraceToken"] = "RightBraceToken";\n    SyntaxType["LeftBracketToken"] = "LeftBracketToken";\n    SyntaxType["RightBracketToken"] = "RightBracketToken";\n    SyntaxType["CommaToken"] = "CommaToken";\n    SyntaxType["DotToken"] = "DotToken";\n    SyntaxType["MinusToken"] = "MinusToken";\n    SyntaxType["SemicolonToken"] = "SemicolonToken";\n    SyntaxType["ColonToken"] = "ColonToken";\n    SyntaxType["StarToken"] = "StarToken";\n    SyntaxType["EqualToken"] = "EqualToken";\n    SyntaxType["LessThanToken"] = "LessThanToken";\n    SyntaxType["GreaterThanToken"] = "GreaterThanToken";\n    // Keywords\n    SyntaxType["NamespaceKeyword"] = "NamespaceKeyword";\n    SyntaxType["IncludeKeyword"] = "IncludeKeyword";\n    SyntaxType["CppIncludeKeyword"] = "CppIncludeKeyword";\n    SyntaxType["ExceptionKeyword"] = "ExceptionKeyword";\n    SyntaxType["ServiceKeyword"] = "ServiceKeyword";\n    SyntaxType["ExtendsKeyword"] = "ExtendsKeyword";\n    SyntaxType["RequiredKeyword"] = "RequiredKeyword";\n    SyntaxType["OptionalKeyword"] = "OptionalKeyword";\n    SyntaxType["FalseKeyword"] = "FalseKeyword";\n    SyntaxType["TrueKeyword"] = "TrueKeyword";\n    SyntaxType["ConstKeyword"] = "ConstKeyword";\n    SyntaxType["DoubleKeyword"] = "DoubleKeyword";\n    SyntaxType["StructKeyword"] = "StructKeyword";\n    SyntaxType["TypedefKeyword"] = "TypedefKeyword";\n    SyntaxType["UnionKeyword"] = "UnionKeyword";\n    SyntaxType["StringKeyword"] = "StringKeyword";\n    SyntaxType["BinaryKeyword"] = "BinaryKeyword";\n    SyntaxType["BoolKeyword"] = "BoolKeyword";\n    SyntaxType["ByteKeyword"] = "ByteKeyword";\n    SyntaxType["EnumKeyword"] = "EnumKeyword";\n    SyntaxType["SenumKeyword"] = "SenumKeyword";\n    SyntaxType["ListKeyword"] = "ListKeyword";\n    SyntaxType["SetKeyword"] = "SetKeyword";\n    SyntaxType["MapKeyword"] = "MapKeyword";\n    SyntaxType["I8Keyword"] = "I8Keyword";\n    SyntaxType["I16Keyword"] = "I16Keyword";\n    SyntaxType["I32Keyword"] = "I32Keyword";\n    SyntaxType["I64Keyword"] = "I64Keyword";\n    SyntaxType["ThrowsKeyword"] = "ThrowsKeyword";\n    SyntaxType["VoidKeyword"] = "VoidKeyword";\n    SyntaxType["OnewayKeyword"] = "OnewayKeyword";\n    // Other\n    SyntaxType["Annotation"] = "Annotation";\n    SyntaxType["Annotations"] = "Annotations";\n    SyntaxType["EOF"] = "EOF";\n})(SyntaxType = exports.SyntaxType || (exports.SyntaxType = {}));\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack:///./node_modules/@creditkarma/thrift-parser/dist/main/types.js?')},"./node_modules/node-libs-browser/mock/empty.js":function(module,exports){eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?")},"./node_modules/os-browserify/browser.js":function(module,exports){eval("exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n\n\n//# sourceURL=webpack:///./node_modules/os-browserify/browser.js?")},"./node_modules/path-browserify/index.js":function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?")},"./node_modules/process/browser.js":function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?")}}]);