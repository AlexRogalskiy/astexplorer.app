(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"./node_modules/base64-js/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?")},"./node_modules/buffer/index.js":function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(\"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(\"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?")},"./node_modules/ieee754/index.js":function(module,exports){eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?")},"./node_modules/isarray/index.js":function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?")},"./node_modules/yaml-ast-parser/dist/src/common.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isNothing(subject) {\n    return (typeof subject === 'undefined') || (null === subject);\n}\nexports.isNothing = isNothing;\nfunction isObject(subject) {\n    return (typeof subject === 'object') && (null !== subject);\n}\nexports.isObject = isObject;\nfunction toArray(sequence) {\n    if (Array.isArray(sequence)) {\n        return sequence;\n    }\n    else if (isNothing(sequence)) {\n        return [];\n    }\n    return [sequence];\n}\nexports.toArray = toArray;\nfunction extend(target, source) {\n    var index, length, key, sourceKeys;\n    if (source) {\n        sourceKeys = Object.keys(source);\n        for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n            key = sourceKeys[index];\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nexports.extend = extend;\nfunction repeat(string, count) {\n    var result = '', cycle;\n    for (cycle = 0; cycle < count; cycle += 1) {\n        result += string;\n    }\n    return result;\n}\nexports.repeat = repeat;\nfunction isNegativeZero(number) {\n    return (0 === number) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\nexports.isNegativeZero = isNegativeZero;\n//# sourceMappingURL=common.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/common.js?")},"./node_modules/yaml-ast-parser/dist/src/dumper.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar YAMLException = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/exception.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/schema/default_full.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/schema/default_safe.js\");\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09;\nvar CHAR_LINE_FEED = 0x0A;\nvar CHAR_CARRIAGE_RETURN = 0x0D;\nvar CHAR_SPACE = 0x20;\nvar CHAR_EXCLAMATION = 0x21;\nvar CHAR_DOUBLE_QUOTE = 0x22;\nvar CHAR_SHARP = 0x23;\nvar CHAR_PERCENT = 0x25;\nvar CHAR_AMPERSAND = 0x26;\nvar CHAR_SINGLE_QUOTE = 0x27;\nvar CHAR_ASTERISK = 0x2A;\nvar CHAR_COMMA = 0x2C;\nvar CHAR_MINUS = 0x2D;\nvar CHAR_COLON = 0x3A;\nvar CHAR_GREATER_THAN = 0x3E;\nvar CHAR_QUESTION = 0x3F;\nvar CHAR_COMMERCIAL_AT = 0x40;\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\nvar CHAR_GRAVE_ACCENT = 0x60;\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\nvar CHAR_VERTICAL_LINE = 0x7C;\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n    'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n    'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n];\nfunction compileStyleMap(schema, map) {\n    var result, keys, index, length, tag, style, type;\n    if (null === map) {\n        return {};\n    }\n    result = {};\n    keys = Object.keys(map);\n    for (index = 0, length = keys.length; index < length; index += 1) {\n        tag = keys[index];\n        style = String(map[tag]);\n        if ('!!' === tag.slice(0, 2)) {\n            tag = 'tag:yaml.org,2002:' + tag.slice(2);\n        }\n        type = schema.compiledTypeMap[tag];\n        if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n            style = type.styleAliases[style];\n        }\n        result[tag] = style;\n    }\n    return result;\n}\nfunction encodeHex(character) {\n    var string, handle, length;\n    string = character.toString(16).toUpperCase();\n    if (character <= 0xFF) {\n        handle = 'x';\n        length = 2;\n    }\n    else if (character <= 0xFFFF) {\n        handle = 'u';\n        length = 4;\n    }\n    else if (character <= 0xFFFFFFFF) {\n        handle = 'U';\n        length = 8;\n    }\n    else {\n        throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n    }\n    return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\nfunction State(options) {\n    this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n    this.indent = Math.max(1, (options['indent'] || 2));\n    this.skipInvalid = options['skipInvalid'] || false;\n    this.flowLevel = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n    this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.explicitTypes = this.schema.compiledExplicit;\n    this.tag = null;\n    this.result = '';\n    this.duplicates = [];\n    this.usedDuplicates = null;\n}\nfunction indentString(string, spaces) {\n    var ind = common.repeat(' ', spaces), position = 0, next = -1, result = '', line, length = string.length;\n    while (position < length) {\n        next = string.indexOf('\\n', position);\n        if (next === -1) {\n            line = string.slice(position);\n            position = length;\n        }\n        else {\n            line = string.slice(position, next + 1);\n            position = next + 1;\n        }\n        if (line.length && line !== '\\n') {\n            result += ind;\n        }\n        result += line;\n    }\n    return result;\n}\nfunction generateNextLine(state, level) {\n    return '\\n' + common.repeat(' ', state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n    var index, length, type;\n    for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n        type = state.implicitTypes[index];\n        if (type.resolve(str)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction StringBuilder(source) {\n    this.source = source;\n    this.result = '';\n    this.checkpoint = 0;\n}\nStringBuilder.prototype.takeUpTo = function (position) {\n    var er;\n    if (position < this.checkpoint) {\n        er = new Error('position should be > checkpoint');\n        er.position = position;\n        er.checkpoint = this.checkpoint;\n        throw er;\n    }\n    this.result += this.source.slice(this.checkpoint, position);\n    this.checkpoint = position;\n    return this;\n};\nStringBuilder.prototype.escapeChar = function () {\n    var character, esc;\n    character = this.source.charCodeAt(this.checkpoint);\n    esc = ESCAPE_SEQUENCES[character] || encodeHex(character);\n    this.result += esc;\n    this.checkpoint += 1;\n    return this;\n};\nStringBuilder.prototype.finish = function () {\n    if (this.source.length > this.checkpoint) {\n        this.takeUpTo(this.source.length);\n    }\n};\nfunction writeScalar(state, object, level) {\n    var simple, first, spaceWrap, folded, literal, single, double, sawLineFeed, linePosition, longestLine, indent, max, character, position, escapeSeq, hexEsc, previous, lineLength, modifier, trailingLineBreaks, result;\n    if (0 === object.length) {\n        state.dump = \"''\";\n        return;\n    }\n    if (object.indexOf(\"!include\") == 0) {\n        state.dump = \"\" + object;\n        return;\n    }\n    if (object.indexOf(\"!$$$novalue\") == 0) {\n        state.dump = \"\";\n        return;\n    }\n    if (-1 !== DEPRECATED_BOOLEANS_SYNTAX.indexOf(object)) {\n        state.dump = \"'\" + object + \"'\";\n        return;\n    }\n    simple = true;\n    first = object.length ? object.charCodeAt(0) : 0;\n    spaceWrap = (CHAR_SPACE === first ||\n        CHAR_SPACE === object.charCodeAt(object.length - 1));\n    if (CHAR_MINUS === first ||\n        CHAR_QUESTION === first ||\n        CHAR_COMMERCIAL_AT === first ||\n        CHAR_GRAVE_ACCENT === first) {\n        simple = false;\n    }\n    if (spaceWrap) {\n        simple = false;\n        folded = false;\n        literal = false;\n    }\n    else {\n        folded = true;\n        literal = true;\n    }\n    single = true;\n    double = new StringBuilder(object);\n    sawLineFeed = false;\n    linePosition = 0;\n    longestLine = 0;\n    indent = state.indent * level;\n    max = 80;\n    if (indent < 40) {\n        max -= indent;\n    }\n    else {\n        max = 40;\n    }\n    for (position = 0; position < object.length; position++) {\n        character = object.charCodeAt(position);\n        if (simple) {\n            if (!simpleChar(character)) {\n                simple = false;\n            }\n            else {\n                continue;\n            }\n        }\n        if (single && character === CHAR_SINGLE_QUOTE) {\n            single = false;\n        }\n        escapeSeq = ESCAPE_SEQUENCES[character];\n        hexEsc = needsHexEscape(character);\n        if (!escapeSeq && !hexEsc) {\n            continue;\n        }\n        if (character !== CHAR_LINE_FEED &&\n            character !== CHAR_DOUBLE_QUOTE &&\n            character !== CHAR_SINGLE_QUOTE) {\n            folded = false;\n            literal = false;\n        }\n        else if (character === CHAR_LINE_FEED) {\n            sawLineFeed = true;\n            single = false;\n            if (position > 0) {\n                previous = object.charCodeAt(position - 1);\n                if (previous === CHAR_SPACE) {\n                    literal = false;\n                    folded = false;\n                }\n            }\n            if (folded) {\n                lineLength = position - linePosition;\n                linePosition = position;\n                if (lineLength > longestLine) {\n                    longestLine = lineLength;\n                }\n            }\n        }\n        if (character !== CHAR_DOUBLE_QUOTE) {\n            single = false;\n        }\n        double.takeUpTo(position);\n        double.escapeChar();\n    }\n    if (simple && testImplicitResolving(state, object)) {\n        simple = false;\n    }\n    modifier = '';\n    if (folded || literal) {\n        trailingLineBreaks = 0;\n        if (object.charCodeAt(object.length - 1) === CHAR_LINE_FEED) {\n            trailingLineBreaks += 1;\n            if (object.charCodeAt(object.length - 2) === CHAR_LINE_FEED) {\n                trailingLineBreaks += 1;\n            }\n        }\n        if (trailingLineBreaks === 0) {\n            modifier = '-';\n        }\n        else if (trailingLineBreaks === 2) {\n            modifier = '+';\n        }\n    }\n    if (literal && longestLine < max) {\n        folded = false;\n    }\n    if (!sawLineFeed) {\n        literal = false;\n    }\n    if (simple) {\n        state.dump = object;\n    }\n    else if (single) {\n        state.dump = '\\'' + object + '\\'';\n    }\n    else if (folded) {\n        result = fold(object, max);\n        state.dump = '>' + modifier + '\\n' + indentString(result, indent);\n    }\n    else if (literal) {\n        if (!modifier) {\n            object = object.replace(/\\n$/, '');\n        }\n        state.dump = '|' + modifier + '\\n' + indentString(object, indent);\n    }\n    else if (double) {\n        double.finish();\n        state.dump = '\"' + double.result + '\"';\n    }\n    else {\n        throw new Error('Failed to dump scalar value');\n    }\n    return;\n}\nfunction fold(object, max) {\n    var result = '', position = 0, length = object.length, trailing = /\\n+$/.exec(object), newLine;\n    if (trailing) {\n        length = trailing.index + 1;\n    }\n    while (position < length) {\n        newLine = object.indexOf('\\n', position);\n        if (newLine > length || newLine === -1) {\n            if (result) {\n                result += '\\n\\n';\n            }\n            result += foldLine(object.slice(position, length), max);\n            position = length;\n        }\n        else {\n            if (result) {\n                result += '\\n\\n';\n            }\n            result += foldLine(object.slice(position, newLine), max);\n            position = newLine + 1;\n        }\n    }\n    if (trailing && trailing[0] !== '\\n') {\n        result += trailing[0];\n    }\n    return result;\n}\nfunction foldLine(line, max) {\n    if (line === '') {\n        return line;\n    }\n    var foldRe = /[^\\s] [^\\s]/g, result = '', prevMatch = 0, foldStart = 0, match = foldRe.exec(line), index, foldEnd, folded;\n    while (match) {\n        index = match.index;\n        if (index - foldStart > max) {\n            if (prevMatch !== foldStart) {\n                foldEnd = prevMatch;\n            }\n            else {\n                foldEnd = index;\n            }\n            if (result) {\n                result += '\\n';\n            }\n            folded = line.slice(foldStart, foldEnd);\n            result += folded;\n            foldStart = foldEnd + 1;\n        }\n        prevMatch = index + 1;\n        match = foldRe.exec(line);\n    }\n    if (result) {\n        result += '\\n';\n    }\n    if (foldStart !== prevMatch && line.length - foldStart > max) {\n        result += line.slice(foldStart, prevMatch) + '\\n' +\n            line.slice(prevMatch + 1);\n    }\n    else {\n        result += line.slice(foldStart);\n    }\n    return result;\n}\nfunction simpleChar(character) {\n    return CHAR_TAB !== character &&\n        CHAR_LINE_FEED !== character &&\n        CHAR_CARRIAGE_RETURN !== character &&\n        CHAR_COMMA !== character &&\n        CHAR_LEFT_SQUARE_BRACKET !== character &&\n        CHAR_RIGHT_SQUARE_BRACKET !== character &&\n        CHAR_LEFT_CURLY_BRACKET !== character &&\n        CHAR_RIGHT_CURLY_BRACKET !== character &&\n        CHAR_SHARP !== character &&\n        CHAR_AMPERSAND !== character &&\n        CHAR_ASTERISK !== character &&\n        CHAR_EXCLAMATION !== character &&\n        CHAR_VERTICAL_LINE !== character &&\n        CHAR_GREATER_THAN !== character &&\n        CHAR_SINGLE_QUOTE !== character &&\n        CHAR_DOUBLE_QUOTE !== character &&\n        CHAR_PERCENT !== character &&\n        CHAR_COLON !== character &&\n        !ESCAPE_SEQUENCES[character] &&\n        !needsHexEscape(character);\n}\nfunction needsHexEscape(character) {\n    return !((0x00020 <= character && character <= 0x00007E) ||\n        (0x00085 === character) ||\n        (0x000A0 <= character && character <= 0x00D7FF) ||\n        (0x0E000 <= character && character <= 0x00FFFD) ||\n        (0x10000 <= character && character <= 0x10FFFF));\n}\nfunction writeFlowSequence(state, level, object) {\n    var _result = '', _tag = state.tag, index, length;\n    for (index = 0, length = object.length; index < length; index += 1) {\n        if (writeNode(state, level, object[index], false, false)) {\n            if (0 !== index) {\n                _result += ', ';\n            }\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = '[' + _result + ']';\n}\nfunction writeBlockSequence(state, level, object, compact) {\n    var _result = '', _tag = state.tag, index, length;\n    for (index = 0, length = object.length; index < length; index += 1) {\n        if (writeNode(state, level + 1, object[index], true, true)) {\n            if (!compact || 0 !== index) {\n                _result += generateNextLine(state, level);\n            }\n            _result += '- ' + state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = _result || '[]';\n}\nfunction writeFlowMapping(state, level, object) {\n    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;\n    for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n        pairBuffer = '';\n        if (0 !== index) {\n            pairBuffer += ', ';\n        }\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (!writeNode(state, level, objectKey, false, false)) {\n            continue;\n        }\n        if (state.dump.length > 1024) {\n            pairBuffer += '? ';\n        }\n        pairBuffer += state.dump + ': ';\n        if (!writeNode(state, level, objectValue, false, false)) {\n            continue;\n        }\n        pairBuffer += state.dump;\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = '{' + _result + '}';\n}\nfunction writeBlockMapping(state, level, object, compact) {\n    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;\n    for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n        pairBuffer = '';\n        if (!compact || 0 !== index) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (!writeNode(state, level + 1, objectKey, true, true)) {\n            continue;\n        }\n        explicitPair = (null !== state.tag && '?' !== state.tag) ||\n            (state.dump && state.dump.length > 1024);\n        if (explicitPair) {\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                pairBuffer += '?';\n            }\n            else {\n                pairBuffer += '? ';\n            }\n        }\n        pairBuffer += state.dump;\n        if (explicitPair) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n            continue;\n        }\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n            pairBuffer += ':';\n        }\n        else {\n            pairBuffer += ': ';\n        }\n        pairBuffer += state.dump;\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = _result || '{}';\n}\nfunction detectType(state, object, explicit) {\n    var _result, typeList, index, length, type, style;\n    typeList = explicit ? state.explicitTypes : state.implicitTypes;\n    for (index = 0, length = typeList.length; index < length; index += 1) {\n        type = typeList[index];\n        if ((type.instanceOf || type.predicate) &&\n            (!type.instanceOf || (('object' === typeof object) && (object instanceof type.instanceOf))) &&\n            (!type.predicate || type.predicate(object))) {\n            state.tag = explicit ? type.tag : '?';\n            if (type.represent) {\n                style = state.styleMap[type.tag] || type.defaultStyle;\n                if ('[object Function]' === _toString.call(type.represent)) {\n                    _result = type.represent(object, style);\n                }\n                else if (_hasOwnProperty.call(type.represent, style)) {\n                    _result = type.represent[style](object, style);\n                }\n                else {\n                    throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n                }\n                state.dump = _result;\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeNode(state, level, object, block, compact) {\n    state.tag = null;\n    state.dump = object;\n    if (!detectType(state, object, false)) {\n        detectType(state, object, true);\n    }\n    var type = _toString.call(state.dump);\n    if (block) {\n        block = (0 > state.flowLevel || state.flowLevel > level);\n    }\n    if ((null !== state.tag && '?' !== state.tag) || (2 !== state.indent && level > 0)) {\n        compact = false;\n    }\n    var objectOrArray = '[object Object]' === type || '[object Array]' === type, duplicateIndex, duplicate;\n    if (objectOrArray) {\n        duplicateIndex = state.duplicates.indexOf(object);\n        duplicate = duplicateIndex !== -1;\n    }\n    if (duplicate && state.usedDuplicates[duplicateIndex]) {\n        state.dump = '*ref_' + duplicateIndex;\n    }\n    else {\n        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n            state.usedDuplicates[duplicateIndex] = true;\n        }\n        if ('[object Object]' === type) {\n            if (block && (0 !== Object.keys(state.dump).length)) {\n                writeBlockMapping(state, level, state.dump, compact);\n                if (duplicate) {\n                    state.dump = '&ref_' + duplicateIndex + (0 === level ? '\\n' : '') + state.dump;\n                }\n            }\n            else {\n                writeFlowMapping(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n                }\n            }\n        }\n        else if ('[object Array]' === type) {\n            if (block && (0 !== state.dump.length)) {\n                writeBlockSequence(state, level, state.dump, compact);\n                if (duplicate) {\n                    state.dump = '&ref_' + duplicateIndex + (0 === level ? '\\n' : '') + state.dump;\n                }\n            }\n            else {\n                writeFlowSequence(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n                }\n            }\n        }\n        else if ('[object String]' === type) {\n            if ('?' !== state.tag) {\n                writeScalar(state, state.dump, level);\n            }\n        }\n        else {\n            if (state.skipInvalid) {\n                return false;\n            }\n            throw new YAMLException('unacceptable kind of an object to dump ' + type);\n        }\n        if (null !== state.tag && '?' !== state.tag) {\n            state.dump = '!<' + state.tag + '> ' + state.dump;\n        }\n    }\n    return true;\n}\nfunction getDuplicateReferences(object, state) {\n    var objects = [], duplicatesIndexes = [], index, length;\n    inspectNode(object, objects, duplicatesIndexes);\n    for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n        state.duplicates.push(objects[duplicatesIndexes[index]]);\n    }\n    state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n    var type = _toString.call(object), objectKeyList, index, length;\n    if (null !== object && 'object' === typeof object) {\n        index = objects.indexOf(object);\n        if (-1 !== index) {\n            if (-1 === duplicatesIndexes.indexOf(index)) {\n                duplicatesIndexes.push(index);\n            }\n        }\n        else {\n            objects.push(object);\n            if (Array.isArray(object)) {\n                for (index = 0, length = object.length; index < length; index += 1) {\n                    inspectNode(object[index], objects, duplicatesIndexes);\n                }\n            }\n            else {\n                objectKeyList = Object.keys(object);\n                for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n                    inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n                }\n            }\n        }\n    }\n}\nfunction dump(input, options) {\n    options = options || {};\n    var state = new State(options);\n    getDuplicateReferences(input, state);\n    if (writeNode(state, 0, input, true, true)) {\n        return state.dump + '\\n';\n    }\n    return '';\n}\nexports.dump = dump;\nfunction safeDump(input, options) {\n    return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\nexports.safeDump = safeDump;\n//# sourceMappingURL=dumper.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/dumper.js?")},"./node_modules/yaml-ast-parser/dist/src/exception.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar YAMLException = (function () {\n    function YAMLException(reason, mark, isWarning) {\n        if (mark === void 0) { mark = null; }\n        if (isWarning === void 0) { isWarning = false; }\n        this.name = 'YAMLException';\n        this.reason = reason;\n        this.mark = mark;\n        this.message = this.toString(false);\n        this.isWarning = isWarning;\n    }\n    YAMLException.isInstance = function (instance) {\n        if (instance != null && instance.getClassIdentifier\n            && typeof (instance.getClassIdentifier) == \"function\") {\n            for (var _i = 0, _a = instance.getClassIdentifier(); _i < _a.length; _i++) {\n                var currentIdentifier = _a[_i];\n                if (currentIdentifier == YAMLException.CLASS_IDENTIFIER)\n                    return true;\n            }\n        }\n        return false;\n    };\n    YAMLException.prototype.getClassIdentifier = function () {\n        var superIdentifiers = [];\n        return superIdentifiers.concat(YAMLException.CLASS_IDENTIFIER);\n    };\n    YAMLException.prototype.toString = function (compact) {\n        if (compact === void 0) { compact = false; }\n        var result;\n        result = 'JS-YAML: ' + (this.reason || '(unknown reason)');\n        if (!compact && this.mark) {\n            result += ' ' + this.mark.toString();\n        }\n        return result;\n    };\n    YAMLException.CLASS_IDENTIFIER = \"yaml-ast-parser.YAMLException\";\n    return YAMLException;\n}());\nmodule.exports = YAMLException;\n//# sourceMappingURL=exception.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/exception.js?")},"./node_modules/yaml-ast-parser/dist/src/index.js":function(module,exports,__webpack_require__){"use strict";eval('\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, "__esModule", { value: true });\nvar loader_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/loader.js");\nexports.load = loader_1.load;\nexports.loadAll = loader_1.loadAll;\nexports.safeLoad = loader_1.safeLoad;\nexports.safeLoadAll = loader_1.safeLoadAll;\nvar dumper_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/dumper.js");\nexports.dump = dumper_1.dump;\nexports.safeDump = dumper_1.safeDump;\nexports.YAMLException = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/exception.js");\n__export(__webpack_require__("./node_modules/yaml-ast-parser/dist/src/yamlAST.js"));\nfunction deprecated(name) {\n    return function () {\n        throw new Error(\'Function \' + name + \' is deprecated and cannot be used.\');\n    };\n}\n__export(__webpack_require__("./node_modules/yaml-ast-parser/dist/src/scalarInference.js"));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/index.js?')},"./node_modules/yaml-ast-parser/dist/src/loader.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/yamlAST.js\");\n'use strict';\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar YAMLException = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/exception.js\");\nvar Mark = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/mark.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/schema/default_safe.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/schema/default_full.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction is_EOL(c) {\n    return (c === 0x0A) || (c === 0x0D);\n}\nfunction is_WHITE_SPACE(c) {\n    return (c === 0x09) || (c === 0x20);\n}\nfunction is_WS_OR_EOL(c) {\n    return (c === 0x09) ||\n        (c === 0x20) ||\n        (c === 0x0A) ||\n        (c === 0x0D);\n}\nfunction is_FLOW_INDICATOR(c) {\n    return 0x2C === c ||\n        0x5B === c ||\n        0x5D === c ||\n        0x7B === c ||\n        0x7D === c;\n}\nfunction fromHexCode(c) {\n    var lc;\n    if ((0x30 <= c) && (c <= 0x39)) {\n        return c - 0x30;\n    }\n    lc = c | 0x20;\n    if ((0x61 <= lc) && (lc <= 0x66)) {\n        return lc - 0x61 + 10;\n    }\n    return -1;\n}\nfunction escapedHexLen(c) {\n    if (c === 0x78) {\n        return 2;\n    }\n    if (c === 0x75) {\n        return 4;\n    }\n    if (c === 0x55) {\n        return 8;\n    }\n    return 0;\n}\nfunction fromDecimalCode(c) {\n    if ((0x30 <= c) && (c <= 0x39)) {\n        return c - 0x30;\n    }\n    return -1;\n}\nfunction simpleEscapeSequence(c) {\n    return (c === 0x30) ? '\\x00' :\n        (c === 0x61) ? '\\x07' :\n            (c === 0x62) ? '\\x08' :\n                (c === 0x74) ? '\\x09' :\n                    (c === 0x09) ? '\\x09' :\n                        (c === 0x6E) ? '\\x0A' :\n                            (c === 0x76) ? '\\x0B' :\n                                (c === 0x66) ? '\\x0C' :\n                                    (c === 0x72) ? '\\x0D' :\n                                        (c === 0x65) ? '\\x1B' :\n                                            (c === 0x20) ? ' ' :\n                                                (c === 0x22) ? '\\x22' :\n                                                    (c === 0x2F) ? '/' :\n                                                        (c === 0x5C) ? '\\x5C' :\n                                                            (c === 0x4E) ? '\\x85' :\n                                                                (c === 0x5F) ? '\\xA0' :\n                                                                    (c === 0x4C) ? '\\u2028' :\n                                                                        (c === 0x50) ? '\\u2029' : '';\n}\nfunction charFromCodepoint(c) {\n    if (c <= 0xFFFF) {\n        return String.fromCharCode(c);\n    }\n    return String.fromCharCode(((c - 0x010000) >> 10) + 0xD800, ((c - 0x010000) & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256);\nvar simpleEscapeMap = new Array(256);\nvar customEscapeCheck = new Array(256);\nvar customEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    customEscapeMap[i] = simpleEscapeMap[i] = simpleEscapeSequence(i);\n    simpleEscapeCheck[i] = simpleEscapeMap[i] ? 1 : 0;\n    customEscapeCheck[i] = 1;\n    if (!simpleEscapeCheck[i]) {\n        customEscapeMap[i] = '\\\\' + String.fromCharCode(i);\n    }\n}\nvar State = (function () {\n    function State(input, options) {\n        this.errorMap = {};\n        this.errors = [];\n        this.lines = [];\n        this.input = input;\n        this.filename = options['filename'] || null;\n        this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n        this.onWarning = options['onWarning'] || null;\n        this.legacy = options['legacy'] || false;\n        this.allowAnyEscape = options['allowAnyEscape'] || false;\n        this.ignoreDuplicateKeys = options['ignoreDuplicateKeys'] || false;\n        this.implicitTypes = this.schema.compiledImplicit;\n        this.typeMap = this.schema.compiledTypeMap;\n        this.length = input.length;\n        this.position = 0;\n        this.line = 0;\n        this.lineStart = 0;\n        this.lineIndent = 0;\n        this.documents = [];\n    }\n    return State;\n}());\nfunction generateError(state, message, isWarning) {\n    if (isWarning === void 0) { isWarning = false; }\n    return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)), isWarning);\n}\nfunction throwErrorFromPosition(state, position, message, isWarning, toLineEnd) {\n    if (isWarning === void 0) { isWarning = false; }\n    if (toLineEnd === void 0) { toLineEnd = false; }\n    var line = positionToLine(state, position);\n    if (!line) {\n        return;\n    }\n    var hash = message + position;\n    if (state.errorMap[hash]) {\n        return;\n    }\n    var mark = new Mark(state.filename, state.input, position, line.line, (position - line.start));\n    if (toLineEnd) {\n        mark.toLineEnd = true;\n    }\n    var error = new YAMLException(message, mark, isWarning);\n    state.errors.push(error);\n}\nfunction throwError(state, message) {\n    var error = generateError(state, message);\n    var hash = error.message + error.mark.position;\n    if (state.errorMap[hash]) {\n        return;\n    }\n    state.errors.push(error);\n    state.errorMap[hash] = 1;\n    var or = state.position;\n    while (true) {\n        if (state.position >= state.input.length - 1) {\n            return;\n        }\n        var c = state.input.charAt(state.position);\n        if (c == '\\n') {\n            state.position--;\n            if (state.position == or) {\n                state.position += 1;\n            }\n            return;\n        }\n        if (c == '\\r') {\n            state.position--;\n            if (state.position == or) {\n                state.position += 1;\n            }\n            return;\n        }\n        state.position++;\n    }\n}\nfunction throwWarning(state, message) {\n    var error = generateError(state, message);\n    if (state.onWarning) {\n        state.onWarning.call(null, error);\n    }\n    else {\n    }\n}\nvar directiveHandlers = {\n    YAML: function handleYamlDirective(state, name, args) {\n        var match, major, minor;\n        if (null !== state.version) {\n            throwError(state, 'duplication of %YAML directive');\n        }\n        if (1 !== args.length) {\n            throwError(state, 'YAML directive accepts exactly one argument');\n        }\n        match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n        if (null === match) {\n            throwError(state, 'ill-formed argument of the YAML directive');\n        }\n        major = parseInt(match[1], 10);\n        minor = parseInt(match[2], 10);\n        if (1 !== major) {\n            throwError(state, 'found incompatible YAML document (version 1.2 is required)');\n        }\n        state.version = args[0];\n        state.checkLineBreaks = (minor < 2);\n        if (2 !== minor) {\n            throwError(state, 'found incompatible YAML document (version 1.2 is required)');\n        }\n    },\n    TAG: function handleTagDirective(state, name, args) {\n        var handle, prefix;\n        if (2 !== args.length) {\n            throwError(state, 'TAG directive accepts exactly two arguments');\n        }\n        handle = args[0];\n        prefix = args[1];\n        if (!PATTERN_TAG_HANDLE.test(handle)) {\n            throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n        }\n        if (_hasOwnProperty.call(state.tagMap, handle)) {\n            throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n        }\n        if (!PATTERN_TAG_URI.test(prefix)) {\n            throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n        }\n        state.tagMap[handle] = prefix;\n    }\n};\nfunction captureSegment(state, start, end, checkJson) {\n    var _position, _length, _character, _result;\n    var scalar = state.result;\n    if (scalar.startPosition == -1) {\n        scalar.startPosition = start;\n    }\n    if (start <= end) {\n        _result = state.input.slice(start, end);\n        if (checkJson) {\n            for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n                _character = _result.charCodeAt(_position);\n                if (!(0x09 === _character ||\n                    0x20 <= _character && _character <= 0x10FFFF)) {\n                    throwError(state, 'expected valid JSON character');\n                }\n            }\n        }\n        else if (PATTERN_NON_PRINTABLE.test(_result)) {\n            throwError(state, 'the stream contains non-printable characters');\n        }\n        scalar.value += _result;\n        scalar.endPosition = end;\n    }\n}\nfunction mergeMappings(state, destination, source) {\n    var sourceKeys, key, index, quantity;\n    if (!common.isObject(source)) {\n        throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n    }\n    sourceKeys = Object.keys(source);\n    for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n        key = sourceKeys[index];\n        if (!_hasOwnProperty.call(destination, key)) {\n            destination[key] = source[key];\n        }\n    }\n}\nfunction storeMappingPair(state, _result, keyTag, keyNode, valueNode) {\n    var index, quantity;\n    if (keyNode == null) {\n        return;\n    }\n    if (null === _result) {\n        _result = {\n            startPosition: keyNode.startPosition,\n            endPosition: valueNode.endPosition,\n            parent: null,\n            errors: [],\n            mappings: [], kind: ast.Kind.MAP\n        };\n    }\n    var mapping = ast.newMapping(keyNode, valueNode);\n    mapping.parent = _result;\n    keyNode.parent = mapping;\n    if (valueNode != null) {\n        valueNode.parent = mapping;\n    }\n    !state.ignoreDuplicateKeys && _result.mappings.forEach(function (sibling) {\n        if (sibling.key && sibling.key.value === (mapping.key && mapping.key.value)) {\n            throwErrorFromPosition(state, mapping.key.startPosition, 'duplicate key');\n            throwErrorFromPosition(state, sibling.key.startPosition, 'duplicate key');\n        }\n    });\n    _result.mappings.push(mapping);\n    _result.endPosition = valueNode ? valueNode.endPosition : keyNode.endPosition + 1;\n    return _result;\n}\nfunction readLineBreak(state) {\n    var ch;\n    ch = state.input.charCodeAt(state.position);\n    if (0x0A === ch) {\n        state.position++;\n    }\n    else if (0x0D === ch) {\n        state.position++;\n        if (0x0A === state.input.charCodeAt(state.position)) {\n            state.position++;\n        }\n    }\n    else {\n        throwError(state, 'a line break is expected');\n    }\n    state.line += 1;\n    state.lineStart = state.position;\n    state.lines.push({\n        start: state.lineStart,\n        line: state.line\n    });\n}\nvar Line = (function () {\n    function Line() {\n    }\n    return Line;\n}());\nfunction positionToLine(state, position) {\n    var line;\n    for (var i = 0; i < state.lines.length; i++) {\n        if (state.lines[i].start > position) {\n            break;\n        }\n        line = state.lines[i];\n    }\n    if (!line) {\n        return {\n            start: 0,\n            line: 0\n        };\n    }\n    return line;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);\n    while (0 !== ch) {\n        while (is_WHITE_SPACE(ch)) {\n            if (ch === 0x09) {\n                state.errors.push(generateError(state, \"Using tabs can lead to unpredictable results\", true));\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (allowComments && 0x23 === ch) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            } while (ch !== 0x0A && ch !== 0x0D && 0 !== ch);\n        }\n        if (is_EOL(ch)) {\n            readLineBreak(state);\n            ch = state.input.charCodeAt(state.position);\n            lineBreaks++;\n            state.lineIndent = 0;\n            while (0x20 === ch) {\n                state.lineIndent++;\n                ch = state.input.charCodeAt(++state.position);\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) {\n        throwWarning(state, 'deficient indentation');\n    }\n    return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n    var _position = state.position, ch;\n    ch = state.input.charCodeAt(_position);\n    if ((0x2D === ch || 0x2E === ch) &&\n        state.input.charCodeAt(_position + 1) === ch &&\n        state.input.charCodeAt(_position + 2) === ch) {\n        _position += 3;\n        ch = state.input.charCodeAt(_position);\n        if (ch === 0 || is_WS_OR_EOL(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeFoldedLines(state, scalar, count) {\n    if (1 === count) {\n        scalar.value += ' ';\n    }\n    else if (count > 1) {\n        scalar.value += common.repeat('\\n', count - 1);\n    }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;\n    var state_result = ast.newScalar();\n    state_result.plainScalar = true;\n    state.result = state_result;\n    ch = state.input.charCodeAt(state.position);\n    if (is_WS_OR_EOL(ch) ||\n        is_FLOW_INDICATOR(ch) ||\n        0x23 === ch ||\n        0x26 === ch ||\n        0x2A === ch ||\n        0x21 === ch ||\n        0x7C === ch ||\n        0x3E === ch ||\n        0x27 === ch ||\n        0x22 === ch ||\n        0x25 === ch ||\n        0x40 === ch ||\n        0x60 === ch) {\n        return false;\n    }\n    if (0x3F === ch || 0x2D === ch) {\n        following = state.input.charCodeAt(state.position + 1);\n        if (is_WS_OR_EOL(following) ||\n            withinFlowCollection && is_FLOW_INDICATOR(following)) {\n            return false;\n        }\n    }\n    state.kind = 'scalar';\n    captureStart = captureEnd = state.position;\n    hasPendingContent = false;\n    while (0 !== ch) {\n        if (0x3A === ch) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following) ||\n                withinFlowCollection && is_FLOW_INDICATOR(following)) {\n                break;\n            }\n        }\n        else if (0x23 === ch) {\n            preceding = state.input.charCodeAt(state.position - 1);\n            if (is_WS_OR_EOL(preceding)) {\n                break;\n            }\n        }\n        else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n            withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n            break;\n        }\n        else if (is_EOL(ch)) {\n            _line = state.line;\n            _lineStart = state.lineStart;\n            _lineIndent = state.lineIndent;\n            skipSeparationSpace(state, false, -1);\n            if (state.lineIndent >= nodeIndent) {\n                hasPendingContent = true;\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            }\n            else {\n                state.position = captureEnd;\n                state.line = _line;\n                state.lineStart = _lineStart;\n                state.lineIndent = _lineIndent;\n                break;\n            }\n        }\n        if (hasPendingContent) {\n            captureSegment(state, captureStart, captureEnd, false);\n            writeFoldedLines(state, state_result, state.line - _line);\n            captureStart = captureEnd = state.position;\n            hasPendingContent = false;\n        }\n        if (!is_WHITE_SPACE(ch)) {\n            captureEnd = state.position + 1;\n        }\n        ch = state.input.charCodeAt(++state.position);\n        if (state.position >= state.input.length) {\n            return false;\n        }\n    }\n    captureSegment(state, captureStart, captureEnd, false);\n    if (state.result.startPosition != -1) {\n        state_result.rawValue = state.input.substring(state_result.startPosition, state_result.endPosition);\n        return true;\n    }\n    state.kind = _kind;\n    state.result = _result;\n    return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n    var ch, captureStart, captureEnd;\n    ch = state.input.charCodeAt(state.position);\n    if (0x27 !== ch) {\n        return false;\n    }\n    var scalar = ast.newScalar();\n    scalar.singleQuoted = true;\n    state.kind = 'scalar';\n    state.result = scalar;\n    scalar.startPosition = state.position;\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while (0 !== (ch = state.input.charCodeAt(state.position))) {\n        if (0x27 === ch) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            scalar.endPosition = state.position;\n            if (0x27 === ch) {\n                captureStart = captureEnd = state.position;\n                state.position++;\n            }\n            else {\n                return true;\n            }\n        }\n        else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, scalar, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        }\n        else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, 'unexpected end of the document within a single quoted scalar');\n        }\n        else {\n            state.position++;\n            captureEnd = state.position;\n            scalar.endPosition = state.position;\n        }\n    }\n    throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n    var captureStart, captureEnd, hexLength, hexResult, tmp, tmpEsc, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (0x22 !== ch) {\n        return false;\n    }\n    state.kind = 'scalar';\n    var scalar = ast.newScalar();\n    scalar.doubleQuoted = true;\n    state.result = scalar;\n    scalar.startPosition = state.position;\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while (0 !== (ch = state.input.charCodeAt(state.position))) {\n        if (0x22 === ch) {\n            captureSegment(state, captureStart, state.position, true);\n            state.position++;\n            scalar.endPosition = state.position;\n            scalar.rawValue = state.input.substring(scalar.startPosition, scalar.endPosition);\n            return true;\n        }\n        else if (0x5C === ch) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (is_EOL(ch)) {\n                skipSeparationSpace(state, false, nodeIndent);\n            }\n            else if (ch < 256 && (state.allowAnyEscape ? customEscapeCheck[ch] : simpleEscapeCheck[ch])) {\n                scalar.value += (state.allowAnyEscape ? customEscapeMap[ch] : simpleEscapeMap[ch]);\n                state.position++;\n            }\n            else if ((tmp = escapedHexLen(ch)) > 0) {\n                hexLength = tmp;\n                hexResult = 0;\n                for (; hexLength > 0; hexLength--) {\n                    ch = state.input.charCodeAt(++state.position);\n                    if ((tmp = fromHexCode(ch)) >= 0) {\n                        hexResult = (hexResult << 4) + tmp;\n                    }\n                    else {\n                        throwError(state, 'expected hexadecimal character');\n                    }\n                }\n                scalar.value += charFromCodepoint(hexResult);\n                state.position++;\n            }\n            else {\n                throwError(state, 'unknown escape sequence');\n            }\n            captureStart = captureEnd = state.position;\n        }\n        else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, scalar, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        }\n        else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, 'unexpected end of the document within a double quoted scalar');\n        }\n        else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\nfunction readFlowCollection(state, nodeIndent) {\n    var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, keyNode, keyTag, valueNode, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x5B) {\n        terminator = 0x5D;\n        isMapping = false;\n        _result = ast.newItems();\n        _result.startPosition = state.position;\n    }\n    else if (ch === 0x7B) {\n        terminator = 0x7D;\n        isMapping = true;\n        _result = ast.newMap();\n        _result.startPosition = state.position;\n    }\n    else {\n        return false;\n    }\n    if (null !== state.anchor) {\n        _result.anchorId = state.anchor;\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(++state.position);\n    while (0 !== ch) {\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === terminator) {\n            state.position++;\n            state.tag = _tag;\n            state.anchor = _anchor;\n            state.kind = isMapping ? 'mapping' : 'sequence';\n            state.result = _result;\n            _result.endPosition = state.position;\n            return true;\n        }\n        else if (!readNext) {\n            var p = state.position;\n            throwError(state, 'missed comma between flow collection entries');\n            state.position = p + 1;\n        }\n        keyTag = keyNode = valueNode = null;\n        isPair = isExplicitPair = false;\n        if (0x3F === ch) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following)) {\n                isPair = isExplicitPair = true;\n                state.position++;\n                skipSeparationSpace(state, true, nodeIndent);\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        keyTag = state.tag;\n        keyNode = state.result;\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if ((isExplicitPair || state.line === _line) && 0x3A === ch) {\n            isPair = true;\n            ch = state.input.charCodeAt(++state.position);\n            skipSeparationSpace(state, true, nodeIndent);\n            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n            valueNode = state.result;\n        }\n        if (isMapping) {\n            storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n        }\n        else if (isPair) {\n            var mp = storeMappingPair(state, null, keyTag, keyNode, valueNode);\n            mp.parent = _result;\n            _result.items.push(mp);\n        }\n        else {\n            if (keyNode) {\n                keyNode.parent = _result;\n            }\n            _result.items.push(keyNode);\n        }\n        _result.endPosition = state.position + 1;\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (0x2C === ch) {\n            readNext = true;\n            ch = state.input.charCodeAt(++state.position);\n        }\n        else {\n            readNext = false;\n        }\n    }\n    throwError(state, 'unexpected end of the stream within a flow collection');\n}\nfunction readBlockScalar(state, nodeIndent) {\n    var captureStart, folding, chomping = CHOMPING_CLIP, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x7C) {\n        folding = false;\n    }\n    else if (ch === 0x3E) {\n        folding = true;\n    }\n    else {\n        return false;\n    }\n    var sc = ast.newScalar();\n    state.kind = 'scalar';\n    state.result = sc;\n    sc.startPosition = state.position;\n    while (0 !== ch) {\n        ch = state.input.charCodeAt(++state.position);\n        if (0x2B === ch || 0x2D === ch) {\n            if (CHOMPING_CLIP === chomping) {\n                chomping = (0x2B === ch) ? CHOMPING_KEEP : CHOMPING_STRIP;\n            }\n            else {\n                throwError(state, 'repeat of a chomping mode identifier');\n            }\n        }\n        else if ((tmp = fromDecimalCode(ch)) >= 0) {\n            if (tmp === 0) {\n                throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n            }\n            else if (!detectedIndent) {\n                textIndent = nodeIndent + tmp - 1;\n                detectedIndent = true;\n            }\n            else {\n                throwError(state, 'repeat of an indentation width identifier');\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (is_WHITE_SPACE(ch)) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        } while (is_WHITE_SPACE(ch));\n        if (0x23 === ch) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            } while (!is_EOL(ch) && (0 !== ch));\n        }\n    }\n    while (0 !== ch) {\n        readLineBreak(state);\n        state.lineIndent = 0;\n        ch = state.input.charCodeAt(state.position);\n        while ((!detectedIndent || state.lineIndent < textIndent) &&\n            (0x20 === ch)) {\n            state.lineIndent++;\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (!detectedIndent && state.lineIndent > textIndent) {\n            textIndent = state.lineIndent;\n        }\n        if (is_EOL(ch)) {\n            emptyLines++;\n            continue;\n        }\n        if (state.lineIndent < textIndent) {\n            if (chomping === CHOMPING_KEEP) {\n                sc.value += common.repeat('\\n', emptyLines);\n            }\n            else if (chomping === CHOMPING_CLIP) {\n                if (detectedIndent) {\n                    sc.value += '\\n';\n                }\n            }\n            break;\n        }\n        if (folding) {\n            if (is_WHITE_SPACE(ch)) {\n                atMoreIndented = true;\n                sc.value += common.repeat('\\n', emptyLines + 1);\n            }\n            else if (atMoreIndented) {\n                atMoreIndented = false;\n                sc.value += common.repeat('\\n', emptyLines + 1);\n            }\n            else if (0 === emptyLines) {\n                if (detectedIndent) {\n                    sc.value += ' ';\n                }\n            }\n            else {\n                sc.value += common.repeat('\\n', emptyLines);\n            }\n        }\n        else if (detectedIndent) {\n            sc.value += common.repeat('\\n', emptyLines + 1);\n        }\n        else {\n        }\n        detectedIndent = true;\n        emptyLines = 0;\n        captureStart = state.position;\n        while (!is_EOL(ch) && (0 !== ch)) {\n            ch = state.input.charCodeAt(++state.position);\n        }\n        captureSegment(state, captureStart, state.position, false);\n    }\n    sc.endPosition = state.position;\n    var i = state.position - 1;\n    var needMinus = false;\n    while (true) {\n        var c = state.input[i];\n        if (c == '\\r' || c == '\\n') {\n            if (needMinus) {\n                i--;\n            }\n            break;\n        }\n        if (c != ' ' && c != '\\t') {\n            break;\n        }\n        i--;\n    }\n    sc.endPosition = i;\n    sc.rawValue = state.input.substring(sc.startPosition, sc.endPosition);\n    return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n    var _line, _tag = state.tag, _anchor = state.anchor, _result = ast.newItems(), following, detected = false, ch;\n    if (null !== state.anchor) {\n        _result.anchorId = state.anchor;\n        state.anchorMap[state.anchor] = _result;\n    }\n    _result.startPosition = state.position;\n    ch = state.input.charCodeAt(state.position);\n    while (0 !== ch) {\n        if (0x2D !== ch) {\n            break;\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        if (!is_WS_OR_EOL(following)) {\n            break;\n        }\n        detected = true;\n        state.position++;\n        if (skipSeparationSpace(state, true, -1)) {\n            if (state.lineIndent <= nodeIndent) {\n                _result.items.push(null);\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n        if (state.result) {\n            state.result.parent = _result;\n            _result.items.push(state.result);\n        }\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if ((state.line === _line || state.lineIndent > nodeIndent) && (0 !== ch)) {\n            throwError(state, 'bad indentation of a sequence entry');\n        }\n        else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    _result.endPosition = state.position;\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = 'sequence';\n        state.result = _result;\n        _result.endPosition = state.position;\n        return true;\n    }\n    return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n    var following, allowCompact, _line, _tag = state.tag, _anchor = state.anchor, _result = ast.newMap(), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;\n    _result.startPosition = state.position;\n    if (null !== state.anchor) {\n        _result.anchorId = state.anchor;\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while (0 !== ch) {\n        following = state.input.charCodeAt(state.position + 1);\n        _line = state.line;\n        if ((0x3F === ch || 0x3A === ch) && is_WS_OR_EOL(following)) {\n            if (0x3F === ch) {\n                if (atExplicitKey) {\n                    storeMappingPair(state, _result, keyTag, keyNode, null);\n                    keyTag = keyNode = valueNode = null;\n                }\n                detected = true;\n                atExplicitKey = true;\n                allowCompact = true;\n            }\n            else if (atExplicitKey) {\n                atExplicitKey = false;\n                allowCompact = true;\n            }\n            else {\n                throwError(state, 'incomplete explicit mapping pair; a key node is missed');\n            }\n            state.position += 1;\n            ch = following;\n        }\n        else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n            if (state.line === _line) {\n                ch = state.input.charCodeAt(state.position);\n                while (is_WHITE_SPACE(ch)) {\n                    ch = state.input.charCodeAt(++state.position);\n                }\n                if (0x3A === ch) {\n                    ch = state.input.charCodeAt(++state.position);\n                    if (!is_WS_OR_EOL(ch)) {\n                        throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n                    }\n                    if (atExplicitKey) {\n                        storeMappingPair(state, _result, keyTag, keyNode, null);\n                        keyTag = keyNode = valueNode = null;\n                    }\n                    detected = true;\n                    atExplicitKey = false;\n                    allowCompact = false;\n                    keyTag = state.tag;\n                    keyNode = state.result;\n                }\n                else if (state.position == state.lineStart && testDocumentSeparator(state)) {\n                    break;\n                }\n                else if (detected) {\n                    throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n                }\n                else {\n                    state.tag = _tag;\n                    state.anchor = _anchor;\n                    return true;\n                }\n            }\n            else if (detected) {\n                throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n                while (state.position > 0) {\n                    ch = state.input.charCodeAt(--state.position);\n                    if (is_EOL(ch)) {\n                        state.position++;\n                        break;\n                    }\n                }\n            }\n            else {\n                state.tag = _tag;\n                state.anchor = _anchor;\n                return true;\n            }\n        }\n        else {\n            break;\n        }\n        if (state.line === _line || state.lineIndent > nodeIndent) {\n            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n                if (atExplicitKey) {\n                    keyNode = state.result;\n                }\n                else {\n                    valueNode = state.result;\n                }\n            }\n            if (!atExplicitKey) {\n                storeMappingPair(state, _result, keyTag, keyNode, valueNode);\n                keyTag = keyNode = valueNode = null;\n            }\n            skipSeparationSpace(state, true, -1);\n            ch = state.input.charCodeAt(state.position);\n        }\n        if (state.lineIndent > nodeIndent && (0 !== ch)) {\n            throwError(state, 'bad indentation of a mapping entry');\n        }\n        else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    if (atExplicitKey) {\n        storeMappingPair(state, _result, keyTag, keyNode, null);\n    }\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = 'mapping';\n        state.result = _result;\n    }\n    return detected;\n}\nfunction readTagProperty(state) {\n    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (0x21 !== ch) {\n        return false;\n    }\n    if (null !== state.tag) {\n        throwError(state, 'duplication of a tag property');\n    }\n    ch = state.input.charCodeAt(++state.position);\n    if (0x3C === ch) {\n        isVerbatim = true;\n        ch = state.input.charCodeAt(++state.position);\n    }\n    else if (0x21 === ch) {\n        isNamed = true;\n        tagHandle = '!!';\n        ch = state.input.charCodeAt(++state.position);\n    }\n    else {\n        tagHandle = '!';\n    }\n    _position = state.position;\n    if (isVerbatim) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        } while (0 !== ch && 0x3E !== ch);\n        if (state.position < state.length) {\n            tagName = state.input.slice(_position, state.position);\n            ch = state.input.charCodeAt(++state.position);\n        }\n        else {\n            throwError(state, 'unexpected end of the stream within a verbatim tag');\n        }\n    }\n    else {\n        while (0 !== ch && !is_WS_OR_EOL(ch)) {\n            if (0x21 === ch) {\n                if (!isNamed) {\n                    tagHandle = state.input.slice(_position - 1, state.position + 1);\n                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n                        throwError(state, 'named tag handle cannot contain such characters');\n                    }\n                    isNamed = true;\n                    _position = state.position + 1;\n                }\n                else {\n                    throwError(state, 'tag suffix cannot contain exclamation marks');\n                }\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        tagName = state.input.slice(_position, state.position);\n        if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n            throwError(state, 'tag suffix cannot contain flow indicator characters');\n        }\n    }\n    if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n        throwError(state, 'tag name cannot contain such characters: ' + tagName);\n    }\n    if (isVerbatim) {\n        state.tag = tagName;\n    }\n    else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n        state.tag = state.tagMap[tagHandle] + tagName;\n    }\n    else if ('!' === tagHandle) {\n        state.tag = '!' + tagName;\n    }\n    else if ('!!' === tagHandle) {\n        state.tag = 'tag:yaml.org,2002:' + tagName;\n    }\n    else {\n        throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n    }\n    return true;\n}\nfunction readAnchorProperty(state) {\n    var _position, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (0x26 !== ch) {\n        return false;\n    }\n    if (null !== state.anchor) {\n        throwError(state, 'duplication of an anchor property');\n    }\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, 'name of an anchor node must contain at least one character');\n    }\n    state.anchor = state.input.slice(_position, state.position);\n    return true;\n}\nfunction readAlias(state) {\n    var _position, alias, len = state.length, input = state.input, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (0x2A !== ch) {\n        return false;\n    }\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position <= _position) {\n        throwError(state, 'name of an alias node must contain at least one character');\n        state.position = _position + 1;\n    }\n    alias = state.input.slice(_position, state.position);\n    if (!state.anchorMap.hasOwnProperty(alias)) {\n        throwError(state, 'unidentified alias \"' + alias + '\"');\n        if (state.position <= _position) {\n            state.position = _position + 1;\n        }\n    }\n    state.result = ast.newAnchorRef(alias, _position, state.position, state.anchorMap[alias]);\n    skipSeparationSpace(state, true, -1);\n    return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent, _result;\n    state.tag = null;\n    state.anchor = null;\n    state.kind = null;\n    state.result = null;\n    allowBlockStyles = allowBlockScalars = allowBlockCollections =\n        CONTEXT_BLOCK_OUT === nodeContext ||\n            CONTEXT_BLOCK_IN === nodeContext;\n    if (allowToSeek) {\n        if (skipSeparationSpace(state, true, -1)) {\n            atNewLine = true;\n            if (state.lineIndent > parentIndent) {\n                indentStatus = 1;\n            }\n            else if (state.lineIndent === parentIndent) {\n                indentStatus = 0;\n            }\n            else if (state.lineIndent < parentIndent) {\n                indentStatus = -1;\n            }\n        }\n    }\n    var tagStart = state.position;\n    var tagColumn = state.position - state.lineStart;\n    if (1 === indentStatus) {\n        while (readTagProperty(state) || readAnchorProperty(state)) {\n            if (skipSeparationSpace(state, true, -1)) {\n                atNewLine = true;\n                allowBlockCollections = allowBlockStyles;\n                if (state.lineIndent > parentIndent) {\n                    indentStatus = 1;\n                }\n                else if (state.lineIndent === parentIndent) {\n                    indentStatus = 0;\n                }\n                else if (state.lineIndent < parentIndent) {\n                    indentStatus = -1;\n                }\n            }\n            else {\n                allowBlockCollections = false;\n            }\n        }\n    }\n    if (allowBlockCollections) {\n        allowBlockCollections = atNewLine || allowCompact;\n    }\n    if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {\n        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n            flowIndent = parentIndent;\n        }\n        else {\n            flowIndent = parentIndent + 1;\n        }\n        blockIndent = state.position - state.lineStart;\n        if (1 === indentStatus) {\n            if (allowBlockCollections &&\n                (readBlockSequence(state, blockIndent) ||\n                    readBlockMapping(state, blockIndent, flowIndent)) ||\n                readFlowCollection(state, flowIndent)) {\n                hasContent = true;\n            }\n            else {\n                if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n                    readSingleQuotedScalar(state, flowIndent) ||\n                    readDoubleQuotedScalar(state, flowIndent)) {\n                    hasContent = true;\n                }\n                else if (readAlias(state)) {\n                    hasContent = true;\n                    if (null !== state.tag || null !== state.anchor) {\n                        throwError(state, 'alias node should not have any properties');\n                    }\n                }\n                else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n                    hasContent = true;\n                    if (null === state.tag) {\n                        state.tag = '?';\n                    }\n                }\n                if (null !== state.anchor) {\n                    state.anchorMap[state.anchor] = state.result;\n                    state.result.anchorId = state.anchor;\n                }\n            }\n        }\n        else if (0 === indentStatus) {\n            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n        }\n    }\n    if (null !== state.tag && '!' !== state.tag) {\n        if (state.tag == \"!include\") {\n            if (!state.result) {\n                state.result = ast.newScalar();\n                state.result.startPosition = state.position;\n                state.result.endPosition = state.position;\n                throwError(state, \"!include without value\");\n            }\n            state.result.kind = ast.Kind.INCLUDE_REF;\n        }\n        else if ('?' === state.tag) {\n            for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n                type = state.implicitTypes[typeIndex];\n                var vl = state.result['value'];\n                if (type.resolve(vl)) {\n                    state.result.valueObject = type.construct(state.result['value']);\n                    state.tag = type.tag;\n                    if (null !== state.anchor) {\n                        state.result.anchorId = state.anchor;\n                        state.anchorMap[state.anchor] = state.result;\n                    }\n                    break;\n                }\n            }\n        }\n        else if (_hasOwnProperty.call(state.typeMap, state.tag)) {\n            type = state.typeMap[state.tag];\n            if (null !== state.result && type.kind !== state.kind) {\n                throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n            }\n            if (!type.resolve(state.result)) {\n                throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n            }\n            else {\n                state.result = type.construct(state.result);\n                if (null !== state.anchor) {\n                    state.result.anchorId = state.anchor;\n                    state.anchorMap[state.anchor] = state.result;\n                }\n            }\n        }\n        else {\n            throwErrorFromPosition(state, tagStart, 'unknown tag <' + state.tag + '>', false, true);\n        }\n    }\n    return null !== state.tag || null !== state.anchor || hasContent;\n}\nfunction readDocument(state) {\n    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;\n    state.version = null;\n    state.checkLineBreaks = state.legacy;\n    state.tagMap = {};\n    state.anchorMap = {};\n    while (0 !== (ch = state.input.charCodeAt(state.position))) {\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if (state.lineIndent > 0 || 0x25 !== ch) {\n            break;\n        }\n        hasDirectives = true;\n        ch = state.input.charCodeAt(++state.position);\n        _position = state.position;\n        while (0 !== ch && !is_WS_OR_EOL(ch)) {\n            ch = state.input.charCodeAt(++state.position);\n        }\n        directiveName = state.input.slice(_position, state.position);\n        directiveArgs = [];\n        if (directiveName.length < 1) {\n            throwError(state, 'directive name must not be less than one character in length');\n        }\n        while (0 !== ch) {\n            while (is_WHITE_SPACE(ch)) {\n                ch = state.input.charCodeAt(++state.position);\n            }\n            if (0x23 === ch) {\n                do {\n                    ch = state.input.charCodeAt(++state.position);\n                } while (0 !== ch && !is_EOL(ch));\n                break;\n            }\n            if (is_EOL(ch)) {\n                break;\n            }\n            _position = state.position;\n            while (0 !== ch && !is_WS_OR_EOL(ch)) {\n                ch = state.input.charCodeAt(++state.position);\n            }\n            directiveArgs.push(state.input.slice(_position, state.position));\n        }\n        if (0 !== ch) {\n            readLineBreak(state);\n        }\n        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n            directiveHandlers[directiveName](state, directiveName, directiveArgs);\n        }\n        else {\n            throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n            state.position++;\n        }\n    }\n    skipSeparationSpace(state, true, -1);\n    if (0 === state.lineIndent &&\n        0x2D === state.input.charCodeAt(state.position) &&\n        0x2D === state.input.charCodeAt(state.position + 1) &&\n        0x2D === state.input.charCodeAt(state.position + 2)) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n    }\n    else if (hasDirectives) {\n        throwError(state, 'directives end mark is expected');\n    }\n    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(state, true, -1);\n    if (state.checkLineBreaks &&\n        PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n        throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n    }\n    state.documents.push(state.result);\n    if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        if (0x2E === state.input.charCodeAt(state.position)) {\n            state.position += 3;\n            skipSeparationSpace(state, true, -1);\n        }\n        return;\n    }\n    if (state.position < (state.length - 1)) {\n        throwError(state, 'end of the stream or a document separator is expected');\n    }\n    else {\n        return;\n    }\n}\nfunction loadDocuments(input, options) {\n    input = String(input);\n    options = options || {};\n    var inputLength = input.length;\n    if (inputLength !== 0) {\n        if (0x0A !== input.charCodeAt(inputLength - 1) &&\n            0x0D !== input.charCodeAt(inputLength - 1)) {\n            input += '\\n';\n        }\n        if (input.charCodeAt(0) === 0xFEFF) {\n            input = input.slice(1);\n        }\n    }\n    var state = new State(input, options);\n    state.input += '\\0';\n    while (0x20 === state.input.charCodeAt(state.position)) {\n        state.lineIndent += 1;\n        state.position += 1;\n    }\n    while (state.position < (state.length - 1)) {\n        var q = state.position;\n        readDocument(state);\n        if (state.position <= q) {\n            for (; state.position < state.length - 1; state.position++) {\n                var c = state.input.charAt(state.position);\n                if (c == '\\n') {\n                    break;\n                }\n            }\n        }\n    }\n    var documents = state.documents;\n    var docsCount = documents.length;\n    if (docsCount > 0) {\n        documents[docsCount - 1].endPosition = inputLength;\n    }\n    for (var _i = 0, documents_1 = documents; _i < documents_1.length; _i++) {\n        var x = documents_1[_i];\n        x.errors = state.errors;\n        if (x.startPosition > x.endPosition) {\n            x.startPosition = x.endPosition;\n        }\n    }\n    return documents;\n}\nfunction loadAll(input, iterator, options) {\n    if (options === void 0) { options = {}; }\n    var documents = loadDocuments(input, options), index, length;\n    for (index = 0, length = documents.length; index < length; index += 1) {\n        iterator(documents[index]);\n    }\n}\nexports.loadAll = loadAll;\nfunction load(input, options) {\n    if (options === void 0) { options = {}; }\n    var documents = loadDocuments(input, options), index, length;\n    if (0 === documents.length) {\n        return undefined;\n    }\n    else if (1 === documents.length) {\n        return documents[0];\n    }\n    var e = new YAMLException('expected a single document in the stream, but found more');\n    e.mark = new Mark(\"\", \"\", 0, 0, 0);\n    e.mark.position = documents[0].endPosition;\n    documents[0].errors.push(e);\n    return documents[0];\n}\nexports.load = load;\nfunction safeLoadAll(input, output, options) {\n    if (options === void 0) { options = {}; }\n    loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\nexports.safeLoadAll = safeLoadAll;\nfunction safeLoad(input, options) {\n    if (options === void 0) { options = {}; }\n    return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));\n}\nexports.safeLoad = safeLoad;\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;\n//# sourceMappingURL=loader.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/loader.js?")},"./node_modules/yaml-ast-parser/dist/src/mark.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar Mark = (function () {\n    function Mark(name, buffer, position, line, column) {\n        this.name = name;\n        this.buffer = buffer;\n        this.position = position;\n        this.line = line;\n        this.column = column;\n    }\n    Mark.prototype.getSnippet = function (indent, maxLength) {\n        if (indent === void 0) { indent = 0; }\n        if (maxLength === void 0) { maxLength = 75; }\n        var head, start, tail, end, snippet;\n        if (!this.buffer) {\n            return null;\n        }\n        indent = indent || 4;\n        maxLength = maxLength || 75;\n        head = '';\n        start = this.position;\n        while (start > 0 && -1 === '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(start - 1))) {\n            start -= 1;\n            if (this.position - start > (maxLength / 2 - 1)) {\n                head = ' ... ';\n                start += 5;\n                break;\n            }\n        }\n        tail = '';\n        end = this.position;\n        while (end < this.buffer.length && -1 === '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(end))) {\n            end += 1;\n            if (end - this.position > (maxLength / 2 - 1)) {\n                tail = ' ... ';\n                end -= 5;\n                break;\n            }\n        }\n        snippet = this.buffer.slice(start, end);\n        return common.repeat(' ', indent) + head + snippet + tail + '\\n' +\n            common.repeat(' ', indent + this.position - start + head.length) + '^';\n    };\n    Mark.prototype.toString = function (compact) {\n        if (compact === void 0) { compact = true; }\n        var snippet, where = '';\n        if (this.name) {\n            where += 'in \"' + this.name + '\" ';\n        }\n        where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);\n        if (!compact) {\n            snippet = this.getSnippet();\n            if (snippet) {\n                where += ':\\n' + snippet;\n            }\n        }\n        return where;\n    };\n    return Mark;\n}());\nmodule.exports = Mark;\n//# sourceMappingURL=mark.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/mark.js?")},"./node_modules/yaml-ast-parser/dist/src/scalarInference.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction parseYamlBoolean(input) {\n    if (["true", "True", "TRUE"].lastIndexOf(input) >= 0) {\n        return true;\n    }\n    else if (["false", "False", "FALSE"].lastIndexOf(input) >= 0) {\n        return false;\n    }\n    throw "Invalid boolean \\"" + input + "\\"";\n}\nexports.parseYamlBoolean = parseYamlBoolean;\nfunction safeParseYamlInteger(input) {\n    if (input.lastIndexOf(\'0o\', 0) === 0) {\n        return parseInt(input.substring(2), 8);\n    }\n    return parseInt(input);\n}\nfunction parseYamlInteger(input) {\n    var result = safeParseYamlInteger(input);\n    if (isNaN(result)) {\n        throw "Invalid integer \\"" + input + "\\"";\n    }\n    return result;\n}\nexports.parseYamlInteger = parseYamlInteger;\nfunction parseYamlFloat(input) {\n    if ([".nan", ".NaN", ".NAN"].lastIndexOf(input) >= 0) {\n        return NaN;\n    }\n    var infinity = /^([-+])?(?:\\.inf|\\.Inf|\\.INF)$/;\n    var match = infinity.exec(input);\n    if (match) {\n        return (match[1] === \'-\') ? -Infinity : Infinity;\n    }\n    var result = parseFloat(input);\n    if (!isNaN(result)) {\n        return result;\n    }\n    throw "Invalid float \\"" + input + "\\"";\n}\nexports.parseYamlFloat = parseYamlFloat;\nvar ScalarType;\n(function (ScalarType) {\n    ScalarType[ScalarType["null"] = 0] = "null";\n    ScalarType[ScalarType["bool"] = 1] = "bool";\n    ScalarType[ScalarType["int"] = 2] = "int";\n    ScalarType[ScalarType["float"] = 3] = "float";\n    ScalarType[ScalarType["string"] = 4] = "string";\n})(ScalarType = exports.ScalarType || (exports.ScalarType = {}));\nfunction determineScalarType(node) {\n    if (node === undefined) {\n        return ScalarType.null;\n    }\n    if (node.doubleQuoted || !node.plainScalar || node[\'singleQuoted\']) {\n        return ScalarType.string;\n    }\n    var value = node.value;\n    if (["null", "Null", "NULL", "~", \'\'].indexOf(value) >= 0) {\n        return ScalarType.null;\n    }\n    if (value === null || value === undefined) {\n        return ScalarType.null;\n    }\n    if (["true", "True", "TRUE", "false", "False", "FALSE"].indexOf(value) >= 0) {\n        return ScalarType.bool;\n    }\n    var base10 = /^[-+]?[0-9]+$/;\n    var base8 = /^0o[0-7]+$/;\n    var base16 = /^0x[0-9a-fA-F]+$/;\n    if (base10.test(value) || base8.test(value) || base16.test(value)) {\n        return ScalarType.int;\n    }\n    var float = /^[-+]?(\\.[0-9]+|[0-9]+(\\.[0-9]*)?)([eE][-+]?[0-9]+)?$/;\n    var infinity = /^[-+]?(\\.inf|\\.Inf|\\.INF)$/;\n    if (float.test(value) || infinity.test(value) || [".nan", ".NaN", ".NAN"].indexOf(value) >= 0) {\n        return ScalarType.float;\n    }\n    return ScalarType.string;\n}\nexports.determineScalarType = determineScalarType;\n//# sourceMappingURL=scalarInference.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/scalarInference.js?')},"./node_modules/yaml-ast-parser/dist/src/schema.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar YAMLException = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/exception.js\");\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction compileList(schema, name, result) {\n    var exclude = [];\n    schema.include.forEach(function (includedSchema) {\n        result = compileList(includedSchema, name, result);\n    });\n    schema[name].forEach(function (currentType) {\n        result.forEach(function (previousType, previousIndex) {\n            if (previousType.tag === currentType.tag) {\n                exclude.push(previousIndex);\n            }\n        });\n        result.push(currentType);\n    });\n    return result.filter(function (type, index) {\n        return -1 === exclude.indexOf(index);\n    });\n}\nfunction compileMap() {\n    var result = {}, index, length;\n    function collectType(type) {\n        result[type.tag] = type;\n    }\n    for (index = 0, length = arguments.length; index < length; index += 1) {\n        arguments[index].forEach(collectType);\n    }\n    return result;\n}\nvar Schema = (function () {\n    function Schema(definition) {\n        this.include = definition.include || [];\n        this.implicit = definition.implicit || [];\n        this.explicit = definition.explicit || [];\n        this.implicit.forEach(function (type) {\n            if (type.loadKind && 'scalar' !== type.loadKind) {\n                throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n            }\n        });\n        this.compiledImplicit = compileList(this, 'implicit', []);\n        this.compiledExplicit = compileList(this, 'explicit', []);\n        this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n    }\n    Schema.DEFAULT = null;\n    Schema.create = function createSchema() {\n        var schemas, types;\n        switch (arguments.length) {\n            case 1:\n                schemas = Schema.DEFAULT;\n                types = arguments[0];\n                break;\n            case 2:\n                schemas = arguments[0];\n                types = arguments[1];\n                break;\n            default:\n                throw new YAMLException('Wrong number of arguments for Schema.create function');\n        }\n        schemas = common.toArray(schemas);\n        types = common.toArray(types);\n        if (!schemas.every(function (schema) { return schema instanceof Schema; })) {\n            throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n        }\n        if (!types.every(function (type) { return type instanceof type_1.Type; })) {\n            throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n        }\n        return new Schema({\n            include: schemas,\n            explicit: types\n        });\n    };\n    return Schema;\n}());\nexports.Schema = Schema;\n//# sourceMappingURL=schema.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema.js?")},"./node_modules/yaml-ast-parser/dist/src/schema/core.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar schema_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema.js");\nmodule.exports = new schema_1.Schema({\n    include: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema/json.js")\n    ]\n});\n//# sourceMappingURL=core.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema/core.js?')},"./node_modules/yaml-ast-parser/dist/src/schema/default_full.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar schema_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema.js");\nvar schema = new schema_1.Schema({\n    include: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema/default_safe.js")\n    ],\n    explicit: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/js/undefined.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/js/regexp.js")\n    ]\n});\nschema_1.Schema.DEFAULT = schema;\nmodule.exports = schema;\n//# sourceMappingURL=default_full.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema/default_full.js?')},"./node_modules/yaml-ast-parser/dist/src/schema/default_safe.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar schema_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema.js");\nvar schema = new schema_1.Schema({\n    include: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema/core.js")\n    ],\n    implicit: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/timestamp.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/merge.js")\n    ],\n    explicit: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/binary.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/omap.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/pairs.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/set.js")\n    ]\n});\nmodule.exports = schema;\n//# sourceMappingURL=default_safe.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema/default_safe.js?')},"./node_modules/yaml-ast-parser/dist/src/schema/failsafe.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar schema_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema.js");\nmodule.exports = new schema_1.Schema({\n    explicit: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/str.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/seq.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/map.js")\n    ]\n});\n//# sourceMappingURL=failsafe.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema/failsafe.js?')},"./node_modules/yaml-ast-parser/dist/src/schema/json.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar schema_1 = __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema.js");\nmodule.exports = new schema_1.Schema({\n    include: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/schema/failsafe.js")\n    ],\n    implicit: [\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/null.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/bool.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/int.js"),\n        __webpack_require__("./node_modules/yaml-ast-parser/dist/src/type/float.js")\n    ]\n});\n//# sourceMappingURL=json.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/schema/json.js?')},"./node_modules/yaml-ast-parser/dist/src/type.js":function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar YAMLException = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/exception.js\");\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n    'kind',\n    'resolve',\n    'construct',\n    'instanceOf',\n    'predicate',\n    'represent',\n    'defaultStyle',\n    'styleAliases'\n];\nvar YAML_NODE_KINDS = [\n    'scalar',\n    'sequence',\n    'mapping'\n];\nfunction compileStyleAliases(map) {\n    var result = {};\n    if (null !== map) {\n        Object.keys(map).forEach(function (style) {\n            map[style].forEach(function (alias) {\n                result[String(alias)] = style;\n            });\n        });\n    }\n    return result;\n}\nvar Type = (function () {\n    function Type(tag, options) {\n        options = options || {};\n        Object.keys(options).forEach(function (name) {\n            if (-1 === TYPE_CONSTRUCTOR_OPTIONS.indexOf(name)) {\n                throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n            }\n        });\n        this.tag = tag;\n        this.kind = options['kind'] || null;\n        this.resolve = options['resolve'] || function () { return true; };\n        this.construct = options['construct'] || function (data) { return data; };\n        this.instanceOf = options['instanceOf'] || null;\n        this.predicate = options['predicate'] || null;\n        this.represent = options['represent'] || null;\n        this.defaultStyle = options['defaultStyle'] || null;\n        this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n        if (-1 === YAML_NODE_KINDS.indexOf(this.kind)) {\n            throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n        }\n    }\n    return Type;\n}());\nexports.Type = Type;\n//# sourceMappingURL=type.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type.js?")},"./node_modules/yaml-ast-parser/dist/src/type/binary.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar NodeBuffer = __webpack_require__(\"./node_modules/buffer/index.js\").Buffer;\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\nfunction resolveYamlBinary(data) {\n    if (null === data) {\n        return false;\n    }\n    var code, idx, bitlen = 0, len = 0, max = data.length, map = BASE64_MAP;\n    for (idx = 0; idx < max; idx++) {\n        code = map.indexOf(data.charAt(idx));\n        if (code > 64) {\n            continue;\n        }\n        if (code < 0) {\n            return false;\n        }\n        bitlen += 6;\n    }\n    return (bitlen % 8) === 0;\n}\nfunction constructYamlBinary(data) {\n    var code, idx, tailbits, input = data.replace(/[\\r\\n=]/g, ''), max = input.length, map = BASE64_MAP, bits = 0, result = [];\n    for (idx = 0; idx < max; idx++) {\n        if ((idx % 4 === 0) && idx) {\n            result.push((bits >> 16) & 0xFF);\n            result.push((bits >> 8) & 0xFF);\n            result.push(bits & 0xFF);\n        }\n        bits = (bits << 6) | map.indexOf(input.charAt(idx));\n    }\n    tailbits = (max % 4) * 6;\n    if (tailbits === 0) {\n        result.push((bits >> 16) & 0xFF);\n        result.push((bits >> 8) & 0xFF);\n        result.push(bits & 0xFF);\n    }\n    else if (tailbits === 18) {\n        result.push((bits >> 10) & 0xFF);\n        result.push((bits >> 2) & 0xFF);\n    }\n    else if (tailbits === 12) {\n        result.push((bits >> 4) & 0xFF);\n    }\n    if (NodeBuffer) {\n        return new NodeBuffer(result);\n    }\n    return result;\n}\nfunction representYamlBinary(object) {\n    var result = '', bits = 0, idx, tail, max = object.length, map = BASE64_MAP;\n    for (idx = 0; idx < max; idx++) {\n        if ((idx % 3 === 0) && idx) {\n            result += map[(bits >> 18) & 0x3F];\n            result += map[(bits >> 12) & 0x3F];\n            result += map[(bits >> 6) & 0x3F];\n            result += map[bits & 0x3F];\n        }\n        bits = (bits << 8) + object[idx];\n    }\n    tail = max % 3;\n    if (tail === 0) {\n        result += map[(bits >> 18) & 0x3F];\n        result += map[(bits >> 12) & 0x3F];\n        result += map[(bits >> 6) & 0x3F];\n        result += map[bits & 0x3F];\n    }\n    else if (tail === 2) {\n        result += map[(bits >> 10) & 0x3F];\n        result += map[(bits >> 4) & 0x3F];\n        result += map[(bits << 2) & 0x3F];\n        result += map[64];\n    }\n    else if (tail === 1) {\n        result += map[(bits >> 2) & 0x3F];\n        result += map[(bits << 4) & 0x3F];\n        result += map[64];\n        result += map[64];\n    }\n    return result;\n}\nfunction isBinary(object) {\n    return NodeBuffer && NodeBuffer.isBuffer(object);\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:binary', {\n    kind: 'scalar',\n    resolve: resolveYamlBinary,\n    construct: constructYamlBinary,\n    predicate: isBinary,\n    represent: representYamlBinary\n});\n//# sourceMappingURL=binary.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/binary.js?")},"./node_modules/yaml-ast-parser/dist/src/type/bool.js":function(module,exports,__webpack_require__){"use strict";eval("\n'use strict';\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction resolveYamlBoolean(data) {\n    if (null === data) {\n        return false;\n    }\n    var max = data.length;\n    return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n        (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\nfunction constructYamlBoolean(data) {\n    return data === 'true' ||\n        data === 'True' ||\n        data === 'TRUE';\n}\nfunction isBoolean(object) {\n    return '[object Boolean]' === Object.prototype.toString.call(object);\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:bool', {\n    kind: 'scalar',\n    resolve: resolveYamlBoolean,\n    construct: constructYamlBoolean,\n    predicate: isBoolean,\n    represent: {\n        lowercase: function (object) { return object ? 'true' : 'false'; },\n        uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n        camelcase: function (object) { return object ? 'True' : 'False'; }\n    },\n    defaultStyle: 'lowercase'\n});\n//# sourceMappingURL=bool.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/bool.js?")},"./node_modules/yaml-ast-parser/dist/src/type/float.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar YAML_FLOAT_PATTERN = new RegExp('^(?:[-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+][0-9]+)?' +\n    '|\\\\.[0-9_]+(?:[eE][-+][0-9]+)?' +\n    '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' +\n    '|[-+]?\\\\.(?:inf|Inf|INF)' +\n    '|\\\\.(?:nan|NaN|NAN))$');\nfunction resolveYamlFloat(data) {\n    if (null === data) {\n        return false;\n    }\n    var value, sign, base, digits;\n    if (!YAML_FLOAT_PATTERN.test(data)) {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlFloat(data) {\n    var value, sign, base, digits;\n    value = data.replace(/_/g, '').toLowerCase();\n    sign = '-' === value[0] ? -1 : 1;\n    digits = [];\n    if (0 <= '+-'.indexOf(value[0])) {\n        value = value.slice(1);\n    }\n    if ('.inf' === value) {\n        return (1 === sign) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n    }\n    else if ('.nan' === value) {\n        return NaN;\n    }\n    else if (0 <= value.indexOf(':')) {\n        value.split(':').forEach(function (v) {\n            digits.unshift(parseFloat(v, 10));\n        });\n        value = 0.0;\n        base = 1;\n        digits.forEach(function (d) {\n            value += d * base;\n            base *= 60;\n        });\n        return sign * value;\n    }\n    return sign * parseFloat(value, 10);\n}\nfunction representYamlFloat(object, style) {\n    if (isNaN(object)) {\n        switch (style) {\n            case 'lowercase':\n                return '.nan';\n            case 'uppercase':\n                return '.NAN';\n            case 'camelcase':\n                return '.NaN';\n        }\n    }\n    else if (Number.POSITIVE_INFINITY === object) {\n        switch (style) {\n            case 'lowercase':\n                return '.inf';\n            case 'uppercase':\n                return '.INF';\n            case 'camelcase':\n                return '.Inf';\n        }\n    }\n    else if (Number.NEGATIVE_INFINITY === object) {\n        switch (style) {\n            case 'lowercase':\n                return '-.inf';\n            case 'uppercase':\n                return '-.INF';\n            case 'camelcase':\n                return '-.Inf';\n        }\n    }\n    else if (common.isNegativeZero(object)) {\n        return '-0.0';\n    }\n    return object.toString(10);\n}\nfunction isFloat(object) {\n    return ('[object Number]' === Object.prototype.toString.call(object)) &&\n        (0 !== object % 1 || common.isNegativeZero(object));\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:float', {\n    kind: 'scalar',\n    resolve: resolveYamlFloat,\n    construct: constructYamlFloat,\n    predicate: isFloat,\n    represent: representYamlFloat,\n    defaultStyle: 'lowercase'\n});\n//# sourceMappingURL=float.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/float.js?")},"./node_modules/yaml-ast-parser/dist/src/type/int.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar common = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/common.js\");\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction isHexCode(c) {\n    return ((0x30 <= c) && (c <= 0x39)) ||\n        ((0x41 <= c) && (c <= 0x46)) ||\n        ((0x61 <= c) && (c <= 0x66));\n}\nfunction isOctCode(c) {\n    return ((0x30 <= c) && (c <= 0x37));\n}\nfunction isDecCode(c) {\n    return ((0x30 <= c) && (c <= 0x39));\n}\nfunction resolveYamlInteger(data) {\n    if (null === data) {\n        return false;\n    }\n    var max = data.length, index = 0, hasDigits = false, ch;\n    if (!max) {\n        return false;\n    }\n    ch = data[index];\n    if (ch === '-' || ch === '+') {\n        ch = data[++index];\n    }\n    if (ch === '0') {\n        if (index + 1 === max) {\n            return true;\n        }\n        ch = data[++index];\n        if (ch === 'b') {\n            index++;\n            for (; index < max; index++) {\n                ch = data[index];\n                if (ch === '_') {\n                    continue;\n                }\n                if (ch !== '0' && ch !== '1') {\n                    return false;\n                }\n                hasDigits = true;\n            }\n            return hasDigits;\n        }\n        if (ch === 'x') {\n            index++;\n            for (; index < max; index++) {\n                ch = data[index];\n                if (ch === '_') {\n                    continue;\n                }\n                if (!isHexCode(data.charCodeAt(index))) {\n                    return false;\n                }\n                hasDigits = true;\n            }\n            return hasDigits;\n        }\n        for (; index < max; index++) {\n            ch = data[index];\n            if (ch === '_') {\n                continue;\n            }\n            if (!isOctCode(data.charCodeAt(index))) {\n                return false;\n            }\n            hasDigits = true;\n        }\n        return hasDigits;\n    }\n    for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') {\n            continue;\n        }\n        if (ch === ':') {\n            break;\n        }\n        if (!isDecCode(data.charCodeAt(index))) {\n            return false;\n        }\n        hasDigits = true;\n    }\n    if (!hasDigits) {\n        return false;\n    }\n    if (ch !== ':') {\n        return true;\n    }\n    return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\nfunction constructYamlInteger(data) {\n    var value = data, sign = 1, ch, base, digits = [];\n    if (value.indexOf('_') !== -1) {\n        value = value.replace(/_/g, '');\n    }\n    ch = value[0];\n    if (ch === '-' || ch === '+') {\n        if (ch === '-') {\n            sign = -1;\n        }\n        value = value.slice(1);\n        ch = value[0];\n    }\n    if ('0' === value) {\n        return 0;\n    }\n    if (ch === '0') {\n        if (value[1] === 'b') {\n            return sign * parseInt(value.slice(2), 2);\n        }\n        if (value[1] === 'x') {\n            return sign * parseInt(value, 16);\n        }\n        return sign * parseInt(value, 8);\n    }\n    if (value.indexOf(':') !== -1) {\n        value.split(':').forEach(function (v) {\n            digits.unshift(parseInt(v, 10));\n        });\n        value = 0;\n        base = 1;\n        digits.forEach(function (d) {\n            value += (d * base);\n            base *= 60;\n        });\n        return sign * value;\n    }\n    return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n    return ('[object Number]' === Object.prototype.toString.call(object)) &&\n        (0 === object % 1 && !common.isNegativeZero(object));\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:int', {\n    kind: 'scalar',\n    resolve: resolveYamlInteger,\n    construct: constructYamlInteger,\n    predicate: isInteger,\n    represent: {\n        binary: function (object) { return '0b' + object.toString(2); },\n        octal: function (object) { return '0' + object.toString(8); },\n        decimal: function (object) { return object.toString(10); },\n        hexadecimal: function (object) { return '0x' + object.toString(16).toUpperCase(); }\n    },\n    defaultStyle: 'decimal',\n    styleAliases: {\n        binary: [2, 'bin'],\n        octal: [8, 'oct'],\n        decimal: [10, 'dec'],\n        hexadecimal: [16, 'hex']\n    }\n});\n//# sourceMappingURL=int.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/int.js?")},"./node_modules/yaml-ast-parser/dist/src/type/js/regexp.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction resolveJavascriptRegExp(data) {\n    if (null === data) {\n        return false;\n    }\n    if (0 === data.length) {\n        return false;\n    }\n    var regexp = data, tail = /\\/([gim]*)$/.exec(data), modifiers = '';\n    if ('/' === regexp[0]) {\n        if (tail) {\n            modifiers = tail[1];\n        }\n        if (modifiers.length > 3) {\n            return false;\n        }\n        if (regexp[regexp.length - modifiers.length - 1] !== '/') {\n            return false;\n        }\n        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n    }\n    try {\n        var dummy = new RegExp(regexp, modifiers);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction constructJavascriptRegExp(data) {\n    var regexp = data, tail = /\\/([gim]*)$/.exec(data), modifiers = '';\n    if ('/' === regexp[0]) {\n        if (tail) {\n            modifiers = tail[1];\n        }\n        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n    }\n    return new RegExp(regexp, modifiers);\n}\nfunction representJavascriptRegExp(object) {\n    var result = '/' + object.source + '/';\n    if (object.global) {\n        result += 'g';\n    }\n    if (object.multiline) {\n        result += 'm';\n    }\n    if (object.ignoreCase) {\n        result += 'i';\n    }\n    return result;\n}\nfunction isRegExp(object) {\n    return '[object RegExp]' === Object.prototype.toString.call(object);\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:js/regexp', {\n    kind: 'scalar',\n    resolve: resolveJavascriptRegExp,\n    construct: constructJavascriptRegExp,\n    predicate: isRegExp,\n    represent: representJavascriptRegExp\n});\n//# sourceMappingURL=regexp.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/js/regexp.js?")},"./node_modules/yaml-ast-parser/dist/src/type/js/undefined.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction resolveJavascriptUndefined() {\n    return true;\n}\nfunction constructJavascriptUndefined() {\n    return undefined;\n}\nfunction representJavascriptUndefined() {\n    return '';\n}\nfunction isUndefined(object) {\n    return 'undefined' === typeof object;\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:js/undefined', {\n    kind: 'scalar',\n    resolve: resolveJavascriptUndefined,\n    construct: constructJavascriptUndefined,\n    predicate: isUndefined,\n    represent: representJavascriptUndefined\n});\n//# sourceMappingURL=undefined.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/js/undefined.js?")},"./node_modules/yaml-ast-parser/dist/src/type/map.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nmodule.exports = new type_1.Type('tag:yaml.org,2002:map', {\n    kind: 'mapping',\n    construct: function (data) { return null !== data ? data : {}; }\n});\n//# sourceMappingURL=map.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/map.js?")},"./node_modules/yaml-ast-parser/dist/src/type/merge.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction resolveYamlMerge(data) {\n    return '<<' === data || null === data;\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:merge', {\n    kind: 'scalar',\n    resolve: resolveYamlMerge\n});\n//# sourceMappingURL=merge.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/merge.js?")},"./node_modules/yaml-ast-parser/dist/src/type/null.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nfunction resolveYamlNull(data) {\n    if (null === data) {\n        return true;\n    }\n    var max = data.length;\n    return (max === 1 && data === '~') ||\n        (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\nfunction constructYamlNull() {\n    return null;\n}\nfunction isNull(object) {\n    return null === object;\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:null', {\n    kind: 'scalar',\n    resolve: resolveYamlNull,\n    construct: constructYamlNull,\n    predicate: isNull,\n    represent: {\n        canonical: function () { return '~'; },\n        lowercase: function () { return 'null'; },\n        uppercase: function () { return 'NULL'; },\n        camelcase: function () { return 'Null'; }\n    },\n    defaultStyle: 'lowercase'\n});\n//# sourceMappingURL=null.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/null.js?")},"./node_modules/yaml-ast-parser/dist/src/type/omap.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n    if (null === data) {\n        return true;\n    }\n    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;\n    for (index = 0, length = object.length; index < length; index += 1) {\n        pair = object[index];\n        pairHasKey = false;\n        if ('[object Object]' !== _toString.call(pair)) {\n            return false;\n        }\n        for (pairKey in pair) {\n            if (_hasOwnProperty.call(pair, pairKey)) {\n                if (!pairHasKey) {\n                    pairHasKey = true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        if (!pairHasKey) {\n            return false;\n        }\n        if (-1 === objectKeys.indexOf(pairKey)) {\n            objectKeys.push(pairKey);\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nfunction constructYamlOmap(data) {\n    return null !== data ? data : [];\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:omap', {\n    kind: 'sequence',\n    resolve: resolveYamlOmap,\n    construct: constructYamlOmap\n});\n//# sourceMappingURL=omap.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/omap.js?")},"./node_modules/yaml-ast-parser/dist/src/type/pairs.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar ast = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/yamlAST.js\");\nvar _toString = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n    if (null === data) {\n        return true;\n    }\n    if (data.kind != ast.Kind.SEQ) {\n        return false;\n    }\n    var index, length, pair, keys, result, object = data.items;\n    for (index = 0, length = object.length; index < length; index += 1) {\n        pair = object[index];\n        if ('[object Object]' !== _toString.call(pair)) {\n            return false;\n        }\n        if (!Array.isArray(pair.mappings)) {\n            return false;\n        }\n        if (1 !== pair.mappings.length) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction constructYamlPairs(data) {\n    if (null === data || !Array.isArray(data.items)) {\n        return [];\n    }\n    var index, length, keys, result, object = data.items;\n    result = ast.newItems();\n    result.parent = data.parent;\n    result.startPosition = data.startPosition;\n    result.endPosition = data.endPosition;\n    for (index = 0, length = object.length; index < length; index += 1) {\n        var pair = object[index];\n        var mapping = pair.mappings[0];\n        var pairSeq = ast.newItems();\n        pairSeq.parent = result;\n        pairSeq.startPosition = mapping.key.startPosition;\n        pairSeq.endPosition = mapping.value.startPosition;\n        mapping.key.parent = pairSeq;\n        mapping.value.parent = pairSeq;\n        pairSeq.items = [mapping.key, mapping.value];\n        result.items.push(pairSeq);\n    }\n    return result;\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:pairs', {\n    kind: 'sequence',\n    resolve: resolveYamlPairs,\n    construct: constructYamlPairs\n});\n//# sourceMappingURL=pairs.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/pairs.js?")},"./node_modules/yaml-ast-parser/dist/src/type/seq.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nmodule.exports = new type_1.Type('tag:yaml.org,2002:seq', {\n    kind: 'sequence',\n    construct: function (data) { return null !== data ? data : []; }\n});\n//# sourceMappingURL=seq.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/seq.js?")},"./node_modules/yaml-ast-parser/dist/src/type/set.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar ast = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/yamlAST.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n    if (null === data) {\n        return true;\n    }\n    if (data.kind != ast.Kind.MAP) {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlSet(data) {\n    return null !== data ? data : {};\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:set', {\n    kind: 'mapping',\n    resolve: resolveYamlSet,\n    construct: constructYamlSet\n});\n//# sourceMappingURL=set.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/set.js?")},"./node_modules/yaml-ast-parser/dist/src/type/str.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nmodule.exports = new type_1.Type('tag:yaml.org,2002:str', {\n    kind: 'scalar',\n    construct: function (data) { return null !== data ? data : ''; }\n});\n//# sourceMappingURL=str.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/str.js?")},"./node_modules/yaml-ast-parser/dist/src/type/timestamp.js":function(module,exports,__webpack_require__){"use strict";eval("\nvar type_1 = __webpack_require__(\"./node_modules/yaml-ast-parser/dist/src/type.js\");\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +\n    '-([0-9][0-9]?)' +\n    '-([0-9][0-9]?)' +\n    '(?:(?:[Tt]|[ \\\\t]+)' +\n    '([0-9][0-9]?)' +\n    ':([0-9][0-9])' +\n    ':([0-9][0-9])' +\n    '(?:\\\\.([0-9]*))?' +\n    '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' +\n    '(?::([0-9][0-9]))?))?)?$');\nfunction resolveYamlTimestamp(data) {\n    if (null === data) {\n        return false;\n    }\n    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;\n    match = YAML_TIMESTAMP_REGEXP.exec(data);\n    if (null === match) {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlTimestamp(data) {\n    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;\n    match = YAML_TIMESTAMP_REGEXP.exec(data);\n    if (null === match) {\n        throw new Error('Date resolve error');\n    }\n    year = +(match[1]);\n    month = +(match[2]) - 1;\n    day = +(match[3]);\n    if (!match[4]) {\n        return new Date(Date.UTC(year, month, day));\n    }\n    hour = +(match[4]);\n    minute = +(match[5]);\n    second = +(match[6]);\n    if (match[7]) {\n        fraction = match[7].slice(0, 3);\n        while (fraction.length < 3) {\n            fraction = fraction + '0';\n        }\n        fraction = +fraction;\n    }\n    if (match[9]) {\n        tz_hour = +(match[10]);\n        tz_minute = +(match[11] || 0);\n        delta = (tz_hour * 60 + tz_minute) * 60000;\n        if ('-' === match[9]) {\n            delta = -delta;\n        }\n    }\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n    if (delta) {\n        date.setTime(date.getTime() - delta);\n    }\n    return date;\n}\nfunction representYamlTimestamp(object) {\n    return object.toISOString();\n}\nmodule.exports = new type_1.Type('tag:yaml.org,2002:timestamp', {\n    kind: 'scalar',\n    resolve: resolveYamlTimestamp,\n    construct: constructYamlTimestamp,\n    instanceOf: Date,\n    represent: representYamlTimestamp\n});\n//# sourceMappingURL=timestamp.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/type/timestamp.js?")},"./node_modules/yaml-ast-parser/dist/src/yamlAST.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Kind;\n(function (Kind) {\n    Kind[Kind["SCALAR"] = 0] = "SCALAR";\n    Kind[Kind["MAPPING"] = 1] = "MAPPING";\n    Kind[Kind["MAP"] = 2] = "MAP";\n    Kind[Kind["SEQ"] = 3] = "SEQ";\n    Kind[Kind["ANCHOR_REF"] = 4] = "ANCHOR_REF";\n    Kind[Kind["INCLUDE_REF"] = 5] = "INCLUDE_REF";\n})(Kind = exports.Kind || (exports.Kind = {}));\nfunction newMapping(key, value) {\n    var end = (value ? value.endPosition : key.endPosition + 1);\n    var node = {\n        key: key,\n        value: value,\n        startPosition: key.startPosition,\n        endPosition: end,\n        kind: Kind.MAPPING,\n        parent: null,\n        errors: []\n    };\n    return node;\n}\nexports.newMapping = newMapping;\nfunction newAnchorRef(key, start, end, value) {\n    return {\n        errors: [],\n        referencesAnchor: key,\n        value: value,\n        startPosition: start,\n        endPosition: end,\n        kind: Kind.ANCHOR_REF,\n        parent: null\n    };\n}\nexports.newAnchorRef = newAnchorRef;\nfunction newScalar(v) {\n    if (v === void 0) { v = ""; }\n    var result = {\n        errors: [],\n        startPosition: -1,\n        endPosition: -1,\n        value: "" + v,\n        kind: Kind.SCALAR,\n        parent: null,\n        doubleQuoted: false,\n        rawValue: "" + v,\n    };\n    if (typeof v !== "string") {\n        result.valueObject = v;\n    }\n    return result;\n}\nexports.newScalar = newScalar;\nfunction newItems() {\n    return {\n        errors: [],\n        startPosition: -1,\n        endPosition: -1,\n        items: [],\n        kind: Kind.SEQ,\n        parent: null\n    };\n}\nexports.newItems = newItems;\nfunction newSeq() {\n    return newItems();\n}\nexports.newSeq = newSeq;\nfunction newMap(mappings) {\n    return {\n        errors: [],\n        startPosition: -1,\n        endPosition: -1,\n        mappings: mappings ? mappings : [],\n        kind: Kind.MAP,\n        parent: null\n    };\n}\nexports.newMap = newMap;\n//# sourceMappingURL=yamlAST.js.map\n\n//# sourceURL=webpack:///./node_modules/yaml-ast-parser/dist/src/yamlAST.js?')}}]);