(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{"./node_modules/domelementtype/lib/index.js":function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2\'s DOM */\nvar ElementType;\n(function (ElementType) {\n    /** Type for the root element of a document */\n    ElementType["Root"] = "root";\n    /** Type for Text */\n    ElementType["Text"] = "text";\n    /** Type for <? ... ?> */\n    ElementType["Directive"] = "directive";\n    /** Type for \x3c!-- ... --\x3e */\n    ElementType["Comment"] = "comment";\n    /** Type for <script> tags */\n    ElementType["Script"] = "script";\n    /** Type for <style> tags */\n    ElementType["Style"] = "style";\n    /** Type for Any tag */\n    ElementType["Tag"] = "tag";\n    /** Type for <![CDATA[ ... ]]> */\n    ElementType["CDATA"] = "cdata";\n    /** Type for <!doctype ...> */\n    ElementType["Doctype"] = "doctype";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */\nfunction isTag(elem) {\n    return (elem.type === ElementType.Tag ||\n        elem.type === ElementType.Script ||\n        elem.type === ElementType.Style);\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for the root element of a document */\nexports.Root = ElementType.Root;\n/** Type for Text */\nexports.Text = ElementType.Text;\n/** Type for <? ... ?> */\nexports.Directive = ElementType.Directive;\n/** Type for \x3c!-- ... --\x3e */\nexports.Comment = ElementType.Comment;\n/** Type for <script> tags */\nexports.Script = ElementType.Script;\n/** Type for <style> tags */\nexports.Style = ElementType.Style;\n/** Type for Any tag */\nexports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\nexports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\nexports.Doctype = ElementType.Doctype;\n\n\n//# sourceURL=webpack:///./node_modules/domelementtype/lib/index.js?')},"./node_modules/domhandler/lib/index.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.DomHandler = void 0;\nvar domelementtype_1 = __webpack_require__("./node_modules/domelementtype/lib/index.js");\nvar node_1 = __webpack_require__("./node_modules/domhandler/lib/node.js");\n__exportStar(__webpack_require__("./node_modules/domhandler/lib/node.js"), exports);\nvar reWhitespace = /\\s+/g;\n// Default options\nvar defaultOpts = {\n    normalizeWhitespace: false,\n    withStartIndices: false,\n    withEndIndices: false,\n};\nvar DomHandler = /** @class */ (function () {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */\n    function DomHandler(callback, options, elementCB) {\n        /** The elements of the DOM */\n        this.dom = [];\n        /** The root element for the DOM */\n        this.root = new node_1.Document(this.dom);\n        /** Indicated whether parsing has been completed. */\n        this.done = false;\n        /** Stack of open tags. */\n        this.tagStack = [this.root];\n        /** A data node that is still being written to. */\n        this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */\n        this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === "function") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === "object") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    DomHandler.prototype.onparserinit = function (parser) {\n        this.parser = parser;\n    };\n    // Resets the handler back to starting state\n    DomHandler.prototype.onreset = function () {\n        var _a;\n        this.dom = [];\n        this.root = new node_1.Document(this.dom);\n        this.done = false;\n        this.tagStack = [this.root];\n        this.lastNode = null;\n        this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;\n    };\n    // Signals the handler that parsing is done\n    DomHandler.prototype.onend = function () {\n        if (this.done)\n            return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    };\n    DomHandler.prototype.onerror = function (error) {\n        this.handleCallback(error);\n    };\n    DomHandler.prototype.onclosetag = function () {\n        this.lastNode = null;\n        var elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB)\n            this.elementCB(elem);\n    };\n    DomHandler.prototype.onopentag = function (name, attribs) {\n        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\n        var element = new node_1.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    };\n    DomHandler.prototype.ontext = function (data) {\n        var normalizeWhitespace = this.options.normalizeWhitespace;\n        var lastNode = this.lastNode;\n        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\n            if (normalizeWhitespace) {\n                lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");\n            }\n            else {\n                lastNode.data += data;\n            }\n        }\n        else {\n            if (normalizeWhitespace) {\n                data = data.replace(reWhitespace, " ");\n            }\n            var node = new node_1.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    };\n    DomHandler.prototype.oncomment = function (data) {\n        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        var node = new node_1.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    };\n    DomHandler.prototype.oncommentend = function () {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.oncdatastart = function () {\n        var text = new node_1.Text("");\n        var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    };\n    DomHandler.prototype.oncdataend = function () {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.onprocessinginstruction = function (name, data) {\n        var node = new node_1.ProcessingInstruction(name, data);\n        this.addNode(node);\n    };\n    DomHandler.prototype.handleCallback = function (error) {\n        if (typeof this.callback === "function") {\n            this.callback(error, this.dom);\n        }\n        else if (error) {\n            throw error;\n        }\n    };\n    DomHandler.prototype.addNode = function (node) {\n        var parent = this.tagStack[this.tagStack.length - 1];\n        var previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    };\n    return DomHandler;\n}());\nexports.DomHandler = DomHandler;\nexports.default = DomHandler;\n\n\n//# sourceURL=webpack:///./node_modules/domhandler/lib/index.js?')},"./node_modules/domhandler/lib/node.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar domelementtype_1 = __webpack_require__("./node_modules/domelementtype/lib/index.js");\nvar nodeTypes = new Map([\n    [domelementtype_1.ElementType.Tag, 1],\n    [domelementtype_1.ElementType.Script, 1],\n    [domelementtype_1.ElementType.Style, 1],\n    [domelementtype_1.ElementType.Directive, 1],\n    [domelementtype_1.ElementType.Text, 3],\n    [domelementtype_1.ElementType.CDATA, 4],\n    [domelementtype_1.ElementType.Comment, 8],\n    [domelementtype_1.ElementType.Root, 9],\n]);\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */\nvar Node = /** @class */ (function () {\n    /**\n     *\n     * @param type The type of the node.\n     */\n    function Node(type) {\n        this.type = type;\n        /** Parent of the node */\n        this.parent = null;\n        /** Previous sibling */\n        this.prev = null;\n        /** Next sibling */\n        this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */\n        this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */\n        this.endIndex = null;\n    }\n    Object.defineProperty(Node.prototype, "nodeType", {\n        // Read-only aliases\n        get: function () {\n            var _a;\n            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, "parentNode", {\n        // Read-write aliases for properties\n        get: function () {\n            return this.parent;\n        },\n        set: function (parent) {\n            this.parent = parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, "previousSibling", {\n        get: function () {\n            return this.prev;\n        },\n        set: function (prev) {\n            this.prev = prev;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, "nextSibling", {\n        get: function () {\n            return this.next;\n        },\n        set: function (next) {\n            this.next = next;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */\n    Node.prototype.cloneNode = function (recursive) {\n        if (recursive === void 0) { recursive = false; }\n        return cloneNode(this, recursive);\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar DataNode = /** @class */ (function (_super) {\n    __extends(DataNode, _super);\n    /**\n     * @param type The type of the node\n     * @param data The content of the data node\n     */\n    function DataNode(type, data) {\n        var _this = _super.call(this, type) || this;\n        _this.data = data;\n        return _this;\n    }\n    Object.defineProperty(DataNode.prototype, "nodeValue", {\n        get: function () {\n            return this.data;\n        },\n        set: function (data) {\n            this.data = data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataNode;\n}(Node));\nexports.DataNode = DataNode;\nvar Text = /** @class */ (function (_super) {\n    __extends(Text, _super);\n    function Text(data) {\n        return _super.call(this, domelementtype_1.ElementType.Text, data) || this;\n    }\n    return Text;\n}(DataNode));\nexports.Text = Text;\nvar Comment = /** @class */ (function (_super) {\n    __extends(Comment, _super);\n    function Comment(data) {\n        return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;\n    }\n    return Comment;\n}(DataNode));\nexports.Comment = Comment;\nvar ProcessingInstruction = /** @class */ (function (_super) {\n    __extends(ProcessingInstruction, _super);\n    function ProcessingInstruction(name, data) {\n        var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;\n        _this.name = name;\n        return _this;\n    }\n    return ProcessingInstruction;\n}(DataNode));\nexports.ProcessingInstruction = ProcessingInstruction;\n/**\n * A `Node` that can have children.\n */\nvar NodeWithChildren = /** @class */ (function (_super) {\n    __extends(NodeWithChildren, _super);\n    /**\n     * @param type Type of the node.\n     * @param children Children of the node. Only certain node types can have children.\n     */\n    function NodeWithChildren(type, children) {\n        var _this = _super.call(this, type) || this;\n        _this.children = children;\n        return _this;\n    }\n    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {\n        // Aliases\n        get: function () {\n            var _a;\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {\n        get: function () {\n            return this.children.length > 0\n                ? this.children[this.children.length - 1]\n                : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {\n        get: function () {\n            return this.children;\n        },\n        set: function (children) {\n            this.children = children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NodeWithChildren;\n}(Node));\nexports.NodeWithChildren = NodeWithChildren;\nvar Document = /** @class */ (function (_super) {\n    __extends(Document, _super);\n    function Document(children) {\n        return _super.call(this, domelementtype_1.ElementType.Root, children) || this;\n    }\n    return Document;\n}(NodeWithChildren));\nexports.Document = Document;\nvar Element = /** @class */ (function (_super) {\n    __extends(Element, _super);\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */\n    function Element(name, attribs, children, type) {\n        if (children === void 0) { children = []; }\n        if (type === void 0) { type = name === "script"\n            ? domelementtype_1.ElementType.Script\n            : name === "style"\n                ? domelementtype_1.ElementType.Style\n                : domelementtype_1.ElementType.Tag; }\n        var _this = _super.call(this, type, children) || this;\n        _this.name = name;\n        _this.attribs = attribs;\n        return _this;\n    }\n    Object.defineProperty(Element.prototype, "tagName", {\n        // DOM Level 1 aliases\n        get: function () {\n            return this.name;\n        },\n        set: function (name) {\n            this.name = name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, "attributes", {\n        get: function () {\n            var _this = this;\n            return Object.keys(this.attribs).map(function (name) {\n                var _a, _b;\n                return ({\n                    name: name,\n                    value: _this.attribs[name],\n                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],\n                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name],\n                });\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Element;\n}(NodeWithChildren));\nexports.Element = Element;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */\nfunction isTag(node) {\n    return domelementtype_1.isTag(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */\nfunction isCDATA(node) {\n    return node.type === domelementtype_1.ElementType.CDATA;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */\nfunction isText(node) {\n    return node.type === domelementtype_1.ElementType.Text;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */\nfunction isComment(node) {\n    return node.type === domelementtype_1.ElementType.Comment;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDirective(node) {\n    return node.type === domelementtype_1.ElementType.Directive;\n}\nexports.isDirective = isDirective;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */\nfunction isDocument(node) {\n    return node.type === domelementtype_1.ElementType.Root;\n}\nexports.isDocument = isDocument;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.\n */\nfunction hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, "children");\n}\nexports.hasChildren = hasChildren;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */\nfunction cloneNode(node, recursive) {\n    if (recursive === void 0) { recursive = false; }\n    var result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    }\n    else if (isComment(node)) {\n        result = new Comment(node.data);\n    }\n    else if (isTag(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\n        children.forEach(function (child) { return (child.parent = clone_1); });\n        if (node["x-attribsNamespace"]) {\n            clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);\n        }\n        if (node["x-attribsPrefix"]) {\n            clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);\n        }\n        result = clone_1;\n    }\n    else if (isCDATA(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);\n        children.forEach(function (child) { return (child.parent = clone_2); });\n        result = clone_2;\n    }\n    else if (isDocument(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_3 = new Document(children);\n        children.forEach(function (child) { return (child.parent = clone_3); });\n        if (node["x-mode"]) {\n            clone_3["x-mode"] = node["x-mode"];\n        }\n        result = clone_3;\n    }\n    else if (isDirective(node)) {\n        var instruction = new ProcessingInstruction(node.name, node.data);\n        if (node["x-name"] != null) {\n            instruction["x-name"] = node["x-name"];\n            instruction["x-publicId"] = node["x-publicId"];\n            instruction["x-systemId"] = node["x-systemId"];\n        }\n        result = instruction;\n    }\n    else {\n        throw new Error("Not implemented yet: " + node.type);\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    return result;\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n    var children = childs.map(function (child) { return cloneNode(child, true); });\n    for (var i = 1; i < children.length; i++) {\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n\n\n//# sourceURL=webpack:///./node_modules/domhandler/lib/node.js?')},"./node_modules/entities/lib/decode_codepoint.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar decode_json_1 = __importDefault(__webpack_require__("./node_modules/entities/lib/maps/decode.json"));\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return "\\uFFFD";\n    }\n    if (codePoint in decode_json_1.default) {\n        // @ts-ignore\n        codePoint = decode_json_1.default[codePoint];\n    }\n    var output = "";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n}\nexports.default = decodeCodePoint;\n\n\n//# sourceURL=webpack:///./node_modules/entities/lib/decode_codepoint.js?')},"./node_modules/entities/lib/maps/decode.json":function(module){eval('module.exports = JSON.parse("{\\"0\\":65533,\\"128\\":8364,\\"130\\":8218,\\"131\\":402,\\"132\\":8222,\\"133\\":8230,\\"134\\":8224,\\"135\\":8225,\\"136\\":710,\\"137\\":8240,\\"138\\":352,\\"139\\":8249,\\"140\\":338,\\"142\\":381,\\"145\\":8216,\\"146\\":8217,\\"147\\":8220,\\"148\\":8221,\\"149\\":8226,\\"150\\":8211,\\"151\\":8212,\\"152\\":732,\\"153\\":8482,\\"154\\":353,\\"155\\":8250,\\"156\\":339,\\"158\\":382,\\"159\\":376}");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/decode.json?')},"./node_modules/entities/lib/maps/entities.json":function(module){eval('module.exports = JSON.parse("{\\"Aacute\\":\\"Á\\",\\"aacute\\":\\"á\\",\\"Abreve\\":\\"Ă\\",\\"abreve\\":\\"ă\\",\\"ac\\":\\"∾\\",\\"acd\\":\\"∿\\",\\"acE\\":\\"∾̳\\",\\"Acirc\\":\\"Â\\",\\"acirc\\":\\"â\\",\\"acute\\":\\"´\\",\\"Acy\\":\\"А\\",\\"acy\\":\\"а\\",\\"AElig\\":\\"Æ\\",\\"aelig\\":\\"æ\\",\\"af\\":\\"⁡\\",\\"Afr\\":\\"𝔄\\",\\"afr\\":\\"𝔞\\",\\"Agrave\\":\\"À\\",\\"agrave\\":\\"à\\",\\"alefsym\\":\\"ℵ\\",\\"aleph\\":\\"ℵ\\",\\"Alpha\\":\\"Α\\",\\"alpha\\":\\"α\\",\\"Amacr\\":\\"Ā\\",\\"amacr\\":\\"ā\\",\\"amalg\\":\\"⨿\\",\\"amp\\":\\"&\\",\\"AMP\\":\\"&\\",\\"andand\\":\\"⩕\\",\\"And\\":\\"⩓\\",\\"and\\":\\"∧\\",\\"andd\\":\\"⩜\\",\\"andslope\\":\\"⩘\\",\\"andv\\":\\"⩚\\",\\"ang\\":\\"∠\\",\\"ange\\":\\"⦤\\",\\"angle\\":\\"∠\\",\\"angmsdaa\\":\\"⦨\\",\\"angmsdab\\":\\"⦩\\",\\"angmsdac\\":\\"⦪\\",\\"angmsdad\\":\\"⦫\\",\\"angmsdae\\":\\"⦬\\",\\"angmsdaf\\":\\"⦭\\",\\"angmsdag\\":\\"⦮\\",\\"angmsdah\\":\\"⦯\\",\\"angmsd\\":\\"∡\\",\\"angrt\\":\\"∟\\",\\"angrtvb\\":\\"⊾\\",\\"angrtvbd\\":\\"⦝\\",\\"angsph\\":\\"∢\\",\\"angst\\":\\"Å\\",\\"angzarr\\":\\"⍼\\",\\"Aogon\\":\\"Ą\\",\\"aogon\\":\\"ą\\",\\"Aopf\\":\\"𝔸\\",\\"aopf\\":\\"𝕒\\",\\"apacir\\":\\"⩯\\",\\"ap\\":\\"≈\\",\\"apE\\":\\"⩰\\",\\"ape\\":\\"≊\\",\\"apid\\":\\"≋\\",\\"apos\\":\\"\'\\",\\"ApplyFunction\\":\\"⁡\\",\\"approx\\":\\"≈\\",\\"approxeq\\":\\"≊\\",\\"Aring\\":\\"Å\\",\\"aring\\":\\"å\\",\\"Ascr\\":\\"𝒜\\",\\"ascr\\":\\"𝒶\\",\\"Assign\\":\\"≔\\",\\"ast\\":\\"*\\",\\"asymp\\":\\"≈\\",\\"asympeq\\":\\"≍\\",\\"Atilde\\":\\"Ã\\",\\"atilde\\":\\"ã\\",\\"Auml\\":\\"Ä\\",\\"auml\\":\\"ä\\",\\"awconint\\":\\"∳\\",\\"awint\\":\\"⨑\\",\\"backcong\\":\\"≌\\",\\"backepsilon\\":\\"϶\\",\\"backprime\\":\\"‵\\",\\"backsim\\":\\"∽\\",\\"backsimeq\\":\\"⋍\\",\\"Backslash\\":\\"∖\\",\\"Barv\\":\\"⫧\\",\\"barvee\\":\\"⊽\\",\\"barwed\\":\\"⌅\\",\\"Barwed\\":\\"⌆\\",\\"barwedge\\":\\"⌅\\",\\"bbrk\\":\\"⎵\\",\\"bbrktbrk\\":\\"⎶\\",\\"bcong\\":\\"≌\\",\\"Bcy\\":\\"Б\\",\\"bcy\\":\\"б\\",\\"bdquo\\":\\"„\\",\\"becaus\\":\\"∵\\",\\"because\\":\\"∵\\",\\"Because\\":\\"∵\\",\\"bemptyv\\":\\"⦰\\",\\"bepsi\\":\\"϶\\",\\"bernou\\":\\"ℬ\\",\\"Bernoullis\\":\\"ℬ\\",\\"Beta\\":\\"Β\\",\\"beta\\":\\"β\\",\\"beth\\":\\"ℶ\\",\\"between\\":\\"≬\\",\\"Bfr\\":\\"𝔅\\",\\"bfr\\":\\"𝔟\\",\\"bigcap\\":\\"⋂\\",\\"bigcirc\\":\\"◯\\",\\"bigcup\\":\\"⋃\\",\\"bigodot\\":\\"⨀\\",\\"bigoplus\\":\\"⨁\\",\\"bigotimes\\":\\"⨂\\",\\"bigsqcup\\":\\"⨆\\",\\"bigstar\\":\\"★\\",\\"bigtriangledown\\":\\"▽\\",\\"bigtriangleup\\":\\"△\\",\\"biguplus\\":\\"⨄\\",\\"bigvee\\":\\"⋁\\",\\"bigwedge\\":\\"⋀\\",\\"bkarow\\":\\"⤍\\",\\"blacklozenge\\":\\"⧫\\",\\"blacksquare\\":\\"▪\\",\\"blacktriangle\\":\\"▴\\",\\"blacktriangledown\\":\\"▾\\",\\"blacktriangleleft\\":\\"◂\\",\\"blacktriangleright\\":\\"▸\\",\\"blank\\":\\"␣\\",\\"blk12\\":\\"▒\\",\\"blk14\\":\\"░\\",\\"blk34\\":\\"▓\\",\\"block\\":\\"█\\",\\"bne\\":\\"=⃥\\",\\"bnequiv\\":\\"≡⃥\\",\\"bNot\\":\\"⫭\\",\\"bnot\\":\\"⌐\\",\\"Bopf\\":\\"𝔹\\",\\"bopf\\":\\"𝕓\\",\\"bot\\":\\"⊥\\",\\"bottom\\":\\"⊥\\",\\"bowtie\\":\\"⋈\\",\\"boxbox\\":\\"⧉\\",\\"boxdl\\":\\"┐\\",\\"boxdL\\":\\"╕\\",\\"boxDl\\":\\"╖\\",\\"boxDL\\":\\"╗\\",\\"boxdr\\":\\"┌\\",\\"boxdR\\":\\"╒\\",\\"boxDr\\":\\"╓\\",\\"boxDR\\":\\"╔\\",\\"boxh\\":\\"─\\",\\"boxH\\":\\"═\\",\\"boxhd\\":\\"┬\\",\\"boxHd\\":\\"╤\\",\\"boxhD\\":\\"╥\\",\\"boxHD\\":\\"╦\\",\\"boxhu\\":\\"┴\\",\\"boxHu\\":\\"╧\\",\\"boxhU\\":\\"╨\\",\\"boxHU\\":\\"╩\\",\\"boxminus\\":\\"⊟\\",\\"boxplus\\":\\"⊞\\",\\"boxtimes\\":\\"⊠\\",\\"boxul\\":\\"┘\\",\\"boxuL\\":\\"╛\\",\\"boxUl\\":\\"╜\\",\\"boxUL\\":\\"╝\\",\\"boxur\\":\\"└\\",\\"boxuR\\":\\"╘\\",\\"boxUr\\":\\"╙\\",\\"boxUR\\":\\"╚\\",\\"boxv\\":\\"│\\",\\"boxV\\":\\"║\\",\\"boxvh\\":\\"┼\\",\\"boxvH\\":\\"╪\\",\\"boxVh\\":\\"╫\\",\\"boxVH\\":\\"╬\\",\\"boxvl\\":\\"┤\\",\\"boxvL\\":\\"╡\\",\\"boxVl\\":\\"╢\\",\\"boxVL\\":\\"╣\\",\\"boxvr\\":\\"├\\",\\"boxvR\\":\\"╞\\",\\"boxVr\\":\\"╟\\",\\"boxVR\\":\\"╠\\",\\"bprime\\":\\"‵\\",\\"breve\\":\\"˘\\",\\"Breve\\":\\"˘\\",\\"brvbar\\":\\"¦\\",\\"bscr\\":\\"𝒷\\",\\"Bscr\\":\\"ℬ\\",\\"bsemi\\":\\"⁏\\",\\"bsim\\":\\"∽\\",\\"bsime\\":\\"⋍\\",\\"bsolb\\":\\"⧅\\",\\"bsol\\":\\"\\\\\\\\\\",\\"bsolhsub\\":\\"⟈\\",\\"bull\\":\\"•\\",\\"bullet\\":\\"•\\",\\"bump\\":\\"≎\\",\\"bumpE\\":\\"⪮\\",\\"bumpe\\":\\"≏\\",\\"Bumpeq\\":\\"≎\\",\\"bumpeq\\":\\"≏\\",\\"Cacute\\":\\"Ć\\",\\"cacute\\":\\"ć\\",\\"capand\\":\\"⩄\\",\\"capbrcup\\":\\"⩉\\",\\"capcap\\":\\"⩋\\",\\"cap\\":\\"∩\\",\\"Cap\\":\\"⋒\\",\\"capcup\\":\\"⩇\\",\\"capdot\\":\\"⩀\\",\\"CapitalDifferentialD\\":\\"ⅅ\\",\\"caps\\":\\"∩︀\\",\\"caret\\":\\"⁁\\",\\"caron\\":\\"ˇ\\",\\"Cayleys\\":\\"ℭ\\",\\"ccaps\\":\\"⩍\\",\\"Ccaron\\":\\"Č\\",\\"ccaron\\":\\"č\\",\\"Ccedil\\":\\"Ç\\",\\"ccedil\\":\\"ç\\",\\"Ccirc\\":\\"Ĉ\\",\\"ccirc\\":\\"ĉ\\",\\"Cconint\\":\\"∰\\",\\"ccups\\":\\"⩌\\",\\"ccupssm\\":\\"⩐\\",\\"Cdot\\":\\"Ċ\\",\\"cdot\\":\\"ċ\\",\\"cedil\\":\\"¸\\",\\"Cedilla\\":\\"¸\\",\\"cemptyv\\":\\"⦲\\",\\"cent\\":\\"¢\\",\\"centerdot\\":\\"·\\",\\"CenterDot\\":\\"·\\",\\"cfr\\":\\"𝔠\\",\\"Cfr\\":\\"ℭ\\",\\"CHcy\\":\\"Ч\\",\\"chcy\\":\\"ч\\",\\"check\\":\\"✓\\",\\"checkmark\\":\\"✓\\",\\"Chi\\":\\"Χ\\",\\"chi\\":\\"χ\\",\\"circ\\":\\"ˆ\\",\\"circeq\\":\\"≗\\",\\"circlearrowleft\\":\\"↺\\",\\"circlearrowright\\":\\"↻\\",\\"circledast\\":\\"⊛\\",\\"circledcirc\\":\\"⊚\\",\\"circleddash\\":\\"⊝\\",\\"CircleDot\\":\\"⊙\\",\\"circledR\\":\\"®\\",\\"circledS\\":\\"Ⓢ\\",\\"CircleMinus\\":\\"⊖\\",\\"CirclePlus\\":\\"⊕\\",\\"CircleTimes\\":\\"⊗\\",\\"cir\\":\\"○\\",\\"cirE\\":\\"⧃\\",\\"cire\\":\\"≗\\",\\"cirfnint\\":\\"⨐\\",\\"cirmid\\":\\"⫯\\",\\"cirscir\\":\\"⧂\\",\\"ClockwiseContourIntegral\\":\\"∲\\",\\"CloseCurlyDoubleQuote\\":\\"”\\",\\"CloseCurlyQuote\\":\\"’\\",\\"clubs\\":\\"♣\\",\\"clubsuit\\":\\"♣\\",\\"colon\\":\\":\\",\\"Colon\\":\\"∷\\",\\"Colone\\":\\"⩴\\",\\"colone\\":\\"≔\\",\\"coloneq\\":\\"≔\\",\\"comma\\":\\",\\",\\"commat\\":\\"@\\",\\"comp\\":\\"∁\\",\\"compfn\\":\\"∘\\",\\"complement\\":\\"∁\\",\\"complexes\\":\\"ℂ\\",\\"cong\\":\\"≅\\",\\"congdot\\":\\"⩭\\",\\"Congruent\\":\\"≡\\",\\"conint\\":\\"∮\\",\\"Conint\\":\\"∯\\",\\"ContourIntegral\\":\\"∮\\",\\"copf\\":\\"𝕔\\",\\"Copf\\":\\"ℂ\\",\\"coprod\\":\\"∐\\",\\"Coproduct\\":\\"∐\\",\\"copy\\":\\"©\\",\\"COPY\\":\\"©\\",\\"copysr\\":\\"℗\\",\\"CounterClockwiseContourIntegral\\":\\"∳\\",\\"crarr\\":\\"↵\\",\\"cross\\":\\"✗\\",\\"Cross\\":\\"⨯\\",\\"Cscr\\":\\"𝒞\\",\\"cscr\\":\\"𝒸\\",\\"csub\\":\\"⫏\\",\\"csube\\":\\"⫑\\",\\"csup\\":\\"⫐\\",\\"csupe\\":\\"⫒\\",\\"ctdot\\":\\"⋯\\",\\"cudarrl\\":\\"⤸\\",\\"cudarrr\\":\\"⤵\\",\\"cuepr\\":\\"⋞\\",\\"cuesc\\":\\"⋟\\",\\"cularr\\":\\"↶\\",\\"cularrp\\":\\"⤽\\",\\"cupbrcap\\":\\"⩈\\",\\"cupcap\\":\\"⩆\\",\\"CupCap\\":\\"≍\\",\\"cup\\":\\"∪\\",\\"Cup\\":\\"⋓\\",\\"cupcup\\":\\"⩊\\",\\"cupdot\\":\\"⊍\\",\\"cupor\\":\\"⩅\\",\\"cups\\":\\"∪︀\\",\\"curarr\\":\\"↷\\",\\"curarrm\\":\\"⤼\\",\\"curlyeqprec\\":\\"⋞\\",\\"curlyeqsucc\\":\\"⋟\\",\\"curlyvee\\":\\"⋎\\",\\"curlywedge\\":\\"⋏\\",\\"curren\\":\\"¤\\",\\"curvearrowleft\\":\\"↶\\",\\"curvearrowright\\":\\"↷\\",\\"cuvee\\":\\"⋎\\",\\"cuwed\\":\\"⋏\\",\\"cwconint\\":\\"∲\\",\\"cwint\\":\\"∱\\",\\"cylcty\\":\\"⌭\\",\\"dagger\\":\\"†\\",\\"Dagger\\":\\"‡\\",\\"daleth\\":\\"ℸ\\",\\"darr\\":\\"↓\\",\\"Darr\\":\\"↡\\",\\"dArr\\":\\"⇓\\",\\"dash\\":\\"‐\\",\\"Dashv\\":\\"⫤\\",\\"dashv\\":\\"⊣\\",\\"dbkarow\\":\\"⤏\\",\\"dblac\\":\\"˝\\",\\"Dcaron\\":\\"Ď\\",\\"dcaron\\":\\"ď\\",\\"Dcy\\":\\"Д\\",\\"dcy\\":\\"д\\",\\"ddagger\\":\\"‡\\",\\"ddarr\\":\\"⇊\\",\\"DD\\":\\"ⅅ\\",\\"dd\\":\\"ⅆ\\",\\"DDotrahd\\":\\"⤑\\",\\"ddotseq\\":\\"⩷\\",\\"deg\\":\\"°\\",\\"Del\\":\\"∇\\",\\"Delta\\":\\"Δ\\",\\"delta\\":\\"δ\\",\\"demptyv\\":\\"⦱\\",\\"dfisht\\":\\"⥿\\",\\"Dfr\\":\\"𝔇\\",\\"dfr\\":\\"𝔡\\",\\"dHar\\":\\"⥥\\",\\"dharl\\":\\"⇃\\",\\"dharr\\":\\"⇂\\",\\"DiacriticalAcute\\":\\"´\\",\\"DiacriticalDot\\":\\"˙\\",\\"DiacriticalDoubleAcute\\":\\"˝\\",\\"DiacriticalGrave\\":\\"`\\",\\"DiacriticalTilde\\":\\"˜\\",\\"diam\\":\\"⋄\\",\\"diamond\\":\\"⋄\\",\\"Diamond\\":\\"⋄\\",\\"diamondsuit\\":\\"♦\\",\\"diams\\":\\"♦\\",\\"die\\":\\"¨\\",\\"DifferentialD\\":\\"ⅆ\\",\\"digamma\\":\\"ϝ\\",\\"disin\\":\\"⋲\\",\\"div\\":\\"÷\\",\\"divide\\":\\"÷\\",\\"divideontimes\\":\\"⋇\\",\\"divonx\\":\\"⋇\\",\\"DJcy\\":\\"Ђ\\",\\"djcy\\":\\"ђ\\",\\"dlcorn\\":\\"⌞\\",\\"dlcrop\\":\\"⌍\\",\\"dollar\\":\\"$\\",\\"Dopf\\":\\"𝔻\\",\\"dopf\\":\\"𝕕\\",\\"Dot\\":\\"¨\\",\\"dot\\":\\"˙\\",\\"DotDot\\":\\"⃜\\",\\"doteq\\":\\"≐\\",\\"doteqdot\\":\\"≑\\",\\"DotEqual\\":\\"≐\\",\\"dotminus\\":\\"∸\\",\\"dotplus\\":\\"∔\\",\\"dotsquare\\":\\"⊡\\",\\"doublebarwedge\\":\\"⌆\\",\\"DoubleContourIntegral\\":\\"∯\\",\\"DoubleDot\\":\\"¨\\",\\"DoubleDownArrow\\":\\"⇓\\",\\"DoubleLeftArrow\\":\\"⇐\\",\\"DoubleLeftRightArrow\\":\\"⇔\\",\\"DoubleLeftTee\\":\\"⫤\\",\\"DoubleLongLeftArrow\\":\\"⟸\\",\\"DoubleLongLeftRightArrow\\":\\"⟺\\",\\"DoubleLongRightArrow\\":\\"⟹\\",\\"DoubleRightArrow\\":\\"⇒\\",\\"DoubleRightTee\\":\\"⊨\\",\\"DoubleUpArrow\\":\\"⇑\\",\\"DoubleUpDownArrow\\":\\"⇕\\",\\"DoubleVerticalBar\\":\\"∥\\",\\"DownArrowBar\\":\\"⤓\\",\\"downarrow\\":\\"↓\\",\\"DownArrow\\":\\"↓\\",\\"Downarrow\\":\\"⇓\\",\\"DownArrowUpArrow\\":\\"⇵\\",\\"DownBreve\\":\\"̑\\",\\"downdownarrows\\":\\"⇊\\",\\"downharpoonleft\\":\\"⇃\\",\\"downharpoonright\\":\\"⇂\\",\\"DownLeftRightVector\\":\\"⥐\\",\\"DownLeftTeeVector\\":\\"⥞\\",\\"DownLeftVectorBar\\":\\"⥖\\",\\"DownLeftVector\\":\\"↽\\",\\"DownRightTeeVector\\":\\"⥟\\",\\"DownRightVectorBar\\":\\"⥗\\",\\"DownRightVector\\":\\"⇁\\",\\"DownTeeArrow\\":\\"↧\\",\\"DownTee\\":\\"⊤\\",\\"drbkarow\\":\\"⤐\\",\\"drcorn\\":\\"⌟\\",\\"drcrop\\":\\"⌌\\",\\"Dscr\\":\\"𝒟\\",\\"dscr\\":\\"𝒹\\",\\"DScy\\":\\"Ѕ\\",\\"dscy\\":\\"ѕ\\",\\"dsol\\":\\"⧶\\",\\"Dstrok\\":\\"Đ\\",\\"dstrok\\":\\"đ\\",\\"dtdot\\":\\"⋱\\",\\"dtri\\":\\"▿\\",\\"dtrif\\":\\"▾\\",\\"duarr\\":\\"⇵\\",\\"duhar\\":\\"⥯\\",\\"dwangle\\":\\"⦦\\",\\"DZcy\\":\\"Џ\\",\\"dzcy\\":\\"џ\\",\\"dzigrarr\\":\\"⟿\\",\\"Eacute\\":\\"É\\",\\"eacute\\":\\"é\\",\\"easter\\":\\"⩮\\",\\"Ecaron\\":\\"Ě\\",\\"ecaron\\":\\"ě\\",\\"Ecirc\\":\\"Ê\\",\\"ecirc\\":\\"ê\\",\\"ecir\\":\\"≖\\",\\"ecolon\\":\\"≕\\",\\"Ecy\\":\\"Э\\",\\"ecy\\":\\"э\\",\\"eDDot\\":\\"⩷\\",\\"Edot\\":\\"Ė\\",\\"edot\\":\\"ė\\",\\"eDot\\":\\"≑\\",\\"ee\\":\\"ⅇ\\",\\"efDot\\":\\"≒\\",\\"Efr\\":\\"𝔈\\",\\"efr\\":\\"𝔢\\",\\"eg\\":\\"⪚\\",\\"Egrave\\":\\"È\\",\\"egrave\\":\\"è\\",\\"egs\\":\\"⪖\\",\\"egsdot\\":\\"⪘\\",\\"el\\":\\"⪙\\",\\"Element\\":\\"∈\\",\\"elinters\\":\\"⏧\\",\\"ell\\":\\"ℓ\\",\\"els\\":\\"⪕\\",\\"elsdot\\":\\"⪗\\",\\"Emacr\\":\\"Ē\\",\\"emacr\\":\\"ē\\",\\"empty\\":\\"∅\\",\\"emptyset\\":\\"∅\\",\\"EmptySmallSquare\\":\\"◻\\",\\"emptyv\\":\\"∅\\",\\"EmptyVerySmallSquare\\":\\"▫\\",\\"emsp13\\":\\" \\",\\"emsp14\\":\\" \\",\\"emsp\\":\\" \\",\\"ENG\\":\\"Ŋ\\",\\"eng\\":\\"ŋ\\",\\"ensp\\":\\" \\",\\"Eogon\\":\\"Ę\\",\\"eogon\\":\\"ę\\",\\"Eopf\\":\\"𝔼\\",\\"eopf\\":\\"𝕖\\",\\"epar\\":\\"⋕\\",\\"eparsl\\":\\"⧣\\",\\"eplus\\":\\"⩱\\",\\"epsi\\":\\"ε\\",\\"Epsilon\\":\\"Ε\\",\\"epsilon\\":\\"ε\\",\\"epsiv\\":\\"ϵ\\",\\"eqcirc\\":\\"≖\\",\\"eqcolon\\":\\"≕\\",\\"eqsim\\":\\"≂\\",\\"eqslantgtr\\":\\"⪖\\",\\"eqslantless\\":\\"⪕\\",\\"Equal\\":\\"⩵\\",\\"equals\\":\\"=\\",\\"EqualTilde\\":\\"≂\\",\\"equest\\":\\"≟\\",\\"Equilibrium\\":\\"⇌\\",\\"equiv\\":\\"≡\\",\\"equivDD\\":\\"⩸\\",\\"eqvparsl\\":\\"⧥\\",\\"erarr\\":\\"⥱\\",\\"erDot\\":\\"≓\\",\\"escr\\":\\"ℯ\\",\\"Escr\\":\\"ℰ\\",\\"esdot\\":\\"≐\\",\\"Esim\\":\\"⩳\\",\\"esim\\":\\"≂\\",\\"Eta\\":\\"Η\\",\\"eta\\":\\"η\\",\\"ETH\\":\\"Ð\\",\\"eth\\":\\"ð\\",\\"Euml\\":\\"Ë\\",\\"euml\\":\\"ë\\",\\"euro\\":\\"€\\",\\"excl\\":\\"!\\",\\"exist\\":\\"∃\\",\\"Exists\\":\\"∃\\",\\"expectation\\":\\"ℰ\\",\\"exponentiale\\":\\"ⅇ\\",\\"ExponentialE\\":\\"ⅇ\\",\\"fallingdotseq\\":\\"≒\\",\\"Fcy\\":\\"Ф\\",\\"fcy\\":\\"ф\\",\\"female\\":\\"♀\\",\\"ffilig\\":\\"ﬃ\\",\\"fflig\\":\\"ﬀ\\",\\"ffllig\\":\\"ﬄ\\",\\"Ffr\\":\\"𝔉\\",\\"ffr\\":\\"𝔣\\",\\"filig\\":\\"ﬁ\\",\\"FilledSmallSquare\\":\\"◼\\",\\"FilledVerySmallSquare\\":\\"▪\\",\\"fjlig\\":\\"fj\\",\\"flat\\":\\"♭\\",\\"fllig\\":\\"ﬂ\\",\\"fltns\\":\\"▱\\",\\"fnof\\":\\"ƒ\\",\\"Fopf\\":\\"𝔽\\",\\"fopf\\":\\"𝕗\\",\\"forall\\":\\"∀\\",\\"ForAll\\":\\"∀\\",\\"fork\\":\\"⋔\\",\\"forkv\\":\\"⫙\\",\\"Fouriertrf\\":\\"ℱ\\",\\"fpartint\\":\\"⨍\\",\\"frac12\\":\\"½\\",\\"frac13\\":\\"⅓\\",\\"frac14\\":\\"¼\\",\\"frac15\\":\\"⅕\\",\\"frac16\\":\\"⅙\\",\\"frac18\\":\\"⅛\\",\\"frac23\\":\\"⅔\\",\\"frac25\\":\\"⅖\\",\\"frac34\\":\\"¾\\",\\"frac35\\":\\"⅗\\",\\"frac38\\":\\"⅜\\",\\"frac45\\":\\"⅘\\",\\"frac56\\":\\"⅚\\",\\"frac58\\":\\"⅝\\",\\"frac78\\":\\"⅞\\",\\"frasl\\":\\"⁄\\",\\"frown\\":\\"⌢\\",\\"fscr\\":\\"𝒻\\",\\"Fscr\\":\\"ℱ\\",\\"gacute\\":\\"ǵ\\",\\"Gamma\\":\\"Γ\\",\\"gamma\\":\\"γ\\",\\"Gammad\\":\\"Ϝ\\",\\"gammad\\":\\"ϝ\\",\\"gap\\":\\"⪆\\",\\"Gbreve\\":\\"Ğ\\",\\"gbreve\\":\\"ğ\\",\\"Gcedil\\":\\"Ģ\\",\\"Gcirc\\":\\"Ĝ\\",\\"gcirc\\":\\"ĝ\\",\\"Gcy\\":\\"Г\\",\\"gcy\\":\\"г\\",\\"Gdot\\":\\"Ġ\\",\\"gdot\\":\\"ġ\\",\\"ge\\":\\"≥\\",\\"gE\\":\\"≧\\",\\"gEl\\":\\"⪌\\",\\"gel\\":\\"⋛\\",\\"geq\\":\\"≥\\",\\"geqq\\":\\"≧\\",\\"geqslant\\":\\"⩾\\",\\"gescc\\":\\"⪩\\",\\"ges\\":\\"⩾\\",\\"gesdot\\":\\"⪀\\",\\"gesdoto\\":\\"⪂\\",\\"gesdotol\\":\\"⪄\\",\\"gesl\\":\\"⋛︀\\",\\"gesles\\":\\"⪔\\",\\"Gfr\\":\\"𝔊\\",\\"gfr\\":\\"𝔤\\",\\"gg\\":\\"≫\\",\\"Gg\\":\\"⋙\\",\\"ggg\\":\\"⋙\\",\\"gimel\\":\\"ℷ\\",\\"GJcy\\":\\"Ѓ\\",\\"gjcy\\":\\"ѓ\\",\\"gla\\":\\"⪥\\",\\"gl\\":\\"≷\\",\\"glE\\":\\"⪒\\",\\"glj\\":\\"⪤\\",\\"gnap\\":\\"⪊\\",\\"gnapprox\\":\\"⪊\\",\\"gne\\":\\"⪈\\",\\"gnE\\":\\"≩\\",\\"gneq\\":\\"⪈\\",\\"gneqq\\":\\"≩\\",\\"gnsim\\":\\"⋧\\",\\"Gopf\\":\\"𝔾\\",\\"gopf\\":\\"𝕘\\",\\"grave\\":\\"`\\",\\"GreaterEqual\\":\\"≥\\",\\"GreaterEqualLess\\":\\"⋛\\",\\"GreaterFullEqual\\":\\"≧\\",\\"GreaterGreater\\":\\"⪢\\",\\"GreaterLess\\":\\"≷\\",\\"GreaterSlantEqual\\":\\"⩾\\",\\"GreaterTilde\\":\\"≳\\",\\"Gscr\\":\\"𝒢\\",\\"gscr\\":\\"ℊ\\",\\"gsim\\":\\"≳\\",\\"gsime\\":\\"⪎\\",\\"gsiml\\":\\"⪐\\",\\"gtcc\\":\\"⪧\\",\\"gtcir\\":\\"⩺\\",\\"gt\\":\\">\\",\\"GT\\":\\">\\",\\"Gt\\":\\"≫\\",\\"gtdot\\":\\"⋗\\",\\"gtlPar\\":\\"⦕\\",\\"gtquest\\":\\"⩼\\",\\"gtrapprox\\":\\"⪆\\",\\"gtrarr\\":\\"⥸\\",\\"gtrdot\\":\\"⋗\\",\\"gtreqless\\":\\"⋛\\",\\"gtreqqless\\":\\"⪌\\",\\"gtrless\\":\\"≷\\",\\"gtrsim\\":\\"≳\\",\\"gvertneqq\\":\\"≩︀\\",\\"gvnE\\":\\"≩︀\\",\\"Hacek\\":\\"ˇ\\",\\"hairsp\\":\\" \\",\\"half\\":\\"½\\",\\"hamilt\\":\\"ℋ\\",\\"HARDcy\\":\\"Ъ\\",\\"hardcy\\":\\"ъ\\",\\"harrcir\\":\\"⥈\\",\\"harr\\":\\"↔\\",\\"hArr\\":\\"⇔\\",\\"harrw\\":\\"↭\\",\\"Hat\\":\\"^\\",\\"hbar\\":\\"ℏ\\",\\"Hcirc\\":\\"Ĥ\\",\\"hcirc\\":\\"ĥ\\",\\"hearts\\":\\"♥\\",\\"heartsuit\\":\\"♥\\",\\"hellip\\":\\"…\\",\\"hercon\\":\\"⊹\\",\\"hfr\\":\\"𝔥\\",\\"Hfr\\":\\"ℌ\\",\\"HilbertSpace\\":\\"ℋ\\",\\"hksearow\\":\\"⤥\\",\\"hkswarow\\":\\"⤦\\",\\"hoarr\\":\\"⇿\\",\\"homtht\\":\\"∻\\",\\"hookleftarrow\\":\\"↩\\",\\"hookrightarrow\\":\\"↪\\",\\"hopf\\":\\"𝕙\\",\\"Hopf\\":\\"ℍ\\",\\"horbar\\":\\"―\\",\\"HorizontalLine\\":\\"─\\",\\"hscr\\":\\"𝒽\\",\\"Hscr\\":\\"ℋ\\",\\"hslash\\":\\"ℏ\\",\\"Hstrok\\":\\"Ħ\\",\\"hstrok\\":\\"ħ\\",\\"HumpDownHump\\":\\"≎\\",\\"HumpEqual\\":\\"≏\\",\\"hybull\\":\\"⁃\\",\\"hyphen\\":\\"‐\\",\\"Iacute\\":\\"Í\\",\\"iacute\\":\\"í\\",\\"ic\\":\\"⁣\\",\\"Icirc\\":\\"Î\\",\\"icirc\\":\\"î\\",\\"Icy\\":\\"И\\",\\"icy\\":\\"и\\",\\"Idot\\":\\"İ\\",\\"IEcy\\":\\"Е\\",\\"iecy\\":\\"е\\",\\"iexcl\\":\\"¡\\",\\"iff\\":\\"⇔\\",\\"ifr\\":\\"𝔦\\",\\"Ifr\\":\\"ℑ\\",\\"Igrave\\":\\"Ì\\",\\"igrave\\":\\"ì\\",\\"ii\\":\\"ⅈ\\",\\"iiiint\\":\\"⨌\\",\\"iiint\\":\\"∭\\",\\"iinfin\\":\\"⧜\\",\\"iiota\\":\\"℩\\",\\"IJlig\\":\\"Ĳ\\",\\"ijlig\\":\\"ĳ\\",\\"Imacr\\":\\"Ī\\",\\"imacr\\":\\"ī\\",\\"image\\":\\"ℑ\\",\\"ImaginaryI\\":\\"ⅈ\\",\\"imagline\\":\\"ℐ\\",\\"imagpart\\":\\"ℑ\\",\\"imath\\":\\"ı\\",\\"Im\\":\\"ℑ\\",\\"imof\\":\\"⊷\\",\\"imped\\":\\"Ƶ\\",\\"Implies\\":\\"⇒\\",\\"incare\\":\\"℅\\",\\"in\\":\\"∈\\",\\"infin\\":\\"∞\\",\\"infintie\\":\\"⧝\\",\\"inodot\\":\\"ı\\",\\"intcal\\":\\"⊺\\",\\"int\\":\\"∫\\",\\"Int\\":\\"∬\\",\\"integers\\":\\"ℤ\\",\\"Integral\\":\\"∫\\",\\"intercal\\":\\"⊺\\",\\"Intersection\\":\\"⋂\\",\\"intlarhk\\":\\"⨗\\",\\"intprod\\":\\"⨼\\",\\"InvisibleComma\\":\\"⁣\\",\\"InvisibleTimes\\":\\"⁢\\",\\"IOcy\\":\\"Ё\\",\\"iocy\\":\\"ё\\",\\"Iogon\\":\\"Į\\",\\"iogon\\":\\"į\\",\\"Iopf\\":\\"𝕀\\",\\"iopf\\":\\"𝕚\\",\\"Iota\\":\\"Ι\\",\\"iota\\":\\"ι\\",\\"iprod\\":\\"⨼\\",\\"iquest\\":\\"¿\\",\\"iscr\\":\\"𝒾\\",\\"Iscr\\":\\"ℐ\\",\\"isin\\":\\"∈\\",\\"isindot\\":\\"⋵\\",\\"isinE\\":\\"⋹\\",\\"isins\\":\\"⋴\\",\\"isinsv\\":\\"⋳\\",\\"isinv\\":\\"∈\\",\\"it\\":\\"⁢\\",\\"Itilde\\":\\"Ĩ\\",\\"itilde\\":\\"ĩ\\",\\"Iukcy\\":\\"І\\",\\"iukcy\\":\\"і\\",\\"Iuml\\":\\"Ï\\",\\"iuml\\":\\"ï\\",\\"Jcirc\\":\\"Ĵ\\",\\"jcirc\\":\\"ĵ\\",\\"Jcy\\":\\"Й\\",\\"jcy\\":\\"й\\",\\"Jfr\\":\\"𝔍\\",\\"jfr\\":\\"𝔧\\",\\"jmath\\":\\"ȷ\\",\\"Jopf\\":\\"𝕁\\",\\"jopf\\":\\"𝕛\\",\\"Jscr\\":\\"𝒥\\",\\"jscr\\":\\"𝒿\\",\\"Jsercy\\":\\"Ј\\",\\"jsercy\\":\\"ј\\",\\"Jukcy\\":\\"Є\\",\\"jukcy\\":\\"є\\",\\"Kappa\\":\\"Κ\\",\\"kappa\\":\\"κ\\",\\"kappav\\":\\"ϰ\\",\\"Kcedil\\":\\"Ķ\\",\\"kcedil\\":\\"ķ\\",\\"Kcy\\":\\"К\\",\\"kcy\\":\\"к\\",\\"Kfr\\":\\"𝔎\\",\\"kfr\\":\\"𝔨\\",\\"kgreen\\":\\"ĸ\\",\\"KHcy\\":\\"Х\\",\\"khcy\\":\\"х\\",\\"KJcy\\":\\"Ќ\\",\\"kjcy\\":\\"ќ\\",\\"Kopf\\":\\"𝕂\\",\\"kopf\\":\\"𝕜\\",\\"Kscr\\":\\"𝒦\\",\\"kscr\\":\\"𝓀\\",\\"lAarr\\":\\"⇚\\",\\"Lacute\\":\\"Ĺ\\",\\"lacute\\":\\"ĺ\\",\\"laemptyv\\":\\"⦴\\",\\"lagran\\":\\"ℒ\\",\\"Lambda\\":\\"Λ\\",\\"lambda\\":\\"λ\\",\\"lang\\":\\"⟨\\",\\"Lang\\":\\"⟪\\",\\"langd\\":\\"⦑\\",\\"langle\\":\\"⟨\\",\\"lap\\":\\"⪅\\",\\"Laplacetrf\\":\\"ℒ\\",\\"laquo\\":\\"«\\",\\"larrb\\":\\"⇤\\",\\"larrbfs\\":\\"⤟\\",\\"larr\\":\\"←\\",\\"Larr\\":\\"↞\\",\\"lArr\\":\\"⇐\\",\\"larrfs\\":\\"⤝\\",\\"larrhk\\":\\"↩\\",\\"larrlp\\":\\"↫\\",\\"larrpl\\":\\"⤹\\",\\"larrsim\\":\\"⥳\\",\\"larrtl\\":\\"↢\\",\\"latail\\":\\"⤙\\",\\"lAtail\\":\\"⤛\\",\\"lat\\":\\"⪫\\",\\"late\\":\\"⪭\\",\\"lates\\":\\"⪭︀\\",\\"lbarr\\":\\"⤌\\",\\"lBarr\\":\\"⤎\\",\\"lbbrk\\":\\"❲\\",\\"lbrace\\":\\"{\\",\\"lbrack\\":\\"[\\",\\"lbrke\\":\\"⦋\\",\\"lbrksld\\":\\"⦏\\",\\"lbrkslu\\":\\"⦍\\",\\"Lcaron\\":\\"Ľ\\",\\"lcaron\\":\\"ľ\\",\\"Lcedil\\":\\"Ļ\\",\\"lcedil\\":\\"ļ\\",\\"lceil\\":\\"⌈\\",\\"lcub\\":\\"{\\",\\"Lcy\\":\\"Л\\",\\"lcy\\":\\"л\\",\\"ldca\\":\\"⤶\\",\\"ldquo\\":\\"“\\",\\"ldquor\\":\\"„\\",\\"ldrdhar\\":\\"⥧\\",\\"ldrushar\\":\\"⥋\\",\\"ldsh\\":\\"↲\\",\\"le\\":\\"≤\\",\\"lE\\":\\"≦\\",\\"LeftAngleBracket\\":\\"⟨\\",\\"LeftArrowBar\\":\\"⇤\\",\\"leftarrow\\":\\"←\\",\\"LeftArrow\\":\\"←\\",\\"Leftarrow\\":\\"⇐\\",\\"LeftArrowRightArrow\\":\\"⇆\\",\\"leftarrowtail\\":\\"↢\\",\\"LeftCeiling\\":\\"⌈\\",\\"LeftDoubleBracket\\":\\"⟦\\",\\"LeftDownTeeVector\\":\\"⥡\\",\\"LeftDownVectorBar\\":\\"⥙\\",\\"LeftDownVector\\":\\"⇃\\",\\"LeftFloor\\":\\"⌊\\",\\"leftharpoondown\\":\\"↽\\",\\"leftharpoonup\\":\\"↼\\",\\"leftleftarrows\\":\\"⇇\\",\\"leftrightarrow\\":\\"↔\\",\\"LeftRightArrow\\":\\"↔\\",\\"Leftrightarrow\\":\\"⇔\\",\\"leftrightarrows\\":\\"⇆\\",\\"leftrightharpoons\\":\\"⇋\\",\\"leftrightsquigarrow\\":\\"↭\\",\\"LeftRightVector\\":\\"⥎\\",\\"LeftTeeArrow\\":\\"↤\\",\\"LeftTee\\":\\"⊣\\",\\"LeftTeeVector\\":\\"⥚\\",\\"leftthreetimes\\":\\"⋋\\",\\"LeftTriangleBar\\":\\"⧏\\",\\"LeftTriangle\\":\\"⊲\\",\\"LeftTriangleEqual\\":\\"⊴\\",\\"LeftUpDownVector\\":\\"⥑\\",\\"LeftUpTeeVector\\":\\"⥠\\",\\"LeftUpVectorBar\\":\\"⥘\\",\\"LeftUpVector\\":\\"↿\\",\\"LeftVectorBar\\":\\"⥒\\",\\"LeftVector\\":\\"↼\\",\\"lEg\\":\\"⪋\\",\\"leg\\":\\"⋚\\",\\"leq\\":\\"≤\\",\\"leqq\\":\\"≦\\",\\"leqslant\\":\\"⩽\\",\\"lescc\\":\\"⪨\\",\\"les\\":\\"⩽\\",\\"lesdot\\":\\"⩿\\",\\"lesdoto\\":\\"⪁\\",\\"lesdotor\\":\\"⪃\\",\\"lesg\\":\\"⋚︀\\",\\"lesges\\":\\"⪓\\",\\"lessapprox\\":\\"⪅\\",\\"lessdot\\":\\"⋖\\",\\"lesseqgtr\\":\\"⋚\\",\\"lesseqqgtr\\":\\"⪋\\",\\"LessEqualGreater\\":\\"⋚\\",\\"LessFullEqual\\":\\"≦\\",\\"LessGreater\\":\\"≶\\",\\"lessgtr\\":\\"≶\\",\\"LessLess\\":\\"⪡\\",\\"lesssim\\":\\"≲\\",\\"LessSlantEqual\\":\\"⩽\\",\\"LessTilde\\":\\"≲\\",\\"lfisht\\":\\"⥼\\",\\"lfloor\\":\\"⌊\\",\\"Lfr\\":\\"𝔏\\",\\"lfr\\":\\"𝔩\\",\\"lg\\":\\"≶\\",\\"lgE\\":\\"⪑\\",\\"lHar\\":\\"⥢\\",\\"lhard\\":\\"↽\\",\\"lharu\\":\\"↼\\",\\"lharul\\":\\"⥪\\",\\"lhblk\\":\\"▄\\",\\"LJcy\\":\\"Љ\\",\\"ljcy\\":\\"љ\\",\\"llarr\\":\\"⇇\\",\\"ll\\":\\"≪\\",\\"Ll\\":\\"⋘\\",\\"llcorner\\":\\"⌞\\",\\"Lleftarrow\\":\\"⇚\\",\\"llhard\\":\\"⥫\\",\\"lltri\\":\\"◺\\",\\"Lmidot\\":\\"Ŀ\\",\\"lmidot\\":\\"ŀ\\",\\"lmoustache\\":\\"⎰\\",\\"lmoust\\":\\"⎰\\",\\"lnap\\":\\"⪉\\",\\"lnapprox\\":\\"⪉\\",\\"lne\\":\\"⪇\\",\\"lnE\\":\\"≨\\",\\"lneq\\":\\"⪇\\",\\"lneqq\\":\\"≨\\",\\"lnsim\\":\\"⋦\\",\\"loang\\":\\"⟬\\",\\"loarr\\":\\"⇽\\",\\"lobrk\\":\\"⟦\\",\\"longleftarrow\\":\\"⟵\\",\\"LongLeftArrow\\":\\"⟵\\",\\"Longleftarrow\\":\\"⟸\\",\\"longleftrightarrow\\":\\"⟷\\",\\"LongLeftRightArrow\\":\\"⟷\\",\\"Longleftrightarrow\\":\\"⟺\\",\\"longmapsto\\":\\"⟼\\",\\"longrightarrow\\":\\"⟶\\",\\"LongRightArrow\\":\\"⟶\\",\\"Longrightarrow\\":\\"⟹\\",\\"looparrowleft\\":\\"↫\\",\\"looparrowright\\":\\"↬\\",\\"lopar\\":\\"⦅\\",\\"Lopf\\":\\"𝕃\\",\\"lopf\\":\\"𝕝\\",\\"loplus\\":\\"⨭\\",\\"lotimes\\":\\"⨴\\",\\"lowast\\":\\"∗\\",\\"lowbar\\":\\"_\\",\\"LowerLeftArrow\\":\\"↙\\",\\"LowerRightArrow\\":\\"↘\\",\\"loz\\":\\"◊\\",\\"lozenge\\":\\"◊\\",\\"lozf\\":\\"⧫\\",\\"lpar\\":\\"(\\",\\"lparlt\\":\\"⦓\\",\\"lrarr\\":\\"⇆\\",\\"lrcorner\\":\\"⌟\\",\\"lrhar\\":\\"⇋\\",\\"lrhard\\":\\"⥭\\",\\"lrm\\":\\"‎\\",\\"lrtri\\":\\"⊿\\",\\"lsaquo\\":\\"‹\\",\\"lscr\\":\\"𝓁\\",\\"Lscr\\":\\"ℒ\\",\\"lsh\\":\\"↰\\",\\"Lsh\\":\\"↰\\",\\"lsim\\":\\"≲\\",\\"lsime\\":\\"⪍\\",\\"lsimg\\":\\"⪏\\",\\"lsqb\\":\\"[\\",\\"lsquo\\":\\"‘\\",\\"lsquor\\":\\"‚\\",\\"Lstrok\\":\\"Ł\\",\\"lstrok\\":\\"ł\\",\\"ltcc\\":\\"⪦\\",\\"ltcir\\":\\"⩹\\",\\"lt\\":\\"<\\",\\"LT\\":\\"<\\",\\"Lt\\":\\"≪\\",\\"ltdot\\":\\"⋖\\",\\"lthree\\":\\"⋋\\",\\"ltimes\\":\\"⋉\\",\\"ltlarr\\":\\"⥶\\",\\"ltquest\\":\\"⩻\\",\\"ltri\\":\\"◃\\",\\"ltrie\\":\\"⊴\\",\\"ltrif\\":\\"◂\\",\\"ltrPar\\":\\"⦖\\",\\"lurdshar\\":\\"⥊\\",\\"luruhar\\":\\"⥦\\",\\"lvertneqq\\":\\"≨︀\\",\\"lvnE\\":\\"≨︀\\",\\"macr\\":\\"¯\\",\\"male\\":\\"♂\\",\\"malt\\":\\"✠\\",\\"maltese\\":\\"✠\\",\\"Map\\":\\"⤅\\",\\"map\\":\\"↦\\",\\"mapsto\\":\\"↦\\",\\"mapstodown\\":\\"↧\\",\\"mapstoleft\\":\\"↤\\",\\"mapstoup\\":\\"↥\\",\\"marker\\":\\"▮\\",\\"mcomma\\":\\"⨩\\",\\"Mcy\\":\\"М\\",\\"mcy\\":\\"м\\",\\"mdash\\":\\"—\\",\\"mDDot\\":\\"∺\\",\\"measuredangle\\":\\"∡\\",\\"MediumSpace\\":\\" \\",\\"Mellintrf\\":\\"ℳ\\",\\"Mfr\\":\\"𝔐\\",\\"mfr\\":\\"𝔪\\",\\"mho\\":\\"℧\\",\\"micro\\":\\"µ\\",\\"midast\\":\\"*\\",\\"midcir\\":\\"⫰\\",\\"mid\\":\\"∣\\",\\"middot\\":\\"·\\",\\"minusb\\":\\"⊟\\",\\"minus\\":\\"−\\",\\"minusd\\":\\"∸\\",\\"minusdu\\":\\"⨪\\",\\"MinusPlus\\":\\"∓\\",\\"mlcp\\":\\"⫛\\",\\"mldr\\":\\"…\\",\\"mnplus\\":\\"∓\\",\\"models\\":\\"⊧\\",\\"Mopf\\":\\"𝕄\\",\\"mopf\\":\\"𝕞\\",\\"mp\\":\\"∓\\",\\"mscr\\":\\"𝓂\\",\\"Mscr\\":\\"ℳ\\",\\"mstpos\\":\\"∾\\",\\"Mu\\":\\"Μ\\",\\"mu\\":\\"μ\\",\\"multimap\\":\\"⊸\\",\\"mumap\\":\\"⊸\\",\\"nabla\\":\\"∇\\",\\"Nacute\\":\\"Ń\\",\\"nacute\\":\\"ń\\",\\"nang\\":\\"∠⃒\\",\\"nap\\":\\"≉\\",\\"napE\\":\\"⩰̸\\",\\"napid\\":\\"≋̸\\",\\"napos\\":\\"ŉ\\",\\"napprox\\":\\"≉\\",\\"natural\\":\\"♮\\",\\"naturals\\":\\"ℕ\\",\\"natur\\":\\"♮\\",\\"nbsp\\":\\" \\",\\"nbump\\":\\"≎̸\\",\\"nbumpe\\":\\"≏̸\\",\\"ncap\\":\\"⩃\\",\\"Ncaron\\":\\"Ň\\",\\"ncaron\\":\\"ň\\",\\"Ncedil\\":\\"Ņ\\",\\"ncedil\\":\\"ņ\\",\\"ncong\\":\\"≇\\",\\"ncongdot\\":\\"⩭̸\\",\\"ncup\\":\\"⩂\\",\\"Ncy\\":\\"Н\\",\\"ncy\\":\\"н\\",\\"ndash\\":\\"–\\",\\"nearhk\\":\\"⤤\\",\\"nearr\\":\\"↗\\",\\"neArr\\":\\"⇗\\",\\"nearrow\\":\\"↗\\",\\"ne\\":\\"≠\\",\\"nedot\\":\\"≐̸\\",\\"NegativeMediumSpace\\":\\"​\\",\\"NegativeThickSpace\\":\\"​\\",\\"NegativeThinSpace\\":\\"​\\",\\"NegativeVeryThinSpace\\":\\"​\\",\\"nequiv\\":\\"≢\\",\\"nesear\\":\\"⤨\\",\\"nesim\\":\\"≂̸\\",\\"NestedGreaterGreater\\":\\"≫\\",\\"NestedLessLess\\":\\"≪\\",\\"NewLine\\":\\"\\\\n\\",\\"nexist\\":\\"∄\\",\\"nexists\\":\\"∄\\",\\"Nfr\\":\\"𝔑\\",\\"nfr\\":\\"𝔫\\",\\"ngE\\":\\"≧̸\\",\\"nge\\":\\"≱\\",\\"ngeq\\":\\"≱\\",\\"ngeqq\\":\\"≧̸\\",\\"ngeqslant\\":\\"⩾̸\\",\\"nges\\":\\"⩾̸\\",\\"nGg\\":\\"⋙̸\\",\\"ngsim\\":\\"≵\\",\\"nGt\\":\\"≫⃒\\",\\"ngt\\":\\"≯\\",\\"ngtr\\":\\"≯\\",\\"nGtv\\":\\"≫̸\\",\\"nharr\\":\\"↮\\",\\"nhArr\\":\\"⇎\\",\\"nhpar\\":\\"⫲\\",\\"ni\\":\\"∋\\",\\"nis\\":\\"⋼\\",\\"nisd\\":\\"⋺\\",\\"niv\\":\\"∋\\",\\"NJcy\\":\\"Њ\\",\\"njcy\\":\\"њ\\",\\"nlarr\\":\\"↚\\",\\"nlArr\\":\\"⇍\\",\\"nldr\\":\\"‥\\",\\"nlE\\":\\"≦̸\\",\\"nle\\":\\"≰\\",\\"nleftarrow\\":\\"↚\\",\\"nLeftarrow\\":\\"⇍\\",\\"nleftrightarrow\\":\\"↮\\",\\"nLeftrightarrow\\":\\"⇎\\",\\"nleq\\":\\"≰\\",\\"nleqq\\":\\"≦̸\\",\\"nleqslant\\":\\"⩽̸\\",\\"nles\\":\\"⩽̸\\",\\"nless\\":\\"≮\\",\\"nLl\\":\\"⋘̸\\",\\"nlsim\\":\\"≴\\",\\"nLt\\":\\"≪⃒\\",\\"nlt\\":\\"≮\\",\\"nltri\\":\\"⋪\\",\\"nltrie\\":\\"⋬\\",\\"nLtv\\":\\"≪̸\\",\\"nmid\\":\\"∤\\",\\"NoBreak\\":\\"⁠\\",\\"NonBreakingSpace\\":\\" \\",\\"nopf\\":\\"𝕟\\",\\"Nopf\\":\\"ℕ\\",\\"Not\\":\\"⫬\\",\\"not\\":\\"¬\\",\\"NotCongruent\\":\\"≢\\",\\"NotCupCap\\":\\"≭\\",\\"NotDoubleVerticalBar\\":\\"∦\\",\\"NotElement\\":\\"∉\\",\\"NotEqual\\":\\"≠\\",\\"NotEqualTilde\\":\\"≂̸\\",\\"NotExists\\":\\"∄\\",\\"NotGreater\\":\\"≯\\",\\"NotGreaterEqual\\":\\"≱\\",\\"NotGreaterFullEqual\\":\\"≧̸\\",\\"NotGreaterGreater\\":\\"≫̸\\",\\"NotGreaterLess\\":\\"≹\\",\\"NotGreaterSlantEqual\\":\\"⩾̸\\",\\"NotGreaterTilde\\":\\"≵\\",\\"NotHumpDownHump\\":\\"≎̸\\",\\"NotHumpEqual\\":\\"≏̸\\",\\"notin\\":\\"∉\\",\\"notindot\\":\\"⋵̸\\",\\"notinE\\":\\"⋹̸\\",\\"notinva\\":\\"∉\\",\\"notinvb\\":\\"⋷\\",\\"notinvc\\":\\"⋶\\",\\"NotLeftTriangleBar\\":\\"⧏̸\\",\\"NotLeftTriangle\\":\\"⋪\\",\\"NotLeftTriangleEqual\\":\\"⋬\\",\\"NotLess\\":\\"≮\\",\\"NotLessEqual\\":\\"≰\\",\\"NotLessGreater\\":\\"≸\\",\\"NotLessLess\\":\\"≪̸\\",\\"NotLessSlantEqual\\":\\"⩽̸\\",\\"NotLessTilde\\":\\"≴\\",\\"NotNestedGreaterGreater\\":\\"⪢̸\\",\\"NotNestedLessLess\\":\\"⪡̸\\",\\"notni\\":\\"∌\\",\\"notniva\\":\\"∌\\",\\"notnivb\\":\\"⋾\\",\\"notnivc\\":\\"⋽\\",\\"NotPrecedes\\":\\"⊀\\",\\"NotPrecedesEqual\\":\\"⪯̸\\",\\"NotPrecedesSlantEqual\\":\\"⋠\\",\\"NotReverseElement\\":\\"∌\\",\\"NotRightTriangleBar\\":\\"⧐̸\\",\\"NotRightTriangle\\":\\"⋫\\",\\"NotRightTriangleEqual\\":\\"⋭\\",\\"NotSquareSubset\\":\\"⊏̸\\",\\"NotSquareSubsetEqual\\":\\"⋢\\",\\"NotSquareSuperset\\":\\"⊐̸\\",\\"NotSquareSupersetEqual\\":\\"⋣\\",\\"NotSubset\\":\\"⊂⃒\\",\\"NotSubsetEqual\\":\\"⊈\\",\\"NotSucceeds\\":\\"⊁\\",\\"NotSucceedsEqual\\":\\"⪰̸\\",\\"NotSucceedsSlantEqual\\":\\"⋡\\",\\"NotSucceedsTilde\\":\\"≿̸\\",\\"NotSuperset\\":\\"⊃⃒\\",\\"NotSupersetEqual\\":\\"⊉\\",\\"NotTilde\\":\\"≁\\",\\"NotTildeEqual\\":\\"≄\\",\\"NotTildeFullEqual\\":\\"≇\\",\\"NotTildeTilde\\":\\"≉\\",\\"NotVerticalBar\\":\\"∤\\",\\"nparallel\\":\\"∦\\",\\"npar\\":\\"∦\\",\\"nparsl\\":\\"⫽⃥\\",\\"npart\\":\\"∂̸\\",\\"npolint\\":\\"⨔\\",\\"npr\\":\\"⊀\\",\\"nprcue\\":\\"⋠\\",\\"nprec\\":\\"⊀\\",\\"npreceq\\":\\"⪯̸\\",\\"npre\\":\\"⪯̸\\",\\"nrarrc\\":\\"⤳̸\\",\\"nrarr\\":\\"↛\\",\\"nrArr\\":\\"⇏\\",\\"nrarrw\\":\\"↝̸\\",\\"nrightarrow\\":\\"↛\\",\\"nRightarrow\\":\\"⇏\\",\\"nrtri\\":\\"⋫\\",\\"nrtrie\\":\\"⋭\\",\\"nsc\\":\\"⊁\\",\\"nsccue\\":\\"⋡\\",\\"nsce\\":\\"⪰̸\\",\\"Nscr\\":\\"𝒩\\",\\"nscr\\":\\"𝓃\\",\\"nshortmid\\":\\"∤\\",\\"nshortparallel\\":\\"∦\\",\\"nsim\\":\\"≁\\",\\"nsime\\":\\"≄\\",\\"nsimeq\\":\\"≄\\",\\"nsmid\\":\\"∤\\",\\"nspar\\":\\"∦\\",\\"nsqsube\\":\\"⋢\\",\\"nsqsupe\\":\\"⋣\\",\\"nsub\\":\\"⊄\\",\\"nsubE\\":\\"⫅̸\\",\\"nsube\\":\\"⊈\\",\\"nsubset\\":\\"⊂⃒\\",\\"nsubseteq\\":\\"⊈\\",\\"nsubseteqq\\":\\"⫅̸\\",\\"nsucc\\":\\"⊁\\",\\"nsucceq\\":\\"⪰̸\\",\\"nsup\\":\\"⊅\\",\\"nsupE\\":\\"⫆̸\\",\\"nsupe\\":\\"⊉\\",\\"nsupset\\":\\"⊃⃒\\",\\"nsupseteq\\":\\"⊉\\",\\"nsupseteqq\\":\\"⫆̸\\",\\"ntgl\\":\\"≹\\",\\"Ntilde\\":\\"Ñ\\",\\"ntilde\\":\\"ñ\\",\\"ntlg\\":\\"≸\\",\\"ntriangleleft\\":\\"⋪\\",\\"ntrianglelefteq\\":\\"⋬\\",\\"ntriangleright\\":\\"⋫\\",\\"ntrianglerighteq\\":\\"⋭\\",\\"Nu\\":\\"Ν\\",\\"nu\\":\\"ν\\",\\"num\\":\\"#\\",\\"numero\\":\\"№\\",\\"numsp\\":\\" \\",\\"nvap\\":\\"≍⃒\\",\\"nvdash\\":\\"⊬\\",\\"nvDash\\":\\"⊭\\",\\"nVdash\\":\\"⊮\\",\\"nVDash\\":\\"⊯\\",\\"nvge\\":\\"≥⃒\\",\\"nvgt\\":\\">⃒\\",\\"nvHarr\\":\\"⤄\\",\\"nvinfin\\":\\"⧞\\",\\"nvlArr\\":\\"⤂\\",\\"nvle\\":\\"≤⃒\\",\\"nvlt\\":\\"<⃒\\",\\"nvltrie\\":\\"⊴⃒\\",\\"nvrArr\\":\\"⤃\\",\\"nvrtrie\\":\\"⊵⃒\\",\\"nvsim\\":\\"∼⃒\\",\\"nwarhk\\":\\"⤣\\",\\"nwarr\\":\\"↖\\",\\"nwArr\\":\\"⇖\\",\\"nwarrow\\":\\"↖\\",\\"nwnear\\":\\"⤧\\",\\"Oacute\\":\\"Ó\\",\\"oacute\\":\\"ó\\",\\"oast\\":\\"⊛\\",\\"Ocirc\\":\\"Ô\\",\\"ocirc\\":\\"ô\\",\\"ocir\\":\\"⊚\\",\\"Ocy\\":\\"О\\",\\"ocy\\":\\"о\\",\\"odash\\":\\"⊝\\",\\"Odblac\\":\\"Ő\\",\\"odblac\\":\\"ő\\",\\"odiv\\":\\"⨸\\",\\"odot\\":\\"⊙\\",\\"odsold\\":\\"⦼\\",\\"OElig\\":\\"Œ\\",\\"oelig\\":\\"œ\\",\\"ofcir\\":\\"⦿\\",\\"Ofr\\":\\"𝔒\\",\\"ofr\\":\\"𝔬\\",\\"ogon\\":\\"˛\\",\\"Ograve\\":\\"Ò\\",\\"ograve\\":\\"ò\\",\\"ogt\\":\\"⧁\\",\\"ohbar\\":\\"⦵\\",\\"ohm\\":\\"Ω\\",\\"oint\\":\\"∮\\",\\"olarr\\":\\"↺\\",\\"olcir\\":\\"⦾\\",\\"olcross\\":\\"⦻\\",\\"oline\\":\\"‾\\",\\"olt\\":\\"⧀\\",\\"Omacr\\":\\"Ō\\",\\"omacr\\":\\"ō\\",\\"Omega\\":\\"Ω\\",\\"omega\\":\\"ω\\",\\"Omicron\\":\\"Ο\\",\\"omicron\\":\\"ο\\",\\"omid\\":\\"⦶\\",\\"ominus\\":\\"⊖\\",\\"Oopf\\":\\"𝕆\\",\\"oopf\\":\\"𝕠\\",\\"opar\\":\\"⦷\\",\\"OpenCurlyDoubleQuote\\":\\"“\\",\\"OpenCurlyQuote\\":\\"‘\\",\\"operp\\":\\"⦹\\",\\"oplus\\":\\"⊕\\",\\"orarr\\":\\"↻\\",\\"Or\\":\\"⩔\\",\\"or\\":\\"∨\\",\\"ord\\":\\"⩝\\",\\"order\\":\\"ℴ\\",\\"orderof\\":\\"ℴ\\",\\"ordf\\":\\"ª\\",\\"ordm\\":\\"º\\",\\"origof\\":\\"⊶\\",\\"oror\\":\\"⩖\\",\\"orslope\\":\\"⩗\\",\\"orv\\":\\"⩛\\",\\"oS\\":\\"Ⓢ\\",\\"Oscr\\":\\"𝒪\\",\\"oscr\\":\\"ℴ\\",\\"Oslash\\":\\"Ø\\",\\"oslash\\":\\"ø\\",\\"osol\\":\\"⊘\\",\\"Otilde\\":\\"Õ\\",\\"otilde\\":\\"õ\\",\\"otimesas\\":\\"⨶\\",\\"Otimes\\":\\"⨷\\",\\"otimes\\":\\"⊗\\",\\"Ouml\\":\\"Ö\\",\\"ouml\\":\\"ö\\",\\"ovbar\\":\\"⌽\\",\\"OverBar\\":\\"‾\\",\\"OverBrace\\":\\"⏞\\",\\"OverBracket\\":\\"⎴\\",\\"OverParenthesis\\":\\"⏜\\",\\"para\\":\\"¶\\",\\"parallel\\":\\"∥\\",\\"par\\":\\"∥\\",\\"parsim\\":\\"⫳\\",\\"parsl\\":\\"⫽\\",\\"part\\":\\"∂\\",\\"PartialD\\":\\"∂\\",\\"Pcy\\":\\"П\\",\\"pcy\\":\\"п\\",\\"percnt\\":\\"%\\",\\"period\\":\\".\\",\\"permil\\":\\"‰\\",\\"perp\\":\\"⊥\\",\\"pertenk\\":\\"‱\\",\\"Pfr\\":\\"𝔓\\",\\"pfr\\":\\"𝔭\\",\\"Phi\\":\\"Φ\\",\\"phi\\":\\"φ\\",\\"phiv\\":\\"ϕ\\",\\"phmmat\\":\\"ℳ\\",\\"phone\\":\\"☎\\",\\"Pi\\":\\"Π\\",\\"pi\\":\\"π\\",\\"pitchfork\\":\\"⋔\\",\\"piv\\":\\"ϖ\\",\\"planck\\":\\"ℏ\\",\\"planckh\\":\\"ℎ\\",\\"plankv\\":\\"ℏ\\",\\"plusacir\\":\\"⨣\\",\\"plusb\\":\\"⊞\\",\\"pluscir\\":\\"⨢\\",\\"plus\\":\\"+\\",\\"plusdo\\":\\"∔\\",\\"plusdu\\":\\"⨥\\",\\"pluse\\":\\"⩲\\",\\"PlusMinus\\":\\"±\\",\\"plusmn\\":\\"±\\",\\"plussim\\":\\"⨦\\",\\"plustwo\\":\\"⨧\\",\\"pm\\":\\"±\\",\\"Poincareplane\\":\\"ℌ\\",\\"pointint\\":\\"⨕\\",\\"popf\\":\\"𝕡\\",\\"Popf\\":\\"ℙ\\",\\"pound\\":\\"£\\",\\"prap\\":\\"⪷\\",\\"Pr\\":\\"⪻\\",\\"pr\\":\\"≺\\",\\"prcue\\":\\"≼\\",\\"precapprox\\":\\"⪷\\",\\"prec\\":\\"≺\\",\\"preccurlyeq\\":\\"≼\\",\\"Precedes\\":\\"≺\\",\\"PrecedesEqual\\":\\"⪯\\",\\"PrecedesSlantEqual\\":\\"≼\\",\\"PrecedesTilde\\":\\"≾\\",\\"preceq\\":\\"⪯\\",\\"precnapprox\\":\\"⪹\\",\\"precneqq\\":\\"⪵\\",\\"precnsim\\":\\"⋨\\",\\"pre\\":\\"⪯\\",\\"prE\\":\\"⪳\\",\\"precsim\\":\\"≾\\",\\"prime\\":\\"′\\",\\"Prime\\":\\"″\\",\\"primes\\":\\"ℙ\\",\\"prnap\\":\\"⪹\\",\\"prnE\\":\\"⪵\\",\\"prnsim\\":\\"⋨\\",\\"prod\\":\\"∏\\",\\"Product\\":\\"∏\\",\\"profalar\\":\\"⌮\\",\\"profline\\":\\"⌒\\",\\"profsurf\\":\\"⌓\\",\\"prop\\":\\"∝\\",\\"Proportional\\":\\"∝\\",\\"Proportion\\":\\"∷\\",\\"propto\\":\\"∝\\",\\"prsim\\":\\"≾\\",\\"prurel\\":\\"⊰\\",\\"Pscr\\":\\"𝒫\\",\\"pscr\\":\\"𝓅\\",\\"Psi\\":\\"Ψ\\",\\"psi\\":\\"ψ\\",\\"puncsp\\":\\" \\",\\"Qfr\\":\\"𝔔\\",\\"qfr\\":\\"𝔮\\",\\"qint\\":\\"⨌\\",\\"qopf\\":\\"𝕢\\",\\"Qopf\\":\\"ℚ\\",\\"qprime\\":\\"⁗\\",\\"Qscr\\":\\"𝒬\\",\\"qscr\\":\\"𝓆\\",\\"quaternions\\":\\"ℍ\\",\\"quatint\\":\\"⨖\\",\\"quest\\":\\"?\\",\\"questeq\\":\\"≟\\",\\"quot\\":\\"\\\\\\"\\",\\"QUOT\\":\\"\\\\\\"\\",\\"rAarr\\":\\"⇛\\",\\"race\\":\\"∽̱\\",\\"Racute\\":\\"Ŕ\\",\\"racute\\":\\"ŕ\\",\\"radic\\":\\"√\\",\\"raemptyv\\":\\"⦳\\",\\"rang\\":\\"⟩\\",\\"Rang\\":\\"⟫\\",\\"rangd\\":\\"⦒\\",\\"range\\":\\"⦥\\",\\"rangle\\":\\"⟩\\",\\"raquo\\":\\"»\\",\\"rarrap\\":\\"⥵\\",\\"rarrb\\":\\"⇥\\",\\"rarrbfs\\":\\"⤠\\",\\"rarrc\\":\\"⤳\\",\\"rarr\\":\\"→\\",\\"Rarr\\":\\"↠\\",\\"rArr\\":\\"⇒\\",\\"rarrfs\\":\\"⤞\\",\\"rarrhk\\":\\"↪\\",\\"rarrlp\\":\\"↬\\",\\"rarrpl\\":\\"⥅\\",\\"rarrsim\\":\\"⥴\\",\\"Rarrtl\\":\\"⤖\\",\\"rarrtl\\":\\"↣\\",\\"rarrw\\":\\"↝\\",\\"ratail\\":\\"⤚\\",\\"rAtail\\":\\"⤜\\",\\"ratio\\":\\"∶\\",\\"rationals\\":\\"ℚ\\",\\"rbarr\\":\\"⤍\\",\\"rBarr\\":\\"⤏\\",\\"RBarr\\":\\"⤐\\",\\"rbbrk\\":\\"❳\\",\\"rbrace\\":\\"}\\",\\"rbrack\\":\\"]\\",\\"rbrke\\":\\"⦌\\",\\"rbrksld\\":\\"⦎\\",\\"rbrkslu\\":\\"⦐\\",\\"Rcaron\\":\\"Ř\\",\\"rcaron\\":\\"ř\\",\\"Rcedil\\":\\"Ŗ\\",\\"rcedil\\":\\"ŗ\\",\\"rceil\\":\\"⌉\\",\\"rcub\\":\\"}\\",\\"Rcy\\":\\"Р\\",\\"rcy\\":\\"р\\",\\"rdca\\":\\"⤷\\",\\"rdldhar\\":\\"⥩\\",\\"rdquo\\":\\"”\\",\\"rdquor\\":\\"”\\",\\"rdsh\\":\\"↳\\",\\"real\\":\\"ℜ\\",\\"realine\\":\\"ℛ\\",\\"realpart\\":\\"ℜ\\",\\"reals\\":\\"ℝ\\",\\"Re\\":\\"ℜ\\",\\"rect\\":\\"▭\\",\\"reg\\":\\"®\\",\\"REG\\":\\"®\\",\\"ReverseElement\\":\\"∋\\",\\"ReverseEquilibrium\\":\\"⇋\\",\\"ReverseUpEquilibrium\\":\\"⥯\\",\\"rfisht\\":\\"⥽\\",\\"rfloor\\":\\"⌋\\",\\"rfr\\":\\"𝔯\\",\\"Rfr\\":\\"ℜ\\",\\"rHar\\":\\"⥤\\",\\"rhard\\":\\"⇁\\",\\"rharu\\":\\"⇀\\",\\"rharul\\":\\"⥬\\",\\"Rho\\":\\"Ρ\\",\\"rho\\":\\"ρ\\",\\"rhov\\":\\"ϱ\\",\\"RightAngleBracket\\":\\"⟩\\",\\"RightArrowBar\\":\\"⇥\\",\\"rightarrow\\":\\"→\\",\\"RightArrow\\":\\"→\\",\\"Rightarrow\\":\\"⇒\\",\\"RightArrowLeftArrow\\":\\"⇄\\",\\"rightarrowtail\\":\\"↣\\",\\"RightCeiling\\":\\"⌉\\",\\"RightDoubleBracket\\":\\"⟧\\",\\"RightDownTeeVector\\":\\"⥝\\",\\"RightDownVectorBar\\":\\"⥕\\",\\"RightDownVector\\":\\"⇂\\",\\"RightFloor\\":\\"⌋\\",\\"rightharpoondown\\":\\"⇁\\",\\"rightharpoonup\\":\\"⇀\\",\\"rightleftarrows\\":\\"⇄\\",\\"rightleftharpoons\\":\\"⇌\\",\\"rightrightarrows\\":\\"⇉\\",\\"rightsquigarrow\\":\\"↝\\",\\"RightTeeArrow\\":\\"↦\\",\\"RightTee\\":\\"⊢\\",\\"RightTeeVector\\":\\"⥛\\",\\"rightthreetimes\\":\\"⋌\\",\\"RightTriangleBar\\":\\"⧐\\",\\"RightTriangle\\":\\"⊳\\",\\"RightTriangleEqual\\":\\"⊵\\",\\"RightUpDownVector\\":\\"⥏\\",\\"RightUpTeeVector\\":\\"⥜\\",\\"RightUpVectorBar\\":\\"⥔\\",\\"RightUpVector\\":\\"↾\\",\\"RightVectorBar\\":\\"⥓\\",\\"RightVector\\":\\"⇀\\",\\"ring\\":\\"˚\\",\\"risingdotseq\\":\\"≓\\",\\"rlarr\\":\\"⇄\\",\\"rlhar\\":\\"⇌\\",\\"rlm\\":\\"‏\\",\\"rmoustache\\":\\"⎱\\",\\"rmoust\\":\\"⎱\\",\\"rnmid\\":\\"⫮\\",\\"roang\\":\\"⟭\\",\\"roarr\\":\\"⇾\\",\\"robrk\\":\\"⟧\\",\\"ropar\\":\\"⦆\\",\\"ropf\\":\\"𝕣\\",\\"Ropf\\":\\"ℝ\\",\\"roplus\\":\\"⨮\\",\\"rotimes\\":\\"⨵\\",\\"RoundImplies\\":\\"⥰\\",\\"rpar\\":\\")\\",\\"rpargt\\":\\"⦔\\",\\"rppolint\\":\\"⨒\\",\\"rrarr\\":\\"⇉\\",\\"Rrightarrow\\":\\"⇛\\",\\"rsaquo\\":\\"›\\",\\"rscr\\":\\"𝓇\\",\\"Rscr\\":\\"ℛ\\",\\"rsh\\":\\"↱\\",\\"Rsh\\":\\"↱\\",\\"rsqb\\":\\"]\\",\\"rsquo\\":\\"’\\",\\"rsquor\\":\\"’\\",\\"rthree\\":\\"⋌\\",\\"rtimes\\":\\"⋊\\",\\"rtri\\":\\"▹\\",\\"rtrie\\":\\"⊵\\",\\"rtrif\\":\\"▸\\",\\"rtriltri\\":\\"⧎\\",\\"RuleDelayed\\":\\"⧴\\",\\"ruluhar\\":\\"⥨\\",\\"rx\\":\\"℞\\",\\"Sacute\\":\\"Ś\\",\\"sacute\\":\\"ś\\",\\"sbquo\\":\\"‚\\",\\"scap\\":\\"⪸\\",\\"Scaron\\":\\"Š\\",\\"scaron\\":\\"š\\",\\"Sc\\":\\"⪼\\",\\"sc\\":\\"≻\\",\\"sccue\\":\\"≽\\",\\"sce\\":\\"⪰\\",\\"scE\\":\\"⪴\\",\\"Scedil\\":\\"Ş\\",\\"scedil\\":\\"ş\\",\\"Scirc\\":\\"Ŝ\\",\\"scirc\\":\\"ŝ\\",\\"scnap\\":\\"⪺\\",\\"scnE\\":\\"⪶\\",\\"scnsim\\":\\"⋩\\",\\"scpolint\\":\\"⨓\\",\\"scsim\\":\\"≿\\",\\"Scy\\":\\"С\\",\\"scy\\":\\"с\\",\\"sdotb\\":\\"⊡\\",\\"sdot\\":\\"⋅\\",\\"sdote\\":\\"⩦\\",\\"searhk\\":\\"⤥\\",\\"searr\\":\\"↘\\",\\"seArr\\":\\"⇘\\",\\"searrow\\":\\"↘\\",\\"sect\\":\\"§\\",\\"semi\\":\\";\\",\\"seswar\\":\\"⤩\\",\\"setminus\\":\\"∖\\",\\"setmn\\":\\"∖\\",\\"sext\\":\\"✶\\",\\"Sfr\\":\\"𝔖\\",\\"sfr\\":\\"𝔰\\",\\"sfrown\\":\\"⌢\\",\\"sharp\\":\\"♯\\",\\"SHCHcy\\":\\"Щ\\",\\"shchcy\\":\\"щ\\",\\"SHcy\\":\\"Ш\\",\\"shcy\\":\\"ш\\",\\"ShortDownArrow\\":\\"↓\\",\\"ShortLeftArrow\\":\\"←\\",\\"shortmid\\":\\"∣\\",\\"shortparallel\\":\\"∥\\",\\"ShortRightArrow\\":\\"→\\",\\"ShortUpArrow\\":\\"↑\\",\\"shy\\":\\"­\\",\\"Sigma\\":\\"Σ\\",\\"sigma\\":\\"σ\\",\\"sigmaf\\":\\"ς\\",\\"sigmav\\":\\"ς\\",\\"sim\\":\\"∼\\",\\"simdot\\":\\"⩪\\",\\"sime\\":\\"≃\\",\\"simeq\\":\\"≃\\",\\"simg\\":\\"⪞\\",\\"simgE\\":\\"⪠\\",\\"siml\\":\\"⪝\\",\\"simlE\\":\\"⪟\\",\\"simne\\":\\"≆\\",\\"simplus\\":\\"⨤\\",\\"simrarr\\":\\"⥲\\",\\"slarr\\":\\"←\\",\\"SmallCircle\\":\\"∘\\",\\"smallsetminus\\":\\"∖\\",\\"smashp\\":\\"⨳\\",\\"smeparsl\\":\\"⧤\\",\\"smid\\":\\"∣\\",\\"smile\\":\\"⌣\\",\\"smt\\":\\"⪪\\",\\"smte\\":\\"⪬\\",\\"smtes\\":\\"⪬︀\\",\\"SOFTcy\\":\\"Ь\\",\\"softcy\\":\\"ь\\",\\"solbar\\":\\"⌿\\",\\"solb\\":\\"⧄\\",\\"sol\\":\\"/\\",\\"Sopf\\":\\"𝕊\\",\\"sopf\\":\\"𝕤\\",\\"spades\\":\\"♠\\",\\"spadesuit\\":\\"♠\\",\\"spar\\":\\"∥\\",\\"sqcap\\":\\"⊓\\",\\"sqcaps\\":\\"⊓︀\\",\\"sqcup\\":\\"⊔\\",\\"sqcups\\":\\"⊔︀\\",\\"Sqrt\\":\\"√\\",\\"sqsub\\":\\"⊏\\",\\"sqsube\\":\\"⊑\\",\\"sqsubset\\":\\"⊏\\",\\"sqsubseteq\\":\\"⊑\\",\\"sqsup\\":\\"⊐\\",\\"sqsupe\\":\\"⊒\\",\\"sqsupset\\":\\"⊐\\",\\"sqsupseteq\\":\\"⊒\\",\\"square\\":\\"□\\",\\"Square\\":\\"□\\",\\"SquareIntersection\\":\\"⊓\\",\\"SquareSubset\\":\\"⊏\\",\\"SquareSubsetEqual\\":\\"⊑\\",\\"SquareSuperset\\":\\"⊐\\",\\"SquareSupersetEqual\\":\\"⊒\\",\\"SquareUnion\\":\\"⊔\\",\\"squarf\\":\\"▪\\",\\"squ\\":\\"□\\",\\"squf\\":\\"▪\\",\\"srarr\\":\\"→\\",\\"Sscr\\":\\"𝒮\\",\\"sscr\\":\\"𝓈\\",\\"ssetmn\\":\\"∖\\",\\"ssmile\\":\\"⌣\\",\\"sstarf\\":\\"⋆\\",\\"Star\\":\\"⋆\\",\\"star\\":\\"☆\\",\\"starf\\":\\"★\\",\\"straightepsilon\\":\\"ϵ\\",\\"straightphi\\":\\"ϕ\\",\\"strns\\":\\"¯\\",\\"sub\\":\\"⊂\\",\\"Sub\\":\\"⋐\\",\\"subdot\\":\\"⪽\\",\\"subE\\":\\"⫅\\",\\"sube\\":\\"⊆\\",\\"subedot\\":\\"⫃\\",\\"submult\\":\\"⫁\\",\\"subnE\\":\\"⫋\\",\\"subne\\":\\"⊊\\",\\"subplus\\":\\"⪿\\",\\"subrarr\\":\\"⥹\\",\\"subset\\":\\"⊂\\",\\"Subset\\":\\"⋐\\",\\"subseteq\\":\\"⊆\\",\\"subseteqq\\":\\"⫅\\",\\"SubsetEqual\\":\\"⊆\\",\\"subsetneq\\":\\"⊊\\",\\"subsetneqq\\":\\"⫋\\",\\"subsim\\":\\"⫇\\",\\"subsub\\":\\"⫕\\",\\"subsup\\":\\"⫓\\",\\"succapprox\\":\\"⪸\\",\\"succ\\":\\"≻\\",\\"succcurlyeq\\":\\"≽\\",\\"Succeeds\\":\\"≻\\",\\"SucceedsEqual\\":\\"⪰\\",\\"SucceedsSlantEqual\\":\\"≽\\",\\"SucceedsTilde\\":\\"≿\\",\\"succeq\\":\\"⪰\\",\\"succnapprox\\":\\"⪺\\",\\"succneqq\\":\\"⪶\\",\\"succnsim\\":\\"⋩\\",\\"succsim\\":\\"≿\\",\\"SuchThat\\":\\"∋\\",\\"sum\\":\\"∑\\",\\"Sum\\":\\"∑\\",\\"sung\\":\\"♪\\",\\"sup1\\":\\"¹\\",\\"sup2\\":\\"²\\",\\"sup3\\":\\"³\\",\\"sup\\":\\"⊃\\",\\"Sup\\":\\"⋑\\",\\"supdot\\":\\"⪾\\",\\"supdsub\\":\\"⫘\\",\\"supE\\":\\"⫆\\",\\"supe\\":\\"⊇\\",\\"supedot\\":\\"⫄\\",\\"Superset\\":\\"⊃\\",\\"SupersetEqual\\":\\"⊇\\",\\"suphsol\\":\\"⟉\\",\\"suphsub\\":\\"⫗\\",\\"suplarr\\":\\"⥻\\",\\"supmult\\":\\"⫂\\",\\"supnE\\":\\"⫌\\",\\"supne\\":\\"⊋\\",\\"supplus\\":\\"⫀\\",\\"supset\\":\\"⊃\\",\\"Supset\\":\\"⋑\\",\\"supseteq\\":\\"⊇\\",\\"supseteqq\\":\\"⫆\\",\\"supsetneq\\":\\"⊋\\",\\"supsetneqq\\":\\"⫌\\",\\"supsim\\":\\"⫈\\",\\"supsub\\":\\"⫔\\",\\"supsup\\":\\"⫖\\",\\"swarhk\\":\\"⤦\\",\\"swarr\\":\\"↙\\",\\"swArr\\":\\"⇙\\",\\"swarrow\\":\\"↙\\",\\"swnwar\\":\\"⤪\\",\\"szlig\\":\\"ß\\",\\"Tab\\":\\"\\\\t\\",\\"target\\":\\"⌖\\",\\"Tau\\":\\"Τ\\",\\"tau\\":\\"τ\\",\\"tbrk\\":\\"⎴\\",\\"Tcaron\\":\\"Ť\\",\\"tcaron\\":\\"ť\\",\\"Tcedil\\":\\"Ţ\\",\\"tcedil\\":\\"ţ\\",\\"Tcy\\":\\"Т\\",\\"tcy\\":\\"т\\",\\"tdot\\":\\"⃛\\",\\"telrec\\":\\"⌕\\",\\"Tfr\\":\\"𝔗\\",\\"tfr\\":\\"𝔱\\",\\"there4\\":\\"∴\\",\\"therefore\\":\\"∴\\",\\"Therefore\\":\\"∴\\",\\"Theta\\":\\"Θ\\",\\"theta\\":\\"θ\\",\\"thetasym\\":\\"ϑ\\",\\"thetav\\":\\"ϑ\\",\\"thickapprox\\":\\"≈\\",\\"thicksim\\":\\"∼\\",\\"ThickSpace\\":\\"  \\",\\"ThinSpace\\":\\" \\",\\"thinsp\\":\\" \\",\\"thkap\\":\\"≈\\",\\"thksim\\":\\"∼\\",\\"THORN\\":\\"Þ\\",\\"thorn\\":\\"þ\\",\\"tilde\\":\\"˜\\",\\"Tilde\\":\\"∼\\",\\"TildeEqual\\":\\"≃\\",\\"TildeFullEqual\\":\\"≅\\",\\"TildeTilde\\":\\"≈\\",\\"timesbar\\":\\"⨱\\",\\"timesb\\":\\"⊠\\",\\"times\\":\\"×\\",\\"timesd\\":\\"⨰\\",\\"tint\\":\\"∭\\",\\"toea\\":\\"⤨\\",\\"topbot\\":\\"⌶\\",\\"topcir\\":\\"⫱\\",\\"top\\":\\"⊤\\",\\"Topf\\":\\"𝕋\\",\\"topf\\":\\"𝕥\\",\\"topfork\\":\\"⫚\\",\\"tosa\\":\\"⤩\\",\\"tprime\\":\\"‴\\",\\"trade\\":\\"™\\",\\"TRADE\\":\\"™\\",\\"triangle\\":\\"▵\\",\\"triangledown\\":\\"▿\\",\\"triangleleft\\":\\"◃\\",\\"trianglelefteq\\":\\"⊴\\",\\"triangleq\\":\\"≜\\",\\"triangleright\\":\\"▹\\",\\"trianglerighteq\\":\\"⊵\\",\\"tridot\\":\\"◬\\",\\"trie\\":\\"≜\\",\\"triminus\\":\\"⨺\\",\\"TripleDot\\":\\"⃛\\",\\"triplus\\":\\"⨹\\",\\"trisb\\":\\"⧍\\",\\"tritime\\":\\"⨻\\",\\"trpezium\\":\\"⏢\\",\\"Tscr\\":\\"𝒯\\",\\"tscr\\":\\"𝓉\\",\\"TScy\\":\\"Ц\\",\\"tscy\\":\\"ц\\",\\"TSHcy\\":\\"Ћ\\",\\"tshcy\\":\\"ћ\\",\\"Tstrok\\":\\"Ŧ\\",\\"tstrok\\":\\"ŧ\\",\\"twixt\\":\\"≬\\",\\"twoheadleftarrow\\":\\"↞\\",\\"twoheadrightarrow\\":\\"↠\\",\\"Uacute\\":\\"Ú\\",\\"uacute\\":\\"ú\\",\\"uarr\\":\\"↑\\",\\"Uarr\\":\\"↟\\",\\"uArr\\":\\"⇑\\",\\"Uarrocir\\":\\"⥉\\",\\"Ubrcy\\":\\"Ў\\",\\"ubrcy\\":\\"ў\\",\\"Ubreve\\":\\"Ŭ\\",\\"ubreve\\":\\"ŭ\\",\\"Ucirc\\":\\"Û\\",\\"ucirc\\":\\"û\\",\\"Ucy\\":\\"У\\",\\"ucy\\":\\"у\\",\\"udarr\\":\\"⇅\\",\\"Udblac\\":\\"Ű\\",\\"udblac\\":\\"ű\\",\\"udhar\\":\\"⥮\\",\\"ufisht\\":\\"⥾\\",\\"Ufr\\":\\"𝔘\\",\\"ufr\\":\\"𝔲\\",\\"Ugrave\\":\\"Ù\\",\\"ugrave\\":\\"ù\\",\\"uHar\\":\\"⥣\\",\\"uharl\\":\\"↿\\",\\"uharr\\":\\"↾\\",\\"uhblk\\":\\"▀\\",\\"ulcorn\\":\\"⌜\\",\\"ulcorner\\":\\"⌜\\",\\"ulcrop\\":\\"⌏\\",\\"ultri\\":\\"◸\\",\\"Umacr\\":\\"Ū\\",\\"umacr\\":\\"ū\\",\\"uml\\":\\"¨\\",\\"UnderBar\\":\\"_\\",\\"UnderBrace\\":\\"⏟\\",\\"UnderBracket\\":\\"⎵\\",\\"UnderParenthesis\\":\\"⏝\\",\\"Union\\":\\"⋃\\",\\"UnionPlus\\":\\"⊎\\",\\"Uogon\\":\\"Ų\\",\\"uogon\\":\\"ų\\",\\"Uopf\\":\\"𝕌\\",\\"uopf\\":\\"𝕦\\",\\"UpArrowBar\\":\\"⤒\\",\\"uparrow\\":\\"↑\\",\\"UpArrow\\":\\"↑\\",\\"Uparrow\\":\\"⇑\\",\\"UpArrowDownArrow\\":\\"⇅\\",\\"updownarrow\\":\\"↕\\",\\"UpDownArrow\\":\\"↕\\",\\"Updownarrow\\":\\"⇕\\",\\"UpEquilibrium\\":\\"⥮\\",\\"upharpoonleft\\":\\"↿\\",\\"upharpoonright\\":\\"↾\\",\\"uplus\\":\\"⊎\\",\\"UpperLeftArrow\\":\\"↖\\",\\"UpperRightArrow\\":\\"↗\\",\\"upsi\\":\\"υ\\",\\"Upsi\\":\\"ϒ\\",\\"upsih\\":\\"ϒ\\",\\"Upsilon\\":\\"Υ\\",\\"upsilon\\":\\"υ\\",\\"UpTeeArrow\\":\\"↥\\",\\"UpTee\\":\\"⊥\\",\\"upuparrows\\":\\"⇈\\",\\"urcorn\\":\\"⌝\\",\\"urcorner\\":\\"⌝\\",\\"urcrop\\":\\"⌎\\",\\"Uring\\":\\"Ů\\",\\"uring\\":\\"ů\\",\\"urtri\\":\\"◹\\",\\"Uscr\\":\\"𝒰\\",\\"uscr\\":\\"𝓊\\",\\"utdot\\":\\"⋰\\",\\"Utilde\\":\\"Ũ\\",\\"utilde\\":\\"ũ\\",\\"utri\\":\\"▵\\",\\"utrif\\":\\"▴\\",\\"uuarr\\":\\"⇈\\",\\"Uuml\\":\\"Ü\\",\\"uuml\\":\\"ü\\",\\"uwangle\\":\\"⦧\\",\\"vangrt\\":\\"⦜\\",\\"varepsilon\\":\\"ϵ\\",\\"varkappa\\":\\"ϰ\\",\\"varnothing\\":\\"∅\\",\\"varphi\\":\\"ϕ\\",\\"varpi\\":\\"ϖ\\",\\"varpropto\\":\\"∝\\",\\"varr\\":\\"↕\\",\\"vArr\\":\\"⇕\\",\\"varrho\\":\\"ϱ\\",\\"varsigma\\":\\"ς\\",\\"varsubsetneq\\":\\"⊊︀\\",\\"varsubsetneqq\\":\\"⫋︀\\",\\"varsupsetneq\\":\\"⊋︀\\",\\"varsupsetneqq\\":\\"⫌︀\\",\\"vartheta\\":\\"ϑ\\",\\"vartriangleleft\\":\\"⊲\\",\\"vartriangleright\\":\\"⊳\\",\\"vBar\\":\\"⫨\\",\\"Vbar\\":\\"⫫\\",\\"vBarv\\":\\"⫩\\",\\"Vcy\\":\\"В\\",\\"vcy\\":\\"в\\",\\"vdash\\":\\"⊢\\",\\"vDash\\":\\"⊨\\",\\"Vdash\\":\\"⊩\\",\\"VDash\\":\\"⊫\\",\\"Vdashl\\":\\"⫦\\",\\"veebar\\":\\"⊻\\",\\"vee\\":\\"∨\\",\\"Vee\\":\\"⋁\\",\\"veeeq\\":\\"≚\\",\\"vellip\\":\\"⋮\\",\\"verbar\\":\\"|\\",\\"Verbar\\":\\"‖\\",\\"vert\\":\\"|\\",\\"Vert\\":\\"‖\\",\\"VerticalBar\\":\\"∣\\",\\"VerticalLine\\":\\"|\\",\\"VerticalSeparator\\":\\"❘\\",\\"VerticalTilde\\":\\"≀\\",\\"VeryThinSpace\\":\\" \\",\\"Vfr\\":\\"𝔙\\",\\"vfr\\":\\"𝔳\\",\\"vltri\\":\\"⊲\\",\\"vnsub\\":\\"⊂⃒\\",\\"vnsup\\":\\"⊃⃒\\",\\"Vopf\\":\\"𝕍\\",\\"vopf\\":\\"𝕧\\",\\"vprop\\":\\"∝\\",\\"vrtri\\":\\"⊳\\",\\"Vscr\\":\\"𝒱\\",\\"vscr\\":\\"𝓋\\",\\"vsubnE\\":\\"⫋︀\\",\\"vsubne\\":\\"⊊︀\\",\\"vsupnE\\":\\"⫌︀\\",\\"vsupne\\":\\"⊋︀\\",\\"Vvdash\\":\\"⊪\\",\\"vzigzag\\":\\"⦚\\",\\"Wcirc\\":\\"Ŵ\\",\\"wcirc\\":\\"ŵ\\",\\"wedbar\\":\\"⩟\\",\\"wedge\\":\\"∧\\",\\"Wedge\\":\\"⋀\\",\\"wedgeq\\":\\"≙\\",\\"weierp\\":\\"℘\\",\\"Wfr\\":\\"𝔚\\",\\"wfr\\":\\"𝔴\\",\\"Wopf\\":\\"𝕎\\",\\"wopf\\":\\"𝕨\\",\\"wp\\":\\"℘\\",\\"wr\\":\\"≀\\",\\"wreath\\":\\"≀\\",\\"Wscr\\":\\"𝒲\\",\\"wscr\\":\\"𝓌\\",\\"xcap\\":\\"⋂\\",\\"xcirc\\":\\"◯\\",\\"xcup\\":\\"⋃\\",\\"xdtri\\":\\"▽\\",\\"Xfr\\":\\"𝔛\\",\\"xfr\\":\\"𝔵\\",\\"xharr\\":\\"⟷\\",\\"xhArr\\":\\"⟺\\",\\"Xi\\":\\"Ξ\\",\\"xi\\":\\"ξ\\",\\"xlarr\\":\\"⟵\\",\\"xlArr\\":\\"⟸\\",\\"xmap\\":\\"⟼\\",\\"xnis\\":\\"⋻\\",\\"xodot\\":\\"⨀\\",\\"Xopf\\":\\"𝕏\\",\\"xopf\\":\\"𝕩\\",\\"xoplus\\":\\"⨁\\",\\"xotime\\":\\"⨂\\",\\"xrarr\\":\\"⟶\\",\\"xrArr\\":\\"⟹\\",\\"Xscr\\":\\"𝒳\\",\\"xscr\\":\\"𝓍\\",\\"xsqcup\\":\\"⨆\\",\\"xuplus\\":\\"⨄\\",\\"xutri\\":\\"△\\",\\"xvee\\":\\"⋁\\",\\"xwedge\\":\\"⋀\\",\\"Yacute\\":\\"Ý\\",\\"yacute\\":\\"ý\\",\\"YAcy\\":\\"Я\\",\\"yacy\\":\\"я\\",\\"Ycirc\\":\\"Ŷ\\",\\"ycirc\\":\\"ŷ\\",\\"Ycy\\":\\"Ы\\",\\"ycy\\":\\"ы\\",\\"yen\\":\\"¥\\",\\"Yfr\\":\\"𝔜\\",\\"yfr\\":\\"𝔶\\",\\"YIcy\\":\\"Ї\\",\\"yicy\\":\\"ї\\",\\"Yopf\\":\\"𝕐\\",\\"yopf\\":\\"𝕪\\",\\"Yscr\\":\\"𝒴\\",\\"yscr\\":\\"𝓎\\",\\"YUcy\\":\\"Ю\\",\\"yucy\\":\\"ю\\",\\"yuml\\":\\"ÿ\\",\\"Yuml\\":\\"Ÿ\\",\\"Zacute\\":\\"Ź\\",\\"zacute\\":\\"ź\\",\\"Zcaron\\":\\"Ž\\",\\"zcaron\\":\\"ž\\",\\"Zcy\\":\\"З\\",\\"zcy\\":\\"з\\",\\"Zdot\\":\\"Ż\\",\\"zdot\\":\\"ż\\",\\"zeetrf\\":\\"ℨ\\",\\"ZeroWidthSpace\\":\\"​\\",\\"Zeta\\":\\"Ζ\\",\\"zeta\\":\\"ζ\\",\\"zfr\\":\\"𝔷\\",\\"Zfr\\":\\"ℨ\\",\\"ZHcy\\":\\"Ж\\",\\"zhcy\\":\\"ж\\",\\"zigrarr\\":\\"⇝\\",\\"zopf\\":\\"𝕫\\",\\"Zopf\\":\\"ℤ\\",\\"Zscr\\":\\"𝒵\\",\\"zscr\\":\\"𝓏\\",\\"zwj\\":\\"‍\\",\\"zwnj\\":\\"‌\\"}");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/entities.json?')},"./node_modules/entities/lib/maps/legacy.json":function(module){eval('module.exports = JSON.parse("{\\"Aacute\\":\\"Á\\",\\"aacute\\":\\"á\\",\\"Acirc\\":\\"Â\\",\\"acirc\\":\\"â\\",\\"acute\\":\\"´\\",\\"AElig\\":\\"Æ\\",\\"aelig\\":\\"æ\\",\\"Agrave\\":\\"À\\",\\"agrave\\":\\"à\\",\\"amp\\":\\"&\\",\\"AMP\\":\\"&\\",\\"Aring\\":\\"Å\\",\\"aring\\":\\"å\\",\\"Atilde\\":\\"Ã\\",\\"atilde\\":\\"ã\\",\\"Auml\\":\\"Ä\\",\\"auml\\":\\"ä\\",\\"brvbar\\":\\"¦\\",\\"Ccedil\\":\\"Ç\\",\\"ccedil\\":\\"ç\\",\\"cedil\\":\\"¸\\",\\"cent\\":\\"¢\\",\\"copy\\":\\"©\\",\\"COPY\\":\\"©\\",\\"curren\\":\\"¤\\",\\"deg\\":\\"°\\",\\"divide\\":\\"÷\\",\\"Eacute\\":\\"É\\",\\"eacute\\":\\"é\\",\\"Ecirc\\":\\"Ê\\",\\"ecirc\\":\\"ê\\",\\"Egrave\\":\\"È\\",\\"egrave\\":\\"è\\",\\"ETH\\":\\"Ð\\",\\"eth\\":\\"ð\\",\\"Euml\\":\\"Ë\\",\\"euml\\":\\"ë\\",\\"frac12\\":\\"½\\",\\"frac14\\":\\"¼\\",\\"frac34\\":\\"¾\\",\\"gt\\":\\">\\",\\"GT\\":\\">\\",\\"Iacute\\":\\"Í\\",\\"iacute\\":\\"í\\",\\"Icirc\\":\\"Î\\",\\"icirc\\":\\"î\\",\\"iexcl\\":\\"¡\\",\\"Igrave\\":\\"Ì\\",\\"igrave\\":\\"ì\\",\\"iquest\\":\\"¿\\",\\"Iuml\\":\\"Ï\\",\\"iuml\\":\\"ï\\",\\"laquo\\":\\"«\\",\\"lt\\":\\"<\\",\\"LT\\":\\"<\\",\\"macr\\":\\"¯\\",\\"micro\\":\\"µ\\",\\"middot\\":\\"·\\",\\"nbsp\\":\\" \\",\\"not\\":\\"¬\\",\\"Ntilde\\":\\"Ñ\\",\\"ntilde\\":\\"ñ\\",\\"Oacute\\":\\"Ó\\",\\"oacute\\":\\"ó\\",\\"Ocirc\\":\\"Ô\\",\\"ocirc\\":\\"ô\\",\\"Ograve\\":\\"Ò\\",\\"ograve\\":\\"ò\\",\\"ordf\\":\\"ª\\",\\"ordm\\":\\"º\\",\\"Oslash\\":\\"Ø\\",\\"oslash\\":\\"ø\\",\\"Otilde\\":\\"Õ\\",\\"otilde\\":\\"õ\\",\\"Ouml\\":\\"Ö\\",\\"ouml\\":\\"ö\\",\\"para\\":\\"¶\\",\\"plusmn\\":\\"±\\",\\"pound\\":\\"£\\",\\"quot\\":\\"\\\\\\"\\",\\"QUOT\\":\\"\\\\\\"\\",\\"raquo\\":\\"»\\",\\"reg\\":\\"®\\",\\"REG\\":\\"®\\",\\"sect\\":\\"§\\",\\"shy\\":\\"­\\",\\"sup1\\":\\"¹\\",\\"sup2\\":\\"²\\",\\"sup3\\":\\"³\\",\\"szlig\\":\\"ß\\",\\"THORN\\":\\"Þ\\",\\"thorn\\":\\"þ\\",\\"times\\":\\"×\\",\\"Uacute\\":\\"Ú\\",\\"uacute\\":\\"ú\\",\\"Ucirc\\":\\"Û\\",\\"ucirc\\":\\"û\\",\\"Ugrave\\":\\"Ù\\",\\"ugrave\\":\\"ù\\",\\"uml\\":\\"¨\\",\\"Uuml\\":\\"Ü\\",\\"uuml\\":\\"ü\\",\\"Yacute\\":\\"Ý\\",\\"yacute\\":\\"ý\\",\\"yen\\":\\"¥\\",\\"yuml\\":\\"ÿ\\"}");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/legacy.json?')},"./node_modules/entities/lib/maps/xml.json":function(module){eval('module.exports = JSON.parse("{\\"amp\\":\\"&\\",\\"apos\\":\\"\'\\",\\"gt\\":\\">\\",\\"lt\\":\\"<\\",\\"quot\\":\\"\\\\\\"\\"}");\n\n//# sourceURL=webpack:///./node_modules/entities/lib/maps/xml.json?')},"./node_modules/htmlparser2/lib/Parser.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.Parser = void 0;\nvar Tokenizer_1 = __importDefault(__webpack_require__("./node_modules/htmlparser2/lib/Tokenizer.js"));\nvar formTags = new Set([\n    "input",\n    "option",\n    "optgroup",\n    "select",\n    "button",\n    "datalist",\n    "textarea",\n]);\nvar pTag = new Set(["p"]);\nvar openImpliesClose = {\n    tr: new Set(["tr", "th", "td"]),\n    th: new Set(["th"]),\n    td: new Set(["thead", "th", "td"]),\n    body: new Set(["head", "link", "script"]),\n    li: new Set(["li"]),\n    p: pTag,\n    h1: pTag,\n    h2: pTag,\n    h3: pTag,\n    h4: pTag,\n    h5: pTag,\n    h6: pTag,\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: new Set(["option"]),\n    optgroup: new Set(["optgroup", "option"]),\n    dd: new Set(["dt", "dd"]),\n    dt: new Set(["dt", "dd"]),\n    address: pTag,\n    article: pTag,\n    aside: pTag,\n    blockquote: pTag,\n    details: pTag,\n    div: pTag,\n    dl: pTag,\n    fieldset: pTag,\n    figcaption: pTag,\n    figure: pTag,\n    footer: pTag,\n    form: pTag,\n    header: pTag,\n    hr: pTag,\n    main: pTag,\n    nav: pTag,\n    ol: pTag,\n    pre: pTag,\n    section: pTag,\n    table: pTag,\n    ul: pTag,\n    rt: new Set(["rt", "rp"]),\n    rp: new Set(["rt", "rp"]),\n    tbody: new Set(["thead", "tbody"]),\n    tfoot: new Set(["thead", "tbody"]),\n};\nvar voidElements = new Set([\n    "area",\n    "base",\n    "basefont",\n    "br",\n    "col",\n    "command",\n    "embed",\n    "frame",\n    "hr",\n    "img",\n    "input",\n    "isindex",\n    "keygen",\n    "link",\n    "meta",\n    "param",\n    "source",\n    "track",\n    "wbr",\n]);\nvar foreignContextElements = new Set(["math", "svg"]);\nvar htmlIntegrationElements = new Set([\n    "mi",\n    "mo",\n    "mn",\n    "ms",\n    "mtext",\n    "annotation-xml",\n    "foreignObject",\n    "desc",\n    "title",\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ (function () {\n    function Parser(cbs, options) {\n        if (options === void 0) { options = {}; }\n        var _a, _b, _c, _d, _e;\n        /** The start index of the last event. */\n        this.startIndex = 0;\n        /** The end index of the last event. */\n        this.endIndex = null;\n        this.tagname = "";\n        this.attribname = "";\n        this.attribvalue = "";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.options = options;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    Parser.prototype.updatePosition = function (initialOffset) {\n        if (this.endIndex === null) {\n            if (this.tokenizer.sectionStart <= initialOffset) {\n                this.startIndex = 0;\n            }\n            else {\n                this.startIndex = this.tokenizer.sectionStart - initialOffset;\n            }\n        }\n        else {\n            this.startIndex = this.endIndex + 1;\n        }\n        this.endIndex = this.tokenizer.getAbsoluteIndex();\n    };\n    // Tokenizer event handlers\n    Parser.prototype.ontext = function (data) {\n        var _a, _b;\n        this.updatePosition(1);\n        this.endIndex--;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n    };\n    Parser.prototype.onopentagname = function (name) {\n        var _a, _b;\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.tagname = name;\n        if (!this.options.xmlMode &&\n            Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {\n            var el = void 0;\n            while (this.stack.length > 0 &&\n                openImpliesClose[name].has((el = this.stack[this.stack.length - 1]))) {\n                this.onclosetag(el);\n            }\n        }\n        if (this.options.xmlMode || !voidElements.has(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            }\n            else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);\n        if (this.cbs.onopentag)\n            this.attribs = {};\n    };\n    Parser.prototype.onopentagend = function () {\n        var _a, _b;\n        this.updatePosition(1);\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);\n            this.attribs = null;\n        }\n        if (!this.options.xmlMode &&\n            this.cbs.onclosetag &&\n            voidElements.has(this.tagname)) {\n            this.cbs.onclosetag(this.tagname);\n        }\n        this.tagname = "";\n    };\n    Parser.prototype.onclosetag = function (name) {\n        this.updatePosition(1);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) ||\n            htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (this.stack.length &&\n            (this.options.xmlMode || !voidElements.has(name))) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    pos = this.stack.length - pos;\n                    while (pos--) {\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop());\n                    }\n                }\n                else\n                    this.stack.length = pos;\n            }\n            else if (name === "p" && !this.options.xmlMode) {\n                this.onopentagname(name);\n                this.closeCurrentTag();\n            }\n        }\n        else if (!this.options.xmlMode && (name === "br" || name === "p")) {\n            this.onopentagname(name);\n            this.closeCurrentTag();\n        }\n    };\n    Parser.prototype.onselfclosingtag = function () {\n        if (this.options.xmlMode ||\n            this.options.recognizeSelfClosing ||\n            this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag();\n        }\n        else {\n            this.onopentagend();\n        }\n    };\n    Parser.prototype.closeCurrentTag = function () {\n        var _a, _b;\n        var name = this.tagname;\n        this.onopentagend();\n        /*\n         * Self-closing tags will be on the top of the stack\n         * (cheaper check than in onclosetag)\n         */\n        if (this.stack[this.stack.length - 1] === name) {\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);\n            this.stack.pop();\n        }\n    };\n    Parser.prototype.onattribname = function (name) {\n        if (this.lowerCaseAttributeNames) {\n            name = name.toLowerCase();\n        }\n        this.attribname = name;\n    };\n    Parser.prototype.onattribdata = function (value) {\n        this.attribvalue += value;\n    };\n    Parser.prototype.onattribend = function (quote) {\n        var _a, _b;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);\n        if (this.attribs &&\n            !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribname = "";\n        this.attribvalue = "";\n    };\n    Parser.prototype.getInstructionName = function (value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    Parser.prototype.ondeclaration = function (value) {\n        if (this.cbs.onprocessinginstruction) {\n            var name_1 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction("!" + name_1, "!" + value);\n        }\n    };\n    Parser.prototype.onprocessinginstruction = function (value) {\n        if (this.cbs.onprocessinginstruction) {\n            var name_2 = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction("?" + name_2, "?" + value);\n        }\n    };\n    Parser.prototype.oncomment = function (value) {\n        var _a, _b, _c, _d;\n        this.updatePosition(4);\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n    };\n    Parser.prototype.oncdata = function (value) {\n        var _a, _b, _c, _d, _e, _f;\n        this.updatePosition(1);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        }\n        else {\n            this.oncomment("[CDATA[" + value + "]]");\n        }\n    };\n    Parser.prototype.onerror = function (err) {\n        var _a, _b;\n        (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    Parser.prototype.onend = function () {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))\n                ;\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */\n    Parser.prototype.reset = function () {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = "";\n        this.attribname = "";\n        this.attribs = null;\n        this.stack = [];\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n    };\n    /**\n     * Parses a complete document and pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */\n    Parser.prototype.parseComplete = function (data) {\n        this.reset();\n        this.end(data);\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */\n    Parser.prototype.write = function (chunk) {\n        this.tokenizer.write(chunk);\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */\n    Parser.prototype.end = function (chunk) {\n        this.tokenizer.end(chunk);\n    };\n    /**\n     * Pauses parsing. The parser won\'t emit events until `resume` is called.\n     */\n    Parser.prototype.pause = function () {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */\n    Parser.prototype.resume = function () {\n        this.tokenizer.resume();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.parseChunk = function (chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */\n    Parser.prototype.done = function (chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/Parser.js?')},"./node_modules/htmlparser2/lib/Tokenizer.js":function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar decode_codepoint_1 = __importDefault(__webpack_require__("./node_modules/entities/lib/decode_codepoint.js"));\nvar entities_json_1 = __importDefault(__webpack_require__("./node_modules/entities/lib/maps/entities.json"));\nvar legacy_json_1 = __importDefault(__webpack_require__("./node_modules/entities/lib/maps/legacy.json"));\nvar xml_json_1 = __importDefault(__webpack_require__("./node_modules/entities/lib/maps/xml.json"));\nfunction whitespace(c) {\n    return c === " " || c === "\\n" || c === "\\t" || c === "\\f" || c === "\\r";\n}\nfunction isASCIIAlpha(c) {\n    return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");\n}\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n    if (upper === lower) {\n        return function (t, c) {\n            if (c === lower) {\n                t._state = SUCCESS;\n            }\n            else {\n                t._state = FAILURE;\n                t._index--;\n            }\n        };\n    }\n    return function (t, c) {\n        if (c === lower || c === upper) {\n            t._state = SUCCESS;\n        }\n        else {\n            t._state = FAILURE;\n            t._index--;\n        }\n    };\n}\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n    return function (t, c) {\n        if (c === lower || c === upper) {\n            t._state = NEXT_STATE;\n        }\n        else {\n            t._state = 3 /* InTagName */;\n            t._index--; // Consume the token again\n        }\n    };\n}\nvar stateBeforeCdata1 = ifElseState("C", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);\nvar stateBeforeCdata2 = ifElseState("D", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);\nvar stateBeforeCdata3 = ifElseState("A", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);\nvar stateBeforeCdata4 = ifElseState("T", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);\nvar stateBeforeCdata5 = ifElseState("A", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);\nvar stateBeforeScript1 = consumeSpecialNameChar("R", 35 /* BeforeScript2 */);\nvar stateBeforeScript2 = consumeSpecialNameChar("I", 36 /* BeforeScript3 */);\nvar stateBeforeScript3 = consumeSpecialNameChar("P", 37 /* BeforeScript4 */);\nvar stateBeforeScript4 = consumeSpecialNameChar("T", 38 /* BeforeScript5 */);\nvar stateAfterScript1 = ifElseState("R", 40 /* AfterScript2 */, 1 /* Text */);\nvar stateAfterScript2 = ifElseState("I", 41 /* AfterScript3 */, 1 /* Text */);\nvar stateAfterScript3 = ifElseState("P", 42 /* AfterScript4 */, 1 /* Text */);\nvar stateAfterScript4 = ifElseState("T", 43 /* AfterScript5 */, 1 /* Text */);\nvar stateBeforeStyle1 = consumeSpecialNameChar("Y", 45 /* BeforeStyle2 */);\nvar stateBeforeStyle2 = consumeSpecialNameChar("L", 46 /* BeforeStyle3 */);\nvar stateBeforeStyle3 = consumeSpecialNameChar("E", 47 /* BeforeStyle4 */);\nvar stateAfterStyle1 = ifElseState("Y", 49 /* AfterStyle2 */, 1 /* Text */);\nvar stateAfterStyle2 = ifElseState("L", 50 /* AfterStyle3 */, 1 /* Text */);\nvar stateAfterStyle3 = ifElseState("E", 51 /* AfterStyle4 */, 1 /* Text */);\nvar stateBeforeSpecialT = consumeSpecialNameChar("I", 54 /* BeforeTitle1 */);\nvar stateBeforeTitle1 = consumeSpecialNameChar("T", 55 /* BeforeTitle2 */);\nvar stateBeforeTitle2 = consumeSpecialNameChar("L", 56 /* BeforeTitle3 */);\nvar stateBeforeTitle3 = consumeSpecialNameChar("E", 57 /* BeforeTitle4 */);\nvar stateAfterSpecialTEnd = ifElseState("I", 58 /* AfterTitle1 */, 1 /* Text */);\nvar stateAfterTitle1 = ifElseState("T", 59 /* AfterTitle2 */, 1 /* Text */);\nvar stateAfterTitle2 = ifElseState("L", 60 /* AfterTitle3 */, 1 /* Text */);\nvar stateAfterTitle3 = ifElseState("E", 61 /* AfterTitle4 */, 1 /* Text */);\nvar stateBeforeEntity = ifElseState("#", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);\nvar stateBeforeNumericEntity = ifElseState("X", 66 /* InHexEntity */, 65 /* InNumericEntity */);\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(options, cbs) {\n        var _a;\n        /** The current state the tokenizer is in. */\n        this._state = 1 /* Text */;\n        /** The read buffer. */\n        this.buffer = "";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */\n        this.bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = 1 /* Text */;\n        /** For special parsing behavior inside of script and style tags. */\n        this.special = 1 /* None */;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n        this.ended = false;\n        this.cbs = cbs;\n        this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);\n        this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;\n    }\n    Tokenizer.prototype.reset = function () {\n        this._state = 1 /* Text */;\n        this.buffer = "";\n        this.sectionStart = 0;\n        this._index = 0;\n        this.bufferOffset = 0;\n        this.baseState = 1 /* Text */;\n        this.special = 1 /* None */;\n        this.running = true;\n        this.ended = false;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        if (this.ended)\n            this.cbs.onerror(Error(".write() after done!"));\n        this.buffer += chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function (chunk) {\n        if (this.ended)\n            this.cbs.onerror(Error(".end() after done!"));\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this._index < this.buffer.length) {\n            this.parse();\n        }\n        if (this.ended) {\n            this.finish();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getAbsoluteIndex = function () {\n        return this.bufferOffset + this._index;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === "<") {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this._state = 2 /* BeforeTagName */;\n            this.sectionStart = this._index;\n        }\n        else if (this.decodeEntities &&\n            c === "&" &&\n            (this.special === 1 /* None */ || this.special === 4 /* Title */)) {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this.baseState = 1 /* Text */;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === "/") {\n            this._state = 5 /* BeforeClosingTagName */;\n        }\n        else if (c === "<") {\n            this.cbs.ontext(this.getSection());\n            this.sectionStart = this._index;\n        }\n        else if (c === ">" ||\n            this.special !== 1 /* None */ ||\n            whitespace(c)) {\n            this._state = 1 /* Text */;\n        }\n        else if (c === "!") {\n            this._state = 15 /* BeforeDeclaration */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === "?") {\n            this._state = 17 /* InProcessingInstruction */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!isASCIIAlpha(c)) {\n            this._state = 1 /* Text */;\n        }\n        else {\n            this._state =\n                !this.xmlMode && (c === "s" || c === "S")\n                    ? 32 /* BeforeSpecialS */\n                    : !this.xmlMode && (c === "t" || c === "T")\n                        ? 52 /* BeforeSpecialT */\n                        : 3 /* InTagName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (c === "/" || c === ">" || whitespace(c)) {\n            this.emitToken("onopentagname");\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (whitespace(c)) {\n            // Ignore\n        }\n        else if (c === ">") {\n            this._state = 1 /* Text */;\n        }\n        else if (this.special !== 1 /* None */) {\n            if (c === "s" || c === "S") {\n                this._state = 33 /* BeforeSpecialSEnd */;\n            }\n            else if (c === "t" || c === "T") {\n                this._state = 53 /* BeforeSpecialTEnd */;\n            }\n            else {\n                this._state = 1 /* Text */;\n                this._index--;\n            }\n        }\n        else if (!isASCIIAlpha(c)) {\n            this._state = 20 /* InSpecialComment */;\n            this.sectionStart = this._index;\n        }\n        else {\n            this._state = 6 /* InClosingTagName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === ">" || whitespace(c)) {\n            this.emitToken("onclosetag");\n            this._state = 7 /* AfterClosingTagName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until ">"\n        if (c === ">") {\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === ">") {\n            this.cbs.onopentagend();\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === "/") {\n            this._state = 4 /* InSelfClosingTag */;\n        }\n        else if (!whitespace(c)) {\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === ">") {\n            this.cbs.onselfclosingtag();\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n            this.special = 1 /* None */; // Reset special state, in case of self-closing special tags\n        }\n        else if (!whitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === "=" || c === "/" || c === ">" || whitespace(c)) {\n            this.cbs.onattribname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === "=") {\n            this._state = 11 /* BeforeAttributeValue */;\n        }\n        else if (c === "/" || c === ">") {\n            this.cbs.onattribend(undefined);\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n        else if (!whitespace(c)) {\n            this.cbs.onattribend(undefined);\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === \'"\') {\n            this._state = 12 /* InAttributeValueDq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === "\'") {\n            this._state = 13 /* InAttributeValueSq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!whitespace(c)) {\n            this._state = 14 /* InAttributeValueNq */;\n            this.sectionStart = this._index;\n            this._index--; // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote) {\n            this.emitToken("onattribdata");\n            this.cbs.onattribend(quote);\n            this._state = 8 /* BeforeAttributeName */;\n        }\n        else if (this.decodeEntities && c === "&") {\n            this.emitToken("onattribdata");\n            this.baseState = this._state;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, \'"\');\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, "\'");\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (whitespace(c) || c === ">") {\n            this.emitToken("onattribdata");\n            this.cbs.onattribend(null);\n            this._state = 8 /* BeforeAttributeName */;\n            this._index--;\n        }\n        else if (this.decodeEntities && c === "&") {\n            this.emitToken("onattribdata");\n            this.baseState = this._state;\n            this._state = 62 /* BeforeEntity */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        this._state =\n            c === "["\n                ? 23 /* BeforeCdata1 */\n                : c === "-"\n                    ? 18 /* BeforeComment */\n                    : 16 /* InDeclaration */;\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === ">") {\n            this.cbs.ondeclaration(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === ">") {\n            this.cbs.onprocessinginstruction(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === "-") {\n            this._state = 19 /* InComment */;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInComment = function (c) {\n        if (c === "-")\n            this._state = 21 /* AfterComment1 */;\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === ">") {\n            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateAfterComment1 = function (c) {\n        if (c === "-") {\n            this._state = 22 /* AfterComment2 */;\n        }\n        else {\n            this._state = 19 /* InComment */;\n        }\n    };\n    Tokenizer.prototype.stateAfterComment2 = function (c) {\n        if (c === ">") {\n            // Remove 2 trailing chars\n            this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c !== "-") {\n            this._state = 19 /* InComment */;\n        }\n        // Else: stay in AFTER_COMMENT_2 (`---\x3e`)\n    };\n    Tokenizer.prototype.stateBeforeCdata6 = function (c) {\n        if (c === "[") {\n            this._state = 29 /* InCdata */;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInCdata = function (c) {\n        if (c === "]")\n            this._state = 30 /* AfterCdata1 */;\n    };\n    Tokenizer.prototype.stateAfterCdata1 = function (c) {\n        if (c === "]")\n            this._state = 31 /* AfterCdata2 */;\n        else\n            this._state = 29 /* InCdata */;\n    };\n    Tokenizer.prototype.stateAfterCdata2 = function (c) {\n        if (c === ">") {\n            // Remove 2 trailing chars\n            this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c !== "]") {\n            this._state = 29 /* InCdata */;\n        }\n        // Else: stay in AFTER_CDATA_2 (`]]]>`)\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        if (c === "c" || c === "C") {\n            this._state = 34 /* BeforeScript1 */;\n        }\n        else if (c === "t" || c === "T") {\n            this._state = 44 /* BeforeStyle1 */;\n        }\n        else {\n            this._state = 3 /* InTagName */;\n            this._index--; // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {\n        if (this.special === 2 /* Script */ && (c === "c" || c === "C")) {\n            this._state = 39 /* AfterScript1 */;\n        }\n        else if (this.special === 3 /* Style */ && (c === "t" || c === "T")) {\n            this._state = 48 /* AfterStyle1 */;\n        }\n        else\n            this._state = 1 /* Text */;\n    };\n    Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {\n        if (c === "/" || c === ">" || whitespace(c)) {\n            this.special = special;\n        }\n        this._state = 3 /* InTagName */;\n        this._index--; // Consume the token again\n    };\n    Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {\n        if (c === ">" || whitespace(c)) {\n            this.special = 1 /* None */;\n            this._state = 6 /* InClosingTagName */;\n            this.sectionStart = this._index - sectionStartOffset;\n            this._index--; // Reconsume the token\n        }\n        else\n            this._state = 1 /* Text */;\n    };\n    // For entities terminated with a semicolon\n    Tokenizer.prototype.parseFixedEntity = function (map) {\n        if (map === void 0) { map = this.xmlMode ? xml_json_1.default : entities_json_1.default; }\n        // Offset = 1\n        if (this.sectionStart + 1 < this._index) {\n            var entity = this.buffer.substring(this.sectionStart + 1, this._index);\n            if (Object.prototype.hasOwnProperty.call(map, entity)) {\n                this.emitPartial(map[entity]);\n                this.sectionStart = this._index + 1;\n            }\n        }\n    };\n    // Parses legacy entities (without trailing semicolon)\n    Tokenizer.prototype.parseLegacyEntity = function () {\n        var start = this.sectionStart + 1;\n        // The max length of legacy entities is 6\n        var limit = Math.min(this._index - start, 6);\n        while (limit >= 2) {\n            // The min length of legacy entities is 2\n            var entity = this.buffer.substr(start, limit);\n            if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {\n                this.emitPartial(legacy_json_1.default[entity]);\n                this.sectionStart += limit + 1;\n                return;\n            }\n            limit--;\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        if (c === ";") {\n            this.parseFixedEntity();\n            // Retry as legacy entity if entity wasn\'t parsed\n            if (this.baseState === 1 /* Text */ &&\n                this.sectionStart + 1 < this._index &&\n                !this.xmlMode) {\n                this.parseLegacyEntity();\n            }\n            this._state = this.baseState;\n        }\n        else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {\n            if (this.xmlMode || this.sectionStart + 1 === this._index) {\n                // Ignore\n            }\n            else if (this.baseState !== 1 /* Text */) {\n                if (c !== "=") {\n                    // Parse as legacy entity, without allowing additional characters.\n                    this.parseFixedEntity(legacy_json_1.default);\n                }\n            }\n            else {\n                this.parseLegacyEntity();\n            }\n            this._state = this.baseState;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {\n        var sectionStart = this.sectionStart + offset;\n        if (sectionStart !== this._index) {\n            // Parse entity\n            var entity = this.buffer.substring(sectionStart, this._index);\n            var parsed = parseInt(entity, base);\n            this.emitPartial(decode_codepoint_1.default(parsed));\n            this.sectionStart = strict ? this._index + 1 : this._index;\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === ";") {\n            this.decodeNumericEntity(2, 10, true);\n        }\n        else if (c < "0" || c > "9") {\n            if (!this.xmlMode) {\n                this.decodeNumericEntity(2, 10, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === ";") {\n            this.decodeNumericEntity(3, 16, true);\n        }\n        else if ((c < "a" || c > "f") &&\n            (c < "A" || c > "F") &&\n            (c < "0" || c > "9")) {\n            if (!this.xmlMode) {\n                this.decodeNumericEntity(3, 16, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype.cleanup = function () {\n        if (this.sectionStart < 0) {\n            this.buffer = "";\n            this.bufferOffset += this._index;\n            this._index = 0;\n        }\n        else if (this.running) {\n            if (this._state === 1 /* Text */) {\n                if (this.sectionStart !== this._index) {\n                    this.cbs.ontext(this.buffer.substr(this.sectionStart));\n                }\n                this.buffer = "";\n                this.bufferOffset += this._index;\n                this._index = 0;\n            }\n            else if (this.sectionStart === this._index) {\n                // The section just started\n                this.buffer = "";\n                this.bufferOffset += this._index;\n                this._index = 0;\n            }\n            else {\n                // Remove everything unnecessary\n                this.buffer = this.buffer.substr(this.sectionStart);\n                this._index -= this.sectionStart;\n                this.bufferOffset += this.sectionStart;\n            }\n            this.sectionStart = 0;\n        }\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this._index < this.buffer.length && this.running) {\n            var c = this.buffer.charAt(this._index);\n            if (this._state === 1 /* Text */) {\n                this.stateText(c);\n            }\n            else if (this._state === 12 /* InAttributeValueDq */) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this._state === 9 /* InAttributeName */) {\n                this.stateInAttributeName(c);\n            }\n            else if (this._state === 19 /* InComment */) {\n                this.stateInComment(c);\n            }\n            else if (this._state === 20 /* InSpecialComment */) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this._state === 8 /* BeforeAttributeName */) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this._state === 3 /* InTagName */) {\n                this.stateInTagName(c);\n            }\n            else if (this._state === 6 /* InClosingTagName */) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this._state === 2 /* BeforeTagName */) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this._state === 10 /* AfterAttributeName */) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this._state === 13 /* InAttributeValueSq */) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this._state === 11 /* BeforeAttributeValue */) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this._state === 5 /* BeforeClosingTagName */) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this._state === 7 /* AfterClosingTagName */) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this._state === 32 /* BeforeSpecialS */) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this._state === 21 /* AfterComment1 */) {\n                this.stateAfterComment1(c);\n            }\n            else if (this._state === 14 /* InAttributeValueNq */) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this._state === 4 /* InSelfClosingTag */) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this._state === 16 /* InDeclaration */) {\n                this.stateInDeclaration(c);\n            }\n            else if (this._state === 15 /* BeforeDeclaration */) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this._state === 22 /* AfterComment2 */) {\n                this.stateAfterComment2(c);\n            }\n            else if (this._state === 18 /* BeforeComment */) {\n                this.stateBeforeComment(c);\n            }\n            else if (this._state === 33 /* BeforeSpecialSEnd */) {\n                this.stateBeforeSpecialSEnd(c);\n            }\n            else if (this._state === 53 /* BeforeSpecialTEnd */) {\n                stateAfterSpecialTEnd(this, c);\n            }\n            else if (this._state === 39 /* AfterScript1 */) {\n                stateAfterScript1(this, c);\n            }\n            else if (this._state === 40 /* AfterScript2 */) {\n                stateAfterScript2(this, c);\n            }\n            else if (this._state === 41 /* AfterScript3 */) {\n                stateAfterScript3(this, c);\n            }\n            else if (this._state === 34 /* BeforeScript1 */) {\n                stateBeforeScript1(this, c);\n            }\n            else if (this._state === 35 /* BeforeScript2 */) {\n                stateBeforeScript2(this, c);\n            }\n            else if (this._state === 36 /* BeforeScript3 */) {\n                stateBeforeScript3(this, c);\n            }\n            else if (this._state === 37 /* BeforeScript4 */) {\n                stateBeforeScript4(this, c);\n            }\n            else if (this._state === 38 /* BeforeScript5 */) {\n                this.stateBeforeSpecialLast(c, 2 /* Script */);\n            }\n            else if (this._state === 42 /* AfterScript4 */) {\n                stateAfterScript4(this, c);\n            }\n            else if (this._state === 43 /* AfterScript5 */) {\n                this.stateAfterSpecialLast(c, 6);\n            }\n            else if (this._state === 44 /* BeforeStyle1 */) {\n                stateBeforeStyle1(this, c);\n            }\n            else if (this._state === 29 /* InCdata */) {\n                this.stateInCdata(c);\n            }\n            else if (this._state === 45 /* BeforeStyle2 */) {\n                stateBeforeStyle2(this, c);\n            }\n            else if (this._state === 46 /* BeforeStyle3 */) {\n                stateBeforeStyle3(this, c);\n            }\n            else if (this._state === 47 /* BeforeStyle4 */) {\n                this.stateBeforeSpecialLast(c, 3 /* Style */);\n            }\n            else if (this._state === 48 /* AfterStyle1 */) {\n                stateAfterStyle1(this, c);\n            }\n            else if (this._state === 49 /* AfterStyle2 */) {\n                stateAfterStyle2(this, c);\n            }\n            else if (this._state === 50 /* AfterStyle3 */) {\n                stateAfterStyle3(this, c);\n            }\n            else if (this._state === 51 /* AfterStyle4 */) {\n                this.stateAfterSpecialLast(c, 5);\n            }\n            else if (this._state === 52 /* BeforeSpecialT */) {\n                stateBeforeSpecialT(this, c);\n            }\n            else if (this._state === 54 /* BeforeTitle1 */) {\n                stateBeforeTitle1(this, c);\n            }\n            else if (this._state === 55 /* BeforeTitle2 */) {\n                stateBeforeTitle2(this, c);\n            }\n            else if (this._state === 56 /* BeforeTitle3 */) {\n                stateBeforeTitle3(this, c);\n            }\n            else if (this._state === 57 /* BeforeTitle4 */) {\n                this.stateBeforeSpecialLast(c, 4 /* Title */);\n            }\n            else if (this._state === 58 /* AfterTitle1 */) {\n                stateAfterTitle1(this, c);\n            }\n            else if (this._state === 59 /* AfterTitle2 */) {\n                stateAfterTitle2(this, c);\n            }\n            else if (this._state === 60 /* AfterTitle3 */) {\n                stateAfterTitle3(this, c);\n            }\n            else if (this._state === 61 /* AfterTitle4 */) {\n                this.stateAfterSpecialLast(c, 5);\n            }\n            else if (this._state === 17 /* InProcessingInstruction */) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this._state === 64 /* InNamedEntity */) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this._state === 23 /* BeforeCdata1 */) {\n                stateBeforeCdata1(this, c);\n            }\n            else if (this._state === 62 /* BeforeEntity */) {\n                stateBeforeEntity(this, c);\n            }\n            else if (this._state === 24 /* BeforeCdata2 */) {\n                stateBeforeCdata2(this, c);\n            }\n            else if (this._state === 25 /* BeforeCdata3 */) {\n                stateBeforeCdata3(this, c);\n            }\n            else if (this._state === 30 /* AfterCdata1 */) {\n                this.stateAfterCdata1(c);\n            }\n            else if (this._state === 31 /* AfterCdata2 */) {\n                this.stateAfterCdata2(c);\n            }\n            else if (this._state === 26 /* BeforeCdata4 */) {\n                stateBeforeCdata4(this, c);\n            }\n            else if (this._state === 27 /* BeforeCdata5 */) {\n                stateBeforeCdata5(this, c);\n            }\n            else if (this._state === 28 /* BeforeCdata6 */) {\n                this.stateBeforeCdata6(c);\n            }\n            else if (this._state === 66 /* InHexEntity */) {\n                this.stateInHexEntity(c);\n            }\n            else if (this._state === 65 /* InNumericEntity */) {\n                this.stateInNumericEntity(c);\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            }\n            else if (this._state === 63 /* BeforeNumericEntity */) {\n                stateBeforeNumericEntity(this, c);\n            }\n            else {\n                this.cbs.onerror(Error("unknown _state"), this._state);\n            }\n            this._index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this._index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    Tokenizer.prototype.handleTrailingData = function () {\n        var data = this.buffer.substr(this.sectionStart);\n        if (this._state === 29 /* InCdata */ ||\n            this._state === 30 /* AfterCdata1 */ ||\n            this._state === 31 /* AfterCdata2 */) {\n            this.cbs.oncdata(data);\n        }\n        else if (this._state === 19 /* InComment */ ||\n            this._state === 21 /* AfterComment1 */ ||\n            this._state === 22 /* AfterComment2 */) {\n            this.cbs.oncomment(data);\n        }\n        else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {\n            this.parseLegacyEntity();\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {\n            this.decodeNumericEntity(2, 10, false);\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {\n            this.decodeNumericEntity(3, 16, false);\n            if (this.sectionStart < this._index) {\n                this._state = this.baseState;\n                this.handleTrailingData();\n            }\n        }\n        else if (this._state !== 3 /* InTagName */ &&\n            this._state !== 8 /* BeforeAttributeName */ &&\n            this._state !== 11 /* BeforeAttributeValue */ &&\n            this._state !== 10 /* AfterAttributeName */ &&\n            this._state !== 9 /* InAttributeName */ &&\n            this._state !== 13 /* InAttributeValueSq */ &&\n            this._state !== 12 /* InAttributeValueDq */ &&\n            this._state !== 14 /* InAttributeValueNq */ &&\n            this._state !== 6 /* InClosingTagName */) {\n            this.cbs.ontext(data);\n        }\n        /*\n         * Else, ignore remaining data\n         * TODO add a way to remove current tag\n         */\n    };\n    Tokenizer.prototype.getSection = function () {\n        return this.buffer.substring(this.sectionStart, this._index);\n    };\n    Tokenizer.prototype.emitToken = function (name) {\n        this.cbs[name](this.getSection());\n        this.sectionStart = -1;\n    };\n    Tokenizer.prototype.emitPartial = function (value) {\n        if (this.baseState !== 1 /* Text */) {\n            this.cbs.onattribdata(value); // TODO implement the new event\n        }\n        else {\n            this.cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}());\nexports.default = Tokenizer;\n\n\n//# sourceURL=webpack:///./node_modules/htmlparser2/lib/Tokenizer.js?')}}]);