(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{"./node_modules/@babel/runtime/helpers/construct.js":function(module,exports,__webpack_require__){eval('var setPrototypeOf = __webpack_require__("./node_modules/@babel/runtime/helpers/setPrototypeOf.js");\n\nvar isNativeReflectConstruct = __webpack_require__("./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/construct.js?')},"./node_modules/@babel/runtime/helpers/isNativeFunction.js":function(module,exports){eval('function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf("[native code]") !== -1;\n}\n\nmodule.exports = _isNativeFunction;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/isNativeFunction.js?')},"./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":function(module,exports){eval('function _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js?')},"./node_modules/@babel/runtime/helpers/toArray.js":function(module,exports,__webpack_require__){eval('var arrayWithHoles = __webpack_require__("./node_modules/@babel/runtime/helpers/arrayWithHoles.js");\n\nvar iterableToArray = __webpack_require__("./node_modules/@babel/runtime/helpers/iterableToArray.js");\n\nvar unsupportedIterableToArray = __webpack_require__("./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");\n\nvar nonIterableRest = __webpack_require__("./node_modules/@babel/runtime/helpers/nonIterableRest.js");\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nmodule.exports = _toArray;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/toArray.js?')},"./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":function(module,exports,__webpack_require__){eval('var getPrototypeOf = __webpack_require__("./node_modules/@babel/runtime/helpers/getPrototypeOf.js");\n\nvar setPrototypeOf = __webpack_require__("./node_modules/@babel/runtime/helpers/setPrototypeOf.js");\n\nvar isNativeFunction = __webpack_require__("./node_modules/@babel/runtime/helpers/isNativeFunction.js");\n\nvar construct = __webpack_require__("./node_modules/@babel/runtime/helpers/construct.js");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === "function" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== "function") {\n      throw new TypeError("Super expression must either be null or a function");\n    }\n\n    if (typeof _cache !== "undefined") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/wrapNativeSuper.js?')},"./node_modules/base64-js/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?")},"./node_modules/buffer/index.js":function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(\"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(\"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?")},"./node_modules/ieee754/index.js":function(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?")},"./node_modules/isarray/index.js":function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?")},"./node_modules/yaml/browser/dist/addComment.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addCommentBefore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addComment; });\nfunction addCommentBefore(str, indent, comment) {\n  if (!comment) return str;\n  var cc = comment.replace(/[\\s\\S]^/gm, "$&".concat(indent, "#"));\n  return "#".concat(cc, "\\n").concat(indent).concat(str);\n}\nfunction addComment(str, indent, comment) {\n  return !comment ? str : comment.indexOf(\'\\n\') === -1 ? "".concat(str, " #").concat(comment) : "".concat(str, "\\n") + comment.replace(/^/gm, "".concat(indent || \'\', "#"));\n}\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/addComment.js?')},"./node_modules/yaml/browser/dist/constants.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Char; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Type; });\nvar Char = {\n  ANCHOR: '&',\n  COMMENT: '#',\n  TAG: '!',\n  DIRECTIVES_END: '-',\n  DOCUMENT_END: '.'\n};\nvar Type = {\n  ALIAS: 'ALIAS',\n  BLANK_LINE: 'BLANK_LINE',\n  BLOCK_FOLDED: 'BLOCK_FOLDED',\n  BLOCK_LITERAL: 'BLOCK_LITERAL',\n  COMMENT: 'COMMENT',\n  DIRECTIVE: 'DIRECTIVE',\n  DOCUMENT: 'DOCUMENT',\n  FLOW_MAP: 'FLOW_MAP',\n  FLOW_SEQ: 'FLOW_SEQ',\n  MAP: 'MAP',\n  MAP_KEY: 'MAP_KEY',\n  MAP_VALUE: 'MAP_VALUE',\n  PLAIN: 'PLAIN',\n  QUOTE_DOUBLE: 'QUOTE_DOUBLE',\n  QUOTE_SINGLE: 'QUOTE_SINGLE',\n  SEQ: 'SEQ',\n  SEQ_ITEM: 'SEQ_ITEM'\n};\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/constants.js?")},"./node_modules/yaml/browser/dist/cst/Node.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Node; });\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@babel/runtime/helpers/slicedToArray.js");\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@babel/runtime/helpers/classCallCheck.js");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/yaml/browser/dist/constants.js");\n/* harmony import */ var _source_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/yaml/browser/dist/cst/source-utils.js");\n/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/yaml/browser/dist/cst/Range.js");\n\n\n\n\n\n\n/** Root class of all nodes */\n\nvar Node = /*#__PURE__*/function () {\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Node, null, [{\n    key: "addStringTerminator",\n    value: function addStringTerminator(src, offset, str) {\n      if (str[str.length - 1] === \'\\n\') return str;\n      var next = Node.endOfWhiteSpace(src, offset);\n      return next >= src.length || src[next] === \'\\n\' ? str + \'\\n\' : str;\n    } // ^(---|...)\n\n  }, {\n    key: "atDocumentBoundary",\n    value: function atDocumentBoundary(src, offset, sep) {\n      var ch0 = src[offset];\n      if (!ch0) return true;\n      var prev = src[offset - 1];\n      if (prev && prev !== \'\\n\') return false;\n\n      if (sep) {\n        if (ch0 !== sep) return false;\n      } else {\n        if (ch0 !== _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].DIRECTIVES_END && ch0 !== _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].DOCUMENT_END) return false;\n      }\n\n      var ch1 = src[offset + 1];\n      var ch2 = src[offset + 2];\n      if (ch1 !== ch0 || ch2 !== ch0) return false;\n      var ch3 = src[offset + 3];\n      return !ch3 || ch3 === \'\\n\' || ch3 === \'\\t\' || ch3 === \' \';\n    }\n  }, {\n    key: "endOfIdentifier",\n    value: function endOfIdentifier(src, offset) {\n      var ch = src[offset];\n      var isVerbatim = ch === \'<\';\n      var notOk = isVerbatim ? [\'\\n\', \'\\t\', \' \', \'>\'] : [\'\\n\', \'\\t\', \' \', \'[\', \']\', \'{\', \'}\', \',\'];\n\n      while (ch && notOk.indexOf(ch) === -1) {\n        ch = src[offset += 1];\n      }\n\n      if (isVerbatim && ch === \'>\') offset += 1;\n      return offset;\n    }\n  }, {\n    key: "endOfIndent",\n    value: function endOfIndent(src, offset) {\n      var ch = src[offset];\n\n      while (ch === \' \') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: "endOfLine",\n    value: function endOfLine(src, offset) {\n      var ch = src[offset];\n\n      while (ch && ch !== \'\\n\') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: "endOfWhiteSpace",\n    value: function endOfWhiteSpace(src, offset) {\n      var ch = src[offset];\n\n      while (ch === \'\\t\' || ch === \' \') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: "startOfLine",\n    value: function startOfLine(src, offset) {\n      var ch = src[offset - 1];\n      if (ch === \'\\n\') return offset;\n\n      while (ch && ch !== \'\\n\') {\n        ch = src[offset -= 1];\n      }\n\n      return offset + 1;\n    }\n    /**\n     * End of indentation, or null if the line\'s indent level is not more\n     * than `indent`\n     *\n     * @param {string} src\n     * @param {number} indent\n     * @param {number} lineStart\n     * @returns {?number}\n     */\n\n  }, {\n    key: "endOfBlockIndent",\n    value: function endOfBlockIndent(src, indent, lineStart) {\n      var inEnd = Node.endOfIndent(src, lineStart);\n\n      if (inEnd > lineStart + indent) {\n        return inEnd;\n      } else {\n        var wsEnd = Node.endOfWhiteSpace(src, inEnd);\n        var ch = src[wsEnd];\n        if (!ch || ch === \'\\n\') return wsEnd;\n      }\n\n      return null;\n    }\n  }, {\n    key: "atBlank",\n    value: function atBlank(src, offset, endAsBlank) {\n      var ch = src[offset];\n      return ch === \'\\n\' || ch === \'\\t\' || ch === \' \' || endAsBlank && !ch;\n    }\n  }, {\n    key: "nextNodeIsIndented",\n    value: function nextNodeIsIndented(ch, indentDiff, indicatorAsIndent) {\n      if (!ch || indentDiff < 0) return false;\n      if (indentDiff > 0) return true;\n      return indicatorAsIndent && ch === \'-\';\n    } // should be at line or string end, or at next non-whitespace char\n\n  }, {\n    key: "normalizeOffset",\n    value: function normalizeOffset(src, offset) {\n      var ch = src[offset];\n      return !ch ? offset : ch !== \'\\n\' && src[offset - 1] === \'\\n\' ? offset - 1 : Node.endOfWhiteSpace(src, offset);\n    } // fold single newline into space, multiple newlines to N - 1 newlines\n    // presumes src[offset] === \'\\n\'\n\n  }, {\n    key: "foldNewline",\n    value: function foldNewline(src, offset, indent) {\n      var inCount = 0;\n      var error = false;\n      var fold = \'\';\n      var ch = src[offset + 1];\n\n      while (ch === \' \' || ch === \'\\t\' || ch === \'\\n\') {\n        switch (ch) {\n          case \'\\n\':\n            inCount = 0;\n            offset += 1;\n            fold += \'\\n\';\n            break;\n\n          case \'\\t\':\n            if (inCount <= indent) error = true;\n            offset = Node.endOfWhiteSpace(src, offset + 2) - 1;\n            break;\n\n          case \' \':\n            inCount += 1;\n            offset += 1;\n            break;\n        }\n\n        ch = src[offset + 1];\n      }\n\n      if (!fold) fold = \' \';\n      if (ch && inCount <= indent) error = true;\n      return {\n        fold: fold,\n        offset: offset,\n        error: error\n      };\n    }\n  }]);\n\n  function Node(type, props, context) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Node);\n\n    Object.defineProperty(this, \'context\', {\n      value: context || null,\n      writable: true\n    });\n    this.error = null;\n    this.range = null;\n    this.valueRange = null;\n    this.props = props || [];\n    this.type = type;\n    this.value = null;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Node, [{\n    key: "getPropValue",\n    value: function getPropValue(idx, key, skipKey) {\n      if (!this.context) return null;\n      var src = this.context.src;\n      var prop = this.props[idx];\n      return prop && src[prop.start] === key ? src.slice(prop.start + (skipKey ? 1 : 0), prop.end) : null;\n    }\n  }, {\n    key: "commentHasRequiredWhitespace",\n    value: function commentHasRequiredWhitespace(start) {\n      var src = this.context.src;\n      if (this.header && start === this.header.end) return false;\n      if (!this.valueRange) return false;\n      var end = this.valueRange.end;\n      return start !== end || Node.atBlank(src, end - 1);\n    }\n  }, {\n    key: "parseComment",\n    value: function parseComment(start) {\n      var src = this.context.src;\n\n      if (src[start] === _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].COMMENT) {\n        var end = Node.endOfLine(src, start + 1);\n        var commentRange = new _Range__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"](start, end);\n        this.props.push(commentRange);\n        return end;\n      }\n\n      return start;\n    }\n    /**\n     * Populates the `origStart` and `origEnd` values of all ranges for this\n     * node. Extended by child classes to handle descendant nodes.\n     *\n     * @param {number[]} cr - Positions of dropped CR characters\n     * @param {number} offset - Starting index of `cr` from the last call\n     * @returns {number} - The next offset, matching the one found for `origStart`\n     */\n\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      if (this.range) offset = this.range.setOrigRange(cr, offset);\n      if (this.valueRange) this.valueRange.setOrigRange(cr, offset);\n      this.props.forEach(function (prop) {\n        return prop.setOrigRange(cr, offset);\n      });\n      return offset;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var src = this.context.src,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = src.slice(range.start, range.end);\n      return Node.addStringTerminator(src, range.end, str);\n    }\n  }, {\n    key: "anchor",\n    get: function get() {\n      for (var i = 0; i < this.props.length; ++i) {\n        var anchor = this.getPropValue(i, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].ANCHOR, true);\n        if (anchor != null) return anchor;\n      }\n\n      return null;\n    }\n  }, {\n    key: "comment",\n    get: function get() {\n      var comments = [];\n\n      for (var i = 0; i < this.props.length; ++i) {\n        var comment = this.getPropValue(i, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].COMMENT, true);\n        if (comment != null) comments.push(comment);\n      }\n\n      return comments.length > 0 ? comments.join(\'\\n\') : null;\n    }\n  }, {\n    key: "hasComment",\n    get: function get() {\n      if (this.context) {\n        var src = this.context.src;\n\n        for (var i = 0; i < this.props.length; ++i) {\n          if (src[this.props[i].start] === _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].COMMENT) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: "hasProps",\n    get: function get() {\n      if (this.context) {\n        var src = this.context.src;\n\n        for (var i = 0; i < this.props.length; ++i) {\n          if (src[this.props[i].start] !== _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].COMMENT) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: "includesTrailingLines",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: "jsonLike",\n    get: function get() {\n      var jsonLikeTypes = [_constants__WEBPACK_IMPORTED_MODULE_3__[/* Type */ "b"].FLOW_MAP, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Type */ "b"].FLOW_SEQ, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Type */ "b"].QUOTE_DOUBLE, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Type */ "b"].QUOTE_SINGLE];\n      return jsonLikeTypes.indexOf(this.type) !== -1;\n    }\n  }, {\n    key: "rangeAsLinePos",\n    get: function get() {\n      if (!this.range || !this.context) return undefined;\n      var start = Object(_source_utils__WEBPACK_IMPORTED_MODULE_4__[/* getLinePos */ "a"])(this.range.start, this.context.root);\n      if (!start) return undefined;\n      var end = Object(_source_utils__WEBPACK_IMPORTED_MODULE_4__[/* getLinePos */ "a"])(this.range.end, this.context.root);\n      return {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: "rawValue",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      return this.context.src.slice(start, end);\n    }\n  }, {\n    key: "tag",\n    get: function get() {\n      for (var i = 0; i < this.props.length; ++i) {\n        var tag = this.getPropValue(i, _constants__WEBPACK_IMPORTED_MODULE_3__[/* Char */ "a"].TAG, false);\n\n        if (tag != null) {\n          if (tag[1] === \'<\') {\n            return {\n              verbatim: tag.slice(2, -1)\n            };\n          } else {\n            // eslint-disable-next-line no-unused-vars\n            var _tag$match = tag.match(/^(.*!)([^!]*)$/),\n                _tag$match2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_tag$match, 3),\n                _ = _tag$match2[0],\n                handle = _tag$match2[1],\n                suffix = _tag$match2[2];\n\n            return {\n              handle: handle,\n              suffix: suffix\n            };\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: "valueRangeContainsNewline",\n    get: function get() {\n      if (!this.valueRange || !this.context) return false;\n      var _this$valueRange2 = this.valueRange,\n          start = _this$valueRange2.start,\n          end = _this$valueRange2.end;\n      var src = this.context.src;\n\n      for (var i = start; i < end; ++i) {\n        if (src[i] === \'\\n\') return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Node;\n}();\n\n\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/cst/Node.js?')},"./node_modules/yaml/browser/dist/cst/Range.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Range; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@babel/runtime/helpers/classCallCheck.js");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar Range = /*#__PURE__*/function () {\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Range, null, [{\n    key: "copy",\n    value: function copy(orig) {\n      return new Range(orig.start, orig.end);\n    }\n  }]);\n\n  function Range(start, end) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Range);\n\n    this.start = start;\n    this.end = end || start;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Range, [{\n    key: "isEmpty",\n    value: function isEmpty() {\n      return typeof this.start !== \'number\' || !this.end || this.end <= this.start;\n    }\n    /**\n     * Set `origStart` and `origEnd` to point to the original source range for\n     * this node, which may differ due to dropped CR characters.\n     *\n     * @param {number[]} cr - Positions of dropped CR characters\n     * @param {number} offset - Starting index of `cr` from the last call\n     * @returns {number} - The next offset, matching the one found for `origStart`\n     */\n\n  }, {\n    key: "setOrigRange",\n    value: function setOrigRange(cr, offset) {\n      var start = this.start,\n          end = this.end;\n\n      if (cr.length === 0 || end <= cr[0]) {\n        this.origStart = start;\n        this.origEnd = end;\n        return offset;\n      }\n\n      var i = offset;\n\n      while (i < cr.length) {\n        if (cr[i] > start) break;else ++i;\n      }\n\n      this.origStart = start + i;\n      var nextOffset = i;\n\n      while (i < cr.length) {\n        // if end was at \\n, it should now be at \\r\n        if (cr[i] >= end) break;else ++i;\n      }\n\n      this.origEnd = end + i;\n      return nextOffset;\n    }\n  }]);\n\n  return Range;\n}();\n\n\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/cst/Range.js?')},"./node_modules/yaml/browser/dist/cst/source-utils.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getLinePos; });\n/* unused harmony export getLine */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return getPrettyContext; });\nfunction findLineStarts(src) {\n  var ls = [0];\n  var offset = src.indexOf('\\n');\n\n  while (offset !== -1) {\n    offset += 1;\n    ls.push(offset);\n    offset = src.indexOf('\\n', offset);\n  }\n\n  return ls;\n}\n\nfunction getSrcInfo(cst) {\n  var lineStarts, src;\n\n  if (typeof cst === 'string') {\n    lineStarts = findLineStarts(cst);\n    src = cst;\n  } else {\n    if (Array.isArray(cst)) cst = cst[0];\n\n    if (cst && cst.context) {\n      if (!cst.lineStarts) cst.lineStarts = findLineStarts(cst.context.src);\n      lineStarts = cst.lineStarts;\n      src = cst.context.src;\n    }\n  }\n\n  return {\n    lineStarts: lineStarts,\n    src: src\n  };\n}\n/**\n * @typedef {Object} LinePos - One-indexed position in the source\n * @property {number} line\n * @property {number} col\n */\n\n/**\n * Determine the line/col position matching a character offset.\n *\n * Accepts a source string or a CST document as the second parameter. With\n * the latter, starting indices for lines are cached in the document as\n * `lineStarts: number[]`.\n *\n * Returns a one-indexed `{ line, col }` location if found, or\n * `undefined` otherwise.\n *\n * @param {number} offset\n * @param {string|Document|Document[]} cst\n * @returns {?LinePos}\n */\n\n\nfunction getLinePos(offset, cst) {\n  if (typeof offset !== 'number' || offset < 0) return null;\n\n  var _getSrcInfo = getSrcInfo(cst),\n      lineStarts = _getSrcInfo.lineStarts,\n      src = _getSrcInfo.src;\n\n  if (!lineStarts || !src || offset > src.length) return null;\n\n  for (var i = 0; i < lineStarts.length; ++i) {\n    var start = lineStarts[i];\n\n    if (offset < start) {\n      return {\n        line: i,\n        col: offset - lineStarts[i - 1] + 1\n      };\n    }\n\n    if (offset === start) return {\n      line: i + 1,\n      col: 1\n    };\n  }\n\n  var line = lineStarts.length;\n  return {\n    line: line,\n    col: offset - lineStarts[line - 1] + 1\n  };\n}\n/**\n * Get a specified line from the source.\n *\n * Accepts a source string or a CST document as the second parameter. With\n * the latter, starting indices for lines are cached in the document as\n * `lineStarts: number[]`.\n *\n * Returns the line as a string if found, or `null` otherwise.\n *\n * @param {number} line One-indexed line number\n * @param {string|Document|Document[]} cst\n * @returns {?string}\n */\n\nfunction getLine(line, cst) {\n  var _getSrcInfo2 = getSrcInfo(cst),\n      lineStarts = _getSrcInfo2.lineStarts,\n      src = _getSrcInfo2.src;\n\n  if (!lineStarts || !(line >= 1) || line > lineStarts.length) return null;\n  var start = lineStarts[line - 1];\n  var end = lineStarts[line]; // undefined for last line; that's ok for slice()\n\n  while (end && end > start && src[end - 1] === '\\n') {\n    --end;\n  }\n\n  return src.slice(start, end);\n}\n/**\n * Pretty-print the starting line from the source indicated by the range `pos`\n *\n * Trims output to `maxWidth` chars while keeping the starting column visible,\n * using `…` at either end to indicate dropped characters.\n *\n * Returns a two-line string (or `null`) with `\\n` as separator; the second line\n * will hold appropriately indented `^` marks indicating the column range.\n *\n * @param {Object} pos\n * @param {LinePos} pos.start\n * @param {LinePos} [pos.end]\n * @param {string|Document|Document[]*} cst\n * @param {number} [maxWidth=80]\n * @returns {?string}\n */\n\nfunction getPrettyContext(_ref, cst) {\n  var start = _ref.start,\n      end = _ref.end;\n  var maxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 80;\n  var src = getLine(start.line, cst);\n  if (!src) return null;\n  var col = start.col;\n\n  if (src.length > maxWidth) {\n    if (col <= maxWidth - 10) {\n      src = src.substr(0, maxWidth - 1) + '…';\n    } else {\n      var halfWidth = Math.round(maxWidth / 2);\n      if (src.length > col + halfWidth) src = src.substr(0, col + halfWidth - 1) + '…';\n      col -= src.length - maxWidth;\n      src = '…' + src.substr(1 - maxWidth);\n    }\n  }\n\n  var errLen = 1;\n  var errEnd = '';\n\n  if (end) {\n    if (end.line === start.line && col + (end.col - start.col) <= maxWidth + 1) {\n      errLen = end.col - start.col;\n    } else {\n      errLen = Math.min(src.length + 1, maxWidth) - col;\n      errEnd = '…';\n    }\n  }\n\n  var offset = col > 1 ? ' '.repeat(col - 1) : '';\n  var err = '^'.repeat(errLen);\n  return \"\".concat(src, \"\\n\").concat(offset).concat(err).concat(errEnd);\n}\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/cst/source-utils.js?")},"./node_modules/yaml/browser/dist/errors.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return YAMLError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return YAMLReferenceError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return YAMLSemanticError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return YAMLSyntaxError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return YAMLWarning; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@babel/runtime/helpers/classCallCheck.js");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");\n/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/@babel/runtime/helpers/getPrototypeOf.js");\n/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/@babel/runtime/helpers/inherits.js");\n/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/@babel/runtime/helpers/wrapNativeSuper.js");\n/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _cst_Node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/yaml/browser/dist/cst/Node.js");\n/* harmony import */ var _cst_source_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/yaml/browser/dist/cst/source-utils.js");\n/* harmony import */ var _cst_Range__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./node_modules/yaml/browser/dist/cst/Range.js");\n\n\n\n\n\n\n\n\n\nvar YAMLError = /*#__PURE__*/function (_Error) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(YAMLError, _Error);\n\n  function YAMLError(name, source, message) {\n    var _this;\n\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, YAMLError);\n\n    if (!message || !(source instanceof _cst_Node__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"])) throw new Error("Invalid arguments for new ".concat(name));\n    _this = _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(YAMLError).call(this));\n    _this.name = name;\n    _this.message = message;\n    _this.source = source;\n    return _this;\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(YAMLError, [{\n    key: "makePretty",\n    value: function makePretty() {\n      if (!this.source) return;\n      this.nodeType = this.source.type;\n      var cst = this.source.context && this.source.context.root;\n\n      if (typeof this.offset === \'number\') {\n        this.range = new _cst_Range__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](this.offset, this.offset + 1);\n        var start = cst && Object(_cst_source_utils__WEBPACK_IMPORTED_MODULE_7__[/* getLinePos */ "a"])(this.offset, cst);\n\n        if (start) {\n          var end = {\n            line: start.line,\n            col: start.col + 1\n          };\n          this.linePos = {\n            start: start,\n            end: end\n          };\n        }\n\n        delete this.offset;\n      } else {\n        this.range = this.source.range;\n        this.linePos = this.source.rangeAsLinePos;\n      }\n\n      if (this.linePos) {\n        var _this$linePos$start = this.linePos.start,\n            line = _this$linePos$start.line,\n            col = _this$linePos$start.col;\n        this.message += " at line ".concat(line, ", column ").concat(col);\n        var ctx = cst && Object(_cst_source_utils__WEBPACK_IMPORTED_MODULE_7__[/* getPrettyContext */ "b"])(this.linePos, cst);\n        if (ctx) this.message += ":\\n\\n".concat(ctx, "\\n");\n      }\n\n      delete this.source;\n    }\n  }]);\n\n  return YAMLError;\n}( /*#__PURE__*/_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_5___default()(Error));\nvar YAMLReferenceError = /*#__PURE__*/function (_YAMLError) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(YAMLReferenceError, _YAMLError);\n\n  function YAMLReferenceError(source, message) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, YAMLReferenceError);\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(YAMLReferenceError).call(this, \'YAMLReferenceError\', source, message));\n  }\n\n  return YAMLReferenceError;\n}(YAMLError);\nvar YAMLSemanticError = /*#__PURE__*/function (_YAMLError2) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(YAMLSemanticError, _YAMLError2);\n\n  function YAMLSemanticError(source, message) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, YAMLSemanticError);\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(YAMLSemanticError).call(this, \'YAMLSemanticError\', source, message));\n  }\n\n  return YAMLSemanticError;\n}(YAMLError);\nvar YAMLSyntaxError = /*#__PURE__*/function (_YAMLError3) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(YAMLSyntaxError, _YAMLError3);\n\n  function YAMLSyntaxError(source, message) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, YAMLSyntaxError);\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(YAMLSyntaxError).call(this, \'YAMLSyntaxError\', source, message));\n  }\n\n  return YAMLSyntaxError;\n}(YAMLError);\nvar YAMLWarning = /*#__PURE__*/function (_YAMLError4) {\n  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(YAMLWarning, _YAMLError4);\n\n  function YAMLWarning(source, message) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, YAMLWarning);\n\n    return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(YAMLWarning).call(this, \'YAMLWarning\', source, message));\n  }\n\n  return YAMLWarning;\n}(YAMLError);\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/errors.js?')},"./node_modules/yaml/browser/dist/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js\nvar classCallCheck = __webpack_require__("./node_modules/@babel/runtime/helpers/classCallCheck.js");\nvar classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__("./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");\nvar possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__("./node_modules/@babel/runtime/helpers/getPrototypeOf.js");\nvar getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js\nvar inherits = __webpack_require__("./node_modules/@babel/runtime/helpers/inherits.js");\nvar inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js\nvar helpers_get = __webpack_require__("./node_modules/@babel/runtime/helpers/get.js");\nvar get_default = /*#__PURE__*/__webpack_require__.n(helpers_get);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js\nvar createClass = __webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js");\nvar createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/constants.js\nvar constants = __webpack_require__("./node_modules/yaml/browser/dist/constants.js");\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/errors.js\nvar dist_errors = __webpack_require__("./node_modules/yaml/browser/dist/errors.js");\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/cst/Node.js\nvar cst_Node = __webpack_require__("./node_modules/yaml/browser/dist/cst/Node.js");\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/cst/Range.js\nvar Range = __webpack_require__("./node_modules/yaml/browser/dist/cst/Range.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/BlankLine.js\n\n\n\n\n\n\n\n\n\nvar BlankLine_BlankLine = /*#__PURE__*/function (_Node) {\n  inherits_default()(BlankLine, _Node);\n\n  function BlankLine() {\n    classCallCheck_default()(this, BlankLine);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(BlankLine).call(this, constants["b" /* Type */].BLANK_LINE));\n  }\n  /* istanbul ignore next */\n\n\n  createClass_default()(BlankLine, [{\n    key: "parse",\n\n    /**\n     * Parses blank lines from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first \\n character\n     * @returns {number} - Index of the character after this\n     */\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = start + 1;\n\n      while (cst_Node["a" /* default */].atBlank(src, offset)) {\n        var lineEnd = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n        if (lineEnd === \'\\n\') offset = lineEnd + 1;else break;\n      }\n\n      this.range = new Range["a" /* default */](start, offset);\n      return offset;\n    }\n  }, {\n    key: "includesTrailingLines",\n    get: function get() {\n      // This is never called from anywhere, but if it were,\n      // this is the value it should return.\n      return true;\n    }\n  }]);\n\n  return BlankLine;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/CollectionItem.js\n\n\n\n\n\n\n\n\n\n\n\n\nvar CollectionItem_CollectionItem = /*#__PURE__*/function (_Node) {\n  inherits_default()(CollectionItem, _Node);\n\n  function CollectionItem(type, props) {\n    var _this;\n\n    classCallCheck_default()(this, CollectionItem);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(CollectionItem).call(this, type, props));\n    _this.node = null;\n    return _this;\n  }\n\n  createClass_default()(CollectionItem, [{\n    key: "parse",\n\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src;\n      var atLineStart = context.atLineStart,\n          lineStart = context.lineStart;\n      if (!atLineStart && this.type === constants["b" /* Type */].SEQ_ITEM) this.error = new dist_errors["c" /* YAMLSemanticError */](this, \'Sequence items must not have preceding content on the same line\');\n      var indent = atLineStart ? start - lineStart : context.indent;\n      var offset = cst_Node["a" /* default */].endOfWhiteSpace(src, start + 1);\n      var ch = src[offset];\n      var inlineComment = ch === \'#\';\n      var comments = [];\n      var blankLine = null;\n\n      while (ch === \'\\n\' || ch === \'#\') {\n        if (ch === \'#\') {\n          var _end = cst_Node["a" /* default */].endOfLine(src, offset + 1);\n\n          comments.push(new Range["a" /* default */](offset, _end));\n          offset = _end;\n        } else {\n          atLineStart = true;\n          lineStart = offset + 1;\n          var wsEnd = cst_Node["a" /* default */].endOfWhiteSpace(src, lineStart);\n\n          if (src[wsEnd] === \'\\n\' && comments.length === 0) {\n            blankLine = new BlankLine_BlankLine();\n            lineStart = blankLine.parse({\n              src: src\n            }, lineStart);\n          }\n\n          offset = cst_Node["a" /* default */].endOfIndent(src, lineStart);\n        }\n\n        ch = src[offset];\n      }\n\n      if (cst_Node["a" /* default */].nextNodeIsIndented(ch, offset - (lineStart + indent), this.type !== constants["b" /* Type */].SEQ_ITEM)) {\n        this.node = parseNode({\n          atLineStart: atLineStart,\n          inCollection: false,\n          indent: indent,\n          lineStart: lineStart,\n          parent: this\n        }, offset);\n      } else if (ch && lineStart > start + 1) {\n        offset = lineStart - 1;\n      }\n\n      if (this.node) {\n        if (blankLine) {\n          // Only blank lines preceding non-empty nodes are captured. Note that\n          // this means that collection item range start indices do not always\n          // increase monotonically. -- eemeli/yaml#126\n          var items = context.parent.items || context.parent.contents;\n          if (items) items.push(blankLine);\n        }\n\n        if (comments.length) Array.prototype.push.apply(this.props, comments);\n        offset = this.node.range.end;\n      } else {\n        if (inlineComment) {\n          var c = comments[0];\n          this.props.push(c);\n          offset = c.end;\n        } else {\n          offset = cst_Node["a" /* default */].endOfLine(src, start + 1);\n        }\n      }\n\n      var end = this.node ? this.node.valueRange.end : offset;\n      this.valueRange = new Range["a" /* default */](start, end);\n      return offset;\n    }\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      offset = get_default()(getPrototypeOf_default()(CollectionItem.prototype), "setOrigRanges", this).call(this, cr, offset);\n      return this.node ? this.node.setOrigRanges(cr, offset) : offset;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var src = this.context.src,\n          node = this.node,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = node ? src.slice(range.start, node.range.start) + String(node) : src.slice(range.start, range.end);\n      return cst_Node["a" /* default */].addStringTerminator(src, range.end, str);\n    }\n  }, {\n    key: "includesTrailingLines",\n    get: function get() {\n      return !!this.node && this.node.includesTrailingLines;\n    }\n  }]);\n\n  return CollectionItem;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/Comment.js\n\n\n\n\n\n\n\n\n\nvar Comment_Comment = /*#__PURE__*/function (_Node) {\n  inherits_default()(Comment, _Node);\n\n  function Comment() {\n    classCallCheck_default()(this, Comment);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(Comment).call(this, constants["b" /* Type */].COMMENT));\n  }\n  /**\n   * Parses a comment line from the source\n   *\n   * @param {ParseContext} context\n   * @param {number} start - Index of first character\n   * @returns {number} - Index of the character after this scalar\n   */\n\n\n  createClass_default()(Comment, [{\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var offset = this.parseComment(start);\n      this.range = new Range["a" /* default */](start, offset);\n      return offset;\n    }\n  }]);\n\n  return Comment;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/Collection.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction grabCollectionEndComments(node) {\n  var cnode = node;\n\n  while (cnode instanceof CollectionItem_CollectionItem) {\n    cnode = cnode.node;\n  }\n\n  if (!(cnode instanceof Collection_Collection)) return null;\n  var len = cnode.items.length;\n  var ci = -1;\n\n  for (var i = len - 1; i >= 0; --i) {\n    var n = cnode.items[i];\n\n    if (n.type === constants["b" /* Type */].COMMENT) {\n      // Keep sufficiently indented comments with preceding node\n      var _n$context = n.context,\n          indent = _n$context.indent,\n          lineStart = _n$context.lineStart;\n      if (indent > 0 && n.range.start >= lineStart + indent) break;\n      ci = i;\n    } else if (n.type === constants["b" /* Type */].BLANK_LINE) ci = i;else break;\n  }\n\n  if (ci === -1) return null;\n  var ca = cnode.items.splice(ci, len - ci);\n  var prevEnd = ca[0].range.start;\n\n  while (true) {\n    cnode.range.end = prevEnd;\n    if (cnode.valueRange && cnode.valueRange.end > prevEnd) cnode.valueRange.end = prevEnd;\n    if (cnode === node) break;\n    cnode = cnode.context.parent;\n  }\n\n  return ca;\n}\n\nvar Collection_Collection = /*#__PURE__*/function (_Node) {\n  inherits_default()(Collection, _Node);\n\n  createClass_default()(Collection, null, [{\n    key: "nextContentHasIndent",\n    value: function nextContentHasIndent(src, offset, indent) {\n      var lineStart = cst_Node["a" /* default */].endOfLine(src, offset) + 1;\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, lineStart);\n      var ch = src[offset];\n      if (!ch) return false;\n      if (offset >= lineStart + indent) return true;\n      if (ch !== \'#\' && ch !== \'\\n\') return false;\n      return Collection.nextContentHasIndent(src, offset, indent);\n    }\n  }]);\n\n  function Collection(firstItem) {\n    var _this;\n\n    classCallCheck_default()(this, Collection);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Collection).call(this, firstItem.type === constants["b" /* Type */].SEQ_ITEM ? constants["b" /* Type */].SEQ : constants["b" /* Type */].MAP));\n\n    for (var i = firstItem.props.length - 1; i >= 0; --i) {\n      if (firstItem.props[i].start < firstItem.context.lineStart) {\n        // props on previous line are assumed by the collection\n        _this.props = firstItem.props.slice(0, i + 1);\n        firstItem.props = firstItem.props.slice(i + 1);\n        var itemRange = firstItem.props[0] || firstItem.valueRange;\n        firstItem.range.start = itemRange.start;\n        break;\n      }\n    }\n\n    _this.items = [firstItem];\n    var ec = grabCollectionEndComments(firstItem);\n    if (ec) Array.prototype.push.apply(_this.items, ec);\n    return _this;\n  }\n\n  createClass_default()(Collection, [{\n    key: "parse",\n\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src; // It\'s easier to recalculate lineStart here rather than tracking down the\n      // last context from which to read it -- eemeli/yaml#2\n\n      var lineStart = cst_Node["a" /* default */].startOfLine(src, start);\n      var firstItem = this.items[0]; // First-item context needs to be correct for later comment handling\n      // -- eemeli/yaml#17\n\n      firstItem.context.parent = this;\n      this.valueRange = Range["a" /* default */].copy(firstItem.valueRange);\n      var indent = firstItem.range.start - firstItem.context.lineStart;\n      var offset = start;\n      offset = cst_Node["a" /* default */].normalizeOffset(src, offset);\n      var ch = src[offset];\n      var atLineStart = cst_Node["a" /* default */].endOfWhiteSpace(src, lineStart) === offset;\n      var prevIncludesTrailingLines = false;\n\n      while (ch) {\n        while (ch === \'\\n\' || ch === \'#\') {\n          if (atLineStart && ch === \'\\n\' && !prevIncludesTrailingLines) {\n            var blankLine = new BlankLine_BlankLine();\n            offset = blankLine.parse({\n              src: src\n            }, offset);\n            this.valueRange.end = offset;\n\n            if (offset >= src.length) {\n              ch = null;\n              break;\n            }\n\n            this.items.push(blankLine);\n            offset -= 1; // blankLine.parse() consumes terminal newline\n          } else if (ch === \'#\') {\n            if (offset < lineStart + indent && !Collection.nextContentHasIndent(src, offset, indent)) {\n              return offset;\n            }\n\n            var comment = new Comment_Comment();\n            offset = comment.parse({\n              indent: indent,\n              lineStart: lineStart,\n              src: src\n            }, offset);\n            this.items.push(comment);\n            this.valueRange.end = offset;\n\n            if (offset >= src.length) {\n              ch = null;\n              break;\n            }\n          }\n\n          lineStart = offset + 1;\n          offset = cst_Node["a" /* default */].endOfIndent(src, lineStart);\n\n          if (cst_Node["a" /* default */].atBlank(src, offset)) {\n            var wsEnd = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n            var next = src[wsEnd];\n\n            if (!next || next === \'\\n\' || next === \'#\') {\n              offset = wsEnd;\n            }\n          }\n\n          ch = src[offset];\n          atLineStart = true;\n        }\n\n        if (!ch) {\n          break;\n        }\n\n        if (offset !== lineStart + indent && (atLineStart || ch !== \':\')) {\n          if (lineStart > start) offset = lineStart;\n          break;\n        }\n\n        if (firstItem.type === constants["b" /* Type */].SEQ_ITEM !== (ch === \'-\')) {\n          var typeswitch = true;\n\n          if (ch === \'-\') {\n            // map key may start with -, as long as it\'s followed by a non-whitespace char\n            var _next = src[offset + 1];\n            typeswitch = !_next || _next === \'\\n\' || _next === \'\\t\' || _next === \' \';\n          }\n\n          if (typeswitch) {\n            if (lineStart > start) offset = lineStart;\n            break;\n          }\n        }\n\n        var node = parseNode({\n          atLineStart: atLineStart,\n          inCollection: true,\n          indent: indent,\n          lineStart: lineStart,\n          parent: this\n        }, offset);\n        if (!node) return offset; // at next document start\n\n        this.items.push(node);\n        this.valueRange.end = node.valueRange.end;\n        offset = cst_Node["a" /* default */].normalizeOffset(src, node.range.end);\n        ch = src[offset];\n        atLineStart = false;\n        prevIncludesTrailingLines = node.includesTrailingLines; // Need to reset lineStart and atLineStart here if preceding node\'s range\n        // has advanced to check the current line\'s indentation level\n        // -- eemeli/yaml#10 & eemeli/yaml#38\n\n        if (ch) {\n          var ls = offset - 1;\n          var prev = src[ls];\n\n          while (prev === \' \' || prev === \'\\t\') {\n            prev = src[--ls];\n          }\n\n          if (prev === \'\\n\') {\n            lineStart = ls + 1;\n            atLineStart = true;\n          }\n        }\n\n        var ec = grabCollectionEndComments(node);\n        if (ec) Array.prototype.push.apply(this.items, ec);\n      }\n\n      return offset;\n    }\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      offset = get_default()(getPrototypeOf_default()(Collection.prototype), "setOrigRanges", this).call(this, cr, offset);\n      this.items.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      return offset;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var src = this.context.src,\n          items = this.items,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = src.slice(range.start, items[0].range.start) + String(items[0]);\n\n      for (var i = 1; i < items.length; ++i) {\n        var item = items[i];\n        var _item$context = item.context,\n            atLineStart = _item$context.atLineStart,\n            indent = _item$context.indent;\n        if (atLineStart) for (var _i = 0; _i < indent; ++_i) {\n          str += \' \';\n        }\n        str += String(item);\n      }\n\n      return cst_Node["a" /* default */].addStringTerminator(src, range.end, str);\n    }\n  }, {\n    key: "includesTrailingLines",\n    get: function get() {\n      return this.items.length > 0;\n    }\n  }]);\n\n  return Collection;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/Directive.js\n\n\n\n\n\n\n\n\n\nvar Directive_Directive = /*#__PURE__*/function (_Node) {\n  inherits_default()(Directive, _Node);\n\n  function Directive() {\n    var _this;\n\n    classCallCheck_default()(this, Directive);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Directive).call(this, constants["b" /* Type */].DIRECTIVE));\n    _this.name = null;\n    return _this;\n  }\n\n  createClass_default()(Directive, [{\n    key: "parseName",\n    value: function parseName(start) {\n      var src = this.context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      while (ch && ch !== \'\\n\' && ch !== \'\\t\' && ch !== \' \') {\n        ch = src[offset += 1];\n      }\n\n      this.name = src.slice(start, offset);\n      return offset;\n    }\n  }, {\n    key: "parseParameters",\n    value: function parseParameters(start) {\n      var src = this.context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      while (ch && ch !== \'\\n\' && ch !== \'#\') {\n        ch = src[offset += 1];\n      }\n\n      this.valueRange = new Range["a" /* default */](start, offset);\n      return offset;\n    }\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var offset = this.parseName(start + 1);\n      offset = this.parseParameters(offset);\n      offset = this.parseComment(offset);\n      this.range = new Range["a" /* default */](start, offset);\n      return offset;\n    }\n  }, {\n    key: "parameters",\n    get: function get() {\n      var raw = this.rawValue;\n      return raw ? raw.trim().split(/[ \\t]+/) : [];\n    }\n  }]);\n\n  return Directive;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/Document.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Document_Document = /*#__PURE__*/function (_Node) {\n  inherits_default()(Document, _Node);\n\n  createClass_default()(Document, null, [{\n    key: "startCommentOrEndBlankLine",\n    value: function startCommentOrEndBlankLine(src, start) {\n      var offset = cst_Node["a" /* default */].endOfWhiteSpace(src, start);\n      var ch = src[offset];\n      return ch === \'#\' || ch === \'\\n\' ? offset : start;\n    }\n  }]);\n\n  function Document() {\n    var _this;\n\n    classCallCheck_default()(this, Document);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Document).call(this, constants["b" /* Type */].DOCUMENT));\n    _this.directives = null;\n    _this.contents = null;\n    _this.directivesEndMarker = null;\n    _this.documentEndMarker = null;\n    return _this;\n  }\n\n  createClass_default()(Document, [{\n    key: "parseDirectives",\n    value: function parseDirectives(start) {\n      var src = this.context.src;\n      this.directives = [];\n      var atLineStart = true;\n      var hasDirectives = false;\n      var offset = start;\n\n      while (!cst_Node["a" /* default */].atDocumentBoundary(src, offset, constants["a" /* Char */].DIRECTIVES_END)) {\n        offset = Document.startCommentOrEndBlankLine(src, offset);\n\n        switch (src[offset]) {\n          case \'\\n\':\n            if (atLineStart) {\n              var blankLine = new BlankLine_BlankLine();\n              offset = blankLine.parse({\n                src: src\n              }, offset);\n\n              if (offset < src.length) {\n                this.directives.push(blankLine);\n              }\n            } else {\n              offset += 1;\n              atLineStart = true;\n            }\n\n            break;\n\n          case \'#\':\n            {\n              var comment = new Comment_Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.directives.push(comment);\n              atLineStart = false;\n            }\n            break;\n\n          case \'%\':\n            {\n              var directive = new Directive_Directive();\n              offset = directive.parse({\n                parent: this,\n                src: src\n              }, offset);\n              this.directives.push(directive);\n              hasDirectives = true;\n              atLineStart = false;\n            }\n            break;\n\n          default:\n            if (hasDirectives) {\n              this.error = new dist_errors["c" /* YAMLSemanticError */](this, \'Missing directives-end indicator line\');\n            } else if (this.directives.length > 0) {\n              this.contents = this.directives;\n              this.directives = [];\n            }\n\n            return offset;\n        }\n      }\n\n      if (src[offset]) {\n        this.directivesEndMarker = new Range["a" /* default */](offset, offset + 3);\n        return offset + 3;\n      }\n\n      if (hasDirectives) {\n        this.error = new dist_errors["c" /* YAMLSemanticError */](this, \'Missing directives-end indicator line\');\n      } else if (this.directives.length > 0) {\n        this.contents = this.directives;\n        this.directives = [];\n      }\n\n      return offset;\n    }\n  }, {\n    key: "parseContents",\n    value: function parseContents(start) {\n      var _this$context = this.context,\n          parseNode = _this$context.parseNode,\n          src = _this$context.src;\n      if (!this.contents) this.contents = [];\n      var lineStart = start;\n\n      while (src[lineStart - 1] === \'-\') {\n        lineStart -= 1;\n      }\n\n      var offset = cst_Node["a" /* default */].endOfWhiteSpace(src, start);\n      var atLineStart = lineStart === start;\n      this.valueRange = new Range["a" /* default */](offset);\n\n      while (!cst_Node["a" /* default */].atDocumentBoundary(src, offset, constants["a" /* Char */].DOCUMENT_END)) {\n        switch (src[offset]) {\n          case \'\\n\':\n            if (atLineStart) {\n              var blankLine = new BlankLine_BlankLine();\n              offset = blankLine.parse({\n                src: src\n              }, offset);\n\n              if (offset < src.length) {\n                this.contents.push(blankLine);\n              }\n            } else {\n              offset += 1;\n              atLineStart = true;\n            }\n\n            lineStart = offset;\n            break;\n\n          case \'#\':\n            {\n              var comment = new Comment_Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.contents.push(comment);\n              atLineStart = false;\n            }\n            break;\n\n          default:\n            {\n              var iEnd = cst_Node["a" /* default */].endOfIndent(src, offset);\n              var context = {\n                atLineStart: atLineStart,\n                indent: -1,\n                inFlow: false,\n                inCollection: false,\n                lineStart: lineStart,\n                parent: this\n              };\n              var node = parseNode(context, iEnd);\n              if (!node) return this.valueRange.end = iEnd; // at next document start\n\n              this.contents.push(node);\n              offset = node.range.end;\n              atLineStart = false;\n              var ec = grabCollectionEndComments(node);\n              if (ec) Array.prototype.push.apply(this.contents, ec);\n            }\n        }\n\n        offset = Document.startCommentOrEndBlankLine(src, offset);\n      }\n\n      this.valueRange.end = offset;\n\n      if (src[offset]) {\n        this.documentEndMarker = new Range["a" /* default */](offset, offset + 3);\n        offset += 3;\n\n        if (src[offset]) {\n          offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n\n          if (src[offset] === \'#\') {\n            var _comment = new Comment_Comment();\n\n            offset = _comment.parse({\n              src: src\n            }, offset);\n            this.contents.push(_comment);\n          }\n\n          switch (src[offset]) {\n            case \'\\n\':\n              offset += 1;\n              break;\n\n            case undefined:\n              break;\n\n            default:\n              this.error = new dist_errors["d" /* YAMLSyntaxError */](this, \'Document end marker line cannot have a non-comment suffix\');\n          }\n        }\n      }\n\n      return offset;\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      context.root = this;\n      this.context = context;\n      var src = context.src;\n      var offset = src.charCodeAt(start) === 0xfeff ? start + 1 : start; // skip BOM\n\n      offset = this.parseDirectives(offset);\n      offset = this.parseContents(offset);\n      return offset;\n    }\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      offset = get_default()(getPrototypeOf_default()(Document.prototype), "setOrigRanges", this).call(this, cr, offset);\n      this.directives.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      if (this.directivesEndMarker) offset = this.directivesEndMarker.setOrigRange(cr, offset);\n      this.contents.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      if (this.documentEndMarker) offset = this.documentEndMarker.setOrigRange(cr, offset);\n      return offset;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var contents = this.contents,\n          directives = this.directives,\n          value = this.value;\n      if (value != null) return value;\n      var str = directives.join(\'\');\n\n      if (contents.length > 0) {\n        if (directives.length > 0 || contents[0].type === constants["b" /* Type */].COMMENT) str += \'---\\n\';\n        str += contents.join(\'\');\n      }\n\n      if (str[str.length - 1] !== \'\\n\') str += \'\\n\';\n      return str;\n    }\n  }]);\n\n  return Document;\n}(cst_Node["a" /* default */]);\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\nvar defineProperty = __webpack_require__("./node_modules/@babel/runtime/helpers/defineProperty.js");\nvar defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/Alias.js\n\n\n\n\n\n\n\n\nvar Alias_Alias = /*#__PURE__*/function (_Node) {\n  inherits_default()(Alias, _Node);\n\n  function Alias() {\n    classCallCheck_default()(this, Alias);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(Alias).apply(this, arguments));\n  }\n\n  createClass_default()(Alias, [{\n    key: "parse",\n\n    /**\n     * Parses an *alias from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = cst_Node["a" /* default */].endOfIdentifier(src, start + 1);\n      this.valueRange = new Range["a" /* default */](start + 1, offset);\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }]);\n\n  return Alias;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/BlockValue.js\n\n\n\n\n\n\n\n\n\nvar Chomp = {\n  CLIP: \'CLIP\',\n  KEEP: \'KEEP\',\n  STRIP: \'STRIP\'\n};\n\nvar BlockValue_BlockValue = /*#__PURE__*/function (_Node) {\n  inherits_default()(BlockValue, _Node);\n\n  function BlockValue(type, props) {\n    var _this;\n\n    classCallCheck_default()(this, BlockValue);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(BlockValue).call(this, type, props));\n    _this.blockIndent = null;\n    _this.chomping = Chomp.CLIP;\n    _this.header = null;\n    return _this;\n  }\n\n  createClass_default()(BlockValue, [{\n    key: "parseBlockHeader",\n    value: function parseBlockHeader(start) {\n      var src = this.context.src;\n      var offset = start + 1;\n      var bi = \'\';\n\n      while (true) {\n        var ch = src[offset];\n\n        switch (ch) {\n          case \'-\':\n            this.chomping = Chomp.STRIP;\n            break;\n\n          case \'+\':\n            this.chomping = Chomp.KEEP;\n            break;\n\n          case \'0\':\n          case \'1\':\n          case \'2\':\n          case \'3\':\n          case \'4\':\n          case \'5\':\n          case \'6\':\n          case \'7\':\n          case \'8\':\n          case \'9\':\n            bi += ch;\n            break;\n\n          default:\n            this.blockIndent = Number(bi) || null;\n            this.header = new Range["a" /* default */](start, offset);\n            return offset;\n        }\n\n        offset += 1;\n      }\n    }\n  }, {\n    key: "parseBlockValue",\n    value: function parseBlockValue(start) {\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      var offset = start;\n      var valueEnd = start;\n      var bi = this.blockIndent ? indent + this.blockIndent - 1 : indent;\n      var minBlockIndent = 1;\n\n      for (var ch = src[offset]; ch === \'\\n\'; ch = src[offset]) {\n        offset += 1;\n        if (cst_Node["a" /* default */].atDocumentBoundary(src, offset)) break;\n        var end = cst_Node["a" /* default */].endOfBlockIndent(src, bi, offset); // should not include tab?\n\n        if (end === null) break;\n\n        if (!this.blockIndent) {\n          // no explicit block indent, none yet detected\n          var lineIndent = end - (offset + indent);\n\n          if (src[end] !== \'\\n\') {\n            // first line with non-whitespace content\n            if (lineIndent < minBlockIndent) {\n              offset -= 1;\n              break;\n            }\n\n            this.blockIndent = lineIndent;\n            bi = indent + this.blockIndent - 1;\n          } else if (lineIndent > minBlockIndent) {\n            // empty line with more whitespace\n            minBlockIndent = lineIndent;\n          }\n        }\n\n        if (src[end] === \'\\n\') {\n          offset = end;\n        } else {\n          offset = valueEnd = cst_Node["a" /* default */].endOfLine(src, end);\n        }\n      }\n\n      if (this.chomping !== Chomp.KEEP) {\n        offset = src[valueEnd] ? valueEnd + 1 : valueEnd;\n      }\n\n      this.valueRange = new Range["a" /* default */](start + 1, offset);\n      return offset;\n    }\n    /**\n     * Parses a block value from the source\n     *\n     * Accepted forms are:\n     * ```\n     * BS\n     * block\n     * lines\n     *\n     * BS #comment\n     * block\n     * lines\n     * ```\n     * where the block style BS matches the regexp `[|>][-+1-9]*` and block lines\n     * are empty or have an indent level greater than `indent`.\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this block\n     */\n\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = this.parseBlockHeader(start);\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      offset = this.parseBlockValue(offset);\n      return offset;\n    }\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      offset = get_default()(getPrototypeOf_default()(BlockValue.prototype), "setOrigRanges", this).call(this, cr, offset);\n      return this.header ? this.header.setOrigRange(cr, offset) : offset;\n    }\n  }, {\n    key: "includesTrailingLines",\n    get: function get() {\n      return this.chomping === Chomp.KEEP;\n    }\n  }, {\n    key: "strValue",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context2 = this.context,\n          indent = _this$context2.indent,\n          src = _this$context2.src;\n      if (this.valueRange.isEmpty()) return \'\';\n      var lastNewLine = null;\n      var ch = src[end - 1];\n\n      while (ch === \'\\n\' || ch === \'\\t\' || ch === \' \') {\n        end -= 1;\n\n        if (end <= start) {\n          if (this.chomping === Chomp.KEEP) break;else return \'\'; // probably never happens\n        }\n\n        if (ch === \'\\n\') lastNewLine = end;\n        ch = src[end - 1];\n      }\n\n      var keepStart = end + 1;\n\n      if (lastNewLine) {\n        if (this.chomping === Chomp.KEEP) {\n          keepStart = lastNewLine;\n          end = this.valueRange.end;\n        } else {\n          end = lastNewLine;\n        }\n      }\n\n      var bi = indent + this.blockIndent;\n      var folded = this.type === constants["b" /* Type */].BLOCK_FOLDED;\n      var atStart = true;\n      var str = \'\';\n      var sep = \'\';\n      var prevMoreIndented = false;\n\n      for (var i = start; i < end; ++i) {\n        for (var j = 0; j < bi; ++j) {\n          if (src[i] !== \' \') break;\n          i += 1;\n        }\n\n        var _ch = src[i];\n\n        if (_ch === \'\\n\') {\n          if (sep === \'\\n\') str += \'\\n\';else sep = \'\\n\';\n        } else {\n          var lineEnd = cst_Node["a" /* default */].endOfLine(src, i);\n          var line = src.slice(i, lineEnd);\n          i = lineEnd;\n\n          if (folded && (_ch === \' \' || _ch === \'\\t\') && i < keepStart) {\n            if (sep === \' \') sep = \'\\n\';else if (!prevMoreIndented && !atStart && sep === \'\\n\') sep = \'\\n\\n\';\n            str += sep + line; //+ ((lineEnd < end && src[lineEnd]) || \'\')\n\n            sep = lineEnd < end && src[lineEnd] || \'\';\n            prevMoreIndented = true;\n          } else {\n            str += sep + line;\n            sep = folded && i < keepStart ? \' \' : \'\\n\';\n            prevMoreIndented = false;\n          }\n\n          if (atStart && line !== \'\') atStart = false;\n        }\n      }\n\n      return this.chomping === Chomp.STRIP ? str : str + \'\\n\';\n    }\n  }]);\n\n  return BlockValue;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/FlowCollection.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar FlowCollection_FlowCollection = /*#__PURE__*/function (_Node) {\n  inherits_default()(FlowCollection, _Node);\n\n  function FlowCollection(type, props) {\n    var _this;\n\n    classCallCheck_default()(this, FlowCollection);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(FlowCollection).call(this, type, props));\n    _this.items = null;\n    return _this;\n  }\n\n  createClass_default()(FlowCollection, [{\n    key: "prevNodeIsJsonLike",\n    value: function prevNodeIsJsonLike() {\n      var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items.length;\n      var node = this.items[idx - 1];\n      return !!node && (node.jsonLike || node.type === constants["b" /* Type */].COMMENT && this.nodeIsJsonLike(idx - 1));\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src;\n      var indent = context.indent,\n          lineStart = context.lineStart;\n      var char = src[start]; // { or [\n\n      this.items = [{\n        char: char,\n        offset: start\n      }];\n      var offset = cst_Node["a" /* default */].endOfWhiteSpace(src, start + 1);\n      char = src[offset];\n\n      while (char && char !== \']\' && char !== \'}\') {\n        switch (char) {\n          case \'\\n\':\n            {\n              lineStart = offset + 1;\n              var wsEnd = cst_Node["a" /* default */].endOfWhiteSpace(src, lineStart);\n\n              if (src[wsEnd] === \'\\n\') {\n                var blankLine = new BlankLine_BlankLine();\n                lineStart = blankLine.parse({\n                  src: src\n                }, lineStart);\n                this.items.push(blankLine);\n              }\n\n              offset = cst_Node["a" /* default */].endOfIndent(src, lineStart);\n\n              if (offset <= lineStart + indent) {\n                char = src[offset];\n\n                if (offset < lineStart + indent || char !== \']\' && char !== \'}\') {\n                  var msg = \'Insufficient indentation in flow collection\';\n                  this.error = new dist_errors["c" /* YAMLSemanticError */](this, msg);\n                }\n              }\n            }\n            break;\n\n          case \',\':\n            {\n              this.items.push({\n                char: char,\n                offset: offset\n              });\n              offset += 1;\n            }\n            break;\n\n          case \'#\':\n            {\n              var comment = new Comment_Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.items.push(comment);\n            }\n            break;\n\n          case \'?\':\n          case \':\':\n            {\n              var next = src[offset + 1];\n\n              if (next === \'\\n\' || next === \'\\t\' || next === \' \' || next === \',\' || // in-flow : after JSON-like key does not need to be followed by whitespace\n              char === \':\' && this.prevNodeIsJsonLike()) {\n                this.items.push({\n                  char: char,\n                  offset: offset\n                });\n                offset += 1;\n                break;\n              }\n            }\n          // fallthrough\n\n          default:\n            {\n              var node = parseNode({\n                atLineStart: false,\n                inCollection: false,\n                inFlow: true,\n                indent: -1,\n                lineStart: lineStart,\n                parent: this\n              }, offset);\n\n              if (!node) {\n                // at next document start\n                this.valueRange = new Range["a" /* default */](start, offset);\n                return offset;\n              }\n\n              this.items.push(node);\n              offset = cst_Node["a" /* default */].normalizeOffset(src, node.range.end);\n            }\n        }\n\n        offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n        char = src[offset];\n      }\n\n      this.valueRange = new Range["a" /* default */](start, offset + 1);\n\n      if (char) {\n        this.items.push({\n          char: char,\n          offset: offset\n        });\n        offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset + 1);\n        offset = this.parseComment(offset);\n      }\n\n      return offset;\n    }\n  }, {\n    key: "setOrigRanges",\n    value: function setOrigRanges(cr, offset) {\n      offset = get_default()(getPrototypeOf_default()(FlowCollection.prototype), "setOrigRanges", this).call(this, cr, offset);\n      this.items.forEach(function (node) {\n        if (node instanceof cst_Node["a" /* default */]) {\n          offset = node.setOrigRanges(cr, offset);\n        } else if (cr.length === 0) {\n          node.origOffset = node.offset;\n        } else {\n          var i = offset;\n\n          while (i < cr.length) {\n            if (cr[i] > node.offset) break;else ++i;\n          }\n\n          node.origOffset = node.offset + i;\n          offset = i;\n        }\n      });\n      return offset;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      var src = this.context.src,\n          items = this.items,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var nodes = items.filter(function (item) {\n        return item instanceof cst_Node["a" /* default */];\n      });\n      var str = \'\';\n      var prevEnd = range.start;\n      nodes.forEach(function (node) {\n        var prefix = src.slice(prevEnd, node.range.start);\n        prevEnd = node.range.end;\n        str += prefix + String(node);\n\n        if (str[str.length - 1] === \'\\n\' && src[prevEnd - 1] !== \'\\n\' && src[prevEnd] === \'\\n\') {\n          // Comment range does not include the terminal newline, but its\n          // stringified value does. Without this fix, newlines at comment ends\n          // get duplicated.\n          prevEnd += 1;\n        }\n      });\n      str += src.slice(prevEnd, range.end);\n      return cst_Node["a" /* default */].addStringTerminator(src, range.end, str);\n    }\n  }]);\n\n  return FlowCollection;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/PlainValue.js\n\n\n\n\n\n\n\n\nvar PlainValue_PlainValue = /*#__PURE__*/function (_Node) {\n  inherits_default()(PlainValue, _Node);\n\n  function PlainValue() {\n    classCallCheck_default()(this, PlainValue);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(PlainValue).apply(this, arguments));\n  }\n\n  createClass_default()(PlainValue, [{\n    key: "parseBlockValue",\n    value: function parseBlockValue(start) {\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          inFlow = _this$context.inFlow,\n          src = _this$context.src;\n      var offset = start;\n      var valueEnd = start;\n\n      for (var ch = src[offset]; ch === \'\\n\'; ch = src[offset]) {\n        if (cst_Node["a" /* default */].atDocumentBoundary(src, offset + 1)) break;\n        var end = cst_Node["a" /* default */].endOfBlockIndent(src, indent, offset + 1);\n        if (end === null || src[end] === \'#\') break;\n\n        if (src[end] === \'\\n\') {\n          offset = end;\n        } else {\n          valueEnd = PlainValue.endOfLine(src, end, inFlow);\n          offset = valueEnd;\n        }\n      }\n\n      if (this.valueRange.isEmpty()) this.valueRange.start = start;\n      this.valueRange.end = valueEnd;\n      return valueEnd;\n    }\n    /**\n     * Parses a plain value from the source\n     *\n     * Accepted forms are:\n     * ```\n     * #comment\n     *\n     * first line\n     *\n     * first line #comment\n     *\n     * first line\n     * block\n     * lines\n     *\n     * #comment\n     * block\n     * lines\n     * ```\n     * where block lines are empty or have an indent level greater than `indent`.\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar, may be `\\n`\n     */\n\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var inFlow = context.inFlow,\n          src = context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      if (ch && ch !== \'#\' && ch !== \'\\n\') {\n        offset = PlainValue.endOfLine(src, start, inFlow);\n      }\n\n      this.valueRange = new Range["a" /* default */](start, offset);\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n\n      if (!this.hasComment || this.valueRange.isEmpty()) {\n        offset = this.parseBlockValue(offset);\n      }\n\n      return offset;\n    }\n  }, {\n    key: "strValue",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var src = this.context.src;\n      var ch = src[end - 1];\n\n      while (start < end && (ch === \'\\n\' || ch === \'\\t\' || ch === \' \')) {\n        ch = src[--end - 1];\n      }\n\n      ch = src[start];\n\n      while (start < end && (ch === \'\\n\' || ch === \'\\t\' || ch === \' \')) {\n        ch = src[++start];\n      }\n\n      var str = \'\';\n\n      for (var i = start; i < end; ++i) {\n        var _ch = src[i];\n\n        if (_ch === \'\\n\') {\n          var _Node$foldNewline = cst_Node["a" /* default */].foldNewline(src, i, -1),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset;\n\n          str += fold;\n          i = offset;\n        } else if (_ch === \' \' || _ch === \'\\t\') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (i < end && (next === \' \' || next === \'\\t\')) {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== \'\\n\') str += i > wsStart ? src.slice(wsStart, i + 1) : _ch;\n        } else {\n          str += _ch;\n        }\n      }\n\n      return str;\n    }\n  }], [{\n    key: "endOfLine",\n    value: function endOfLine(src, start, inFlow) {\n      var ch = src[start];\n      var offset = start;\n\n      while (ch && ch !== \'\\n\') {\n        if (inFlow && (ch === \'[\' || ch === \']\' || ch === \'{\' || ch === \'}\' || ch === \',\')) break;\n        var next = src[offset + 1];\n        if (ch === \':\' && (!next || next === \'\\n\' || next === \'\\t\' || next === \' \' || inFlow && next === \',\')) break;\n        if ((ch === \' \' || ch === \'\\t\') && next === \'#\') break;\n        offset += 1;\n        ch = next;\n      }\n\n      return offset;\n    }\n  }]);\n\n  return PlainValue;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/QuoteDouble.js\n\n\n\n\n\n\n\n\n\nvar QuoteDouble_QuoteDouble = /*#__PURE__*/function (_Node) {\n  inherits_default()(QuoteDouble, _Node);\n\n  function QuoteDouble() {\n    classCallCheck_default()(this, QuoteDouble);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(QuoteDouble).apply(this, arguments));\n  }\n\n  createClass_default()(QuoteDouble, [{\n    key: "parseCharCode",\n    value: function parseCharCode(offset, length, errors) {\n      var src = this.context.src;\n      var cc = src.substr(offset, length);\n      var ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n      var code = ok ? parseInt(cc, 16) : NaN;\n\n      if (isNaN(code)) {\n        errors.push(new dist_errors["d" /* YAMLSyntaxError */](this, "Invalid escape sequence ".concat(src.substr(offset - 2, length + 2))));\n        return src.substr(offset - 2, length + 2);\n      }\n\n      return String.fromCodePoint(code);\n    }\n    /**\n     * Parses a "double quoted" value from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n\n  }, {\n    key: "parse",\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = QuoteDouble.endOfQuote(src, start + 1);\n      this.valueRange = new Range["a" /* default */](start, offset);\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }, {\n    key: "strValue",\n\n    /**\n     * @returns {string | { str: string, errors: YAMLSyntaxError[] }}\n     */\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var errors = [];\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      if (src[end - 1] !== \'"\') errors.push(new dist_errors["d" /* YAMLSyntaxError */](this, \'Missing closing "quote\')); // Using String#replace is too painful with escaped newlines preceded by\n      // escaped backslashes; also, this should be faster.\n\n      var str = \'\';\n\n      for (var i = start + 1; i < end - 1; ++i) {\n        var ch = src[i];\n\n        if (ch === \'\\n\') {\n          if (cst_Node["a" /* default */].atDocumentBoundary(src, i + 1)) errors.push(new dist_errors["c" /* YAMLSemanticError */](this, \'Document boundary indicators are not allowed within string values\'));\n\n          var _Node$foldNewline = cst_Node["a" /* default */].foldNewline(src, i, indent),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset,\n              error = _Node$foldNewline.error;\n\n          str += fold;\n          i = offset;\n          if (error) errors.push(new dist_errors["c" /* YAMLSemanticError */](this, \'Multi-line double-quoted string needs to be sufficiently indented\'));\n        } else if (ch === \'\\\\\') {\n          i += 1;\n\n          switch (src[i]) {\n            case \'0\':\n              str += \'\\0\';\n              break;\n            // null character\n\n            case \'a\':\n              str += \'\\x07\';\n              break;\n            // bell character\n\n            case \'b\':\n              str += \'\\b\';\n              break;\n            // backspace\n\n            case \'e\':\n              str += \'\\x1b\';\n              break;\n            // escape character\n\n            case \'f\':\n              str += \'\\f\';\n              break;\n            // form feed\n\n            case \'n\':\n              str += \'\\n\';\n              break;\n            // line feed\n\n            case \'r\':\n              str += \'\\r\';\n              break;\n            // carriage return\n\n            case \'t\':\n              str += \'\\t\';\n              break;\n            // horizontal tab\n\n            case \'v\':\n              str += \'\\v\';\n              break;\n            // vertical tab\n\n            case \'N\':\n              str += "\\x85";\n              break;\n            // Unicode next line\n\n            case \'_\':\n              str += "\\xA0";\n              break;\n            // Unicode non-breaking space\n\n            case \'L\':\n              str += "\\u2028";\n              break;\n            // Unicode line separator\n\n            case \'P\':\n              str += "\\u2029";\n              break;\n            // Unicode paragraph separator\n\n            case \' \':\n              str += \' \';\n              break;\n\n            case \'"\':\n              str += \'"\';\n              break;\n\n            case \'/\':\n              str += \'/\';\n              break;\n\n            case \'\\\\\':\n              str += \'\\\\\';\n              break;\n\n            case \'\\t\':\n              str += \'\\t\';\n              break;\n\n            case \'x\':\n              str += this.parseCharCode(i + 1, 2, errors);\n              i += 2;\n              break;\n\n            case \'u\':\n              str += this.parseCharCode(i + 1, 4, errors);\n              i += 4;\n              break;\n\n            case \'U\':\n              str += this.parseCharCode(i + 1, 8, errors);\n              i += 8;\n              break;\n\n            case \'\\n\':\n              // skip escaped newlines, but still trim the following line\n              while (src[i + 1] === \' \' || src[i + 1] === \'\\t\') {\n                i += 1;\n              }\n\n              break;\n\n            default:\n              errors.push(new dist_errors["d" /* YAMLSyntaxError */](this, "Invalid escape sequence ".concat(src.substr(i - 1, 2))));\n              str += \'\\\\\' + src[i];\n          }\n        } else if (ch === \' \' || ch === \'\\t\') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (next === \' \' || next === \'\\t\') {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== \'\\n\') str += i > wsStart ? src.slice(wsStart, i + 1) : ch;\n        } else {\n          str += ch;\n        }\n      }\n\n      return errors.length > 0 ? {\n        errors: errors,\n        str: str\n      } : str;\n    }\n  }], [{\n    key: "endOfQuote",\n    value: function endOfQuote(src, offset) {\n      var ch = src[offset];\n\n      while (ch && ch !== \'"\') {\n        offset += ch === \'\\\\\' ? 2 : 1;\n        ch = src[offset];\n      }\n\n      return offset + 1;\n    }\n  }]);\n\n  return QuoteDouble;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/QuoteSingle.js\n\n\n\n\n\n\n\n\n\nvar QuoteSingle_QuoteSingle = /*#__PURE__*/function (_Node) {\n  inherits_default()(QuoteSingle, _Node);\n\n  function QuoteSingle() {\n    classCallCheck_default()(this, QuoteSingle);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(QuoteSingle).apply(this, arguments));\n  }\n\n  createClass_default()(QuoteSingle, [{\n    key: "parse",\n\n    /**\n     * Parses a \'single quoted\' value from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = QuoteSingle.endOfQuote(src, start + 1);\n      this.valueRange = new Range["a" /* default */](start, offset);\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }, {\n    key: "strValue",\n\n    /**\n     * @returns {string | { str: string, errors: YAMLSyntaxError[] }}\n     */\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var errors = [];\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      if (src[end - 1] !== "\'") errors.push(new dist_errors["d" /* YAMLSyntaxError */](this, "Missing closing \'quote"));\n      var str = \'\';\n\n      for (var i = start + 1; i < end - 1; ++i) {\n        var ch = src[i];\n\n        if (ch === \'\\n\') {\n          if (cst_Node["a" /* default */].atDocumentBoundary(src, i + 1)) errors.push(new dist_errors["c" /* YAMLSemanticError */](this, \'Document boundary indicators are not allowed within string values\'));\n\n          var _Node$foldNewline = cst_Node["a" /* default */].foldNewline(src, i, indent),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset,\n              error = _Node$foldNewline.error;\n\n          str += fold;\n          i = offset;\n          if (error) errors.push(new dist_errors["c" /* YAMLSemanticError */](this, \'Multi-line single-quoted string needs to be sufficiently indented\'));\n        } else if (ch === "\'") {\n          str += ch;\n          i += 1;\n          if (src[i] !== "\'") errors.push(new dist_errors["d" /* YAMLSyntaxError */](this, \'Unescaped single quote? This should not happen.\'));\n        } else if (ch === \' \' || ch === \'\\t\') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (next === \' \' || next === \'\\t\') {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== \'\\n\') str += i > wsStart ? src.slice(wsStart, i + 1) : ch;\n        } else {\n          str += ch;\n        }\n      }\n\n      return errors.length > 0 ? {\n        errors: errors,\n        str: str\n      } : str;\n    }\n  }], [{\n    key: "endOfQuote",\n    value: function endOfQuote(src, offset) {\n      var ch = src[offset];\n\n      while (ch) {\n        if (ch === "\'") {\n          if (src[offset + 1] !== "\'") break;\n          ch = src[offset += 2];\n        } else {\n          ch = src[offset += 1];\n        }\n      }\n\n      return offset + 1;\n    }\n  }]);\n\n  return QuoteSingle;\n}(cst_Node["a" /* default */]);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/ParseContext.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createNewNode(type, props) {\n  switch (type) {\n    case constants["b" /* Type */].ALIAS:\n      return new Alias_Alias(type, props);\n\n    case constants["b" /* Type */].BLOCK_FOLDED:\n    case constants["b" /* Type */].BLOCK_LITERAL:\n      return new BlockValue_BlockValue(type, props);\n\n    case constants["b" /* Type */].FLOW_MAP:\n    case constants["b" /* Type */].FLOW_SEQ:\n      return new FlowCollection_FlowCollection(type, props);\n\n    case constants["b" /* Type */].MAP_KEY:\n    case constants["b" /* Type */].MAP_VALUE:\n    case constants["b" /* Type */].SEQ_ITEM:\n      return new CollectionItem_CollectionItem(type, props);\n\n    case constants["b" /* Type */].COMMENT:\n    case constants["b" /* Type */].PLAIN:\n      return new PlainValue_PlainValue(type, props);\n\n    case constants["b" /* Type */].QUOTE_DOUBLE:\n      return new QuoteDouble_QuoteDouble(type, props);\n\n    case constants["b" /* Type */].QUOTE_SINGLE:\n      return new QuoteSingle_QuoteSingle(type, props);\n\n    /* istanbul ignore next */\n\n    default:\n      return null;\n    // should never happen\n  }\n}\n/**\n * @param {boolean} atLineStart - Node starts at beginning of line\n * @param {boolean} inFlow - true if currently in a flow context\n * @param {boolean} inCollection - true if currently in a collection context\n * @param {number} indent - Current level of indentation\n * @param {number} lineStart - Start of the current line\n * @param {Node} parent - The parent of the node\n * @param {string} src - Source of the YAML document\n */\n\n\nvar ParseContext_ParseContext = /*#__PURE__*/function () {\n  createClass_default()(ParseContext, null, [{\n    key: "parseType",\n    value: function parseType(src, offset, inFlow) {\n      switch (src[offset]) {\n        case \'*\':\n          return constants["b" /* Type */].ALIAS;\n\n        case \'>\':\n          return constants["b" /* Type */].BLOCK_FOLDED;\n\n        case \'|\':\n          return constants["b" /* Type */].BLOCK_LITERAL;\n\n        case \'{\':\n          return constants["b" /* Type */].FLOW_MAP;\n\n        case \'[\':\n          return constants["b" /* Type */].FLOW_SEQ;\n\n        case \'?\':\n          return !inFlow && cst_Node["a" /* default */].atBlank(src, offset + 1, true) ? constants["b" /* Type */].MAP_KEY : constants["b" /* Type */].PLAIN;\n\n        case \':\':\n          return !inFlow && cst_Node["a" /* default */].atBlank(src, offset + 1, true) ? constants["b" /* Type */].MAP_VALUE : constants["b" /* Type */].PLAIN;\n\n        case \'-\':\n          return !inFlow && cst_Node["a" /* default */].atBlank(src, offset + 1, true) ? constants["b" /* Type */].SEQ_ITEM : constants["b" /* Type */].PLAIN;\n\n        case \'"\':\n          return constants["b" /* Type */].QUOTE_DOUBLE;\n\n        case "\'":\n          return constants["b" /* Type */].QUOTE_SINGLE;\n\n        default:\n          return constants["b" /* Type */].PLAIN;\n      }\n    }\n  }]);\n\n  function ParseContext() {\n    var _this = this;\n\n    var orig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        atLineStart = _ref.atLineStart,\n        inCollection = _ref.inCollection,\n        inFlow = _ref.inFlow,\n        indent = _ref.indent,\n        lineStart = _ref.lineStart,\n        parent = _ref.parent;\n\n    classCallCheck_default()(this, ParseContext);\n\n    defineProperty_default()(this, "parseNode", function (overlay, start) {\n      if (cst_Node["a" /* default */].atDocumentBoundary(_this.src, start)) return null;\n      var context = new ParseContext(_this, overlay);\n\n      var _context$parseProps = context.parseProps(start),\n          props = _context$parseProps.props,\n          type = _context$parseProps.type,\n          valueStart = _context$parseProps.valueStart;\n\n      var node = createNewNode(type, props);\n      var offset = node.parse(context, valueStart);\n      node.range = new Range["a" /* default */](start, offset);\n      /* istanbul ignore if */\n\n      if (offset <= start) {\n        // This should never happen, but if it does, let\'s make sure to at least\n        // step one character forward to avoid a busy loop.\n        node.error = new Error("Node#parse consumed no characters");\n        node.error.parseEnd = offset;\n        node.error.source = node;\n        node.range.end = start + 1;\n      }\n\n      if (context.nodeStartsCollection(node)) {\n        if (!node.error && !context.atLineStart && context.parent.type === constants["b" /* Type */].DOCUMENT) {\n          node.error = new dist_errors["d" /* YAMLSyntaxError */](node, \'Block collection must not have preceding content here (e.g. directives-end indicator)\');\n        }\n\n        var collection = new Collection_Collection(node);\n        offset = collection.parse(new ParseContext(context), offset);\n        collection.range = new Range["a" /* default */](start, offset);\n        return collection;\n      }\n\n      return node;\n    });\n\n    this.atLineStart = atLineStart != null ? atLineStart : orig.atLineStart || false;\n    this.inCollection = inCollection != null ? inCollection : orig.inCollection || false;\n    this.inFlow = inFlow != null ? inFlow : orig.inFlow || false;\n    this.indent = indent != null ? indent : orig.indent;\n    this.lineStart = lineStart != null ? lineStart : orig.lineStart;\n    this.parent = parent != null ? parent : orig.parent || {};\n    this.root = orig.root;\n    this.src = orig.src;\n  }\n\n  createClass_default()(ParseContext, [{\n    key: "nodeStartsCollection",\n    value: function nodeStartsCollection(node) {\n      var inCollection = this.inCollection,\n          inFlow = this.inFlow,\n          src = this.src;\n      if (inCollection || inFlow) return false;\n      if (node instanceof CollectionItem_CollectionItem) return true; // check for implicit key\n\n      var offset = node.range.end;\n      if (src[offset] === \'\\n\' || src[offset - 1] === \'\\n\') return false;\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      return src[offset] === \':\';\n    } // Anchor and tag are before type, which determines the node implementation\n    // class; hence this intermediate step.\n\n  }, {\n    key: "parseProps",\n    value: function parseProps(offset) {\n      var inFlow = this.inFlow,\n          parent = this.parent,\n          src = this.src;\n      var props = [];\n      var lineHasProps = false;\n      offset = cst_Node["a" /* default */].endOfWhiteSpace(src, offset);\n      var ch = src[offset];\n\n      while (ch === constants["a" /* Char */].ANCHOR || ch === constants["a" /* Char */].COMMENT || ch === constants["a" /* Char */].TAG || ch === \'\\n\') {\n        if (ch === \'\\n\') {\n          var lineStart = offset + 1;\n          var inEnd = cst_Node["a" /* default */].endOfIndent(src, lineStart);\n          var indentDiff = inEnd - (lineStart + this.indent);\n          var noIndicatorAsIndent = parent.type === constants["b" /* Type */].SEQ_ITEM && parent.context.atLineStart;\n          if (!cst_Node["a" /* default */].nextNodeIsIndented(src[inEnd], indentDiff, !noIndicatorAsIndent)) break;\n          this.atLineStart = true;\n          this.lineStart = lineStart;\n          lineHasProps = false;\n          offset = inEnd;\n        } else if (ch === constants["a" /* Char */].COMMENT) {\n          var end = cst_Node["a" /* default */].endOfLine(src, offset + 1);\n          props.push(new Range["a" /* default */](offset, end));\n          offset = end;\n        } else {\n          var _end = cst_Node["a" /* default */].endOfIdentifier(src, offset + 1);\n\n          if (ch === constants["a" /* Char */].TAG && src[_end] === \',\' && /^[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+,\\d\\d\\d\\d(-\\d\\d){0,2}\\/\\S/.test(src.slice(offset + 1, _end + 13))) {\n            // Let\'s presume we\'re dealing with a YAML 1.0 domain tag here, rather\n            // than an empty but \'foo.bar\' private-tagged node in a flow collection\n            // followed without whitespace by a plain string starting with a year\n            // or date divided by something.\n            _end = cst_Node["a" /* default */].endOfIdentifier(src, _end + 5);\n          }\n\n          props.push(new Range["a" /* default */](offset, _end));\n          lineHasProps = true;\n          offset = cst_Node["a" /* default */].endOfWhiteSpace(src, _end);\n        }\n\n        ch = src[offset];\n      } // \'- &a : b\' has an anchor on an empty node\n\n\n      if (lineHasProps && ch === \':\' && cst_Node["a" /* default */].atBlank(src, offset + 1, true)) offset -= 1;\n      var type = ParseContext.parseType(src, offset, inFlow);\n      return {\n        props: props,\n        type: type,\n        valueStart: offset\n      };\n    }\n    /**\n     * Parses a node from the source\n     * @param {ParseContext} overlay\n     * @param {number} start - Index of first non-whitespace character for the node\n     * @returns {?Node} - null if at a document boundary\n     */\n\n  }]);\n\n  return ParseContext;\n}();\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/cst/parse.js\n// Published as \'yaml/parse-cst\'\n\n\nfunction parse_parse(src) {\n  var cr = [];\n\n  if (src.indexOf(\'\\r\') !== -1) {\n    src = src.replace(/\\r\\n?/g, function (match, offset) {\n      if (match.length > 1) cr.push(offset);\n      return \'\\n\';\n    });\n  }\n\n  var documents = [];\n  var offset = 0;\n\n  do {\n    var doc = new Document_Document();\n    var context = new ParseContext_ParseContext({\n      src: src\n    });\n    offset = doc.parse(context, offset);\n    documents.push(doc);\n  } while (offset < src.length);\n\n  documents.setOrigRanges = function () {\n    if (cr.length === 0) return false;\n\n    for (var i = 1; i < cr.length; ++i) {\n      cr[i] -= i;\n    }\n\n    var crOffset = 0;\n\n    for (var _i = 0; _i < documents.length; ++_i) {\n      crOffset = documents[_i].setOrigRanges(cr, crOffset);\n    }\n\n    cr.splice(0, cr.length);\n    return true;\n  };\n\n  documents.toString = function () {\n    return documents.join(\'...\\n\');\n  };\n\n  return documents;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\nvar slicedToArray = __webpack_require__("./node_modules/@babel/runtime/helpers/slicedToArray.js");\nvar slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/addComment.js\nvar addComment = __webpack_require__("./node_modules/yaml/browser/dist/addComment.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/toJSON.js\nfunction toJSON_toJSON(value, arg, ctx) {\n  if (Array.isArray(value)) return value.map(function (v, i) {\n    return toJSON_toJSON(v, String(i), ctx);\n  });\n\n  if (value && typeof value.toJSON === \'function\') {\n    var anchor = ctx && ctx.anchors && ctx.anchors.find(function (a) {\n      return a.node === value;\n    });\n    if (anchor) ctx.onCreate = function (res) {\n      anchor.res = res;\n      delete ctx.onCreate;\n    };\n    var res = value.toJSON(arg, ctx);\n    if (anchor && ctx.onCreate) ctx.onCreate(res);\n    return res;\n  }\n\n  return value;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toArray.js\nvar toArray = __webpack_require__("./node_modules/@babel/runtime/helpers/toArray.js");\nvar toArray_default = /*#__PURE__*/__webpack_require__.n(toArray);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__("./node_modules/@babel/runtime/helpers/assertThisInitialized.js");\nvar assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\nvar helpers_typeof = __webpack_require__("./node_modules/@babel/runtime/helpers/typeof.js");\nvar typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Node.js\n\n\nvar Node_Node = function Node() {\n  classCallCheck_default()(this, Node);\n};\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Scalar.js\n\n\n\n\n\n// Published as \'yaml/scalar\'\n\n\n\nvar Scalar_Scalar = /*#__PURE__*/function (_Node) {\n  inherits_default()(Scalar, _Node);\n\n  function Scalar(value) {\n    var _this;\n\n    classCallCheck_default()(this, Scalar);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Scalar).call(this));\n    _this.value = value;\n    return _this;\n  }\n\n  createClass_default()(Scalar, [{\n    key: "toJSON",\n    value: function toJSON(arg, ctx) {\n      return ctx && ctx.keep ? this.value : toJSON_toJSON(this.value, arg, ctx);\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return String(this.value);\n    }\n  }]);\n\n  return Scalar;\n}(Node_Node);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Pair.js\n\n\n\n\n\n\n// Published as \'yaml/pair\'\n\n\n\n\n\n\n\nvar Pair_stringifyKey = function stringifyKey(key, jsKey, ctx) {\n  if (jsKey === null) return \'\';\n  if (typeof_default()(jsKey) !== \'object\') return String(jsKey);\n  if (key instanceof Node_Node && ctx && ctx.doc) return key.toString({\n    anchors: {},\n    doc: ctx.doc,\n    indent: \'\',\n    inFlow: true,\n    inStringifyKey: true\n  });\n  return JSON.stringify(jsKey);\n};\n\nvar Pair_Pair = /*#__PURE__*/function (_Node) {\n  inherits_default()(Pair, _Node);\n\n  function Pair(key) {\n    var _this;\n\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    classCallCheck_default()(this, Pair);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Pair).call(this));\n    _this.key = key;\n    _this.value = value;\n    _this.type = \'PAIR\';\n    return _this;\n  }\n\n  createClass_default()(Pair, [{\n    key: "addToJSMap",\n    value: function addToJSMap(ctx, map) {\n      var key = toJSON_toJSON(this.key, \'\', ctx);\n\n      if (map instanceof Map) {\n        var value = toJSON_toJSON(this.value, key, ctx);\n        map.set(key, value);\n      } else if (map instanceof Set) {\n        map.add(key);\n      } else {\n        var stringKey = Pair_stringifyKey(this.key, key, ctx);\n        map[stringKey] = toJSON_toJSON(this.value, stringKey, ctx);\n      }\n\n      return map;\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON(_, ctx) {\n      var pair = ctx && ctx.mapAsMap ? new Map() : {};\n      return this.addToJSMap(ctx, pair);\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx || !ctx.doc) return JSON.stringify(this);\n      var simpleKeys = ctx.doc.options.simpleKeys;\n      var key = this.key,\n          value = this.value;\n      var keyComment = key instanceof Node_Node && key.comment;\n\n      if (simpleKeys) {\n        if (keyComment) {\n          throw new Error(\'With simple keys, key nodes cannot have comments\');\n        }\n\n        if (key instanceof schema_Collection_Collection) {\n          var msg = \'With simple keys, collection cannot be used as a key value\';\n          throw new Error(msg);\n        }\n      }\n\n      var explicitKey = !simpleKeys && (!key || keyComment || key instanceof schema_Collection_Collection || key.type === constants["b" /* Type */].BLOCK_FOLDED || key.type === constants["b" /* Type */].BLOCK_LITERAL);\n      var _ctx = ctx,\n          doc = _ctx.doc,\n          indent = _ctx.indent;\n      ctx = Object.assign({}, ctx, {\n        implicitKey: !explicitKey,\n        indent: indent + \'  \'\n      });\n      var chompKeep = false;\n      var str = doc.schema.stringify(key, ctx, function () {\n        return keyComment = null;\n      }, function () {\n        return chompKeep = true;\n      });\n      str = Object(addComment["b" /* default */])(str, ctx.indent, keyComment);\n\n      if (ctx.allNullValues && !simpleKeys) {\n        if (this.comment) {\n          str = Object(addComment["b" /* default */])(str, ctx.indent, this.comment);\n          if (onComment) onComment();\n        } else if (chompKeep && !keyComment && onChompKeep) onChompKeep();\n\n        return ctx.inFlow ? str : "? ".concat(str);\n      }\n\n      str = explicitKey ? "? ".concat(str, "\\n").concat(indent, ":") : "".concat(str, ":");\n\n      if (this.comment) {\n        // expected (but not strictly required) to be a single-line comment\n        str = Object(addComment["b" /* default */])(str, ctx.indent, this.comment);\n        if (onComment) onComment();\n      }\n\n      var vcb = \'\';\n      var valueComment = null;\n\n      if (value instanceof Node_Node) {\n        if (value.spaceBefore) vcb = \'\\n\';\n\n        if (value.commentBefore) {\n          var cs = value.commentBefore.replace(/^/gm, "".concat(ctx.indent, "#"));\n          vcb += "\\n".concat(cs);\n        }\n\n        valueComment = value.comment;\n      } else if (value && typeof_default()(value) === \'object\') {\n        value = doc.schema.createNode(value, true);\n      }\n\n      ctx.implicitKey = false;\n      if (!explicitKey && !this.comment && value instanceof Scalar_Scalar) ctx.indentAtStart = str.length + 1;\n      chompKeep = false;\n      var valueStr = doc.schema.stringify(value, ctx, function () {\n        return valueComment = null;\n      }, function () {\n        return chompKeep = true;\n      });\n      var ws = \' \';\n\n      if (vcb || this.comment) {\n        ws = "".concat(vcb, "\\n").concat(ctx.indent);\n      } else if (!explicitKey && value instanceof schema_Collection_Collection) {\n        var flow = valueStr[0] === \'[\' || valueStr[0] === \'{\';\n        if (!flow || valueStr.includes(\'\\n\')) ws = "\\n".concat(ctx.indent);\n      }\n\n      if (chompKeep && !valueComment && onChompKeep) onChompKeep();\n      return Object(addComment["b" /* default */])(str + ws + valueStr, ctx.indent, valueComment);\n    }\n  }, {\n    key: "commentBefore",\n    get: function get() {\n      return this.key && this.key.commentBefore;\n    },\n    set: function set(cb) {\n      if (this.key == null) this.key = new Scalar_Scalar(null);\n      this.key.commentBefore = cb;\n    }\n  }]);\n\n  return Pair;\n}(Node_Node);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Collection.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction collectionFromPath(schema, path, value) {\n  var v = value;\n\n  for (var i = path.length - 1; i >= 0; --i) {\n    var k = path[i];\n    var o = Number.isInteger(k) && k >= 0 ? [] : {};\n    o[k] = v;\n    v = o;\n  }\n\n  return schema.createNode(v, false);\n} // null, undefined, or an empty non-string iterable (e.g. [])\n\n\nvar Collection_isEmptyPath = function isEmptyPath(path) {\n  return path == null || typeof_default()(path) === \'object\' && path[Symbol.iterator]().next().done;\n};\n\nvar schema_Collection_Collection = /*#__PURE__*/function (_Node) {\n  inherits_default()(Collection, _Node);\n\n  function Collection(schema) {\n    var _this;\n\n    classCallCheck_default()(this, Collection);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Collection).call(this));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "items", []);\n\n    _this.schema = schema;\n    return _this;\n  }\n\n  createClass_default()(Collection, [{\n    key: "addIn",\n    value: function addIn(path, value) {\n      if (Collection_isEmptyPath(path)) this.add(value);else {\n        var _path = toArray_default()(path),\n            key = _path[0],\n            rest = _path.slice(1);\n\n        var node = this.get(key, true);\n        if (node instanceof Collection) node.addIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));\n      }\n    }\n  }, {\n    key: "deleteIn",\n    value: function deleteIn(_ref) {\n      var _ref2 = toArray_default()(_ref),\n          key = _ref2[0],\n          rest = _ref2.slice(1);\n\n      if (rest.length === 0) return this.delete(key);\n      var node = this.get(key, true);\n      if (node instanceof Collection) return node.deleteIn(rest);else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));\n    }\n  }, {\n    key: "getIn",\n    value: function getIn(_ref3, keepScalar) {\n      var _ref4 = toArray_default()(_ref3),\n          key = _ref4[0],\n          rest = _ref4.slice(1);\n\n      var node = this.get(key, true);\n      if (rest.length === 0) return !keepScalar && node instanceof Scalar_Scalar ? node.value : node;else return node instanceof Collection ? node.getIn(rest, keepScalar) : undefined;\n    }\n  }, {\n    key: "hasAllNullValues",\n    value: function hasAllNullValues() {\n      return this.items.every(function (node) {\n        if (!(node instanceof Pair_Pair)) return false;\n        var n = node.value;\n        return n == null || n instanceof Scalar_Scalar && n.value == null && !n.commentBefore && !n.comment && !n.tag;\n      });\n    }\n  }, {\n    key: "hasIn",\n    value: function hasIn(_ref5) {\n      var _ref6 = toArray_default()(_ref5),\n          key = _ref6[0],\n          rest = _ref6.slice(1);\n\n      if (rest.length === 0) return this.has(key);\n      var node = this.get(key, true);\n      return node instanceof Collection ? node.hasIn(rest) : false;\n    }\n  }, {\n    key: "setIn",\n    value: function setIn(_ref7, value) {\n      var _ref8 = toArray_default()(_ref7),\n          key = _ref8[0],\n          rest = _ref8.slice(1);\n\n      if (rest.length === 0) {\n        this.set(key, value);\n      } else {\n        var node = this.get(key, true);\n        if (node instanceof Collection) node.setIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error("Expected YAML collection at ".concat(key, ". Remaining path: ").concat(rest));\n      }\n    } // overridden in implementations\n\n    /* istanbul ignore next */\n\n  }, {\n    key: "toJSON",\n    value: function toJSON() {\n      return null;\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, _ref9, onComment, onChompKeep) {\n      var _this2 = this;\n\n      var blockItem = _ref9.blockItem,\n          flowChars = _ref9.flowChars,\n          isMap = _ref9.isMap,\n          itemIndent = _ref9.itemIndent;\n      var _ctx = ctx,\n          doc = _ctx.doc,\n          indent = _ctx.indent;\n      var inFlow = this.type && this.type.substr(0, 4) === \'FLOW\' || ctx.inFlow;\n      if (inFlow) itemIndent += \'  \';\n      var allNullValues = isMap && this.hasAllNullValues();\n      ctx = Object.assign({}, ctx, {\n        allNullValues: allNullValues,\n        indent: itemIndent,\n        inFlow: inFlow,\n        type: null\n      });\n      var chompKeep = false;\n      var hasItemWithNewLine = false;\n      var nodes = this.items.reduce(function (nodes, item, i) {\n        var comment;\n\n        if (item) {\n          if (!chompKeep && item.spaceBefore) nodes.push({\n            type: \'comment\',\n            str: \'\'\n          });\n          if (item.commentBefore) item.commentBefore.match(/^.*$/gm).forEach(function (line) {\n            nodes.push({\n              type: \'comment\',\n              str: "#".concat(line)\n            });\n          });\n          if (item.comment) comment = item.comment;\n          if (inFlow && (!chompKeep && item.spaceBefore || item.commentBefore || item.comment || item.key && (item.key.commentBefore || item.key.comment) || item.value && (item.value.commentBefore || item.value.comment))) hasItemWithNewLine = true;\n        }\n\n        chompKeep = false;\n        var str = doc.schema.stringify(item, ctx, function () {\n          return comment = null;\n        }, function () {\n          return chompKeep = true;\n        });\n        if (inFlow && !hasItemWithNewLine && str.includes(\'\\n\')) hasItemWithNewLine = true;\n        if (inFlow && i < _this2.items.length - 1) str += \',\';\n        str = Object(addComment["b" /* default */])(str, itemIndent, comment);\n        if (chompKeep && (comment || inFlow)) chompKeep = false;\n        nodes.push({\n          type: \'item\',\n          str: str\n        });\n        return nodes;\n      }, []);\n      var str;\n\n      if (nodes.length === 0) {\n        str = flowChars.start + flowChars.end;\n      } else if (inFlow) {\n        var start = flowChars.start,\n            end = flowChars.end;\n        var strings = nodes.map(function (n) {\n          return n.str;\n        });\n\n        if (hasItemWithNewLine || strings.reduce(function (sum, str) {\n          return sum + str.length + 2;\n        }, 2) > Collection.maxFlowStringSingleLineLength) {\n          str = start;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = strings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var s = _step.value;\n              str += s ? "\\n  ".concat(indent).concat(s) : \'\\n\';\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          str += "\\n".concat(indent).concat(end);\n        } else {\n          str = "".concat(start, " ").concat(strings.join(\' \'), " ").concat(end);\n        }\n      } else {\n        var _strings = nodes.map(blockItem);\n\n        str = _strings.shift();\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _strings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _s = _step2.value;\n            str += _s ? "\\n".concat(indent).concat(_s) : \'\\n\';\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      if (this.comment) {\n        str += \'\\n\' + this.comment.replace(/^/gm, "".concat(indent, "#"));\n        if (onComment) onComment();\n      } else if (chompKeep && onChompKeep) onChompKeep();\n\n      return str;\n    }\n  }]);\n\n  return Collection;\n}(Node_Node);\n\ndefineProperty_default()(schema_Collection_Collection, "maxFlowStringSingleLineLength", 60);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Alias.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Alias_getAliasCount = function getAliasCount(node, anchors) {\n  if (node instanceof schema_Alias_Alias) {\n    var anchor = anchors.find(function (a) {\n      return a.node === node.source;\n    });\n    return anchor.count * anchor.aliasCount;\n  } else if (node instanceof schema_Collection_Collection) {\n    var count = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = node.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        var c = getAliasCount(item, anchors);\n        if (c > count) count = c;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return count;\n  } else if (node instanceof Pair_Pair) {\n    var kc = getAliasCount(node.key, anchors);\n    var vc = getAliasCount(node.value, anchors);\n    return Math.max(kc, vc);\n  }\n\n  return 1;\n};\n\nvar schema_Alias_Alias = /*#__PURE__*/function (_Node) {\n  inherits_default()(Alias, _Node);\n\n  createClass_default()(Alias, null, [{\n    key: "stringify",\n    value: function stringify(_ref, _ref2) {\n      var range = _ref.range,\n          source = _ref.source;\n      var anchors = _ref2.anchors,\n          doc = _ref2.doc,\n          implicitKey = _ref2.implicitKey,\n          inStringifyKey = _ref2.inStringifyKey;\n      var anchor = Object.keys(anchors).find(function (a) {\n        return anchors[a] === source;\n      });\n      if (!anchor && inStringifyKey) anchor = doc.anchors.getName(source) || doc.anchors.newName();\n      if (anchor) return "*".concat(anchor).concat(implicitKey ? \' \' : \'\');\n      var msg = doc.anchors.getName(source) ? \'Alias node must be after source node\' : \'Source node not found for alias node\';\n      throw new Error("".concat(msg, " [").concat(range, "]"));\n    }\n  }]);\n\n  function Alias(source) {\n    var _this;\n\n    classCallCheck_default()(this, Alias);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Alias).call(this));\n    _this.source = source;\n    _this.type = constants["b" /* Type */].ALIAS;\n    return _this;\n  }\n\n  createClass_default()(Alias, [{\n    key: "toJSON",\n    value: function toJSON(arg, ctx) {\n      var _this2 = this;\n\n      if (!ctx) return toJSON_toJSON(this.source, arg, ctx);\n      var anchors = ctx.anchors,\n          maxAliasCount = ctx.maxAliasCount;\n      var anchor = anchors.find(function (a) {\n        return a.node === _this2.source;\n      });\n      /* istanbul ignore if */\n\n      if (!anchor || anchor.res === undefined) {\n        var msg = \'This should not happen: Alias anchor was not resolved?\';\n        if (this.cstNode) throw new dist_errors["b" /* YAMLReferenceError */](this.cstNode, msg);else throw new ReferenceError(msg);\n      }\n\n      if (maxAliasCount >= 0) {\n        anchor.count += 1;\n        if (anchor.aliasCount === 0) anchor.aliasCount = Alias_getAliasCount(this.source, anchors);\n\n        if (anchor.count * anchor.aliasCount > maxAliasCount) {\n          var _msg = \'Excessive alias count indicates a resource exhaustion attack\';\n          if (this.cstNode) throw new dist_errors["b" /* YAMLReferenceError */](this.cstNode, _msg);else throw new ReferenceError(_msg);\n        }\n      }\n\n      return anchor.res;\n    } // Only called when stringifying an alias mapping key while constructing\n    // Object output.\n\n  }, {\n    key: "toString",\n    value: function toString(ctx) {\n      return Alias.stringify(this, ctx);\n    }\n  }, {\n    key: "tag",\n    set: function set(t) {\n      throw new Error(\'Alias nodes cannot have tags\');\n    }\n  }]);\n\n  return Alias;\n}(Node_Node);\n\ndefineProperty_default()(schema_Alias_Alias, "default", true);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Map.js\n\n\n\n\n\n\n\n\n\nfunction findPair(items, key) {\n  var k = key instanceof Scalar_Scalar ? key.value : key;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var it = _step.value;\n\n      if (it instanceof Pair_Pair) {\n        if (it.key === key || it.key === k) return it;\n        if (it.key && it.key.value === k) return it;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nvar Map_YAMLMap = /*#__PURE__*/function (_Collection) {\n  inherits_default()(YAMLMap, _Collection);\n\n  function YAMLMap() {\n    classCallCheck_default()(this, YAMLMap);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(YAMLMap).apply(this, arguments));\n  }\n\n  createClass_default()(YAMLMap, [{\n    key: "add",\n    value: function add(pair, overwrite) {\n      if (!pair) pair = new Pair_Pair(pair);else if (!(pair instanceof Pair_Pair)) pair = new Pair_Pair(pair.key || pair, pair.value);\n      var prev = findPair(this.items, pair.key);\n      var sortEntries = this.schema && this.schema.sortMapEntries;\n\n      if (prev) {\n        if (overwrite) prev.value = pair.value;else throw new Error("Key ".concat(pair.key, " already set"));\n      } else if (sortEntries) {\n        var i = this.items.findIndex(function (item) {\n          return sortEntries(pair, item) < 0;\n        });\n        if (i === -1) this.items.push(pair);else this.items.splice(i, 0, pair);\n      } else {\n        this.items.push(pair);\n      }\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      var it = findPair(this.items, key);\n      if (!it) return false;\n      var del = this.items.splice(this.items.indexOf(it), 1);\n      return del.length > 0;\n    }\n  }, {\n    key: "get",\n    value: function get(key, keepScalar) {\n      var it = findPair(this.items, key);\n      var node = it && it.value;\n      return !keepScalar && node instanceof Scalar_Scalar ? node.value : node;\n    }\n  }, {\n    key: "has",\n    value: function has(key) {\n      return !!findPair(this.items, key);\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      this.add(new Pair_Pair(key, value), true);\n    }\n    /**\n     * @param {*} arg ignored\n     * @param {*} ctx Conversion context, originally set in Document#toJSON()\n     * @param {Class} Type If set, forces the returned collection type\n     * @returns {*} Instance of Type, Map, or Object\n     */\n\n  }, {\n    key: "toJSON",\n    value: function toJSON(_, ctx, Type) {\n      var map = Type ? new Type() : ctx && ctx.mapAsMap ? new Map() : {};\n      if (ctx && ctx.onCreate) ctx.onCreate(map);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n          item.addToJSMap(ctx, map);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return map;\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.items[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n          if (!(item instanceof Pair_Pair)) throw new Error("Map items must all be pairs; found ".concat(JSON.stringify(item), " instead"));\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return get_default()(getPrototypeOf_default()(YAMLMap.prototype), "toString", this).call(this, ctx, {\n        blockItem: function blockItem(n) {\n          return n.str;\n        },\n        flowChars: {\n          start: \'{\',\n          end: \'}\'\n        },\n        isMap: true,\n        itemIndent: ctx.indent || \'\'\n      }, onComment, onChompKeep);\n    }\n  }]);\n\n  return YAMLMap;\n}(schema_Collection_Collection);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Seq.js\n\n\n\n\n\n\n// Published as \'yaml/seq\'\n\n\n\n\nfunction asItemIndex(key) {\n  var idx = key instanceof Scalar_Scalar ? key.value : key;\n  if (idx && typeof idx === \'string\') idx = Number(idx);\n  return Number.isInteger(idx) && idx >= 0 ? idx : null;\n}\n\nvar Seq_YAMLSeq = /*#__PURE__*/function (_Collection) {\n  inherits_default()(YAMLSeq, _Collection);\n\n  function YAMLSeq() {\n    classCallCheck_default()(this, YAMLSeq);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(YAMLSeq).apply(this, arguments));\n  }\n\n  createClass_default()(YAMLSeq, [{\n    key: "add",\n    value: function add(value) {\n      this.items.push(value);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== \'number\') return false;\n      var del = this.items.splice(idx, 1);\n      return del.length > 0;\n    }\n  }, {\n    key: "get",\n    value: function get(key, keepScalar) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== \'number\') return undefined;\n      var it = this.items[idx];\n      return !keepScalar && it instanceof Scalar_Scalar ? it.value : it;\n    }\n  }, {\n    key: "has",\n    value: function has(key) {\n      var idx = asItemIndex(key);\n      return typeof idx === \'number\' && idx < this.items.length;\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== \'number\') throw new Error("Expected a valid index, not ".concat(key, "."));\n      this.items[idx] = value;\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON(_, ctx) {\n      var seq = [];\n      if (ctx && ctx.onCreate) ctx.onCreate(seq);\n      var i = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          seq.push(toJSON_toJSON(item, String(i++), ctx));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return seq;\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      return get_default()(getPrototypeOf_default()(YAMLSeq.prototype), "toString", this).call(this, ctx, {\n        blockItem: function blockItem(n) {\n          return n.type === \'comment\' ? n.str : "- ".concat(n.str);\n        },\n        flowChars: {\n          start: \'[\',\n          end: \']\'\n        },\n        isMap: false,\n        itemIndent: (ctx.indent || \'\') + \'  \'\n      }, onComment, onChompKeep);\n    }\n  }]);\n\n  return YAMLSeq;\n}(schema_Collection_Collection);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/Merge.js\n\n\n\n\n\n\n\n\n\n\n\nvar MERGE_KEY = \'<<\';\n\nvar Merge_Merge = /*#__PURE__*/function (_Pair) {\n  inherits_default()(Merge, _Pair);\n\n  function Merge(pair) {\n    var _this;\n\n    classCallCheck_default()(this, Merge);\n\n    if (pair instanceof Pair_Pair) {\n      var seq = pair.value;\n\n      if (!(seq instanceof Seq_YAMLSeq)) {\n        seq = new Seq_YAMLSeq();\n        seq.items.push(pair.value);\n        seq.range = pair.value.range;\n      }\n\n      _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Merge).call(this, pair.key, seq));\n      _this.range = pair.range;\n    } else {\n      _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(Merge).call(this, new Scalar_Scalar(MERGE_KEY), new Seq_YAMLSeq()));\n    }\n\n    _this.type = \'MERGE_PAIR\';\n    return possibleConstructorReturn_default()(_this);\n  } // If the value associated with a merge key is a single mapping node, each of\n  // its key/value pairs is inserted into the current mapping, unless the key\n  // already exists in it. If the value associated with the merge key is a\n  // sequence, then this sequence is expected to contain mapping nodes and each\n  // of these nodes is merged in turn according to its order in the sequence.\n  // Keys in mapping nodes earlier in the sequence override keys specified in\n  // later mapping nodes. -- http://yaml.org/type/merge.html\n\n\n  createClass_default()(Merge, [{\n    key: "addToJSMap",\n    value: function addToJSMap(ctx, map) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.value.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var source = _step.value.source;\n          if (!(source instanceof Map_YAMLMap)) throw new Error(\'Merge sources must be maps\');\n          var srcMap = source.toJSON(null, ctx, Map);\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = srcMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _step2$value = slicedToArray_default()(_step2.value, 2),\n                  key = _step2$value[0],\n                  value = _step2$value[1];\n\n              if (map instanceof Map) {\n                if (!map.has(key)) map.set(key, value);\n              } else if (map instanceof Set) {\n                map.add(key);\n              } else {\n                if (!Object.prototype.hasOwnProperty.call(map, key)) map[key] = value;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return map;\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, onComment) {\n      var seq = this.value;\n      if (seq.items.length > 1) return get_default()(getPrototypeOf_default()(Merge.prototype), "toString", this).call(this, ctx, onComment);\n      this.value = seq.items[0];\n\n      var str = get_default()(getPrototypeOf_default()(Merge.prototype), "toString", this).call(this, ctx, onComment);\n\n      this.value = seq;\n      return str;\n    }\n  }]);\n\n  return Merge;\n}(Pair_Pair);\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/Anchors.js\n\n\n\n\n\n\n\n\n\nvar Anchors_Anchors = /*#__PURE__*/function () {\n  createClass_default()(Anchors, null, [{\n    key: "validAnchorNode",\n    value: function validAnchorNode(node) {\n      return node instanceof Scalar_Scalar || node instanceof Seq_YAMLSeq || node instanceof Map_YAMLMap;\n    }\n  }]);\n\n  function Anchors(prefix) {\n    classCallCheck_default()(this, Anchors);\n\n    defineProperty_default()(this, "map", {});\n\n    this.prefix = prefix;\n  }\n\n  createClass_default()(Anchors, [{\n    key: "createAlias",\n    value: function createAlias(node, name) {\n      this.setAnchor(node, name);\n      return new schema_Alias_Alias(node);\n    }\n  }, {\n    key: "createMergePair",\n    value: function createMergePair() {\n      var _this = this;\n\n      var merge = new Merge_Merge();\n\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      merge.value.items = sources.map(function (s) {\n        if (s instanceof schema_Alias_Alias) {\n          if (s.source instanceof Map_YAMLMap) return s;\n        } else if (s instanceof Map_YAMLMap) {\n          return _this.createAlias(s);\n        }\n\n        throw new Error(\'Merge sources must be Map nodes or their Aliases\');\n      });\n      return merge;\n    }\n  }, {\n    key: "getName",\n    value: function getName(node) {\n      var map = this.map;\n      return Object.keys(map).find(function (a) {\n        return map[a] === node;\n      });\n    }\n  }, {\n    key: "getNode",\n    value: function getNode(name) {\n      return this.map[name];\n    }\n  }, {\n    key: "newName",\n    value: function newName(prefix) {\n      if (!prefix) prefix = this.prefix;\n      var names = Object.keys(this.map);\n\n      for (var i = 1; true; ++i) {\n        var name = "".concat(prefix).concat(i);\n        if (!names.includes(name)) return name;\n      }\n    } // During parsing, map & aliases contain CST nodes\n\n  }, {\n    key: "resolveNodes",\n    value: function resolveNodes() {\n      var map = this.map,\n          _cstAliases = this._cstAliases;\n      Object.keys(map).forEach(function (a) {\n        map[a] = map[a].resolved;\n      });\n\n      _cstAliases.forEach(function (a) {\n        a.source = a.source.resolved;\n      });\n\n      delete this._cstAliases;\n    }\n  }, {\n    key: "setAnchor",\n    value: function setAnchor(node, name) {\n      if (node != null && !Anchors.validAnchorNode(node)) {\n        throw new Error(\'Anchors may only be set for Scalar, Seq and Map nodes\');\n      }\n\n      if (name && /[\\x00-\\x19\\s,[\\]{}]/.test(name)) {\n        throw new Error(\'Anchor names must not contain whitespace or control characters\');\n      }\n\n      var map = this.map;\n      var prev = node && Object.keys(map).find(function (a) {\n        return map[a] === node;\n      });\n\n      if (prev) {\n        if (!name) {\n          return prev;\n        } else if (prev !== name) {\n          delete map[prev];\n          map[name] = node;\n        }\n      } else {\n        if (!name) {\n          if (!node) return null;\n          name = this.newName();\n        }\n\n        map[name] = node;\n      }\n\n      return name;\n    }\n  }]);\n\n  return Anchors;\n}();\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/listTagNames.js\n\n\n\n\n\nvar listTagNames_visit = function visit(node, tags) {\n  if (node && typeof_default()(node) === \'object\') {\n    var tag = node.tag;\n\n    if (node instanceof schema_Collection_Collection) {\n      if (tag) tags[tag] = true;\n      node.items.forEach(function (n) {\n        return visit(n, tags);\n      });\n    } else if (node instanceof Pair_Pair) {\n      visit(node.key, tags);\n      visit(node.value, tags);\n    } else if (node instanceof Scalar_Scalar) {\n      if (tag) tags[tag] = true;\n    }\n  }\n\n  return tags;\n};\n\n/* harmony default export */ var listTagNames = (function (node) {\n  return Object.keys(listTagNames_visit(node, {}));\n});\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/warnings.js\nvar warnings = __webpack_require__("./node_modules/yaml/browser/dist/warnings.js");\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/stringify.js + 1 modules\nvar dist_stringify = __webpack_require__("./node_modules/yaml/browser/dist/stringify.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/parseUtils.js\n\n\nfunction checkFlowCollectionEnd(errors, cst) {\n  var char, name;\n\n  switch (cst.type) {\n    case constants["b" /* Type */].FLOW_MAP:\n      char = \'}\';\n      name = \'flow map\';\n      break;\n\n    case constants["b" /* Type */].FLOW_SEQ:\n      char = \']\';\n      name = \'flow sequence\';\n      break;\n\n    default:\n      errors.push(new dist_errors["c" /* YAMLSemanticError */](cst, \'Not a flow collection!?\'));\n      return;\n  }\n\n  var lastItem;\n\n  for (var i = cst.items.length - 1; i >= 0; --i) {\n    var item = cst.items[i];\n\n    if (!item || item.type !== constants["b" /* Type */].COMMENT) {\n      lastItem = item;\n      break;\n    }\n  }\n\n  if (lastItem && lastItem.char !== char) {\n    var msg = "Expected ".concat(name, " to end with ").concat(char);\n    var err;\n\n    if (typeof lastItem.offset === \'number\') {\n      err = new dist_errors["c" /* YAMLSemanticError */](cst, msg);\n      err.offset = lastItem.offset + 1;\n    } else {\n      err = new dist_errors["c" /* YAMLSemanticError */](lastItem, msg);\n      if (lastItem.range && lastItem.range.end) err.offset = lastItem.range.end - lastItem.range.start;\n    }\n\n    errors.push(err);\n  }\n}\nfunction checkKeyLength(errors, node, itemIdx, key, keyStart) {\n  if (!key || typeof keyStart !== \'number\') return;\n  var item = node.items[itemIdx];\n  var keyEnd = item && item.range && item.range.start;\n\n  if (!keyEnd) {\n    for (var i = itemIdx - 1; i >= 0; --i) {\n      var it = node.items[i];\n\n      if (it && it.range) {\n        keyEnd = it.range.end + 2 * (itemIdx - i);\n        break;\n      }\n    }\n  }\n\n  if (keyEnd > keyStart + 1024) {\n    var k = String(key).substr(0, 8) + \'...\' + String(key).substr(-8);\n    errors.push(new dist_errors["c" /* YAMLSemanticError */](node, "The \\"".concat(k, "\\" key is too long")));\n  }\n}\nfunction resolveComments(collection, comments) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = comments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _step.value,\n          afterKey = _step$value.afterKey,\n          before = _step$value.before,\n          comment = _step$value.comment;\n      var item = collection.items[before];\n\n      if (!item) {\n        if (comment !== undefined) {\n          if (collection.comment) collection.comment += \'\\n\' + comment;else collection.comment = comment;\n        }\n      } else {\n        if (afterKey && item.value) item = item.value;\n\n        if (comment === undefined) {\n          if (afterKey || !item.commentBefore) item.spaceBefore = true;\n        } else {\n          if (item.commentBefore) item.commentBefore += \'\\n\' + comment;else item.commentBefore = comment;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/parseMap.js\n\n\n\n\n\n\n\n\n\nfunction parseMap(doc, cst) {\n  if (cst.type !== constants["b" /* Type */].MAP && cst.type !== constants["b" /* Type */].FLOW_MAP) {\n    var msg = "A ".concat(cst.type, " node cannot be resolved as a mapping");\n    doc.errors.push(new dist_errors["d" /* YAMLSyntaxError */](cst, msg));\n    return null;\n  }\n\n  var _ref = cst.type === constants["b" /* Type */].FLOW_MAP ? resolveFlowMapItems(doc, cst) : resolveBlockMapItems(doc, cst),\n      comments = _ref.comments,\n      items = _ref.items;\n\n  var map = new Map_YAMLMap();\n  map.items = items;\n  resolveComments(map, comments);\n  var hasCollectionKey = false;\n\n  for (var i = 0; i < items.length; ++i) {\n    var iKey = items[i].key;\n    if (iKey instanceof schema_Collection_Collection) hasCollectionKey = true;\n\n    if (doc.schema.merge && iKey && iKey.value === MERGE_KEY) {\n      items[i] = new Merge_Merge(items[i]);\n      var sources = items[i].value.items;\n      var error = null;\n      sources.some(function (node) {\n        if (node instanceof schema_Alias_Alias) {\n          // During parsing, alias sources are CST nodes; to account for\n          // circular references their resolved values can\'t be used here.\n          var type = node.source.type;\n          if (type === constants["b" /* Type */].MAP || type === constants["b" /* Type */].FLOW_MAP) return false;\n          return error = \'Merge nodes aliases can only point to maps\';\n        }\n\n        return error = \'Merge nodes can only have Alias nodes as values\';\n      });\n      if (error) doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](cst, error));\n    } else {\n      for (var j = i + 1; j < items.length; ++j) {\n        var jKey = items[j].key;\n\n        if (iKey === jKey || iKey && jKey && Object.prototype.hasOwnProperty.call(iKey, \'value\') && iKey.value === jKey.value) {\n          var _msg = "Map keys must be unique; \\"".concat(iKey, "\\" is repeated");\n\n          doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](cst, _msg));\n          break;\n        }\n      }\n    }\n  }\n\n  if (hasCollectionKey && !doc.options.mapAsMap) {\n    var warn = \'Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.\';\n    doc.warnings.push(new dist_errors["e" /* YAMLWarning */](cst, warn));\n  }\n\n  cst.resolved = map;\n  return map;\n}\n\nvar parseMap_valueHasPairComment = function valueHasPairComment(_ref2) {\n  var _ref2$context = _ref2.context,\n      lineStart = _ref2$context.lineStart,\n      node = _ref2$context.node,\n      src = _ref2$context.src,\n      props = _ref2.props;\n  if (props.length === 0) return false;\n  var start = props[0].start;\n  if (node && start > node.valueRange.start) return false;\n  if (src[start] !== constants["a" /* Char */].COMMENT) return false;\n\n  for (var i = lineStart; i < start; ++i) {\n    if (src[i] === \'\\n\') return false;\n  }\n\n  return true;\n};\n\nfunction resolvePairComment(item, pair) {\n  if (!parseMap_valueHasPairComment(item)) return;\n  var comment = item.getPropValue(0, constants["a" /* Char */].COMMENT, true);\n  var found = false;\n  var cb = pair.value.commentBefore;\n\n  if (cb && cb.startsWith(comment)) {\n    pair.value.commentBefore = cb.substr(comment.length + 1);\n    found = true;\n  } else {\n    var cc = pair.value.comment;\n\n    if (!item.node && cc && cc.startsWith(comment)) {\n      pair.value.comment = cc.substr(comment.length + 1);\n      found = true;\n    }\n  }\n\n  if (found) pair.comment = comment;\n}\n\nfunction resolveBlockMapItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var key = undefined;\n  var keyStart = null;\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    switch (item.type) {\n      case constants["b" /* Type */].BLANK_LINE:\n        comments.push({\n          afterKey: !!key,\n          before: items.length\n        });\n        break;\n\n      case constants["b" /* Type */].COMMENT:\n        comments.push({\n          afterKey: !!key,\n          before: items.length,\n          comment: item.comment\n        });\n        break;\n\n      case constants["b" /* Type */].MAP_KEY:\n        if (key !== undefined) items.push(new Pair_Pair(key));\n        if (item.error) doc.errors.push(item.error);\n        key = doc.resolveNode(item.node);\n        keyStart = null;\n        break;\n\n      case constants["b" /* Type */].MAP_VALUE:\n        {\n          if (key === undefined) key = null;\n          if (item.error) doc.errors.push(item.error);\n\n          if (!item.context.atLineStart && item.node && item.node.type === constants["b" /* Type */].MAP && !item.node.context.atLineStart) {\n            var msg = \'Nested mappings are not allowed in compact mappings\';\n            doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item.node, msg));\n          }\n\n          var valueNode = item.node;\n\n          if (!valueNode && item.props.length > 0) {\n            // Comments on an empty mapping value need to be preserved, so we\n            // need to construct a minimal empty node here to use instead of the\n            // missing `item.node`. -- eemeli/yaml#19\n            valueNode = new PlainValue_PlainValue(constants["b" /* Type */].PLAIN, []);\n            valueNode.context = {\n              parent: item,\n              src: item.context.src\n            };\n            var pos = item.range.start + 1;\n            valueNode.range = {\n              start: pos,\n              end: pos\n            };\n            valueNode.valueRange = {\n              start: pos,\n              end: pos\n            };\n\n            if (typeof item.range.origStart === \'number\') {\n              var origPos = item.range.origStart + 1;\n              valueNode.range.origStart = valueNode.range.origEnd = origPos;\n              valueNode.valueRange.origStart = valueNode.valueRange.origEnd = origPos;\n            }\n          }\n\n          var pair = new Pair_Pair(key, doc.resolveNode(valueNode));\n          resolvePairComment(item, pair);\n          items.push(pair);\n          checkKeyLength(doc.errors, cst, i, key, keyStart);\n          key = undefined;\n          keyStart = null;\n        }\n        break;\n\n      default:\n        if (key !== undefined) items.push(new Pair_Pair(key));\n        key = doc.resolveNode(item);\n        keyStart = item.range.start;\n        if (item.error) doc.errors.push(item.error);\n\n        next: for (var j = i + 1;; ++j) {\n          var nextItem = cst.items[j];\n\n          switch (nextItem && nextItem.type) {\n            case constants["b" /* Type */].BLANK_LINE:\n            case constants["b" /* Type */].COMMENT:\n              continue next;\n\n            case constants["b" /* Type */].MAP_VALUE:\n              break next;\n\n            default:\n              doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, \'Implicit map keys need to be followed by map values\'));\n              break next;\n          }\n        }\n\n        if (item.valueRangeContainsNewline) {\n          var _msg2 = \'Implicit map keys need to be on a single line\';\n          doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, _msg2));\n        }\n\n    }\n  }\n\n  if (key !== undefined) items.push(new Pair_Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nfunction resolveFlowMapItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var key = undefined;\n  var keyStart = null;\n  var explicitKey = false;\n  var next = \'{\';\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    checkKeyLength(doc.errors, cst, i, key, keyStart);\n    var item = cst.items[i];\n\n    if (typeof item.char === \'string\') {\n      var char = item.char,\n          offset = item.offset;\n\n      if (char === \'?\' && key === undefined && !explicitKey) {\n        explicitKey = true;\n        next = \':\';\n        continue;\n      }\n\n      if (char === \':\') {\n        if (key === undefined) key = null;\n\n        if (next === \':\') {\n          next = \',\';\n          continue;\n        }\n      } else {\n        if (explicitKey) {\n          if (key === undefined && char !== \',\') key = null;\n          explicitKey = false;\n        }\n\n        if (key !== undefined) {\n          items.push(new Pair_Pair(key));\n          key = undefined;\n          keyStart = null;\n\n          if (char === \',\') {\n            next = \':\';\n            continue;\n          }\n        }\n      }\n\n      if (char === \'}\') {\n        if (i === cst.items.length - 1) continue;\n      } else if (char === next) {\n        next = \':\';\n        continue;\n      }\n\n      var msg = "Flow map contains an unexpected ".concat(char);\n      var err = new dist_errors["d" /* YAMLSyntaxError */](cst, msg);\n      err.offset = offset;\n      doc.errors.push(err);\n    } else if (item.type === constants["b" /* Type */].BLANK_LINE) {\n      comments.push({\n        afterKey: !!key,\n        before: items.length\n      });\n    } else if (item.type === constants["b" /* Type */].COMMENT) {\n      comments.push({\n        afterKey: !!key,\n        before: items.length,\n        comment: item.comment\n      });\n    } else if (key === undefined) {\n      if (next === \',\') doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, \'Separator , missing in flow map\'));\n      key = doc.resolveNode(item);\n      keyStart = explicitKey ? null : item.range.start; // TODO: add error for non-explicit multiline plain key\n    } else {\n      if (next !== \',\') doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, \'Indicator : missing in flow map entry\'));\n      items.push(new Pair_Pair(key, doc.resolveNode(item)));\n      key = undefined;\n      explicitKey = false;\n    }\n  }\n\n  checkFlowCollectionEnd(doc.errors, cst);\n  if (key !== undefined) items.push(new Pair_Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/failsafe/map.js\n\n\n\n\n\nfunction createMap(schema, obj, ctx) {\n  var map = new Map_YAMLMap(schema);\n\n  if (obj instanceof Map) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _step$value = slicedToArray_default()(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n\n        map.items.push(schema.createPair(key, value, ctx));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (obj && typeof_default()(obj) === \'object\') {\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var _key = _Object$keys[_i];\n      map.items.push(schema.createPair(_key, obj[_key], ctx));\n    }\n  }\n\n  if (typeof schema.sortMapEntries === \'function\') {\n    map.items.sort(schema.sortMapEntries);\n  }\n\n  return map;\n}\n\n/* harmony default export */ var failsafe_map = ({\n  createNode: createMap,\n  default: true,\n  nodeClass: Map_YAMLMap,\n  tag: \'tag:yaml.org,2002:map\',\n  resolve: parseMap\n});\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/parseSeq.js\n\n\n\n\n\n\nfunction parseSeq(doc, cst) {\n  if (cst.type !== constants["b" /* Type */].SEQ && cst.type !== constants["b" /* Type */].FLOW_SEQ) {\n    var msg = "A ".concat(cst.type, " node cannot be resolved as a sequence");\n    doc.errors.push(new dist_errors["d" /* YAMLSyntaxError */](cst, msg));\n    return null;\n  }\n\n  var _ref = cst.type === constants["b" /* Type */].FLOW_SEQ ? resolveFlowSeqItems(doc, cst) : resolveBlockSeqItems(doc, cst),\n      comments = _ref.comments,\n      items = _ref.items;\n\n  var seq = new Seq_YAMLSeq();\n  seq.items = items;\n  resolveComments(seq, comments);\n\n  if (!doc.options.mapAsMap && items.some(function (it) {\n    return it instanceof Pair_Pair && it.key instanceof schema_Collection_Collection;\n  })) {\n    var warn = \'Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.\';\n    doc.warnings.push(new dist_errors["e" /* YAMLWarning */](cst, warn));\n  }\n\n  cst.resolved = seq;\n  return seq;\n}\n\nfunction resolveBlockSeqItems(doc, cst) {\n  var comments = [];\n  var items = [];\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    switch (item.type) {\n      case constants["b" /* Type */].BLANK_LINE:\n        comments.push({\n          before: items.length\n        });\n        break;\n\n      case constants["b" /* Type */].COMMENT:\n        comments.push({\n          comment: item.comment,\n          before: items.length\n        });\n        break;\n\n      case constants["b" /* Type */].SEQ_ITEM:\n        if (item.error) doc.errors.push(item.error);\n        items.push(doc.resolveNode(item.node));\n\n        if (item.hasProps) {\n          var msg = \'Sequence items cannot have tags or anchors before the - indicator\';\n          doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, msg));\n        }\n\n        break;\n\n      default:\n        if (item.error) doc.errors.push(item.error);\n        doc.errors.push(new dist_errors["d" /* YAMLSyntaxError */](item, "Unexpected ".concat(item.type, " node in sequence")));\n    }\n  }\n\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nfunction resolveFlowSeqItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var explicitKey = false;\n  var key = undefined;\n  var keyStart = null;\n  var next = \'[\';\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    if (typeof item.char === \'string\') {\n      var char = item.char,\n          offset = item.offset;\n\n      if (char !== \':\' && (explicitKey || key !== undefined)) {\n        if (explicitKey && key === undefined) key = next ? items.pop() : null;\n        items.push(new Pair_Pair(key));\n        explicitKey = false;\n        key = undefined;\n        keyStart = null;\n      }\n\n      if (char === next) {\n        next = null;\n      } else if (!next && char === \'?\') {\n        explicitKey = true;\n      } else if (next !== \'[\' && char === \':\' && key === undefined) {\n        if (next === \',\') {\n          key = items.pop();\n\n          if (key instanceof Pair_Pair) {\n            var msg = \'Chaining flow sequence pairs is invalid\';\n            var err = new dist_errors["c" /* YAMLSemanticError */](cst, msg);\n            err.offset = offset;\n            doc.errors.push(err);\n          }\n\n          if (!explicitKey) checkKeyLength(doc.errors, cst, i, key, keyStart);\n        } else {\n          key = null;\n        }\n\n        keyStart = null;\n        explicitKey = false; // TODO: add error for non-explicit multiline plain key\n\n        next = null;\n      } else if (next === \'[\' || char !== \']\' || i < cst.items.length - 1) {\n        var _msg = "Flow sequence contains an unexpected ".concat(char);\n\n        var _err = new dist_errors["d" /* YAMLSyntaxError */](cst, _msg);\n\n        _err.offset = offset;\n        doc.errors.push(_err);\n      }\n    } else if (item.type === constants["b" /* Type */].BLANK_LINE) {\n      comments.push({\n        before: items.length\n      });\n    } else if (item.type === constants["b" /* Type */].COMMENT) {\n      comments.push({\n        comment: item.comment,\n        before: items.length\n      });\n    } else {\n      if (next) {\n        var _msg2 = "Expected a ".concat(next, " in flow sequence");\n\n        doc.errors.push(new dist_errors["c" /* YAMLSemanticError */](item, _msg2));\n      }\n\n      var value = doc.resolveNode(item);\n\n      if (key === undefined) {\n        items.push(value);\n      } else {\n        items.push(new Pair_Pair(key, value));\n        key = undefined;\n      }\n\n      keyStart = item.range.start;\n      next = \',\';\n    }\n  }\n\n  checkFlowCollectionEnd(doc.errors, cst);\n  if (key !== undefined) items.push(new Pair_Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/failsafe/seq.js\n\n\n\nfunction createSeq(schema, obj, ctx) {\n  var seq = new Seq_YAMLSeq(schema);\n\n  if (obj && obj[Symbol.iterator]) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var it = _step.value;\n        var v = schema.createNode(it, ctx.wrapScalars, null, ctx);\n        seq.items.push(v);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return seq;\n}\n\n/* harmony default export */ var failsafe_seq = ({\n  createNode: createSeq,\n  default: true,\n  nodeClass: Seq_YAMLSeq,\n  tag: \'tag:yaml.org,2002:seq\',\n  resolve: parseSeq\n});\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/tags/failsafe/string.js\nvar string = __webpack_require__("./node_modules/yaml/browser/dist/tags/failsafe/string.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/failsafe/index.js\n\n\n\n/* harmony default export */ var failsafe = ([failsafe_map, failsafe_seq, string["a" /* default */]]);\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/tags/options.js\nvar tags_options = __webpack_require__("./node_modules/yaml/browser/dist/tags/options.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/core.js\n\n\n\n\nvar nullObj = {\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar_Scalar(null) : null;\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:null\',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: function resolve() {\n    return null;\n  },\n  options: tags_options["c" /* nullOptions */],\n  stringify: function stringify() {\n    return tags_options["c" /* nullOptions */].nullStr;\n  }\n};\nvar boolObj = {\n  identify: function identify(value) {\n    return typeof value === \'boolean\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:bool\',\n  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n  resolve: function resolve(str) {\n    return str[0] === \'t\' || str[0] === \'T\';\n  },\n  options: tags_options["b" /* boolOptions */],\n  stringify: function stringify(_ref) {\n    var value = _ref.value;\n    return value ? tags_options["b" /* boolOptions */].trueStr : tags_options["b" /* boolOptions */].falseStr;\n  }\n};\nvar octObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'OCT\',\n  test: /^0o([0-7]+)$/,\n  resolve: function resolve(str, oct) {\n    return parseInt(oct, 8);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return \'0o\' + value.toString(8);\n  }\n};\nvar intObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  test: /^[-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseInt(str, 10);\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n};\nvar hexObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'HEX\',\n  test: /^0x([0-9a-fA-F]+)$/,\n  resolve: function resolve(str, hex) {\n    return parseInt(hex, 16);\n  },\n  stringify: function stringify(_ref3) {\n    var value = _ref3.value;\n    return \'0x\' + value.toString(16);\n  }\n};\nvar nanObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: function resolve(str, nan) {\n    return nan ? NaN : str[0] === \'-\' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n};\nvar expObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  format: \'EXP\',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: function stringify(_ref4) {\n    var value = _ref4.value;\n    return Number(value).toExponential();\n  }\n};\nvar floatObj = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  test: /^[-+]?(?:\\.([0-9]+)|[0-9]+\\.([0-9]*))$/,\n  resolve: function resolve(str, frac1, frac2) {\n    var frac = frac1 || frac2;\n    var node = new Scalar_Scalar(parseFloat(str));\n    if (frac && frac[frac.length - 1] === \'0\') node.minFractionDigits = frac.length;\n    return node;\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n};\n/* harmony default export */ var core = (failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]));\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/json.js\n\n\n\n\nvar json_schema = [failsafe_map, failsafe_seq, {\n  identify: function identify(value) {\n    return typeof value === \'string\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:str\',\n  resolve: string["b" /* resolveString */],\n  stringify: function stringify(value) {\n    return JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar_Scalar(null) : null;\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:null\',\n  test: /^null$/,\n  resolve: function resolve() {\n    return null;\n  },\n  stringify: function stringify(value) {\n    return JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'boolean\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:bool\',\n  test: /^true|false$/,\n  resolve: function resolve(str) {\n    return str === \'true\';\n  },\n  stringify: function stringify(value) {\n    return JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: function resolve(str) {\n    return parseInt(str, 10);\n  },\n  stringify: function stringify(value) {\n    return JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: function stringify(value) {\n    return JSON.stringify(value);\n  }\n}];\n\njson_schema.scalarFallback = function (str) {\n  throw new SyntaxError("Unresolved plain scalar ".concat(JSON.stringify(str)));\n};\n\n/* harmony default export */ var json = (json_schema);\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/binary.js\nvar binary = __webpack_require__("./node_modules/yaml/browser/dist/tags/yaml-1.1/binary.js");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/pairs.js\n\n\n\n\n\nfunction parsePairs(doc, cst) {\n  var seq = parseSeq(doc, cst);\n\n  for (var i = 0; i < seq.items.length; ++i) {\n    var item = seq.items[i];\n    if (item instanceof Pair_Pair) continue;else if (item instanceof Map_YAMLMap) {\n      if (item.items.length > 1) {\n        var msg = \'Each pair must have its own sequence indicator\';\n        throw new dist_errors["c" /* YAMLSemanticError */](cst, msg);\n      }\n\n      var pair = item.items[0] || new Pair_Pair();\n      if (item.commentBefore) pair.commentBefore = pair.commentBefore ? "".concat(item.commentBefore, "\\n").concat(pair.commentBefore) : item.commentBefore;\n      if (item.comment) pair.comment = pair.comment ? "".concat(item.comment, "\\n").concat(pair.comment) : item.comment;\n      item = pair;\n    }\n    seq.items[i] = item instanceof Pair_Pair ? item : new Pair_Pair(item);\n  }\n\n  return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n  var pairs = new Seq_YAMLSeq(schema);\n  pairs.tag = \'tag:yaml.org,2002:pairs\';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var it = _step.value;\n      var key = void 0,\n          value = void 0;\n\n      if (Array.isArray(it)) {\n        if (it.length === 2) {\n          key = it[0];\n          value = it[1];\n        } else throw new TypeError("Expected [key, value] tuple: ".concat(it));\n      } else if (it && it instanceof Object) {\n        var keys = Object.keys(it);\n\n        if (keys.length === 1) {\n          key = keys[0];\n          value = it[key];\n        } else throw new TypeError("Expected { key: value } tuple: ".concat(it));\n      } else {\n        key = it;\n      }\n\n      var pair = schema.createPair(key, value, ctx);\n      pairs.items.push(pair);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return pairs;\n}\n/* harmony default export */ var yaml_1_1_pairs = ({\n  default: false,\n  tag: \'tag:yaml.org,2002:pairs\',\n  resolve: parsePairs,\n  createNode: createPairs\n});\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/omap.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar omap_YAMLOMap = /*#__PURE__*/function (_YAMLSeq) {\n  inherits_default()(YAMLOMap, _YAMLSeq);\n\n  function YAMLOMap() {\n    var _this;\n\n    classCallCheck_default()(this, YAMLOMap);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(YAMLOMap).call(this));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "add", Map_YAMLMap.prototype.add.bind(assertThisInitialized_default()(_this)));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "delete", Map_YAMLMap.prototype.delete.bind(assertThisInitialized_default()(_this)));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "get", Map_YAMLMap.prototype.get.bind(assertThisInitialized_default()(_this)));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "has", Map_YAMLMap.prototype.has.bind(assertThisInitialized_default()(_this)));\n\n    defineProperty_default()(assertThisInitialized_default()(_this), "set", Map_YAMLMap.prototype.set.bind(assertThisInitialized_default()(_this)));\n\n    _this.tag = YAMLOMap.tag;\n    return _this;\n  }\n\n  createClass_default()(YAMLOMap, [{\n    key: "toJSON",\n    value: function toJSON(_, ctx) {\n      var map = new Map();\n      if (ctx && ctx.onCreate) ctx.onCreate(map);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pair = _step.value;\n          var key = void 0,\n              value = void 0;\n\n          if (pair instanceof Pair_Pair) {\n            key = toJSON_toJSON(pair.key, \'\', ctx);\n            value = toJSON_toJSON(pair.value, key, ctx);\n          } else {\n            key = toJSON_toJSON(pair, \'\', ctx);\n          }\n\n          if (map.has(key)) throw new Error(\'Ordered maps must not include duplicate keys\');\n          map.set(key, value);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return map;\n    }\n  }]);\n\n  return YAMLOMap;\n}(Seq_YAMLSeq);\n\ndefineProperty_default()(omap_YAMLOMap, "tag", \'tag:yaml.org,2002:omap\');\n\nfunction parseOMap(doc, cst) {\n  var pairs = parsePairs(doc, cst);\n  var seenKeys = [];\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = pairs.items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var key = _step2.value.key;\n\n      if (key instanceof Scalar_Scalar) {\n        if (seenKeys.includes(key.value)) {\n          var msg = \'Ordered maps must not include duplicate keys\';\n          throw new dist_errors["c" /* YAMLSemanticError */](cst, msg);\n        } else {\n          seenKeys.push(key.value);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return Object.assign(new omap_YAMLOMap(), pairs);\n}\n\nfunction createOMap(schema, iterable, ctx) {\n  var pairs = createPairs(schema, iterable, ctx);\n  var omap = new omap_YAMLOMap();\n  omap.items = pairs.items;\n  return omap;\n}\n\n/* harmony default export */ var yaml_1_1_omap = ({\n  identify: function identify(value) {\n    return value instanceof Map;\n  },\n  nodeClass: omap_YAMLOMap,\n  default: false,\n  tag: \'tag:yaml.org,2002:omap\',\n  resolve: parseOMap,\n  createNode: createOMap\n});\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/set.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar set_YAMLSet = /*#__PURE__*/function (_YAMLMap) {\n  inherits_default()(YAMLSet, _YAMLMap);\n\n  function YAMLSet() {\n    var _this;\n\n    classCallCheck_default()(this, YAMLSet);\n\n    _this = possibleConstructorReturn_default()(this, getPrototypeOf_default()(YAMLSet).call(this));\n    _this.tag = YAMLSet.tag;\n    return _this;\n  }\n\n  createClass_default()(YAMLSet, [{\n    key: "add",\n    value: function add(key) {\n      var pair = key instanceof Pair_Pair ? key : new Pair_Pair(key);\n      var prev = findPair(this.items, pair.key);\n      if (!prev) this.items.push(pair);\n    }\n  }, {\n    key: "get",\n    value: function get(key, keepPair) {\n      var pair = findPair(this.items, key);\n      return !keepPair && pair instanceof Pair_Pair ? pair.key instanceof Scalar_Scalar ? pair.key.value : pair.key : pair;\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      if (typeof value !== \'boolean\') throw new Error("Expected boolean value for set(key, value) in a YAML set, not ".concat(typeof_default()(value)));\n      var prev = findPair(this.items, key);\n\n      if (prev && !value) {\n        this.items.splice(this.items.indexOf(prev), 1);\n      } else if (!prev && value) {\n        this.items.push(new Pair_Pair(key));\n      }\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON(_, ctx) {\n      return get_default()(getPrototypeOf_default()(YAMLSet.prototype), "toJSON", this).call(this, _, ctx, Set);\n    }\n  }, {\n    key: "toString",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      if (this.hasAllNullValues()) return get_default()(getPrototypeOf_default()(YAMLSet.prototype), "toString", this).call(this, ctx, onComment, onChompKeep);else throw new Error(\'Set items must all have null values\');\n    }\n  }]);\n\n  return YAMLSet;\n}(Map_YAMLMap);\n\ndefineProperty_default()(set_YAMLSet, "tag", \'tag:yaml.org,2002:set\');\n\nfunction parseSet(doc, cst) {\n  var map = parseMap(doc, cst);\n  if (!map.hasAllNullValues()) throw new dist_errors["c" /* YAMLSemanticError */](cst, \'Set items must all have null values\');\n  return Object.assign(new set_YAMLSet(), map);\n}\n\nfunction createSet(schema, iterable, ctx) {\n  var set = new set_YAMLSet();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n      set.items.push(schema.createPair(value, null, ctx));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return set;\n}\n\n/* harmony default export */ var yaml_1_1_set = ({\n  identify: function identify(value) {\n    return value instanceof Set;\n  },\n  nodeClass: set_YAMLSet,\n  default: false,\n  tag: \'tag:yaml.org,2002:set\',\n  resolve: parseSet,\n  createNode: createSet\n});\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/timestamp.js\n\n\nvar parseSexagesimal = function parseSexagesimal(sign, parts) {\n  var n = parts.split(\':\').reduce(function (n, p) {\n    return n * 60 + Number(p);\n  }, 0);\n  return sign === \'-\' ? -n : n;\n}; // hhhh:mm:ss.sss\n\n\nvar timestamp_stringifySexagesimal = function stringifySexagesimal(_ref) {\n  var value = _ref.value;\n  if (isNaN(value) || !isFinite(value)) return Object(dist_stringify["a" /* stringifyNumber */])(value);\n  var sign = \'\';\n\n  if (value < 0) {\n    sign = \'-\';\n    value = Math.abs(value);\n  }\n\n  var parts = [value % 60]; // seconds, including ms\n\n  if (value < 60) {\n    parts.unshift(0); // at least one : is required\n  } else {\n    value = Math.round((value - parts[0]) / 60);\n    parts.unshift(value % 60); // minutes\n\n    if (value >= 60) {\n      value = Math.round((value - parts[0]) / 60);\n      parts.unshift(value); // hours\n    }\n  }\n\n  return sign + parts.map(function (n) {\n    return n < 10 ? \'0\' + String(n) : String(n);\n  }).join(\':\').replace(/000000\\d*$/, \'\') // % 60 may introduce error\n  ;\n};\n\nvar intTime = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'TIME\',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,\n  resolve: function resolve(str, sign, parts) {\n    return parseSexagesimal(sign, parts.replace(/_/g, \'\'));\n  },\n  stringify: timestamp_stringifySexagesimal\n};\nvar floatTime = {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  format: \'TIME\',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*)$/,\n  resolve: function resolve(str, sign, parts) {\n    return parseSexagesimal(sign, parts.replace(/_/g, \'\'));\n  },\n  stringify: timestamp_stringifySexagesimal\n};\nvar timestamp = {\n  identify: function identify(value) {\n    return value instanceof Date;\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:timestamp\',\n  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n  // may be omitted altogether, resulting in a date format. In such a case, the time part is\n  // assumed to be 00:00:00Z (start of day, UTC).\n  test: RegExp(\'^(?:\' + \'([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})\' + // YYYY-Mm-Dd\n  \'(?:(?:t|T|[ \\\\t]+)\' + // t | T | whitespace\n  \'([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)\' + // Hh:Mm:Ss(.ss)?\n  \'(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?\' + // Z | +5 | -03:30\n  \')?\' + \')$\'),\n  resolve: function resolve(str, year, month, day, hour, minute, second, millisec, tz) {\n    if (millisec) millisec = (millisec + \'00\').substr(1, 3);\n    var date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);\n\n    if (tz && tz !== \'Z\') {\n      var d = parseSexagesimal(tz[0], tz.slice(1));\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n\n    return new Date(date);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, \'\');\n  }\n};\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/yaml-1.1/index.js\n\n\n\n\n\n\n\n\n\n\nvar yaml_1_1_boolStringify = function boolStringify(_ref) {\n  var value = _ref.value;\n  return value ? tags_options["b" /* boolOptions */].trueStr : tags_options["b" /* boolOptions */].falseStr;\n};\n\n/* harmony default export */ var yaml_1_1 = (failsafe.concat([{\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar_Scalar(null) : null;\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:null\',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: function resolve() {\n    return null;\n  },\n  options: tags_options["c" /* nullOptions */],\n  stringify: function stringify() {\n    return tags_options["c" /* nullOptions */].nullStr;\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'boolean\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:bool\',\n  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n  resolve: function resolve() {\n    return true;\n  },\n  options: tags_options["b" /* boolOptions */],\n  stringify: yaml_1_1_boolStringify\n}, {\n  identify: function identify(value) {\n    return typeof value === \'boolean\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:bool\',\n  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n  resolve: function resolve() {\n    return false;\n  },\n  options: tags_options["b" /* boolOptions */],\n  stringify: yaml_1_1_boolStringify\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'BIN\',\n  test: /^0b([0-1_]+)$/,\n  resolve: function resolve(str, bin) {\n    return parseInt(bin.replace(/_/g, \'\'), 2);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return \'0b\' + value.toString(2);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'OCT\',\n  test: /^[-+]?0([0-7_]+)$/,\n  resolve: function resolve(str, oct) {\n    return parseInt(oct.replace(/_/g, \'\'), 8);\n  },\n  stringify: function stringify(_ref3) {\n    var value = _ref3.value;\n    return (value < 0 ? \'-0\' : \'0\') + value.toString(8);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  test: /^[-+]?[0-9][0-9_]*$/,\n  resolve: function resolve(str) {\n    return parseInt(str.replace(/_/g, \'\'), 10);\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:int\',\n  format: \'HEX\',\n  test: /^0x([0-9a-fA-F_]+)$/,\n  resolve: function resolve(str, hex) {\n    return parseInt(hex.replace(/_/g, \'\'), 16);\n  },\n  stringify: function stringify(_ref4) {\n    var value = _ref4.value;\n    return (value < 0 ? \'-0x\' : \'0x\') + value.toString(16);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: function resolve(str, nan) {\n    return nan ? NaN : str[0] === \'-\' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  format: \'EXP\',\n  test: /^[-+]?([0-9][0-9_]*)?(\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str.replace(/_/g, \'\'));\n  },\n  stringify: function stringify(_ref5) {\n    var value = _ref5.value;\n    return Number(value).toExponential();\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === \'number\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:float\',\n  test: /^[-+]?(?:[0-9][0-9_]*)?\\.([0-9_]*)$/,\n  resolve: function resolve(str, frac) {\n    var node = new Scalar_Scalar(parseFloat(str.replace(/_/g, \'\')));\n\n    if (frac) {\n      var f = frac.replace(/_/g, \'\');\n      if (f[f.length - 1] === \'0\') node.minFractionDigits = f.length;\n    }\n\n    return node;\n  },\n  stringify: dist_stringify["a" /* stringifyNumber */]\n}], binary["a" /* default */], yaml_1_1_omap, yaml_1_1_pairs, yaml_1_1_set, intTime, floatTime, timestamp));\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/tags/index.js\n\n\n\n\n\n\n\n\n\n\n\nvar schemas = {\n  core: core,\n  failsafe: failsafe,\n  json: json,\n  yaml11: yaml_1_1\n};\nvar tags_tags = {\n  binary: binary["a" /* default */],\n  bool: boolObj,\n  float: floatObj,\n  floatExp: expObj,\n  floatNaN: nanObj,\n  floatTime: floatTime,\n  int: intObj,\n  intHex: hexObj,\n  intOct: octObj,\n  intTime: intTime,\n  map: failsafe_map,\n  null: nullObj,\n  omap: yaml_1_1_omap,\n  pairs: yaml_1_1_pairs,\n  seq: failsafe_seq,\n  set: yaml_1_1_set,\n  timestamp: timestamp\n};\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/schema/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar schema_isMap = function isMap(_ref) {\n  var type = _ref.type;\n  return type === constants["b" /* Type */].FLOW_MAP || type === constants["b" /* Type */].MAP;\n};\n\nvar schema_isSeq = function isSeq(_ref2) {\n  var type = _ref2.type;\n  return type === constants["b" /* Type */].FLOW_SEQ || type === constants["b" /* Type */].SEQ;\n};\n\nvar schema_Schema = /*#__PURE__*/function () {\n  function Schema(_ref3) {\n    var customTags = _ref3.customTags,\n        merge = _ref3.merge,\n        schema = _ref3.schema,\n        sortMapEntries = _ref3.sortMapEntries,\n        deprecatedCustomTags = _ref3.tags;\n\n    classCallCheck_default()(this, Schema);\n\n    this.merge = !!merge;\n    this.name = schema;\n    this.sortMapEntries = sortMapEntries === true ? function (a, b) {\n      return a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n    } : sortMapEntries || null;\n    this.tags = schemas[schema.replace(/\\W/g, \'\')]; // \'yaml-1.1\' -> \'yaml11\'\n\n    if (!this.tags) {\n      var keys = Object.keys(schemas).map(function (key) {\n        return JSON.stringify(key);\n      }).join(\', \');\n      throw new Error("Unknown schema \\"".concat(schema, "\\"; use one of ").concat(keys));\n    }\n\n    if (!customTags && deprecatedCustomTags) {\n      customTags = deprecatedCustomTags;\n      Object(warnings["b" /* warnOptionDeprecation */])(\'tags\', \'customTags\');\n    }\n\n    if (Array.isArray(customTags)) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = customTags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var tag = _step.value;\n          this.tags = this.tags.concat(tag);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } else if (typeof customTags === \'function\') {\n      this.tags = customTags(this.tags.slice());\n    }\n\n    for (var i = 0; i < this.tags.length; ++i) {\n      var _tag = this.tags[i];\n\n      if (typeof _tag === \'string\') {\n        var tagObj = tags_tags[_tag];\n\n        if (!tagObj) {\n          var _keys = Object.keys(tags_tags).map(function (key) {\n            return JSON.stringify(key);\n          }).join(\', \');\n\n          throw new Error("Unknown custom tag \\"".concat(_tag, "\\"; use one of ").concat(_keys));\n        }\n\n        this.tags[i] = tagObj;\n      }\n    }\n  }\n\n  createClass_default()(Schema, [{\n    key: "createNode",\n    value: function createNode(value, wrapScalars, tag, ctx) {\n      if (value instanceof Node_Node) return value;\n      var tagObj;\n\n      if (tag) {\n        if (tag.startsWith(\'!!\')) tag = Schema.defaultPrefix + tag.slice(2);\n        var match = this.tags.filter(function (t) {\n          return t.tag === tag;\n        });\n        tagObj = match.find(function (t) {\n          return !t.format;\n        }) || match[0];\n        if (!tagObj) throw new Error("Tag ".concat(tag, " not found"));\n      } else {\n        // TODO: deprecate/remove class check\n        tagObj = this.tags.find(function (t) {\n          return (t.identify && t.identify(value) || t.class && value instanceof t.class) && !t.format;\n        });\n\n        if (!tagObj) {\n          if (typeof value.toJSON === \'function\') value = value.toJSON();\n          if (typeof_default()(value) !== \'object\') return wrapScalars ? new Scalar_Scalar(value) : value;\n          tagObj = value instanceof Map ? tags_tags.map : value[Symbol.iterator] ? tags_tags.seq : tags_tags.map;\n        }\n      }\n\n      if (!ctx) ctx = {\n        wrapScalars: wrapScalars\n      };else ctx.wrapScalars = wrapScalars;\n\n      if (ctx.onTagObj) {\n        ctx.onTagObj(tagObj);\n        delete ctx.onTagObj;\n      }\n\n      var obj = {};\n\n      if (value && typeof_default()(value) === \'object\' && ctx.prevObjects) {\n        var prev = ctx.prevObjects.get(value);\n\n        if (prev) {\n          var alias = new schema_Alias_Alias(prev); // leaves source dirty; must be cleaned by caller\n\n          ctx.aliasNodes.push(alias);\n          return alias;\n        }\n\n        obj.value = value;\n        ctx.prevObjects.set(value, obj);\n      }\n\n      obj.node = tagObj.createNode ? tagObj.createNode(this, value, ctx) : wrapScalars ? new Scalar_Scalar(value) : value;\n      if (tag && obj.node instanceof Node_Node) obj.node.tag = tag;\n      return obj.node;\n    }\n  }, {\n    key: "createPair",\n    value: function createPair(key, value, ctx) {\n      var k = this.createNode(key, ctx.wrapScalars, null, ctx);\n      var v = this.createNode(value, ctx.wrapScalars, null, ctx);\n      return new Pair_Pair(k, v);\n    } // falls back to string on no match\n\n  }, {\n    key: "resolveScalar",\n    value: function resolveScalar(str, tags) {\n      if (!tags) tags = this.tags;\n\n      for (var i = 0; i < tags.length; ++i) {\n        var _tags$i = tags[i],\n            format = _tags$i.format,\n            test = _tags$i.test,\n            resolve = _tags$i.resolve;\n\n        if (test) {\n          var match = str.match(test);\n\n          if (match) {\n            var res = resolve.apply(null, match);\n            if (!(res instanceof Scalar_Scalar)) res = new Scalar_Scalar(res);\n            if (format) res.format = format;\n            return res;\n          }\n        }\n      }\n\n      if (this.tags.scalarFallback) str = this.tags.scalarFallback(str);\n      return new Scalar_Scalar(str);\n    } // sets node.resolved on success\n\n  }, {\n    key: "resolveNode",\n    value: function resolveNode(doc, node, tagName) {\n      var tags = this.tags.filter(function (_ref4) {\n        var tag = _ref4.tag;\n        return tag === tagName;\n      });\n      var generic = tags.find(function (_ref5) {\n        var test = _ref5.test;\n        return !test;\n      });\n      if (node.error) doc.errors.push(node.error);\n\n      try {\n        if (generic) {\n          var res = generic.resolve(doc, node);\n          if (!(res instanceof schema_Collection_Collection)) res = new Scalar_Scalar(res);\n          node.resolved = res;\n        } else {\n          var str = Object(string["b" /* resolveString */])(doc, node);\n\n          if (typeof str === \'string\' && tags.length > 0) {\n            node.resolved = this.resolveScalar(str, tags);\n          }\n        }\n      } catch (error) {\n        /* istanbul ignore if */\n        if (!error.source) error.source = node;\n        doc.errors.push(error);\n        node.resolved = null;\n      }\n\n      if (!node.resolved) return null;\n      if (tagName && node.tag) node.resolved.tag = tagName;\n      return node.resolved;\n    }\n  }, {\n    key: "resolveNodeWithFallback",\n    value: function resolveNodeWithFallback(doc, node, tagName) {\n      var res = this.resolveNode(doc, node, tagName);\n      if (Object.prototype.hasOwnProperty.call(node, \'resolved\')) return res;\n      var fallback = schema_isMap(node) ? Schema.defaultTags.MAP : schema_isSeq(node) ? Schema.defaultTags.SEQ : Schema.defaultTags.STR;\n      /* istanbul ignore else */\n\n      if (fallback) {\n        doc.warnings.push(new dist_errors["e" /* YAMLWarning */](node, "The tag ".concat(tagName, " is unavailable, falling back to ").concat(fallback)));\n\n        var _res = this.resolveNode(doc, node, fallback);\n\n        _res.tag = tagName;\n        return _res;\n      } else {\n        doc.errors.push(new dist_errors["b" /* YAMLReferenceError */](node, "The tag ".concat(tagName, " is unavailable")));\n        return null;\n      }\n    }\n  }, {\n    key: "getTagObject",\n    value: function getTagObject(item) {\n      if (item instanceof schema_Alias_Alias) return schema_Alias_Alias;\n\n      if (item.tag) {\n        var match = this.tags.filter(function (t) {\n          return t.tag === item.tag;\n        });\n        if (match.length > 0) return match.find(function (t) {\n          return t.format === item.format;\n        }) || match[0];\n      }\n\n      var tagObj, obj;\n\n      if (item instanceof Scalar_Scalar) {\n        obj = item.value; // TODO: deprecate/remove class check\n\n        var _match = this.tags.filter(function (t) {\n          return t.identify && t.identify(obj) || t.class && obj instanceof t.class;\n        });\n\n        tagObj = _match.find(function (t) {\n          return t.format === item.format;\n        }) || _match.find(function (t) {\n          return !t.format;\n        });\n      } else {\n        obj = item;\n        tagObj = this.tags.find(function (t) {\n          return t.nodeClass && obj instanceof t.nodeClass;\n        });\n      }\n\n      if (!tagObj) {\n        var name = obj && obj.constructor ? obj.constructor.name : typeof_default()(obj);\n        throw new Error("Tag not resolved for ".concat(name, " value"));\n      }\n\n      return tagObj;\n    } // needs to be called before stringifier to allow for circular anchor refs\n\n  }, {\n    key: "stringifyProps",\n    value: function stringifyProps(node, tagObj, _ref6) {\n      var anchors = _ref6.anchors,\n          doc = _ref6.doc;\n      var props = [];\n      var anchor = doc.anchors.getName(node);\n\n      if (anchor) {\n        anchors[anchor] = node;\n        props.push("&".concat(anchor));\n      }\n\n      if (node.tag) {\n        props.push(doc.stringifyTag(node.tag));\n      } else if (!tagObj.default) {\n        props.push(doc.stringifyTag(tagObj.tag));\n      }\n\n      return props.join(\' \');\n    }\n  }, {\n    key: "stringify",\n    value: function stringify(item, ctx, onComment, onChompKeep) {\n      var tagObj;\n\n      if (!(item instanceof Node_Node)) {\n        var createCtx = {\n          aliasNodes: [],\n          onTagObj: function onTagObj(o) {\n            return tagObj = o;\n          },\n          prevObjects: new Map()\n        };\n        item = this.createNode(item, true, null, createCtx);\n        var anchors = ctx.doc.anchors;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = createCtx.aliasNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var alias = _step2.value;\n            alias.source = alias.source.node;\n            var name = anchors.getName(alias.source);\n\n            if (!name) {\n              name = anchors.newName();\n              anchors.map[name] = alias.source;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      ctx.tags = this;\n      if (item instanceof Pair_Pair) return item.toString(ctx, onComment, onChompKeep);\n      if (!tagObj) tagObj = this.getTagObject(item);\n      var props = this.stringifyProps(item, tagObj, ctx);\n      if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;\n      var str = typeof tagObj.stringify === \'function\' ? tagObj.stringify(item, ctx, onComment, onChompKeep) : item instanceof schema_Collection_Collection ? item.toString(ctx, onComment, onChompKeep) : Object(dist_stringify["b" /* stringifyString */])(item, ctx, onComment, onChompKeep);\n      return props ? item instanceof schema_Collection_Collection && str[0] !== \'{\' && str[0] !== \'[\' ? "".concat(props, "\\n").concat(ctx.indent).concat(str) : "".concat(props, " ").concat(str) : str;\n    }\n  }]);\n\n  return Schema;\n}();\n\ndefineProperty_default()(schema_Schema, "defaultPrefix", \'tag:yaml.org,2002:\');\n\ndefineProperty_default()(schema_Schema, "defaultTags", {\n  MAP: \'tag:yaml.org,2002:map\',\n  SEQ: \'tag:yaml.org,2002:seq\',\n  STR: \'tag:yaml.org,2002:str\'\n});\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/Document.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Document_isCollectionItem = function isCollectionItem(node) {\n  return node && [constants["b" /* Type */].MAP_KEY, constants["b" /* Type */].MAP_VALUE, constants["b" /* Type */].SEQ_ITEM].includes(node.type);\n};\n\nvar dist_Document_Document = /*#__PURE__*/function () {\n  function Document(options) {\n    classCallCheck_default()(this, Document);\n\n    this.anchors = new Anchors_Anchors(options.anchorPrefix);\n    this.commentBefore = null;\n    this.comment = null;\n    this.contents = null;\n    this.directivesEndMarker = null;\n    this.errors = [];\n    this.options = options;\n    this.schema = null;\n    this.tagPrefixes = [];\n    this.version = null;\n    this.warnings = [];\n  }\n\n  createClass_default()(Document, [{\n    key: "assertCollectionContents",\n    value: function assertCollectionContents() {\n      if (this.contents instanceof schema_Collection_Collection) return true;\n      throw new Error(\'Expected a YAML collection as document contents\');\n    }\n  }, {\n    key: "add",\n    value: function add(value) {\n      this.assertCollectionContents();\n      return this.contents.add(value);\n    }\n  }, {\n    key: "addIn",\n    value: function addIn(path, value) {\n      this.assertCollectionContents();\n      this.contents.addIn(path, value);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(key) {\n      this.assertCollectionContents();\n      return this.contents.delete(key);\n    }\n  }, {\n    key: "deleteIn",\n    value: function deleteIn(path) {\n      if (Collection_isEmptyPath(path)) {\n        if (this.contents == null) return false;\n        this.contents = null;\n        return true;\n      }\n\n      this.assertCollectionContents();\n      return this.contents.deleteIn(path);\n    }\n  }, {\n    key: "getDefaults",\n    value: function getDefaults() {\n      return Document.defaults[this.version] || Document.defaults[this.options.version] || {};\n    }\n  }, {\n    key: "get",\n    value: function get(key, keepScalar) {\n      return this.contents instanceof schema_Collection_Collection ? this.contents.get(key, keepScalar) : undefined;\n    }\n  }, {\n    key: "getIn",\n    value: function getIn(path, keepScalar) {\n      if (Collection_isEmptyPath(path)) return !keepScalar && this.contents instanceof Scalar_Scalar ? this.contents.value : this.contents;\n      return this.contents instanceof schema_Collection_Collection ? this.contents.getIn(path, keepScalar) : undefined;\n    }\n  }, {\n    key: "has",\n    value: function has(key) {\n      return this.contents instanceof schema_Collection_Collection ? this.contents.has(key) : false;\n    }\n  }, {\n    key: "hasIn",\n    value: function hasIn(path) {\n      if (Collection_isEmptyPath(path)) return this.contents !== undefined;\n      return this.contents instanceof schema_Collection_Collection ? this.contents.hasIn(path) : false;\n    }\n  }, {\n    key: "set",\n    value: function set(key, value) {\n      this.assertCollectionContents();\n      this.contents.set(key, value);\n    }\n  }, {\n    key: "setIn",\n    value: function setIn(path, value) {\n      if (Collection_isEmptyPath(path)) this.contents = value;else {\n        this.assertCollectionContents();\n        this.contents.setIn(path, value);\n      }\n    }\n  }, {\n    key: "setSchema",\n    value: function setSchema(id, customTags) {\n      if (!id && !customTags && this.schema) return;\n      if (typeof id === \'number\') id = id.toFixed(1);\n\n      if (id === \'1.0\' || id === \'1.1\' || id === \'1.2\') {\n        if (this.version) this.version = id;else this.options.version = id;\n        delete this.options.schema;\n      } else if (id && typeof id === \'string\') {\n        this.options.schema = id;\n      }\n\n      if (Array.isArray(customTags)) this.options.customTags = customTags;\n      var opt = Object.assign({}, this.getDefaults(), this.options);\n      this.schema = new schema_Schema(opt);\n    }\n  }, {\n    key: "parse",\n    value: function parse(node, prevDoc) {\n      if (this.options.keepCstNodes) this.cstNode = node;\n      if (this.options.keepNodeTypes) this.type = \'DOCUMENT\';\n      var _node$directives = node.directives,\n          directives = _node$directives === void 0 ? [] : _node$directives,\n          _node$contents = node.contents,\n          contents = _node$contents === void 0 ? [] : _node$contents,\n          directivesEndMarker = node.directivesEndMarker,\n          error = node.error,\n          valueRange = node.valueRange;\n\n      if (error) {\n        if (!error.source) error.source = this;\n        this.errors.push(error);\n      }\n\n      this.parseDirectives(directives, prevDoc);\n      if (directivesEndMarker) this.directivesEndMarker = true;\n      this.range = valueRange ? [valueRange.start, valueRange.end] : null;\n      this.setSchema();\n      this.anchors._cstAliases = [];\n      this.parseContents(contents);\n      this.anchors.resolveNodes();\n\n      if (this.options.prettyErrors) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _error = _step.value;\n            if (_error instanceof dist_errors["a" /* YAMLError */]) _error.makePretty();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.warnings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var warn = _step2.value;\n            if (warn instanceof dist_errors["a" /* YAMLError */]) warn.makePretty();\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: "parseDirectives",\n    value: function parseDirectives(directives, prevDoc) {\n      var _this = this;\n\n      var directiveComments = [];\n      var hasDirectives = false;\n      directives.forEach(function (directive) {\n        var comment = directive.comment,\n            name = directive.name;\n\n        switch (name) {\n          case \'TAG\':\n            _this.resolveTagDirective(directive);\n\n            hasDirectives = true;\n            break;\n\n          case \'YAML\':\n          case \'YAML:1.0\':\n            _this.resolveYamlDirective(directive);\n\n            hasDirectives = true;\n            break;\n\n          default:\n            if (name) {\n              var msg = "YAML only supports %TAG and %YAML directives, and not %".concat(name);\n\n              _this.warnings.push(new dist_errors["e" /* YAMLWarning */](directive, msg));\n            }\n\n        }\n\n        if (comment) directiveComments.push(comment);\n      });\n\n      if (prevDoc && !hasDirectives && \'1.1\' === (this.version || prevDoc.version || this.options.version)) {\n        var copyTagPrefix = function copyTagPrefix(_ref) {\n          var handle = _ref.handle,\n              prefix = _ref.prefix;\n          return {\n            handle: handle,\n            prefix: prefix\n          };\n        };\n\n        this.tagPrefixes = prevDoc.tagPrefixes.map(copyTagPrefix);\n        this.version = prevDoc.version;\n      }\n\n      this.commentBefore = directiveComments.join(\'\\n\') || null;\n    }\n  }, {\n    key: "parseContents",\n    value: function parseContents(contents) {\n      var _this2 = this;\n\n      var comments = {\n        before: [],\n        after: []\n      };\n      var contentNodes = [];\n      var spaceBefore = false;\n      contents.forEach(function (node) {\n        if (node.valueRange) {\n          if (contentNodes.length === 1) {\n            var msg = \'Document is not valid YAML (bad indentation?)\';\n\n            _this2.errors.push(new dist_errors["d" /* YAMLSyntaxError */](node, msg));\n          }\n\n          var res = _this2.resolveNode(node);\n\n          if (spaceBefore) {\n            res.spaceBefore = true;\n            spaceBefore = false;\n          }\n\n          contentNodes.push(res);\n        } else if (node.comment !== null) {\n          var cc = contentNodes.length === 0 ? comments.before : comments.after;\n          cc.push(node.comment);\n        } else if (node.type === constants["b" /* Type */].BLANK_LINE) {\n          spaceBefore = true;\n\n          if (contentNodes.length === 0 && comments.before.length > 0 && !_this2.commentBefore) {\n            // space-separated comments at start are parsed as document comments\n            _this2.commentBefore = comments.before.join(\'\\n\');\n            comments.before = [];\n          }\n        }\n      });\n\n      switch (contentNodes.length) {\n        case 0:\n          this.contents = null;\n          comments.after = comments.before;\n          break;\n\n        case 1:\n          this.contents = contentNodes[0];\n\n          if (this.contents) {\n            var cb = comments.before.join(\'\\n\') || null;\n\n            if (cb) {\n              var cbNode = this.contents instanceof schema_Collection_Collection && this.contents.items[0] ? this.contents.items[0] : this.contents;\n              cbNode.commentBefore = cbNode.commentBefore ? "".concat(cb, "\\n").concat(cbNode.commentBefore) : cb;\n            }\n          } else {\n            comments.after = comments.before.concat(comments.after);\n          }\n\n          break;\n\n        default:\n          this.contents = contentNodes;\n\n          if (this.contents[0]) {\n            this.contents[0].commentBefore = comments.before.join(\'\\n\') || null;\n          } else {\n            comments.after = comments.before.concat(comments.after);\n          }\n\n      }\n\n      this.comment = comments.after.join(\'\\n\') || null;\n    }\n  }, {\n    key: "resolveTagDirective",\n    value: function resolveTagDirective(directive) {\n      var _directive$parameters = slicedToArray_default()(directive.parameters, 2),\n          handle = _directive$parameters[0],\n          prefix = _directive$parameters[1];\n\n      if (handle && prefix) {\n        if (this.tagPrefixes.every(function (p) {\n          return p.handle !== handle;\n        })) {\n          this.tagPrefixes.push({\n            handle: handle,\n            prefix: prefix\n          });\n        } else {\n          var msg = \'The %TAG directive must only be given at most once per handle in the same document.\';\n          this.errors.push(new dist_errors["c" /* YAMLSemanticError */](directive, msg));\n        }\n      } else {\n        var _msg = \'Insufficient parameters given for %TAG directive\';\n        this.errors.push(new dist_errors["c" /* YAMLSemanticError */](directive, _msg));\n      }\n    }\n  }, {\n    key: "resolveYamlDirective",\n    value: function resolveYamlDirective(directive) {\n      var _directive$parameters2 = slicedToArray_default()(directive.parameters, 1),\n          version = _directive$parameters2[0];\n\n      if (directive.name === \'YAML:1.0\') version = \'1.0\';\n\n      if (this.version) {\n        var msg = \'The %YAML directive must only be given at most once per document.\';\n        this.errors.push(new dist_errors["c" /* YAMLSemanticError */](directive, msg));\n      }\n\n      if (!version) {\n        var _msg2 = \'Insufficient parameters given for %YAML directive\';\n        this.errors.push(new dist_errors["c" /* YAMLSemanticError */](directive, _msg2));\n      } else {\n        if (!Document.defaults[version]) {\n          var v0 = this.version || this.options.version;\n\n          var _msg3 = "Document will be parsed as YAML ".concat(v0, " rather than YAML ").concat(version);\n\n          this.warnings.push(new dist_errors["e" /* YAMLWarning */](directive, _msg3));\n        }\n\n        this.version = version;\n      }\n    }\n  }, {\n    key: "resolveTagName",\n    value: function resolveTagName(node) {\n      var tag = node.tag,\n          type = node.type;\n      var nonSpecific = false;\n\n      if (tag) {\n        var handle = tag.handle,\n            suffix = tag.suffix,\n            verbatim = tag.verbatim;\n\n        if (verbatim) {\n          if (verbatim !== \'!\' && verbatim !== \'!!\') return verbatim;\n          var msg = "Verbatim tags aren\'t resolved, so ".concat(verbatim, " is invalid.");\n          this.errors.push(new dist_errors["c" /* YAMLSemanticError */](node, msg));\n        } else if (handle === \'!\' && !suffix) {\n          nonSpecific = true;\n        } else {\n          var prefix = this.tagPrefixes.find(function (p) {\n            return p.handle === handle;\n          });\n\n          if (!prefix) {\n            var dtp = this.getDefaults().tagPrefixes;\n            if (dtp) prefix = dtp.find(function (p) {\n              return p.handle === handle;\n            });\n          }\n\n          if (prefix) {\n            if (suffix) {\n              if (handle === \'!\' && (this.version || this.options.version) === \'1.0\') {\n                if (suffix[0] === \'^\') return suffix;\n\n                if (/[:/]/.test(suffix)) {\n                  // word/foo -> tag:word.yaml.org,2002:foo\n                  var vocab = suffix.match(/^([a-z0-9-]+)\\/(.*)/i);\n                  return vocab ? "tag:".concat(vocab[1], ".yaml.org,2002:").concat(vocab[2]) : "tag:".concat(suffix);\n                }\n              }\n\n              return prefix.prefix + decodeURIComponent(suffix);\n            }\n\n            this.errors.push(new dist_errors["c" /* YAMLSemanticError */](node, "The ".concat(handle, " tag has no suffix.")));\n          } else {\n            var _msg4 = "The ".concat(handle, " tag handle is non-default and was not declared.");\n\n            this.errors.push(new dist_errors["c" /* YAMLSemanticError */](node, _msg4));\n          }\n        }\n      }\n\n      switch (type) {\n        case constants["b" /* Type */].BLOCK_FOLDED:\n        case constants["b" /* Type */].BLOCK_LITERAL:\n        case constants["b" /* Type */].QUOTE_DOUBLE:\n        case constants["b" /* Type */].QUOTE_SINGLE:\n          return schema_Schema.defaultTags.STR;\n\n        case constants["b" /* Type */].FLOW_MAP:\n        case constants["b" /* Type */].MAP:\n          return schema_Schema.defaultTags.MAP;\n\n        case constants["b" /* Type */].FLOW_SEQ:\n        case constants["b" /* Type */].SEQ:\n          return schema_Schema.defaultTags.SEQ;\n\n        case constants["b" /* Type */].PLAIN:\n          return nonSpecific ? schema_Schema.defaultTags.STR : null;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: "resolveNode",\n    value: function resolveNode(node) {\n      if (!node) return null;\n      var anchors = this.anchors,\n          errors = this.errors,\n          schema = this.schema;\n      var hasAnchor = false;\n      var hasTag = false;\n      var comments = {\n        before: [],\n        after: []\n      };\n      var props = Document_isCollectionItem(node.context.parent) ? node.context.parent.props.concat(node.props) : node.props;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = props[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _step3$value = _step3.value,\n              start = _step3$value.start,\n              end = _step3$value.end;\n\n          switch (node.context.src[start]) {\n            case constants["a" /* Char */].COMMENT:\n              {\n                if (!node.commentHasRequiredWhitespace(start)) {\n                  var _msg7 = \'Comments must be separated from other tokens by white space characters\';\n                  errors.push(new dist_errors["c" /* YAMLSemanticError */](node, _msg7));\n                }\n\n                var c = node.context.src.slice(start + 1, end);\n                var header = node.header,\n                    valueRange = node.valueRange;\n\n                if (valueRange && (start > valueRange.start || header && start > header.start)) {\n                  comments.after.push(c);\n                } else {\n                  comments.before.push(c);\n                }\n              }\n              break;\n\n            case constants["a" /* Char */].ANCHOR:\n              if (hasAnchor) {\n                var _msg8 = \'A node can have at most one anchor\';\n                errors.push(new dist_errors["c" /* YAMLSemanticError */](node, _msg8));\n              }\n\n              hasAnchor = true;\n              break;\n\n            case constants["a" /* Char */].TAG:\n              if (hasTag) {\n                var _msg9 = \'A node can have at most one tag\';\n                errors.push(new dist_errors["c" /* YAMLSemanticError */](node, _msg9));\n              }\n\n              hasTag = true;\n              break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (hasAnchor) {\n        var name = node.anchor;\n        var prev = anchors.getNode(name); // At this point, aliases for any preceding node with the same anchor\n        // name have already been resolved, so it may safely be renamed.\n\n        if (prev) anchors.map[anchors.newName(name)] = prev; // During parsing, we need to store the CST node in anchors.map as\n        // anchors need to be available during resolution to allow for\n        // circular references.\n\n        anchors.map[name] = node;\n      }\n\n      var res;\n\n      if (node.type === constants["b" /* Type */].ALIAS) {\n        if (hasAnchor || hasTag) {\n          var msg = \'An alias node must not specify any properties\';\n          errors.push(new dist_errors["c" /* YAMLSemanticError */](node, msg));\n        }\n\n        var _name = node.rawValue;\n        var src = anchors.getNode(_name);\n\n        if (!src) {\n          var _msg5 = "Aliased anchor not found: ".concat(_name);\n\n          errors.push(new dist_errors["b" /* YAMLReferenceError */](node, _msg5));\n          return null;\n        } // Lazy resolution for circular references\n\n\n        res = new schema_Alias_Alias(src);\n\n        anchors._cstAliases.push(res);\n      } else {\n        var tagName = this.resolveTagName(node);\n\n        if (tagName) {\n          res = schema.resolveNodeWithFallback(this, node, tagName);\n        } else {\n          if (node.type !== constants["b" /* Type */].PLAIN) {\n            var _msg6 = "Failed to resolve ".concat(node.type, " node here");\n\n            errors.push(new dist_errors["d" /* YAMLSyntaxError */](node, _msg6));\n            return null;\n          }\n\n          try {\n            res = schema.resolveScalar(node.strValue || \'\');\n          } catch (error) {\n            if (!error.source) error.source = node;\n            errors.push(error);\n            return null;\n          }\n        }\n      }\n\n      if (res) {\n        res.range = [node.range.start, node.range.end];\n        if (this.options.keepCstNodes) res.cstNode = node;\n        if (this.options.keepNodeTypes) res.type = node.type;\n        var cb = comments.before.join(\'\\n\');\n\n        if (cb) {\n          res.commentBefore = res.commentBefore ? "".concat(res.commentBefore, "\\n").concat(cb) : cb;\n        }\n\n        var ca = comments.after.join(\'\\n\');\n        if (ca) res.comment = res.comment ? "".concat(res.comment, "\\n").concat(ca) : ca;\n      }\n\n      return node.resolved = res;\n    }\n  }, {\n    key: "listNonDefaultTags",\n    value: function listNonDefaultTags() {\n      return listTagNames(this.contents).filter(function (t) {\n        return t.indexOf(schema_Schema.defaultPrefix) !== 0;\n      });\n    }\n  }, {\n    key: "setTagPrefix",\n    value: function setTagPrefix(handle, prefix) {\n      if (handle[0] !== \'!\' || handle[handle.length - 1] !== \'!\') throw new Error(\'Handle must start and end with !\');\n\n      if (prefix) {\n        var prev = this.tagPrefixes.find(function (p) {\n          return p.handle === handle;\n        });\n        if (prev) prev.prefix = prefix;else this.tagPrefixes.push({\n          handle: handle,\n          prefix: prefix\n        });\n      } else {\n        this.tagPrefixes = this.tagPrefixes.filter(function (p) {\n          return p.handle !== handle;\n        });\n      }\n    }\n  }, {\n    key: "stringifyTag",\n    value: function stringifyTag(tag) {\n      if ((this.version || this.options.version) === \'1.0\') {\n        var priv = tag.match(/^tag:private\\.yaml\\.org,2002:([^:/]+)$/);\n        if (priv) return \'!\' + priv[1];\n        var vocab = tag.match(/^tag:([a-zA-Z0-9-]+)\\.yaml\\.org,2002:(.*)/);\n        return vocab ? "!".concat(vocab[1], "/").concat(vocab[2]) : "!".concat(tag.replace(/^tag:/, \'\'));\n      } else {\n        var p = this.tagPrefixes.find(function (p) {\n          return tag.indexOf(p.prefix) === 0;\n        });\n\n        if (!p) {\n          var dtp = this.getDefaults().tagPrefixes;\n          p = dtp && dtp.find(function (p) {\n            return tag.indexOf(p.prefix) === 0;\n          });\n        }\n\n        if (!p) return tag[0] === \'!\' ? tag : "!<".concat(tag, ">");\n        var suffix = tag.substr(p.prefix.length).replace(/[!,[\\]{}]/g, function (ch) {\n          return {\n            \'!\': \'%21\',\n            \',\': \'%2C\',\n            \'[\': \'%5B\',\n            \']\': \'%5D\',\n            \'{\': \'%7B\',\n            \'}\': \'%7D\'\n          }[ch];\n        });\n        return p.handle + suffix;\n      }\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON(arg) {\n      var _this3 = this;\n\n      var _this$options = this.options,\n          keepBlobsInJSON = _this$options.keepBlobsInJSON,\n          mapAsMap = _this$options.mapAsMap,\n          maxAliasCount = _this$options.maxAliasCount;\n      var keep = keepBlobsInJSON && (typeof arg !== \'string\' || !(this.contents instanceof Scalar_Scalar));\n      var ctx = {\n        doc: this,\n        keep: keep,\n        mapAsMap: keep && !!mapAsMap,\n        maxAliasCount: maxAliasCount\n      };\n      var anchorNames = Object.keys(this.anchors.map);\n      if (anchorNames.length > 0) ctx.anchors = anchorNames.map(function (name) {\n        return {\n          alias: [],\n          aliasCount: 0,\n          count: 1,\n          node: _this3.anchors.map[name]\n        };\n      });\n      return toJSON_toJSON(this.contents, arg, ctx);\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      if (this.errors.length > 0) throw new Error(\'Document with errors cannot be stringified\');\n      this.setSchema();\n      var lines = [];\n      var hasDirectives = false;\n\n      if (this.version) {\n        var vd = \'%YAML 1.2\';\n\n        if (this.schema.name === \'yaml-1.1\') {\n          if (this.version === \'1.0\') vd = \'%YAML:1.0\';else if (this.version === \'1.1\') vd = \'%YAML 1.1\';\n        }\n\n        lines.push(vd);\n        hasDirectives = true;\n      }\n\n      var tagNames = this.listNonDefaultTags();\n      this.tagPrefixes.forEach(function (_ref2) {\n        var handle = _ref2.handle,\n            prefix = _ref2.prefix;\n\n        if (tagNames.some(function (t) {\n          return t.indexOf(prefix) === 0;\n        })) {\n          lines.push("%TAG ".concat(handle, " ").concat(prefix));\n          hasDirectives = true;\n        }\n      });\n      if (hasDirectives || this.directivesEndMarker) lines.push(\'---\');\n\n      if (this.commentBefore) {\n        if (hasDirectives || !this.directivesEndMarker) lines.unshift(\'\');\n        lines.unshift(this.commentBefore.replace(/^/gm, \'#\'));\n      }\n\n      var ctx = {\n        anchors: {},\n        doc: this,\n        indent: \'\'\n      };\n      var chompKeep = false;\n      var contentComment = null;\n\n      if (this.contents) {\n        if (this.contents instanceof Node_Node) {\n          if (this.contents.spaceBefore && (hasDirectives || this.directivesEndMarker)) lines.push(\'\');\n          if (this.contents.commentBefore) lines.push(this.contents.commentBefore.replace(/^/gm, \'#\')); // top-level block scalars need to be indented if followed by a comment\n\n          ctx.forceBlockIndent = !!this.comment;\n          contentComment = this.contents.comment;\n        }\n\n        var onChompKeep = contentComment ? null : function () {\n          return chompKeep = true;\n        };\n        var body = this.schema.stringify(this.contents, ctx, function () {\n          return contentComment = null;\n        }, onChompKeep);\n        lines.push(Object(addComment["b" /* default */])(body, \'\', contentComment));\n      } else if (this.contents !== undefined) {\n        lines.push(this.schema.stringify(this.contents, ctx));\n      }\n\n      if (this.comment) {\n        if ((!chompKeep || contentComment) && lines[lines.length - 1] !== \'\') lines.push(\'\');\n        lines.push(this.comment.replace(/^/gm, \'#\'));\n      }\n\n      return lines.join(\'\\n\') + \'\\n\';\n    }\n  }]);\n\n  return Document;\n}();\n\ndefineProperty_default()(dist_Document_Document, "defaults", {\n  \'1.0\': {\n    schema: \'yaml-1.1\',\n    merge: true,\n    tagPrefixes: [{\n      handle: \'!\',\n      prefix: schema_Schema.defaultPrefix\n    }, {\n      handle: \'!!\',\n      prefix: \'tag:private.yaml.org,2002:\'\n    }]\n  },\n  \'1.1\': {\n    schema: \'yaml-1.1\',\n    merge: true,\n    tagPrefixes: [{\n      handle: \'!\',\n      prefix: \'!\'\n    }, {\n      handle: \'!!\',\n      prefix: schema_Schema.defaultPrefix\n    }]\n  },\n  \'1.2\': {\n    schema: \'core\',\n    merge: false,\n    tagPrefixes: [{\n      handle: \'!\',\n      prefix: \'!\'\n    }, {\n      handle: \'!!\',\n      prefix: schema_Schema.defaultPrefix\n    }]\n  }\n});\n\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/index.js\n\n\n\n\n\n\n\n\n\nvar defaultOptions = {\n  anchorPrefix: \'a\',\n  customTags: null,\n  keepCstNodes: false,\n  keepNodeTypes: true,\n  keepBlobsInJSON: true,\n  mapAsMap: false,\n  maxAliasCount: 100,\n  prettyErrors: false,\n  // TODO Set true in v2\n  simpleKeys: false,\n  version: \'1.2\'\n};\n\nfunction dist_createNode(value) {\n  var wrapScalars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var tag = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (tag === undefined && typeof wrapScalars === \'string\') {\n    tag = wrapScalars;\n    wrapScalars = true;\n  }\n\n  var options = Object.assign({}, dist_Document_Document.defaults[defaultOptions.version], defaultOptions);\n  var schema = new schema_Schema(options);\n  return schema.createNode(value, wrapScalars, tag);\n}\n\nvar dist_Document = /*#__PURE__*/function (_YAMLDocument) {\n  inherits_default()(Document, _YAMLDocument);\n\n  function Document(options) {\n    classCallCheck_default()(this, Document);\n\n    return possibleConstructorReturn_default()(this, getPrototypeOf_default()(Document).call(this, Object.assign({}, defaultOptions, options)));\n  }\n\n  return Document;\n}(dist_Document_Document);\n\nfunction parseAllDocuments(src, options) {\n  var stream = [];\n  var prev;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = parse_parse(src)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var cstDoc = _step.value;\n      var doc = new dist_Document(options);\n      doc.parse(cstDoc, prev);\n      stream.push(doc);\n      prev = doc;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return stream;\n}\n\nfunction parseDocument(src, options) {\n  var cst = parse_parse(src);\n  var doc = new dist_Document(options).parse(cst[0]);\n\n  if (cst.length > 1) {\n    var errMsg = \'Source contains multiple documents; please use YAML.parseAllDocuments()\';\n    doc.errors.unshift(new dist_errors["c" /* YAMLSemanticError */](cst[1], errMsg));\n  }\n\n  return doc;\n}\n\nfunction dist_parse(src, options) {\n  var doc = parseDocument(src, options);\n  doc.warnings.forEach(function (warning) {\n    return Object(warnings["a" /* warn */])(warning);\n  });\n  if (doc.errors.length > 0) throw doc.errors[0];\n  return doc.toJSON();\n}\n\nfunction browser_dist_stringify(value, options) {\n  var doc = new dist_Document(options);\n  doc.contents = value;\n  return String(doc);\n}\n\n/* harmony default export */ var dist = __webpack_exports__["default"] = ({\n  createNode: dist_createNode,\n  defaultOptions: defaultOptions,\n  Document: dist_Document,\n  parse: dist_parse,\n  parseAllDocuments: parseAllDocuments,\n  parseCST: parse_parse,\n  parseDocument: parseDocument,\n  stringify: browser_dist_stringify\n});\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/index.js_+_41_modules?')},"./node_modules/yaml/browser/dist/stringify.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ stringifyNumber; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ stringifyString; });\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/addComment.js\nvar addComment = __webpack_require__(\"./node_modules/yaml/browser/dist/addComment.js\");\n\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/constants.js\nvar constants = __webpack_require__(\"./node_modules/yaml/browser/dist/constants.js\");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/foldFlowLines.js\nvar FOLD_FLOW = 'flow';\nvar FOLD_BLOCK = 'block';\nvar FOLD_QUOTED = 'quoted'; // presumes i+1 is at the start of a line\n// returns index of last newline in more-indented block\n\nvar consumeMoreIndentedLines = function consumeMoreIndentedLines(text, i) {\n  var ch = text[i + 1];\n\n  while (ch === ' ' || ch === '\\t') {\n    do {\n      ch = text[i += 1];\n    } while (ch && ch !== '\\n');\n\n    ch = text[i + 1];\n  }\n\n  return i;\n};\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n *\n * @param {string} text\n * @param {string} indent\n * @param {string} [mode='flow'] `'block'` prevents more-indented lines\n *   from being folded; `'quoted'` allows for `\\` escapes, including escaped\n *   newlines\n * @param {Object} options\n * @param {number} [options.indentAtStart] Accounts for leading contents on\n *   the first line, defaulting to `indent.length`\n * @param {number} [options.lineWidth=80]\n * @param {number} [options.minContentWidth=20] Allow highly indented lines to\n *   stretch the line width\n * @param {function} options.onFold Called once if the text is folded\n * @param {function} options.onFold Called once if any line of text exceeds\n *   lineWidth characters\n */\n\n\nfunction foldFlowLines(text, indent, mode, _ref) {\n  var indentAtStart = _ref.indentAtStart,\n      _ref$lineWidth = _ref.lineWidth,\n      lineWidth = _ref$lineWidth === void 0 ? 80 : _ref$lineWidth,\n      _ref$minContentWidth = _ref.minContentWidth,\n      minContentWidth = _ref$minContentWidth === void 0 ? 20 : _ref$minContentWidth,\n      onFold = _ref.onFold,\n      onOverflow = _ref.onOverflow;\n  if (!lineWidth || lineWidth < 0) return text;\n  var endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n  if (text.length <= endStep) return text;\n  var folds = [];\n  var escapedFolds = {};\n  var end = lineWidth - (typeof indentAtStart === 'number' ? indentAtStart : indent.length);\n  var split = undefined;\n  var prev = undefined;\n  var overflow = false;\n  var i = -1;\n\n  if (mode === FOLD_BLOCK) {\n    i = consumeMoreIndentedLines(text, i);\n    if (i !== -1) end = i + endStep;\n  }\n\n  for (var ch; ch = text[i += 1];) {\n    if (mode === FOLD_QUOTED && ch === '\\\\') {\n      switch (text[i + 1]) {\n        case 'x':\n          i += 3;\n          break;\n\n        case 'u':\n          i += 5;\n          break;\n\n        case 'U':\n          i += 9;\n          break;\n\n        default:\n          i += 1;\n      }\n    }\n\n    if (ch === '\\n') {\n      if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);\n      end = i + endStep;\n      split = undefined;\n    } else {\n      if (ch === ' ' && prev && prev !== ' ' && prev !== '\\n' && prev !== '\\t') {\n        // space surrounded by non-space can be replaced with newline + indent\n        var next = text[i + 1];\n        if (next && next !== ' ' && next !== '\\n' && next !== '\\t') split = i;\n      }\n\n      if (i >= end) {\n        if (split) {\n          folds.push(split);\n          end = split + endStep;\n          split = undefined;\n        } else if (mode === FOLD_QUOTED) {\n          // white-space collected at end may stretch past lineWidth\n          while (prev === ' ' || prev === '\\t') {\n            prev = ch;\n            ch = text[i += 1];\n            overflow = true;\n          } // i - 2 accounts for not-dropped last char + newline-escaping \\\n\n\n          folds.push(i - 2);\n          escapedFolds[i - 2] = true;\n          end = i - 2 + endStep;\n          split = undefined;\n        } else {\n          overflow = true;\n        }\n      }\n    }\n\n    prev = ch;\n  }\n\n  if (overflow && onOverflow) onOverflow();\n  if (folds.length === 0) return text;\n  if (onFold) onFold();\n  var res = text.slice(0, folds[0]);\n\n  for (var _i = 0; _i < folds.length; ++_i) {\n    var fold = folds[_i];\n\n    var _end = folds[_i + 1] || text.length;\n\n    if (mode === FOLD_QUOTED && escapedFolds[fold]) res += \"\".concat(text[fold], \"\\\\\");\n    res += \"\\n\".concat(indent).concat(text.slice(fold + 1, _end));\n  }\n\n  return res;\n}\n// EXTERNAL MODULE: ./node_modules/yaml/browser/dist/tags/options.js\nvar options = __webpack_require__(\"./node_modules/yaml/browser/dist/tags/options.js\");\n\n// CONCATENATED MODULE: ./node_modules/yaml/browser/dist/stringify.js\n\n\n\n\n\nvar stringify_getFoldOptions = function getFoldOptions(_ref) {\n  var indentAtStart = _ref.indentAtStart;\n  return indentAtStart ? Object.assign({\n    indentAtStart: indentAtStart\n  }, options[\"d\" /* strOptions */].fold) : options[\"d\" /* strOptions */].fold;\n};\n\nfunction stringifyNumber(_ref2) {\n  var format = _ref2.format,\n      minFractionDigits = _ref2.minFractionDigits,\n      tag = _ref2.tag,\n      value = _ref2.value;\n  if (!isFinite(value)) return isNaN(value) ? '.nan' : value < 0 ? '-.inf' : '.inf';\n  var n = JSON.stringify(value);\n\n  if (!format && minFractionDigits && (!tag || tag === 'tag:yaml.org,2002:float') && /^\\d/.test(n)) {\n    var i = n.indexOf('.');\n\n    if (i < 0) {\n      i = n.length;\n      n += '.';\n    }\n\n    var d = minFractionDigits - (n.length - i - 1);\n\n    while (d-- > 0) {\n      n += '0';\n    }\n  }\n\n  return n;\n}\n\nfunction lineLengthOverLimit(str, limit) {\n  var strLen = str.length;\n  if (strLen <= limit) return false;\n\n  for (var i = 0, start = 0; i < strLen; ++i) {\n    if (str[i] === '\\n') {\n      if (i - start > limit) return true;\n      start = i + 1;\n      if (strLen - start <= limit) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction doubleQuotedString(value, ctx) {\n  var implicitKey = ctx.implicitKey,\n      indent = ctx.indent;\n  var _strOptions$doubleQuo = options[\"d\" /* strOptions */].doubleQuoted,\n      jsonEncoding = _strOptions$doubleQuo.jsonEncoding,\n      minMultiLineLength = _strOptions$doubleQuo.minMultiLineLength;\n  var json = JSON.stringify(value);\n  if (jsonEncoding) return json;\n  var str = '';\n  var start = 0;\n\n  for (var i = 0, ch = json[i]; ch; ch = json[++i]) {\n    if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n      // space before newline needs to be escaped to not be folded\n      str += json.slice(start, i) + '\\\\ ';\n      i += 1;\n      start = i;\n      ch = '\\\\';\n    }\n\n    if (ch === '\\\\') switch (json[i + 1]) {\n      case 'u':\n        {\n          str += json.slice(start, i);\n          var code = json.substr(i + 2, 4);\n\n          switch (code) {\n            case '0000':\n              str += '\\\\0';\n              break;\n\n            case '0007':\n              str += '\\\\a';\n              break;\n\n            case '000b':\n              str += '\\\\v';\n              break;\n\n            case '001b':\n              str += '\\\\e';\n              break;\n\n            case '0085':\n              str += '\\\\N';\n              break;\n\n            case '00a0':\n              str += '\\\\_';\n              break;\n\n            case '2028':\n              str += '\\\\L';\n              break;\n\n            case '2029':\n              str += '\\\\P';\n              break;\n\n            default:\n              if (code.substr(0, 2) === '00') str += '\\\\x' + code.substr(2);else str += json.substr(i, 6);\n          }\n\n          i += 5;\n          start = i + 1;\n        }\n        break;\n\n      case 'n':\n        if (implicitKey || json[i + 2] === '\"' || json.length < minMultiLineLength) {\n          i += 1;\n        } else {\n          // folding will eat first newline\n          str += json.slice(start, i) + '\\n\\n';\n\n          while (json[i + 2] === '\\\\' && json[i + 3] === 'n' && json[i + 4] !== '\"') {\n            str += '\\n';\n            i += 2;\n          }\n\n          str += indent; // space after newline needs to be escaped to not be folded\n\n          if (json[i + 2] === ' ') str += '\\\\';\n          i += 1;\n          start = i + 1;\n        }\n\n        break;\n\n      default:\n        i += 1;\n    }\n  }\n\n  str = start ? str + json.slice(start) : json;\n  return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, stringify_getFoldOptions(ctx));\n}\n\nfunction singleQuotedString(value, ctx) {\n  var indent = ctx.indent,\n      implicitKey = ctx.implicitKey;\n\n  if (implicitKey) {\n    if (/\\n/.test(value)) return doubleQuotedString(value, ctx);\n  } else {\n    // single quoted string can't have leading or trailing whitespace around newline\n    if (/[ \\t]\\n|\\n[ \\t]/.test(value)) return doubleQuotedString(value, ctx);\n  }\n\n  var res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, \"$&\\n\".concat(indent)) + \"'\";\n  return implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, stringify_getFoldOptions(ctx));\n}\n\nfunction blockString(_ref3, ctx, onComment, onChompKeep) {\n  var comment = _ref3.comment,\n      type = _ref3.type,\n      value = _ref3.value;\n\n  // 1. Block can't end in whitespace unless the last line is non-empty.\n  // 2. Strings consisting of only whitespace are best rendered explicitly.\n  if (/\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n    return doubleQuotedString(value, ctx);\n  }\n\n  var indent = ctx.indent || (ctx.forceBlockIndent ? ' ' : '');\n  var indentSize = indent ? '2' : '1'; // root is at -1\n\n  var literal = type === constants[\"b\" /* Type */].BLOCK_FOLDED ? false : type === constants[\"b\" /* Type */].BLOCK_LITERAL ? true : !lineLengthOverLimit(value, options[\"d\" /* strOptions */].fold.lineWidth - indent.length);\n  var header = literal ? '|' : '>';\n  if (!value) return header + '\\n';\n  var wsStart = '';\n  var wsEnd = '';\n  value = value.replace(/[\\n\\t ]*$/, function (ws) {\n    var n = ws.indexOf('\\n');\n\n    if (n === -1) {\n      header += '-'; // strip\n    } else if (value === ws || n !== ws.length - 1) {\n      header += '+'; // keep\n\n      if (onChompKeep) onChompKeep();\n    }\n\n    wsEnd = ws.replace(/\\n$/, '');\n    return '';\n  }).replace(/^[\\n ]*/, function (ws) {\n    if (ws.indexOf(' ') !== -1) header += indentSize;\n    var m = ws.match(/ +$/);\n\n    if (m) {\n      wsStart = ws.slice(0, -m[0].length);\n      return m[0];\n    } else {\n      wsStart = ws;\n      return '';\n    }\n  });\n  if (wsEnd) wsEnd = wsEnd.replace(/\\n+(?!\\n|$)/g, \"$&\".concat(indent));\n  if (wsStart) wsStart = wsStart.replace(/\\n+/g, \"$&\".concat(indent));\n\n  if (comment) {\n    header += ' #' + comment.replace(/ ?[\\r\\n]+/g, ' ');\n    if (onComment) onComment();\n  }\n\n  if (!value) return \"\".concat(header).concat(indentSize, \"\\n\").concat(indent).concat(wsEnd);\n\n  if (literal) {\n    value = value.replace(/\\n+/g, \"$&\".concat(indent));\n    return \"\".concat(header, \"\\n\").concat(indent).concat(wsStart).concat(value).concat(wsEnd);\n  }\n\n  value = value.replace(/\\n+/g, '\\n$&').replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n  //         ^ ind.line  ^ empty     ^ capture next empty lines only at end of indent\n  .replace(/\\n+/g, \"$&\".concat(indent));\n  var body = foldFlowLines(\"\".concat(wsStart).concat(value).concat(wsEnd), indent, FOLD_BLOCK, options[\"d\" /* strOptions */].fold);\n  return \"\".concat(header, \"\\n\").concat(indent).concat(body);\n}\n\nfunction plainString(item, ctx, onComment, onChompKeep) {\n  var comment = item.comment,\n      type = item.type,\n      value = item.value;\n  var actualString = ctx.actualString,\n      implicitKey = ctx.implicitKey,\n      indent = ctx.indent,\n      inFlow = ctx.inFlow,\n      tags = ctx.tags;\n\n  if (implicitKey && /[\\n[\\]{},]/.test(value) || inFlow && /[[\\]{},]/.test(value)) {\n    return doubleQuotedString(value, ctx);\n  }\n\n  if (!value || /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n    // not allowed:\n    // - empty string, '-' or '?'\n    // - start with an indicator character (except [?:-]) or /[?-] /\n    // - '\\n ', ': ' or ' \\n' anywhere\n    // - '#' not preceded by a non-space char\n    // - end with ' ' or ':'\n    return implicitKey || inFlow || value.indexOf('\\n') === -1 ? value.indexOf('\"') !== -1 && value.indexOf(\"'\") === -1 ? singleQuotedString(value, ctx) : doubleQuotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);\n  }\n\n  if (!implicitKey && !inFlow && type !== constants[\"b\" /* Type */].PLAIN && value.indexOf('\\n') !== -1) {\n    // Where allowed & type not set explicitly, prefer block style for multiline strings\n    return blockString(item, ctx, onComment, onChompKeep);\n  }\n\n  var str = value.replace(/\\n+/g, \"$&\\n\".concat(indent)); // Verify that output will be parsed as a string, as e.g. plain numbers and\n  // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n  // and others in v1.1.\n\n  if (actualString && typeof tags.resolveScalar(str).value !== 'string') {\n    return doubleQuotedString(value, ctx);\n  }\n\n  var body = implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, stringify_getFoldOptions(ctx));\n\n  if (comment && !inFlow && (body.indexOf('\\n') !== -1 || comment.indexOf('\\n') !== -1)) {\n    if (onComment) onComment();\n    return Object(addComment[\"a\" /* addCommentBefore */])(body, indent, comment);\n  }\n\n  return body;\n}\n\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n  var defaultType = options[\"d\" /* strOptions */].defaultType;\n  var implicitKey = ctx.implicitKey,\n      inFlow = ctx.inFlow;\n  var _item = item,\n      type = _item.type,\n      value = _item.value;\n\n  if (typeof value !== 'string') {\n    value = String(value);\n    item = Object.assign({}, item, {\n      value: value\n    });\n  }\n\n  var _stringify = function _stringify(_type) {\n    switch (_type) {\n      case constants[\"b\" /* Type */].BLOCK_FOLDED:\n      case constants[\"b\" /* Type */].BLOCK_LITERAL:\n        return blockString(item, ctx, onComment, onChompKeep);\n\n      case constants[\"b\" /* Type */].QUOTE_DOUBLE:\n        return doubleQuotedString(value, ctx);\n\n      case constants[\"b\" /* Type */].QUOTE_SINGLE:\n        return singleQuotedString(value, ctx);\n\n      case constants[\"b\" /* Type */].PLAIN:\n        return plainString(item, ctx, onComment, onChompKeep);\n\n      default:\n        return null;\n    }\n  };\n\n  if (type !== constants[\"b\" /* Type */].QUOTE_DOUBLE && /[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f]/.test(value)) {\n    // force double quotes on control characters\n    type = constants[\"b\" /* Type */].QUOTE_DOUBLE;\n  } else if ((implicitKey || inFlow) && (type === constants[\"b\" /* Type */].BLOCK_FOLDED || type === constants[\"b\" /* Type */].BLOCK_LITERAL)) {\n    // should not happen; blocks are not valid inside flow containers\n    type = constants[\"b\" /* Type */].QUOTE_DOUBLE;\n  }\n\n  var res = _stringify(type);\n\n  if (res === null) {\n    res = _stringify(defaultType);\n    if (res === null) throw new Error(\"Unsupported default string type \".concat(defaultType));\n  }\n\n  return res;\n}\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/stringify.js_+_1_modules?")},"./node_modules/yaml/browser/dist/tags/failsafe/string.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return resolveString; });\n/* harmony import */ var _stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/yaml/browser/dist/stringify.js");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/yaml/browser/dist/tags/options.js");\n\n\nvar resolveString = function resolveString(doc, node) {\n  // on error, will return { str: string, errors: Error[] }\n  var res = node.strValue;\n  if (!res) return \'\';\n  if (typeof res === \'string\') return res;\n  res.errors.forEach(function (error) {\n    if (!error.source) error.source = node;\n    doc.errors.push(error);\n  });\n  return res.str;\n};\n/* harmony default export */ __webpack_exports__["a"] = ({\n  identify: function identify(value) {\n    return typeof value === \'string\';\n  },\n  default: true,\n  tag: \'tag:yaml.org,2002:str\',\n  resolve: resolveString,\n  stringify: function stringify(item, ctx, onComment, onChompKeep) {\n    ctx = Object.assign({\n      actualString: true\n    }, ctx);\n    return Object(_stringify__WEBPACK_IMPORTED_MODULE_0__[/* stringifyString */ "b"])(item, ctx, onComment, onChompKeep);\n  },\n  options: _options__WEBPACK_IMPORTED_MODULE_1__[/* strOptions */ "d"]\n});\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/tags/failsafe/string.js?')},"./node_modules/yaml/browser/dist/tags/options.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return binaryOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return boolOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return nullOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return strOptions; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/yaml/browser/dist/constants.js");\n\nvar binaryOptions = {\n  defaultType: _constants__WEBPACK_IMPORTED_MODULE_0__[/* Type */ "b"].BLOCK_LITERAL,\n  lineWidth: 76\n};\nvar boolOptions = {\n  trueStr: \'true\',\n  falseStr: \'false\'\n};\nvar nullOptions = {\n  nullStr: \'null\'\n};\nvar strOptions = {\n  defaultType: _constants__WEBPACK_IMPORTED_MODULE_0__[/* Type */ "b"].PLAIN,\n  doubleQuoted: {\n    jsonEncoding: false,\n    minMultiLineLength: 40\n  },\n  fold: {\n    lineWidth: 80,\n    minContentWidth: 20\n  }\n};\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/tags/options.js?')},"./node_modules/yaml/browser/dist/tags/yaml-1.1/binary.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/yaml/browser/dist/constants.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/yaml/browser/dist/errors.js\");\n/* harmony import */ var _stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/yaml/browser/dist/stringify.js\");\n/* harmony import */ var _failsafe_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/yaml/browser/dist/tags/failsafe/string.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/yaml/browser/dist/tags/options.js\");\n/* global atob, btoa, Buffer */\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  identify: function identify(value) {\n    return value instanceof Uint8Array;\n  },\n  // Buffer inherits from Uint8Array\n  default: false,\n  tag: 'tag:yaml.org,2002:binary',\n\n  /**\n   * Returns a Buffer in node and an Uint8Array in browsers\n   *\n   * To use the resulting buffer as an image, you'll want to do something like:\n   *\n   *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n   *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n   */\n  resolve: function resolve(doc, node) {\n    var src = Object(_failsafe_string__WEBPACK_IMPORTED_MODULE_3__[/* resolveString */ \"b\"])(doc, node);\n\n    if (typeof Buffer === 'function') {\n      return Buffer.from(src, 'base64');\n    } else if (typeof atob === 'function') {\n      // On IE 11, atob() can't handle newlines\n      var str = atob(src.replace(/[\\n\\r]/g, ''));\n      var buffer = new Uint8Array(str.length);\n\n      for (var i = 0; i < str.length; ++i) {\n        buffer[i] = str.charCodeAt(i);\n      }\n\n      return buffer;\n    } else {\n      var msg = 'This environment does not support reading binary tags; either Buffer or atob is required';\n      doc.errors.push(new _errors__WEBPACK_IMPORTED_MODULE_1__[/* YAMLReferenceError */ \"b\"](node, msg));\n      return null;\n    }\n  },\n  options: _options__WEBPACK_IMPORTED_MODULE_4__[/* binaryOptions */ \"a\"],\n  stringify: function stringify(_ref, ctx, onComment, onChompKeep) {\n    var comment = _ref.comment,\n        type = _ref.type,\n        value = _ref.value;\n    var src;\n\n    if (typeof Buffer === 'function') {\n      src = value instanceof Buffer ? value.toString('base64') : Buffer.from(value.buffer).toString('base64');\n    } else if (typeof btoa === 'function') {\n      var s = '';\n\n      for (var i = 0; i < value.length; ++i) {\n        s += String.fromCharCode(value[i]);\n      }\n\n      src = btoa(s);\n    } else {\n      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n    }\n\n    if (!type) type = _options__WEBPACK_IMPORTED_MODULE_4__[/* binaryOptions */ \"a\"].defaultType;\n\n    if (type === _constants__WEBPACK_IMPORTED_MODULE_0__[/* Type */ \"b\"].QUOTE_DOUBLE) {\n      value = src;\n    } else {\n      var lineWidth = _options__WEBPACK_IMPORTED_MODULE_4__[/* binaryOptions */ \"a\"].lineWidth;\n      var n = Math.ceil(src.length / lineWidth);\n      var lines = new Array(n);\n\n      for (var _i = 0, o = 0; _i < n; ++_i, o += lineWidth) {\n        lines[_i] = src.substr(o, lineWidth);\n      }\n\n      value = lines.join(type === _constants__WEBPACK_IMPORTED_MODULE_0__[/* Type */ \"b\"].BLOCK_LITERAL ? '\\n' : ' ');\n    }\n\n    return Object(_stringify__WEBPACK_IMPORTED_MODULE_2__[/* stringifyString */ \"b\"])({\n      comment: comment,\n      type: type,\n      value: value\n    }, ctx, onComment, onChompKeep);\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/tags/yaml-1.1/binary.js?")},"./node_modules/yaml/browser/dist/warnings.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return warn; });\n/* unused harmony export warnFileDeprecation */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return warnOptionDeprecation; });\n/* global global, console */\nfunction warn(warning, type) {\n  if (global && global._YAML_SILENCE_WARNINGS) return;\n\n  var _ref = global && global.process,\n      emitWarning = _ref.emitWarning; // This will throw in Jest if `warning` is an Error instance due to\n  // https://github.com/facebook/jest/issues/2549\n\n\n  if (emitWarning) emitWarning(warning, type);else {\n    // eslint-disable-next-line no-console\n    console.warn(type ? "".concat(type, ": ").concat(warning) : warning);\n  }\n}\nfunction warnFileDeprecation(filename) {\n  if (global && global._YAML_SILENCE_DEPRECATION_WARNINGS) return;\n  var path = filename.replace(/.*yaml[/\\\\]/i, \'\').replace(/\\.js$/, \'\').replace(/\\\\/g, \'/\');\n  warn("The endpoint \'yaml/".concat(path, "\' will be removed in a future release."), \'DeprecationWarning\');\n}\nvar warned = {};\nfunction warnOptionDeprecation(name, alternative) {\n  if (global && global._YAML_SILENCE_DEPRECATION_WARNINGS) return;\n  if (warned[name]) return;\n  warned[name] = true;\n  var msg = "The option \'".concat(name, "\' will be removed in a future release");\n  msg += alternative ? ", use \'".concat(alternative, "\' instead.") : \'.\';\n  warn(msg, \'DeprecationWarning\');\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("./node_modules/webpack/buildin/global.js")))\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/dist/warnings.js?')},"./node_modules/yaml/browser/index.js":function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__("./node_modules/yaml/browser/dist/index.js").default\n\n\n//# sourceURL=webpack:///./node_modules/yaml/browser/index.js?')}}]);