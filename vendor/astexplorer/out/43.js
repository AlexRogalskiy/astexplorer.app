(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{"./node_modules/multimap/index.js":function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* global module, define */\n\nfunction mapEach(map, operation){\n  var keys = map.keys();\n  var next;\n  while(!(next = keys.next()).done) {\n    operation(map.get(next.value), next.value, map);\n  }\n}\n\nvar Multimap = (function() {\n  var mapCtor;\n  if (typeof Map !== 'undefined') {\n    mapCtor = Map;\n\n    if (!Map.prototype.keys) {\n      Map.prototype.keys = function() {\n        var keys = [];\n        this.forEach(function(item, key) {\n          keys.push(key);\n        });\n        return keys;\n      };\n    }\n  }\n\n  function Multimap(iterable) {\n    var self = this;\n\n    self._map = mapCtor;\n\n    if (Multimap.Map) {\n      self._map = Multimap.Map;\n    }\n\n    self._ = self._map ? new self._map() : {};\n\n    if (iterable) {\n      iterable.forEach(function(i) {\n        self.set(i[0], i[1]);\n      });\n    }\n  }\n\n  /**\n   * @param {Object} key\n   * @return {Array} An array of values, undefined if no such a key;\n   */\n  Multimap.prototype.get = function(key) {\n    return this._map ? this._.get(key) : this._[key];\n  };\n\n  /**\n   * @param {Object} key\n   * @param {Object} val...\n   */\n  Multimap.prototype.set = function(key, val) {\n    var args = Array.prototype.slice.call(arguments);\n\n    key = args.shift();\n\n    var entry = this.get(key);\n    if (!entry) {\n      entry = [];\n      if (this._map)\n        this._.set(key, entry);\n      else\n        this._[key] = entry;\n    }\n\n    Array.prototype.push.apply(entry, args);\n    return this;\n  };\n\n  /**\n   * @param {Object} key\n   * @param {Object=} val\n   * @return {boolean} true if any thing changed\n   */\n  Multimap.prototype.delete = function(key, val) {\n    if (!this.has(key))\n      return false;\n\n    if (arguments.length == 1) {\n      this._map ? (this._.delete(key)) : (delete this._[key]);\n      return true;\n    } else {\n      var entry = this.get(key);\n      var idx = entry.indexOf(val);\n      if (idx != -1) {\n        entry.splice(idx, 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * @param {Object} key\n   * @param {Object=} val\n   * @return {boolean} whether the map contains 'key' or 'key=>val' pair\n   */\n  Multimap.prototype.has = function(key, val) {\n    var hasKey = this._map ? this._.has(key) : this._.hasOwnProperty(key);\n\n    if (arguments.length == 1 || !hasKey)\n      return hasKey;\n\n    var entry = this.get(key) || [];\n    return entry.indexOf(val) != -1;\n  };\n\n\n  /**\n   * @return {Array} all the keys in the map\n   */\n  Multimap.prototype.keys = function() {\n    if (this._map)\n      return makeIterator(this._.keys());\n\n    return makeIterator(Object.keys(this._));\n  };\n\n  /**\n   * @return {Array} all the values in the map\n   */\n  Multimap.prototype.values = function() {\n    var vals = [];\n    this.forEachEntry(function(entry) {\n      Array.prototype.push.apply(vals, entry);\n    });\n\n    return makeIterator(vals);\n  };\n\n  /**\n   *\n   */\n  Multimap.prototype.forEachEntry = function(iter) {\n    mapEach(this, iter);\n  };\n\n  Multimap.prototype.forEach = function(iter) {\n    var self = this;\n    self.forEachEntry(function(entry, key) {\n      entry.forEach(function(item) {\n        iter(item, key, self);\n      });\n    });\n  };\n\n\n  Multimap.prototype.clear = function() {\n    if (this._map) {\n      this._.clear();\n    } else {\n      this._ = {};\n    }\n  };\n\n  Object.defineProperty(\n    Multimap.prototype,\n    \"size\", {\n      configurable: false,\n      enumerable: true,\n      get: function() {\n        var total = 0;\n\n        mapEach(this, function(value){\n          total += value.length;\n        });\n\n        return total;\n      }\n    });\n\n  var safariNext;\n\n  try{\n    safariNext = new Function('iterator', 'makeIterator', 'var keysArray = []; for(var key of iterator){keysArray.push(key);} return makeIterator(keysArray).next;');\n  }catch(error){\n    // for of not implemented;\n  }\n\n  function makeIterator(iterator){\n    if(Array.isArray(iterator)){\n      var nextIndex = 0;\n\n      return {\n        next: function(){\n          return nextIndex < iterator.length ?\n            {value: iterator[nextIndex++], done: false} :\n          {done: true};\n        }\n      };\n    }\n\n    // Only an issue in safari\n    if(!iterator.next && safariNext){\n      iterator.next = safariNext(iterator, makeIterator);\n    }\n\n    return iterator;\n  }\n\n  return Multimap;\n})();\n\n\nif( true && module && module.exports)\n  module.exports = Multimap;\nelse if(true)\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return Multimap; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/multimap/index.js?")},"./node_modules/shift-ast/dist/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Generated by src/generate.js.\n\n/**\n * Copyright 2016 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar ArrayAssignmentTarget = exports.ArrayAssignmentTarget = function ArrayAssignmentTarget(_ref) {\n  var elements = _ref.elements,\n      rest = _ref.rest;\n\n  _classCallCheck(this, ArrayAssignmentTarget);\n\n  this.type = 'ArrayAssignmentTarget';\n  this.elements = elements;\n  this.rest = rest;\n};\n\nvar ArrayBinding = exports.ArrayBinding = function ArrayBinding(_ref2) {\n  var elements = _ref2.elements,\n      rest = _ref2.rest;\n\n  _classCallCheck(this, ArrayBinding);\n\n  this.type = 'ArrayBinding';\n  this.elements = elements;\n  this.rest = rest;\n};\n\nvar ArrayExpression = exports.ArrayExpression = function ArrayExpression(_ref3) {\n  var elements = _ref3.elements;\n\n  _classCallCheck(this, ArrayExpression);\n\n  this.type = 'ArrayExpression';\n  this.elements = elements;\n};\n\nvar ArrowExpression = exports.ArrowExpression = function ArrowExpression(_ref4) {\n  var isAsync = _ref4.isAsync,\n      params = _ref4.params,\n      body = _ref4.body;\n\n  _classCallCheck(this, ArrowExpression);\n\n  this.type = 'ArrowExpression';\n  this.isAsync = isAsync;\n  this.params = params;\n  this.body = body;\n};\n\nvar AssignmentExpression = exports.AssignmentExpression = function AssignmentExpression(_ref5) {\n  var binding = _ref5.binding,\n      expression = _ref5.expression;\n\n  _classCallCheck(this, AssignmentExpression);\n\n  this.type = 'AssignmentExpression';\n  this.binding = binding;\n  this.expression = expression;\n};\n\nvar AssignmentTargetIdentifier = exports.AssignmentTargetIdentifier = function AssignmentTargetIdentifier(_ref6) {\n  var name = _ref6.name;\n\n  _classCallCheck(this, AssignmentTargetIdentifier);\n\n  this.type = 'AssignmentTargetIdentifier';\n  this.name = name;\n};\n\nvar AssignmentTargetPropertyIdentifier = exports.AssignmentTargetPropertyIdentifier = function AssignmentTargetPropertyIdentifier(_ref7) {\n  var binding = _ref7.binding,\n      init = _ref7.init;\n\n  _classCallCheck(this, AssignmentTargetPropertyIdentifier);\n\n  this.type = 'AssignmentTargetPropertyIdentifier';\n  this.binding = binding;\n  this.init = init;\n};\n\nvar AssignmentTargetPropertyProperty = exports.AssignmentTargetPropertyProperty = function AssignmentTargetPropertyProperty(_ref8) {\n  var name = _ref8.name,\n      binding = _ref8.binding;\n\n  _classCallCheck(this, AssignmentTargetPropertyProperty);\n\n  this.type = 'AssignmentTargetPropertyProperty';\n  this.name = name;\n  this.binding = binding;\n};\n\nvar AssignmentTargetWithDefault = exports.AssignmentTargetWithDefault = function AssignmentTargetWithDefault(_ref9) {\n  var binding = _ref9.binding,\n      init = _ref9.init;\n\n  _classCallCheck(this, AssignmentTargetWithDefault);\n\n  this.type = 'AssignmentTargetWithDefault';\n  this.binding = binding;\n  this.init = init;\n};\n\nvar AwaitExpression = exports.AwaitExpression = function AwaitExpression(_ref10) {\n  var expression = _ref10.expression;\n\n  _classCallCheck(this, AwaitExpression);\n\n  this.type = 'AwaitExpression';\n  this.expression = expression;\n};\n\nvar BinaryExpression = exports.BinaryExpression = function BinaryExpression(_ref11) {\n  var left = _ref11.left,\n      operator = _ref11.operator,\n      right = _ref11.right;\n\n  _classCallCheck(this, BinaryExpression);\n\n  this.type = 'BinaryExpression';\n  this.left = left;\n  this.operator = operator;\n  this.right = right;\n};\n\nvar BindingIdentifier = exports.BindingIdentifier = function BindingIdentifier(_ref12) {\n  var name = _ref12.name;\n\n  _classCallCheck(this, BindingIdentifier);\n\n  this.type = 'BindingIdentifier';\n  this.name = name;\n};\n\nvar BindingPropertyIdentifier = exports.BindingPropertyIdentifier = function BindingPropertyIdentifier(_ref13) {\n  var binding = _ref13.binding,\n      init = _ref13.init;\n\n  _classCallCheck(this, BindingPropertyIdentifier);\n\n  this.type = 'BindingPropertyIdentifier';\n  this.binding = binding;\n  this.init = init;\n};\n\nvar BindingPropertyProperty = exports.BindingPropertyProperty = function BindingPropertyProperty(_ref14) {\n  var name = _ref14.name,\n      binding = _ref14.binding;\n\n  _classCallCheck(this, BindingPropertyProperty);\n\n  this.type = 'BindingPropertyProperty';\n  this.name = name;\n  this.binding = binding;\n};\n\nvar BindingWithDefault = exports.BindingWithDefault = function BindingWithDefault(_ref15) {\n  var binding = _ref15.binding,\n      init = _ref15.init;\n\n  _classCallCheck(this, BindingWithDefault);\n\n  this.type = 'BindingWithDefault';\n  this.binding = binding;\n  this.init = init;\n};\n\nvar Block = exports.Block = function Block(_ref16) {\n  var statements = _ref16.statements;\n\n  _classCallCheck(this, Block);\n\n  this.type = 'Block';\n  this.statements = statements;\n};\n\nvar BlockStatement = exports.BlockStatement = function BlockStatement(_ref17) {\n  var block = _ref17.block;\n\n  _classCallCheck(this, BlockStatement);\n\n  this.type = 'BlockStatement';\n  this.block = block;\n};\n\nvar BreakStatement = exports.BreakStatement = function BreakStatement(_ref18) {\n  var label = _ref18.label;\n\n  _classCallCheck(this, BreakStatement);\n\n  this.type = 'BreakStatement';\n  this.label = label;\n};\n\nvar CallExpression = exports.CallExpression = function CallExpression(_ref19) {\n  var callee = _ref19.callee,\n      _arguments = _ref19.arguments;\n\n  _classCallCheck(this, CallExpression);\n\n  this.type = 'CallExpression';\n  this.callee = callee;\n  this.arguments = _arguments;\n};\n\nvar CatchClause = exports.CatchClause = function CatchClause(_ref20) {\n  var binding = _ref20.binding,\n      body = _ref20.body;\n\n  _classCallCheck(this, CatchClause);\n\n  this.type = 'CatchClause';\n  this.binding = binding;\n  this.body = body;\n};\n\nvar ClassDeclaration = exports.ClassDeclaration = function ClassDeclaration(_ref21) {\n  var name = _ref21.name,\n      _super = _ref21.super,\n      elements = _ref21.elements;\n\n  _classCallCheck(this, ClassDeclaration);\n\n  this.type = 'ClassDeclaration';\n  this.name = name;\n  this.super = _super;\n  this.elements = elements;\n};\n\nvar ClassElement = exports.ClassElement = function ClassElement(_ref22) {\n  var isStatic = _ref22.isStatic,\n      method = _ref22.method;\n\n  _classCallCheck(this, ClassElement);\n\n  this.type = 'ClassElement';\n  this.isStatic = isStatic;\n  this.method = method;\n};\n\nvar ClassExpression = exports.ClassExpression = function ClassExpression(_ref23) {\n  var name = _ref23.name,\n      _super = _ref23.super,\n      elements = _ref23.elements;\n\n  _classCallCheck(this, ClassExpression);\n\n  this.type = 'ClassExpression';\n  this.name = name;\n  this.super = _super;\n  this.elements = elements;\n};\n\nvar CompoundAssignmentExpression = exports.CompoundAssignmentExpression = function CompoundAssignmentExpression(_ref24) {\n  var binding = _ref24.binding,\n      operator = _ref24.operator,\n      expression = _ref24.expression;\n\n  _classCallCheck(this, CompoundAssignmentExpression);\n\n  this.type = 'CompoundAssignmentExpression';\n  this.binding = binding;\n  this.operator = operator;\n  this.expression = expression;\n};\n\nvar ComputedMemberAssignmentTarget = exports.ComputedMemberAssignmentTarget = function ComputedMemberAssignmentTarget(_ref25) {\n  var object = _ref25.object,\n      expression = _ref25.expression;\n\n  _classCallCheck(this, ComputedMemberAssignmentTarget);\n\n  this.type = 'ComputedMemberAssignmentTarget';\n  this.object = object;\n  this.expression = expression;\n};\n\nvar ComputedMemberExpression = exports.ComputedMemberExpression = function ComputedMemberExpression(_ref26) {\n  var object = _ref26.object,\n      expression = _ref26.expression;\n\n  _classCallCheck(this, ComputedMemberExpression);\n\n  this.type = 'ComputedMemberExpression';\n  this.object = object;\n  this.expression = expression;\n};\n\nvar ComputedPropertyName = exports.ComputedPropertyName = function ComputedPropertyName(_ref27) {\n  var expression = _ref27.expression;\n\n  _classCallCheck(this, ComputedPropertyName);\n\n  this.type = 'ComputedPropertyName';\n  this.expression = expression;\n};\n\nvar ConditionalExpression = exports.ConditionalExpression = function ConditionalExpression(_ref28) {\n  var test = _ref28.test,\n      consequent = _ref28.consequent,\n      alternate = _ref28.alternate;\n\n  _classCallCheck(this, ConditionalExpression);\n\n  this.type = 'ConditionalExpression';\n  this.test = test;\n  this.consequent = consequent;\n  this.alternate = alternate;\n};\n\nvar ContinueStatement = exports.ContinueStatement = function ContinueStatement(_ref29) {\n  var label = _ref29.label;\n\n  _classCallCheck(this, ContinueStatement);\n\n  this.type = 'ContinueStatement';\n  this.label = label;\n};\n\nvar DataProperty = exports.DataProperty = function DataProperty(_ref30) {\n  var name = _ref30.name,\n      expression = _ref30.expression;\n\n  _classCallCheck(this, DataProperty);\n\n  this.type = 'DataProperty';\n  this.name = name;\n  this.expression = expression;\n};\n\nvar DebuggerStatement = exports.DebuggerStatement = function DebuggerStatement() {\n  _classCallCheck(this, DebuggerStatement);\n\n  this.type = 'DebuggerStatement';\n};\n\nvar Directive = exports.Directive = function Directive(_ref31) {\n  var rawValue = _ref31.rawValue;\n\n  _classCallCheck(this, Directive);\n\n  this.type = 'Directive';\n  this.rawValue = rawValue;\n};\n\nvar DoWhileStatement = exports.DoWhileStatement = function DoWhileStatement(_ref32) {\n  var body = _ref32.body,\n      test = _ref32.test;\n\n  _classCallCheck(this, DoWhileStatement);\n\n  this.type = 'DoWhileStatement';\n  this.body = body;\n  this.test = test;\n};\n\nvar EmptyStatement = exports.EmptyStatement = function EmptyStatement() {\n  _classCallCheck(this, EmptyStatement);\n\n  this.type = 'EmptyStatement';\n};\n\nvar Export = exports.Export = function Export(_ref33) {\n  var declaration = _ref33.declaration;\n\n  _classCallCheck(this, Export);\n\n  this.type = 'Export';\n  this.declaration = declaration;\n};\n\nvar ExportAllFrom = exports.ExportAllFrom = function ExportAllFrom(_ref34) {\n  var moduleSpecifier = _ref34.moduleSpecifier;\n\n  _classCallCheck(this, ExportAllFrom);\n\n  this.type = 'ExportAllFrom';\n  this.moduleSpecifier = moduleSpecifier;\n};\n\nvar ExportDefault = exports.ExportDefault = function ExportDefault(_ref35) {\n  var body = _ref35.body;\n\n  _classCallCheck(this, ExportDefault);\n\n  this.type = 'ExportDefault';\n  this.body = body;\n};\n\nvar ExportFrom = exports.ExportFrom = function ExportFrom(_ref36) {\n  var namedExports = _ref36.namedExports,\n      moduleSpecifier = _ref36.moduleSpecifier;\n\n  _classCallCheck(this, ExportFrom);\n\n  this.type = 'ExportFrom';\n  this.namedExports = namedExports;\n  this.moduleSpecifier = moduleSpecifier;\n};\n\nvar ExportFromSpecifier = exports.ExportFromSpecifier = function ExportFromSpecifier(_ref37) {\n  var name = _ref37.name,\n      exportedName = _ref37.exportedName;\n\n  _classCallCheck(this, ExportFromSpecifier);\n\n  this.type = 'ExportFromSpecifier';\n  this.name = name;\n  this.exportedName = exportedName;\n};\n\nvar ExportLocalSpecifier = exports.ExportLocalSpecifier = function ExportLocalSpecifier(_ref38) {\n  var name = _ref38.name,\n      exportedName = _ref38.exportedName;\n\n  _classCallCheck(this, ExportLocalSpecifier);\n\n  this.type = 'ExportLocalSpecifier';\n  this.name = name;\n  this.exportedName = exportedName;\n};\n\nvar ExportLocals = exports.ExportLocals = function ExportLocals(_ref39) {\n  var namedExports = _ref39.namedExports;\n\n  _classCallCheck(this, ExportLocals);\n\n  this.type = 'ExportLocals';\n  this.namedExports = namedExports;\n};\n\nvar ExpressionStatement = exports.ExpressionStatement = function ExpressionStatement(_ref40) {\n  var expression = _ref40.expression;\n\n  _classCallCheck(this, ExpressionStatement);\n\n  this.type = 'ExpressionStatement';\n  this.expression = expression;\n};\n\nvar ForAwaitStatement = exports.ForAwaitStatement = function ForAwaitStatement(_ref41) {\n  var left = _ref41.left,\n      right = _ref41.right,\n      body = _ref41.body;\n\n  _classCallCheck(this, ForAwaitStatement);\n\n  this.type = 'ForAwaitStatement';\n  this.left = left;\n  this.right = right;\n  this.body = body;\n};\n\nvar ForInStatement = exports.ForInStatement = function ForInStatement(_ref42) {\n  var left = _ref42.left,\n      right = _ref42.right,\n      body = _ref42.body;\n\n  _classCallCheck(this, ForInStatement);\n\n  this.type = 'ForInStatement';\n  this.left = left;\n  this.right = right;\n  this.body = body;\n};\n\nvar ForOfStatement = exports.ForOfStatement = function ForOfStatement(_ref43) {\n  var left = _ref43.left,\n      right = _ref43.right,\n      body = _ref43.body;\n\n  _classCallCheck(this, ForOfStatement);\n\n  this.type = 'ForOfStatement';\n  this.left = left;\n  this.right = right;\n  this.body = body;\n};\n\nvar ForStatement = exports.ForStatement = function ForStatement(_ref44) {\n  var init = _ref44.init,\n      test = _ref44.test,\n      update = _ref44.update,\n      body = _ref44.body;\n\n  _classCallCheck(this, ForStatement);\n\n  this.type = 'ForStatement';\n  this.init = init;\n  this.test = test;\n  this.update = update;\n  this.body = body;\n};\n\nvar FormalParameters = exports.FormalParameters = function FormalParameters(_ref45) {\n  var items = _ref45.items,\n      rest = _ref45.rest;\n\n  _classCallCheck(this, FormalParameters);\n\n  this.type = 'FormalParameters';\n  this.items = items;\n  this.rest = rest;\n};\n\nvar FunctionBody = exports.FunctionBody = function FunctionBody(_ref46) {\n  var directives = _ref46.directives,\n      statements = _ref46.statements;\n\n  _classCallCheck(this, FunctionBody);\n\n  this.type = 'FunctionBody';\n  this.directives = directives;\n  this.statements = statements;\n};\n\nvar FunctionDeclaration = exports.FunctionDeclaration = function FunctionDeclaration(_ref47) {\n  var isAsync = _ref47.isAsync,\n      isGenerator = _ref47.isGenerator,\n      name = _ref47.name,\n      params = _ref47.params,\n      body = _ref47.body;\n\n  _classCallCheck(this, FunctionDeclaration);\n\n  this.type = 'FunctionDeclaration';\n  this.isAsync = isAsync;\n  this.isGenerator = isGenerator;\n  this.name = name;\n  this.params = params;\n  this.body = body;\n};\n\nvar FunctionExpression = exports.FunctionExpression = function FunctionExpression(_ref48) {\n  var isAsync = _ref48.isAsync,\n      isGenerator = _ref48.isGenerator,\n      name = _ref48.name,\n      params = _ref48.params,\n      body = _ref48.body;\n\n  _classCallCheck(this, FunctionExpression);\n\n  this.type = 'FunctionExpression';\n  this.isAsync = isAsync;\n  this.isGenerator = isGenerator;\n  this.name = name;\n  this.params = params;\n  this.body = body;\n};\n\nvar Getter = exports.Getter = function Getter(_ref49) {\n  var name = _ref49.name,\n      body = _ref49.body;\n\n  _classCallCheck(this, Getter);\n\n  this.type = 'Getter';\n  this.name = name;\n  this.body = body;\n};\n\nvar IdentifierExpression = exports.IdentifierExpression = function IdentifierExpression(_ref50) {\n  var name = _ref50.name;\n\n  _classCallCheck(this, IdentifierExpression);\n\n  this.type = 'IdentifierExpression';\n  this.name = name;\n};\n\nvar IfStatement = exports.IfStatement = function IfStatement(_ref51) {\n  var test = _ref51.test,\n      consequent = _ref51.consequent,\n      alternate = _ref51.alternate;\n\n  _classCallCheck(this, IfStatement);\n\n  this.type = 'IfStatement';\n  this.test = test;\n  this.consequent = consequent;\n  this.alternate = alternate;\n};\n\nvar Import = exports.Import = function Import(_ref52) {\n  var defaultBinding = _ref52.defaultBinding,\n      namedImports = _ref52.namedImports,\n      moduleSpecifier = _ref52.moduleSpecifier;\n\n  _classCallCheck(this, Import);\n\n  this.type = 'Import';\n  this.defaultBinding = defaultBinding;\n  this.namedImports = namedImports;\n  this.moduleSpecifier = moduleSpecifier;\n};\n\nvar ImportNamespace = exports.ImportNamespace = function ImportNamespace(_ref53) {\n  var defaultBinding = _ref53.defaultBinding,\n      namespaceBinding = _ref53.namespaceBinding,\n      moduleSpecifier = _ref53.moduleSpecifier;\n\n  _classCallCheck(this, ImportNamespace);\n\n  this.type = 'ImportNamespace';\n  this.defaultBinding = defaultBinding;\n  this.namespaceBinding = namespaceBinding;\n  this.moduleSpecifier = moduleSpecifier;\n};\n\nvar ImportSpecifier = exports.ImportSpecifier = function ImportSpecifier(_ref54) {\n  var name = _ref54.name,\n      binding = _ref54.binding;\n\n  _classCallCheck(this, ImportSpecifier);\n\n  this.type = 'ImportSpecifier';\n  this.name = name;\n  this.binding = binding;\n};\n\nvar LabeledStatement = exports.LabeledStatement = function LabeledStatement(_ref55) {\n  var label = _ref55.label,\n      body = _ref55.body;\n\n  _classCallCheck(this, LabeledStatement);\n\n  this.type = 'LabeledStatement';\n  this.label = label;\n  this.body = body;\n};\n\nvar LiteralBooleanExpression = exports.LiteralBooleanExpression = function LiteralBooleanExpression(_ref56) {\n  var value = _ref56.value;\n\n  _classCallCheck(this, LiteralBooleanExpression);\n\n  this.type = 'LiteralBooleanExpression';\n  this.value = value;\n};\n\nvar LiteralInfinityExpression = exports.LiteralInfinityExpression = function LiteralInfinityExpression() {\n  _classCallCheck(this, LiteralInfinityExpression);\n\n  this.type = 'LiteralInfinityExpression';\n};\n\nvar LiteralNullExpression = exports.LiteralNullExpression = function LiteralNullExpression() {\n  _classCallCheck(this, LiteralNullExpression);\n\n  this.type = 'LiteralNullExpression';\n};\n\nvar LiteralNumericExpression = exports.LiteralNumericExpression = function LiteralNumericExpression(_ref57) {\n  var value = _ref57.value;\n\n  _classCallCheck(this, LiteralNumericExpression);\n\n  this.type = 'LiteralNumericExpression';\n  this.value = value;\n};\n\nvar LiteralRegExpExpression = exports.LiteralRegExpExpression = function LiteralRegExpExpression(_ref58) {\n  var pattern = _ref58.pattern,\n      global = _ref58.global,\n      ignoreCase = _ref58.ignoreCase,\n      multiLine = _ref58.multiLine,\n      dotAll = _ref58.dotAll,\n      unicode = _ref58.unicode,\n      sticky = _ref58.sticky;\n\n  _classCallCheck(this, LiteralRegExpExpression);\n\n  this.type = 'LiteralRegExpExpression';\n  this.pattern = pattern;\n  this.global = global;\n  this.ignoreCase = ignoreCase;\n  this.multiLine = multiLine;\n  this.dotAll = dotAll;\n  this.unicode = unicode;\n  this.sticky = sticky;\n};\n\nvar LiteralStringExpression = exports.LiteralStringExpression = function LiteralStringExpression(_ref59) {\n  var value = _ref59.value;\n\n  _classCallCheck(this, LiteralStringExpression);\n\n  this.type = 'LiteralStringExpression';\n  this.value = value;\n};\n\nvar Method = exports.Method = function Method(_ref60) {\n  var isAsync = _ref60.isAsync,\n      isGenerator = _ref60.isGenerator,\n      name = _ref60.name,\n      params = _ref60.params,\n      body = _ref60.body;\n\n  _classCallCheck(this, Method);\n\n  this.type = 'Method';\n  this.isAsync = isAsync;\n  this.isGenerator = isGenerator;\n  this.name = name;\n  this.params = params;\n  this.body = body;\n};\n\nvar Module = exports.Module = function Module(_ref61) {\n  var directives = _ref61.directives,\n      items = _ref61.items;\n\n  _classCallCheck(this, Module);\n\n  this.type = 'Module';\n  this.directives = directives;\n  this.items = items;\n};\n\nvar NewExpression = exports.NewExpression = function NewExpression(_ref62) {\n  var callee = _ref62.callee,\n      _arguments = _ref62.arguments;\n\n  _classCallCheck(this, NewExpression);\n\n  this.type = 'NewExpression';\n  this.callee = callee;\n  this.arguments = _arguments;\n};\n\nvar NewTargetExpression = exports.NewTargetExpression = function NewTargetExpression() {\n  _classCallCheck(this, NewTargetExpression);\n\n  this.type = 'NewTargetExpression';\n};\n\nvar ObjectAssignmentTarget = exports.ObjectAssignmentTarget = function ObjectAssignmentTarget(_ref63) {\n  var properties = _ref63.properties,\n      rest = _ref63.rest;\n\n  _classCallCheck(this, ObjectAssignmentTarget);\n\n  this.type = 'ObjectAssignmentTarget';\n  this.properties = properties;\n  this.rest = rest;\n};\n\nvar ObjectBinding = exports.ObjectBinding = function ObjectBinding(_ref64) {\n  var properties = _ref64.properties,\n      rest = _ref64.rest;\n\n  _classCallCheck(this, ObjectBinding);\n\n  this.type = 'ObjectBinding';\n  this.properties = properties;\n  this.rest = rest;\n};\n\nvar ObjectExpression = exports.ObjectExpression = function ObjectExpression(_ref65) {\n  var properties = _ref65.properties;\n\n  _classCallCheck(this, ObjectExpression);\n\n  this.type = 'ObjectExpression';\n  this.properties = properties;\n};\n\nvar ReturnStatement = exports.ReturnStatement = function ReturnStatement(_ref66) {\n  var expression = _ref66.expression;\n\n  _classCallCheck(this, ReturnStatement);\n\n  this.type = 'ReturnStatement';\n  this.expression = expression;\n};\n\nvar Script = exports.Script = function Script(_ref67) {\n  var directives = _ref67.directives,\n      statements = _ref67.statements;\n\n  _classCallCheck(this, Script);\n\n  this.type = 'Script';\n  this.directives = directives;\n  this.statements = statements;\n};\n\nvar Setter = exports.Setter = function Setter(_ref68) {\n  var name = _ref68.name,\n      param = _ref68.param,\n      body = _ref68.body;\n\n  _classCallCheck(this, Setter);\n\n  this.type = 'Setter';\n  this.name = name;\n  this.param = param;\n  this.body = body;\n};\n\nvar ShorthandProperty = exports.ShorthandProperty = function ShorthandProperty(_ref69) {\n  var name = _ref69.name;\n\n  _classCallCheck(this, ShorthandProperty);\n\n  this.type = 'ShorthandProperty';\n  this.name = name;\n};\n\nvar SpreadElement = exports.SpreadElement = function SpreadElement(_ref70) {\n  var expression = _ref70.expression;\n\n  _classCallCheck(this, SpreadElement);\n\n  this.type = 'SpreadElement';\n  this.expression = expression;\n};\n\nvar SpreadProperty = exports.SpreadProperty = function SpreadProperty(_ref71) {\n  var expression = _ref71.expression;\n\n  _classCallCheck(this, SpreadProperty);\n\n  this.type = 'SpreadProperty';\n  this.expression = expression;\n};\n\nvar StaticMemberAssignmentTarget = exports.StaticMemberAssignmentTarget = function StaticMemberAssignmentTarget(_ref72) {\n  var object = _ref72.object,\n      property = _ref72.property;\n\n  _classCallCheck(this, StaticMemberAssignmentTarget);\n\n  this.type = 'StaticMemberAssignmentTarget';\n  this.object = object;\n  this.property = property;\n};\n\nvar StaticMemberExpression = exports.StaticMemberExpression = function StaticMemberExpression(_ref73) {\n  var object = _ref73.object,\n      property = _ref73.property;\n\n  _classCallCheck(this, StaticMemberExpression);\n\n  this.type = 'StaticMemberExpression';\n  this.object = object;\n  this.property = property;\n};\n\nvar StaticPropertyName = exports.StaticPropertyName = function StaticPropertyName(_ref74) {\n  var value = _ref74.value;\n\n  _classCallCheck(this, StaticPropertyName);\n\n  this.type = 'StaticPropertyName';\n  this.value = value;\n};\n\nvar Super = exports.Super = function Super() {\n  _classCallCheck(this, Super);\n\n  this.type = 'Super';\n};\n\nvar SwitchCase = exports.SwitchCase = function SwitchCase(_ref75) {\n  var test = _ref75.test,\n      consequent = _ref75.consequent;\n\n  _classCallCheck(this, SwitchCase);\n\n  this.type = 'SwitchCase';\n  this.test = test;\n  this.consequent = consequent;\n};\n\nvar SwitchDefault = exports.SwitchDefault = function SwitchDefault(_ref76) {\n  var consequent = _ref76.consequent;\n\n  _classCallCheck(this, SwitchDefault);\n\n  this.type = 'SwitchDefault';\n  this.consequent = consequent;\n};\n\nvar SwitchStatement = exports.SwitchStatement = function SwitchStatement(_ref77) {\n  var discriminant = _ref77.discriminant,\n      cases = _ref77.cases;\n\n  _classCallCheck(this, SwitchStatement);\n\n  this.type = 'SwitchStatement';\n  this.discriminant = discriminant;\n  this.cases = cases;\n};\n\nvar SwitchStatementWithDefault = exports.SwitchStatementWithDefault = function SwitchStatementWithDefault(_ref78) {\n  var discriminant = _ref78.discriminant,\n      preDefaultCases = _ref78.preDefaultCases,\n      defaultCase = _ref78.defaultCase,\n      postDefaultCases = _ref78.postDefaultCases;\n\n  _classCallCheck(this, SwitchStatementWithDefault);\n\n  this.type = 'SwitchStatementWithDefault';\n  this.discriminant = discriminant;\n  this.preDefaultCases = preDefaultCases;\n  this.defaultCase = defaultCase;\n  this.postDefaultCases = postDefaultCases;\n};\n\nvar TemplateElement = exports.TemplateElement = function TemplateElement(_ref79) {\n  var rawValue = _ref79.rawValue;\n\n  _classCallCheck(this, TemplateElement);\n\n  this.type = 'TemplateElement';\n  this.rawValue = rawValue;\n};\n\nvar TemplateExpression = exports.TemplateExpression = function TemplateExpression(_ref80) {\n  var tag = _ref80.tag,\n      elements = _ref80.elements;\n\n  _classCallCheck(this, TemplateExpression);\n\n  this.type = 'TemplateExpression';\n  this.tag = tag;\n  this.elements = elements;\n};\n\nvar ThisExpression = exports.ThisExpression = function ThisExpression() {\n  _classCallCheck(this, ThisExpression);\n\n  this.type = 'ThisExpression';\n};\n\nvar ThrowStatement = exports.ThrowStatement = function ThrowStatement(_ref81) {\n  var expression = _ref81.expression;\n\n  _classCallCheck(this, ThrowStatement);\n\n  this.type = 'ThrowStatement';\n  this.expression = expression;\n};\n\nvar TryCatchStatement = exports.TryCatchStatement = function TryCatchStatement(_ref82) {\n  var body = _ref82.body,\n      catchClause = _ref82.catchClause;\n\n  _classCallCheck(this, TryCatchStatement);\n\n  this.type = 'TryCatchStatement';\n  this.body = body;\n  this.catchClause = catchClause;\n};\n\nvar TryFinallyStatement = exports.TryFinallyStatement = function TryFinallyStatement(_ref83) {\n  var body = _ref83.body,\n      catchClause = _ref83.catchClause,\n      finalizer = _ref83.finalizer;\n\n  _classCallCheck(this, TryFinallyStatement);\n\n  this.type = 'TryFinallyStatement';\n  this.body = body;\n  this.catchClause = catchClause;\n  this.finalizer = finalizer;\n};\n\nvar UnaryExpression = exports.UnaryExpression = function UnaryExpression(_ref84) {\n  var operator = _ref84.operator,\n      operand = _ref84.operand;\n\n  _classCallCheck(this, UnaryExpression);\n\n  this.type = 'UnaryExpression';\n  this.operator = operator;\n  this.operand = operand;\n};\n\nvar UpdateExpression = exports.UpdateExpression = function UpdateExpression(_ref85) {\n  var isPrefix = _ref85.isPrefix,\n      operator = _ref85.operator,\n      operand = _ref85.operand;\n\n  _classCallCheck(this, UpdateExpression);\n\n  this.type = 'UpdateExpression';\n  this.isPrefix = isPrefix;\n  this.operator = operator;\n  this.operand = operand;\n};\n\nvar VariableDeclaration = exports.VariableDeclaration = function VariableDeclaration(_ref86) {\n  var kind = _ref86.kind,\n      declarators = _ref86.declarators;\n\n  _classCallCheck(this, VariableDeclaration);\n\n  this.type = 'VariableDeclaration';\n  this.kind = kind;\n  this.declarators = declarators;\n};\n\nvar VariableDeclarationStatement = exports.VariableDeclarationStatement = function VariableDeclarationStatement(_ref87) {\n  var declaration = _ref87.declaration;\n\n  _classCallCheck(this, VariableDeclarationStatement);\n\n  this.type = 'VariableDeclarationStatement';\n  this.declaration = declaration;\n};\n\nvar VariableDeclarator = exports.VariableDeclarator = function VariableDeclarator(_ref88) {\n  var binding = _ref88.binding,\n      init = _ref88.init;\n\n  _classCallCheck(this, VariableDeclarator);\n\n  this.type = 'VariableDeclarator';\n  this.binding = binding;\n  this.init = init;\n};\n\nvar WhileStatement = exports.WhileStatement = function WhileStatement(_ref89) {\n  var test = _ref89.test,\n      body = _ref89.body;\n\n  _classCallCheck(this, WhileStatement);\n\n  this.type = 'WhileStatement';\n  this.test = test;\n  this.body = body;\n};\n\nvar WithStatement = exports.WithStatement = function WithStatement(_ref90) {\n  var object = _ref90.object,\n      body = _ref90.body;\n\n  _classCallCheck(this, WithStatement);\n\n  this.type = 'WithStatement';\n  this.object = object;\n  this.body = body;\n};\n\nvar YieldExpression = exports.YieldExpression = function YieldExpression(_ref91) {\n  var expression = _ref91.expression;\n\n  _classCallCheck(this, YieldExpression);\n\n  this.type = 'YieldExpression';\n  this.expression = expression;\n};\n\nvar YieldGeneratorExpression = exports.YieldGeneratorExpression = function YieldGeneratorExpression(_ref92) {\n  var expression = _ref92.expression;\n\n  _classCallCheck(this, YieldGeneratorExpression);\n\n  this.type = 'YieldGeneratorExpression';\n  this.expression = expression;\n};\n\n//# sourceURL=webpack:///./node_modules/shift-ast/dist/index.js?")},"./node_modules/shift-parser/dist/early-error-state.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EarlyError = exports.EarlyErrorState = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nopyright 2014 Shape Security, Inc.\nnicensed under the Apache License, Version 2.0 (the \"License\")\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\nvar _multimap = __webpack_require__(\"./node_modules/multimap/index.js\");\n\nvar _multimap2 = _interopRequireDefault(_multimap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction addEach(thisMap) {\n  for (var _len = arguments.length, otherMaps = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherMaps[_key - 1] = arguments[_key];\n  }\n\n  otherMaps.forEach(function (otherMap) {\n    otherMap.forEachEntry(function (v, k) {\n      thisMap.set.apply(thisMap, [k].concat(v));\n    });\n  });\n  return thisMap;\n}\n\nvar identity = void 0; // initialised below EarlyErrorState\n\nvar EarlyErrorState = exports.EarlyErrorState = function () {\n  function EarlyErrorState() {\n    _classCallCheck(this, EarlyErrorState);\n\n    this.errors = [];\n    // errors that are only errors in strict mode code\n    this.strictErrors = [];\n\n    // Label values used in LabeledStatement nodes; cleared at function boundaries\n    this.usedLabelNames = [];\n\n    // BreakStatement nodes; cleared at iteration; switch; and function boundaries\n    this.freeBreakStatements = [];\n    // ContinueStatement nodes; cleared at\n    this.freeContinueStatements = [];\n\n    // labeled BreakStatement nodes; cleared at LabeledStatement with same Label and function boundaries\n    this.freeLabeledBreakStatements = [];\n    // labeled ContinueStatement nodes; cleared at labeled iteration statement with same Label and function boundaries\n    this.freeLabeledContinueStatements = [];\n\n    // NewTargetExpression nodes; cleared at function (besides arrow expression) boundaries\n    this.newTargetExpressions = [];\n\n    // BindingIdentifier nodes; cleared at containing declaration node\n    this.boundNames = new _multimap2.default();\n    // BindingIdentifiers that were found to be in a lexical binding position\n    this.lexicallyDeclaredNames = new _multimap2.default();\n    // BindingIdentifiers that were the name of a FunctionDeclaration\n    this.functionDeclarationNames = new _multimap2.default();\n    // BindingIdentifiers that were found to be in a variable binding position\n    this.varDeclaredNames = new _multimap2.default();\n    // BindingIdentifiers that were found to be in a variable binding position\n    this.forOfVarDeclaredNames = [];\n\n    // Names that this module exports\n    this.exportedNames = new _multimap2.default();\n    // Locally declared names that are referenced in export declarations\n    this.exportedBindings = new _multimap2.default();\n\n    // CallExpressions with Super callee\n    this.superCallExpressions = [];\n    // SuperCall expressions in the context of a Method named \"constructor\"\n    this.superCallExpressionsInConstructorMethod = [];\n    // MemberExpressions with Super object\n    this.superPropertyExpressions = [];\n\n    // YieldExpression and YieldGeneratorExpression nodes; cleared at function boundaries\n    this.yieldExpressions = [];\n    // AwaitExpression nodes; cleared at function boundaries\n    this.awaitExpressions = [];\n  }\n\n  _createClass(EarlyErrorState, [{\n    key: 'addFreeBreakStatement',\n    value: function addFreeBreakStatement(s) {\n      this.freeBreakStatements.push(s);\n      return this;\n    }\n  }, {\n    key: 'addFreeLabeledBreakStatement',\n    value: function addFreeLabeledBreakStatement(s) {\n      this.freeLabeledBreakStatements.push(s);\n      return this;\n    }\n  }, {\n    key: 'clearFreeBreakStatements',\n    value: function clearFreeBreakStatements() {\n      this.freeBreakStatements = [];\n      return this;\n    }\n  }, {\n    key: 'addFreeContinueStatement',\n    value: function addFreeContinueStatement(s) {\n      this.freeContinueStatements.push(s);\n      return this;\n    }\n  }, {\n    key: 'addFreeLabeledContinueStatement',\n    value: function addFreeLabeledContinueStatement(s) {\n      this.freeLabeledContinueStatements.push(s);\n      return this;\n    }\n  }, {\n    key: 'clearFreeContinueStatements',\n    value: function clearFreeContinueStatements() {\n      this.freeContinueStatements = [];\n      return this;\n    }\n  }, {\n    key: 'enforceFreeBreakStatementErrors',\n    value: function enforceFreeBreakStatementErrors(createError) {\n      [].push.apply(this.errors, this.freeBreakStatements.map(createError));\n      this.freeBreakStatements = [];\n      return this;\n    }\n  }, {\n    key: 'enforceFreeLabeledBreakStatementErrors',\n    value: function enforceFreeLabeledBreakStatementErrors(createError) {\n      [].push.apply(this.errors, this.freeLabeledBreakStatements.map(createError));\n      this.freeLabeledBreakStatements = [];\n      return this;\n    }\n  }, {\n    key: 'enforceFreeContinueStatementErrors',\n    value: function enforceFreeContinueStatementErrors(createError) {\n      [].push.apply(this.errors, this.freeContinueStatements.map(createError));\n      this.freeContinueStatements = [];\n      return this;\n    }\n  }, {\n    key: 'enforceFreeLabeledContinueStatementErrors',\n    value: function enforceFreeLabeledContinueStatementErrors(createError) {\n      [].push.apply(this.errors, this.freeLabeledContinueStatements.map(createError));\n      this.freeLabeledContinueStatements = [];\n      return this;\n    }\n  }, {\n    key: 'observeIterationLabel',\n    value: function observeIterationLabel(label) {\n      this.usedLabelNames.push(label);\n      this.freeLabeledBreakStatements = this.freeLabeledBreakStatements.filter(function (s) {\n        return s.label !== label;\n      });\n      this.freeLabeledContinueStatements = this.freeLabeledContinueStatements.filter(function (s) {\n        return s.label !== label;\n      });\n      return this;\n    }\n  }, {\n    key: 'observeNonIterationLabel',\n    value: function observeNonIterationLabel(label) {\n      this.usedLabelNames.push(label);\n      this.freeLabeledBreakStatements = this.freeLabeledBreakStatements.filter(function (s) {\n        return s.label !== label;\n      });\n      return this;\n    }\n  }, {\n    key: 'clearUsedLabelNames',\n    value: function clearUsedLabelNames() {\n      this.usedLabelNames = [];\n      return this;\n    }\n  }, {\n    key: 'observeSuperCallExpression',\n    value: function observeSuperCallExpression(node) {\n      this.superCallExpressions.push(node);\n      return this;\n    }\n  }, {\n    key: 'observeConstructorMethod',\n    value: function observeConstructorMethod() {\n      this.superCallExpressionsInConstructorMethod = this.superCallExpressions;\n      this.superCallExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'clearSuperCallExpressionsInConstructorMethod',\n    value: function clearSuperCallExpressionsInConstructorMethod() {\n      this.superCallExpressionsInConstructorMethod = [];\n      return this;\n    }\n  }, {\n    key: 'enforceSuperCallExpressions',\n    value: function enforceSuperCallExpressions(createError) {\n      [].push.apply(this.errors, this.superCallExpressions.map(createError));\n      [].push.apply(this.errors, this.superCallExpressionsInConstructorMethod.map(createError));\n      this.superCallExpressions = [];\n      this.superCallExpressionsInConstructorMethod = [];\n      return this;\n    }\n  }, {\n    key: 'enforceSuperCallExpressionsInConstructorMethod',\n    value: function enforceSuperCallExpressionsInConstructorMethod(createError) {\n      [].push.apply(this.errors, this.superCallExpressionsInConstructorMethod.map(createError));\n      this.superCallExpressionsInConstructorMethod = [];\n      return this;\n    }\n  }, {\n    key: 'observeSuperPropertyExpression',\n    value: function observeSuperPropertyExpression(node) {\n      this.superPropertyExpressions.push(node);\n      return this;\n    }\n  }, {\n    key: 'clearSuperPropertyExpressions',\n    value: function clearSuperPropertyExpressions() {\n      this.superPropertyExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'enforceSuperPropertyExpressions',\n    value: function enforceSuperPropertyExpressions(createError) {\n      [].push.apply(this.errors, this.superPropertyExpressions.map(createError));\n      this.superPropertyExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'observeNewTargetExpression',\n    value: function observeNewTargetExpression(node) {\n      this.newTargetExpressions.push(node);\n      return this;\n    }\n  }, {\n    key: 'clearNewTargetExpressions',\n    value: function clearNewTargetExpressions() {\n      this.newTargetExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'bindName',\n    value: function bindName(name, node) {\n      this.boundNames.set(name, node);\n      return this;\n    }\n  }, {\n    key: 'clearBoundNames',\n    value: function clearBoundNames() {\n      this.boundNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'observeLexicalDeclaration',\n    value: function observeLexicalDeclaration() {\n      addEach(this.lexicallyDeclaredNames, this.boundNames);\n      this.boundNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'observeLexicalBoundary',\n    value: function observeLexicalBoundary() {\n      this.previousLexicallyDeclaredNames = this.lexicallyDeclaredNames;\n      this.lexicallyDeclaredNames = new _multimap2.default();\n      this.functionDeclarationNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'enforceDuplicateLexicallyDeclaredNames',\n    value: function enforceDuplicateLexicallyDeclaredNames(createError) {\n      var _this = this;\n\n      this.lexicallyDeclaredNames.forEachEntry(function (nodes) {\n        if (nodes.length > 1) {\n          nodes.slice(1).forEach(function (dupeNode) {\n            _this.addError(createError(dupeNode));\n          });\n        }\n      });\n      return this;\n    }\n  }, {\n    key: 'enforceConflictingLexicallyDeclaredNames',\n    value: function enforceConflictingLexicallyDeclaredNames(otherNames, createError) {\n      var _this2 = this;\n\n      this.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {\n        if (otherNames.has(bindingName)) {\n          nodes.forEach(function (conflictingNode) {\n            _this2.addError(createError(conflictingNode));\n          });\n        }\n      });\n      return this;\n    }\n  }, {\n    key: 'observeFunctionDeclaration',\n    value: function observeFunctionDeclaration() {\n      this.observeVarBoundary();\n      addEach(this.functionDeclarationNames, this.boundNames);\n      this.boundNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'functionDeclarationNamesAreLexical',\n    value: function functionDeclarationNamesAreLexical() {\n      addEach(this.lexicallyDeclaredNames, this.functionDeclarationNames);\n      this.functionDeclarationNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'observeVarDeclaration',\n    value: function observeVarDeclaration() {\n      addEach(this.varDeclaredNames, this.boundNames);\n      this.boundNames = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'recordForOfVars',\n    value: function recordForOfVars() {\n      var _this3 = this;\n\n      this.varDeclaredNames.forEach(function (bindingIdentifier) {\n        _this3.forOfVarDeclaredNames.push(bindingIdentifier);\n      });\n      return this;\n    }\n  }, {\n    key: 'observeVarBoundary',\n    value: function observeVarBoundary() {\n      this.lexicallyDeclaredNames = new _multimap2.default();\n      this.functionDeclarationNames = new _multimap2.default();\n      this.varDeclaredNames = new _multimap2.default();\n      this.forOfVarDeclaredNames = [];\n      return this;\n    }\n  }, {\n    key: 'exportName',\n    value: function exportName(name, node) {\n      this.exportedNames.set(name, node);\n      return this;\n    }\n  }, {\n    key: 'exportDeclaredNames',\n    value: function exportDeclaredNames() {\n      addEach(this.exportedNames, this.lexicallyDeclaredNames, this.varDeclaredNames);\n      addEach(this.exportedBindings, this.lexicallyDeclaredNames, this.varDeclaredNames);\n      return this;\n    }\n  }, {\n    key: 'exportBinding',\n    value: function exportBinding(name, node) {\n      this.exportedBindings.set(name, node);\n      return this;\n    }\n  }, {\n    key: 'clearExportedBindings',\n    value: function clearExportedBindings() {\n      this.exportedBindings = new _multimap2.default();\n      return this;\n    }\n  }, {\n    key: 'observeYieldExpression',\n    value: function observeYieldExpression(node) {\n      this.yieldExpressions.push(node);\n      return this;\n    }\n  }, {\n    key: 'clearYieldExpressions',\n    value: function clearYieldExpressions() {\n      this.yieldExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'observeAwaitExpression',\n    value: function observeAwaitExpression(node) {\n      this.awaitExpressions.push(node);\n      return this;\n    }\n  }, {\n    key: 'clearAwaitExpressions',\n    value: function clearAwaitExpressions() {\n      this.awaitExpressions = [];\n      return this;\n    }\n  }, {\n    key: 'addError',\n    value: function addError(e) {\n      this.errors.push(e);\n      return this;\n    }\n  }, {\n    key: 'addStrictError',\n    value: function addStrictError(e) {\n      this.strictErrors.push(e);\n      return this;\n    }\n  }, {\n    key: 'enforceStrictErrors',\n    value: function enforceStrictErrors() {\n      [].push.apply(this.errors, this.strictErrors);\n      this.strictErrors = [];\n      return this;\n    }\n\n    // MONOID IMPLEMENTATION\n\n  }, {\n    key: 'concat',\n    value: function concat(s) {\n      if (this === identity) return s;\n      if (s === identity) return this;\n      [].push.apply(this.errors, s.errors);\n      [].push.apply(this.strictErrors, s.strictErrors);\n      [].push.apply(this.usedLabelNames, s.usedLabelNames);\n      [].push.apply(this.freeBreakStatements, s.freeBreakStatements);\n      [].push.apply(this.freeContinueStatements, s.freeContinueStatements);\n      [].push.apply(this.freeLabeledBreakStatements, s.freeLabeledBreakStatements);\n      [].push.apply(this.freeLabeledContinueStatements, s.freeLabeledContinueStatements);\n      [].push.apply(this.newTargetExpressions, s.newTargetExpressions);\n      addEach(this.boundNames, s.boundNames);\n      addEach(this.lexicallyDeclaredNames, s.lexicallyDeclaredNames);\n      addEach(this.functionDeclarationNames, s.functionDeclarationNames);\n      addEach(this.varDeclaredNames, s.varDeclaredNames);\n      [].push.apply(this.forOfVarDeclaredNames, s.forOfVarDeclaredNames);\n      addEach(this.exportedNames, s.exportedNames);\n      addEach(this.exportedBindings, s.exportedBindings);\n      [].push.apply(this.superCallExpressions, s.superCallExpressions);\n      [].push.apply(this.superCallExpressionsInConstructorMethod, s.superCallExpressionsInConstructorMethod);\n      [].push.apply(this.superPropertyExpressions, s.superPropertyExpressions);\n      [].push.apply(this.yieldExpressions, s.yieldExpressions);\n      [].push.apply(this.awaitExpressions, s.awaitExpressions);\n      return this;\n    }\n  }], [{\n    key: 'empty',\n    value: function empty() {\n      return identity;\n    }\n  }]);\n\n  return EarlyErrorState;\n}();\n\nidentity = new EarlyErrorState();\nObject.getOwnPropertyNames(EarlyErrorState.prototype).forEach(function (methodName) {\n  if (methodName === 'constructor') return;\n  Object.defineProperty(identity, methodName, {\n    value: function value() {\n      return EarlyErrorState.prototype[methodName].apply(new EarlyErrorState(), arguments);\n    },\n\n    enumerable: false,\n    writable: true,\n    configurable: true\n  });\n});\n\nvar EarlyError = exports.EarlyError = function (_Error) {\n  _inherits(EarlyError, _Error);\n\n  function EarlyError(node, message) {\n    _classCallCheck(this, EarlyError);\n\n    var _this4 = _possibleConstructorReturn(this, (EarlyError.__proto__ || Object.getPrototypeOf(EarlyError)).call(this, message));\n\n    _this4.node = node;\n    _this4.message = message;\n    return _this4;\n  }\n\n  return EarlyError;\n}(Error);\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/early-error-state.js?")},"./node_modules/shift-parser/dist/early-errors.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EarlyErrorChecker = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _shiftReducer = __webpack_require__(\"./node_modules/shift-reducer/dist/index.js\");\n\nvar _shiftReducer2 = _interopRequireDefault(_shiftReducer);\n\nvar _utils = __webpack_require__(\"./node_modules/shift-parser/dist/utils.js\");\n\nvar _errors = __webpack_require__(\"./node_modules/shift-parser/dist/errors.js\");\n\nvar _earlyErrorState = __webpack_require__(\"./node_modules/shift-parser/dist/early-error-state.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\")\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *     http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nfunction isStrictFunctionBody(_ref) {\n  var directives = _ref.directives;\n\n  return directives.some(function (directive) {\n    return directive.rawValue === 'use strict';\n  });\n}\n\nfunction isLabelledFunction(node) {\n  return node.type === 'LabeledStatement' && (node.body.type === 'FunctionDeclaration' || isLabelledFunction(node.body));\n}\n\nfunction isIterationStatement(node) {\n  switch (node.type) {\n    case 'LabeledStatement':\n      return isIterationStatement(node.body);\n    case 'DoWhileStatement':\n    case 'ForInStatement':\n    case 'ForOfStatement':\n    case 'ForStatement':\n    case 'WhileStatement':\n      return true;\n  }\n  return false;\n}\n\nfunction isSpecialMethod(methodDefinition) {\n  if (methodDefinition.name.type !== 'StaticPropertyName' || methodDefinition.name.value !== 'constructor') {\n    return false;\n  }\n  switch (methodDefinition.type) {\n    case 'Getter':\n    case 'Setter':\n      return true;\n    case 'Method':\n      return methodDefinition.isGenerator || methodDefinition.isAsync;\n  }\n  /* istanbul ignore next */\n  throw new Error('not reached');\n}\n\nfunction enforceDuplicateConstructorMethods(node, s) {\n  var ctors = node.elements.filter(function (e) {\n    return !e.isStatic && e.method.type === 'Method' && !e.method.isGenerator && e.method.name.type === 'StaticPropertyName' && e.method.name.value === 'constructor';\n  });\n  if (ctors.length > 1) {\n    ctors.slice(1).forEach(function (ctor) {\n      s = s.addError(new _earlyErrorState.EarlyError(ctor, 'Duplicate constructor method in class'));\n    });\n  }\n  return s;\n}\n\nvar SUPERCALL_ERROR = function SUPERCALL_ERROR(node) {\n  return new _earlyErrorState.EarlyError(node, _errors.ErrorMessages.ILLEGAL_SUPER_CALL);\n};\nvar SUPERPROPERTY_ERROR = function SUPERPROPERTY_ERROR(node) {\n  return new _earlyErrorState.EarlyError(node, 'Member access on super must be in a method');\n};\nvar DUPLICATE_BINDING = function DUPLICATE_BINDING(node) {\n  return new _earlyErrorState.EarlyError(node, 'Duplicate binding ' + JSON.stringify(node.name));\n};\nvar FREE_CONTINUE = function FREE_CONTINUE(node) {\n  return new _earlyErrorState.EarlyError(node, 'Continue statement must be nested within an iteration statement');\n};\nvar UNBOUND_CONTINUE = function UNBOUND_CONTINUE(node) {\n  return new _earlyErrorState.EarlyError(node, 'Continue statement must be nested within an iteration statement with label ' + JSON.stringify(node.label));\n};\nvar FREE_BREAK = function FREE_BREAK(node) {\n  return new _earlyErrorState.EarlyError(node, 'Break statement must be nested within an iteration statement or a switch statement');\n};\nvar UNBOUND_BREAK = function UNBOUND_BREAK(node) {\n  return new _earlyErrorState.EarlyError(node, 'Break statement must be nested within a statement with label ' + JSON.stringify(node.label));\n};\n\nvar EarlyErrorChecker = exports.EarlyErrorChecker = function (_MonoidalReducer) {\n  _inherits(EarlyErrorChecker, _MonoidalReducer);\n\n  function EarlyErrorChecker() {\n    _classCallCheck(this, EarlyErrorChecker);\n\n    return _possibleConstructorReturn(this, (EarlyErrorChecker.__proto__ || Object.getPrototypeOf(EarlyErrorChecker)).call(this, _earlyErrorState.EarlyErrorState));\n  }\n\n  _createClass(EarlyErrorChecker, [{\n    key: 'reduceAssignmentExpression',\n    value: function reduceAssignmentExpression() {\n      return _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceAssignmentExpression', this).apply(this, arguments).clearBoundNames();\n    }\n  }, {\n    key: 'reduceAssignmentTargetIdentifier',\n    value: function reduceAssignmentTargetIdentifier(node) {\n      var s = this.identity;\n      if (node.name === 'eval' || node.name === 'arguments' || (0, _utils.isStrictModeReservedWord)(node.name)) {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in binding position in strict mode'));\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceArrowExpression',\n    value: function reduceArrowExpression(node, _ref2) {\n      var params = _ref2.params,\n          body = _ref2.body;\n\n      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {\n        return i.type === 'BindingIdentifier';\n      });\n      params = params.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      if (node.body.type === 'FunctionBody') {\n        body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);\n        if (isStrictFunctionBody(node.body)) {\n          params = params.enforceStrictErrors();\n          body = body.enforceStrictErrors();\n        }\n      }\n      params.yieldExpressions.forEach(function (n) {\n        params = params.addError(new _earlyErrorState.EarlyError(n, 'Arrow parameters must not contain yield expressions'));\n      });\n      params.awaitExpressions.forEach(function (n) {\n        params = params.addError(new _earlyErrorState.EarlyError(n, 'Arrow parameters must not contain await expressions'));\n      });\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceArrowExpression', this).call(this, node, { params: params, body: body });\n      if (!isSimpleParameterList && node.body.type === 'FunctionBody' && isStrictFunctionBody(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a \"use strict\" directive'));\n      }\n      s = s.clearYieldExpressions();\n      s = s.clearAwaitExpressions();\n      s = s.observeVarBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceAwaitExpression',\n    value: function reduceAwaitExpression(node, _ref3) {\n      var expression = _ref3.expression;\n\n      return expression.observeAwaitExpression(node);\n    }\n  }, {\n    key: 'reduceBindingIdentifier',\n    value: function reduceBindingIdentifier(node) {\n      var s = this.identity;\n      if (node.name === 'eval' || node.name === 'arguments' || (0, _utils.isStrictModeReservedWord)(node.name)) {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in binding position in strict mode'));\n      }\n      s = s.bindName(node.name, node);\n      return s;\n    }\n  }, {\n    key: 'reduceBlock',\n    value: function reduceBlock() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceBlock', this).apply(this, arguments);\n      s = s.functionDeclarationNamesAreLexical();\n      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);\n      s = s.observeLexicalBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceBreakStatement',\n    value: function reduceBreakStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceBreakStatement', this).apply(this, arguments);\n      s = node.label == null ? s.addFreeBreakStatement(node) : s.addFreeLabeledBreakStatement(node);\n      return s;\n    }\n  }, {\n    key: 'reduceCallExpression',\n    value: function reduceCallExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCallExpression', this).apply(this, arguments);\n      if (node.callee.type === 'Super') {\n        s = s.observeSuperCallExpression(node);\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceCatchClause',\n    value: function reduceCatchClause(node, _ref4) {\n      var binding = _ref4.binding,\n          body = _ref4.body;\n\n      binding = binding.observeLexicalDeclaration();\n      binding = binding.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      binding = binding.enforceConflictingLexicallyDeclaredNames(body.previousLexicallyDeclaredNames, DUPLICATE_BINDING);\n      binding.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {\n        if (body.varDeclaredNames.has(bindingName)) {\n          body.varDeclaredNames.get(bindingName).forEach(function (conflictingNode) {\n            if (body.forOfVarDeclaredNames.indexOf(conflictingNode) >= 0) {\n              binding = binding.addError(DUPLICATE_BINDING(conflictingNode));\n            }\n          });\n        }\n      });\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCatchClause', this).call(this, node, { binding: binding, body: body });\n      s = s.observeLexicalBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceClassDeclaration',\n    value: function reduceClassDeclaration(node, _ref5) {\n      var name = _ref5.name,\n          _super = _ref5.super,\n          elements = _ref5.elements;\n\n      var s = name.enforceStrictErrors();\n      var sElements = this.append.apply(this, _toConsumableArray(elements));\n      sElements = sElements.enforceStrictErrors();\n      if (node.super != null) {\n        _super = _super.enforceStrictErrors();\n        s = this.append(s, _super);\n        sElements = sElements.clearSuperCallExpressionsInConstructorMethod();\n      }\n      s = this.append(s, sElements);\n      s = enforceDuplicateConstructorMethods(node, s);\n      s = s.observeLexicalDeclaration();\n      return s;\n    }\n  }, {\n    key: 'reduceClassElement',\n    value: function reduceClassElement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceClassElement', this).apply(this, arguments);\n      if (!node.isStatic && isSpecialMethod(node.method)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, _errors.ErrorMessages.ILLEGAL_CONSTRUCTORS));\n      }\n      if (node.isStatic && node.method.name.type === 'StaticPropertyName' && node.method.name.value === 'prototype') {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Static class methods cannot be named \"prototype\"'));\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceClassExpression',\n    value: function reduceClassExpression(node, _ref6) {\n      var name = _ref6.name,\n          _super = _ref6.super,\n          elements = _ref6.elements;\n\n      var s = node.name == null ? this.identity : name.enforceStrictErrors();\n      var sElements = this.append.apply(this, _toConsumableArray(elements));\n      sElements = sElements.enforceStrictErrors();\n      if (node.super != null) {\n        _super = _super.enforceStrictErrors();\n        s = this.append(s, _super);\n        sElements = sElements.clearSuperCallExpressionsInConstructorMethod();\n      }\n      s = this.append(s, sElements);\n      s = enforceDuplicateConstructorMethods(node, s);\n      s = s.clearBoundNames();\n      return s;\n    }\n  }, {\n    key: 'reduceCompoundAssignmentExpression',\n    value: function reduceCompoundAssignmentExpression() {\n      return _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCompoundAssignmentExpression', this).apply(this, arguments).clearBoundNames();\n    }\n  }, {\n    key: 'reduceComputedMemberExpression',\n    value: function reduceComputedMemberExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceComputedMemberExpression', this).apply(this, arguments);\n      if (node.object.type === 'Super') {\n        s = s.observeSuperPropertyExpression(node);\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceContinueStatement',\n    value: function reduceContinueStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceContinueStatement', this).apply(this, arguments);\n      s = node.label == null ? s.addFreeContinueStatement(node) : s.addFreeLabeledContinueStatement(node);\n      return s;\n    }\n  }, {\n    key: 'reduceDoWhileStatement',\n    value: function reduceDoWhileStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceDoWhileStatement', this).apply(this, arguments);\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a do-while statement must not be a labeled function declaration'));\n      }\n      s = s.clearFreeContinueStatements();\n      s = s.clearFreeBreakStatements();\n      return s;\n    }\n  }, {\n    key: 'reduceExport',\n    value: function reduceExport() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExport', this).apply(this, arguments);\n      s = s.functionDeclarationNamesAreLexical();\n      s = s.exportDeclaredNames();\n      return s;\n    }\n  }, {\n    key: 'reduceExportFrom',\n    value: function reduceExportFrom() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportFrom', this).apply(this, arguments);\n      s = s.clearExportedBindings();\n      return s;\n    }\n  }, {\n    key: 'reduceExportFromSpecifier',\n    value: function reduceExportFromSpecifier(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportFromSpecifier', this).apply(this, arguments);\n      s = s.exportName(node.exportedName || node.name, node);\n      s = s.exportBinding(node.name, node);\n      return s;\n    }\n  }, {\n    key: 'reduceExportLocalSpecifier',\n    value: function reduceExportLocalSpecifier(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportLocalSpecifier', this).apply(this, arguments);\n      s = s.exportName(node.exportedName || node.name.name, node);\n      s = s.exportBinding(node.name.name, node);\n      return s;\n    }\n  }, {\n    key: 'reduceExportDefault',\n    value: function reduceExportDefault(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportDefault', this).apply(this, arguments);\n      s = s.functionDeclarationNamesAreLexical();\n      s = s.exportName('default', node);\n      return s;\n    }\n  }, {\n    key: 'reduceFormalParameters',\n    value: function reduceFormalParameters() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFormalParameters', this).apply(this, arguments);\n      s = s.observeLexicalDeclaration();\n      return s;\n    }\n  }, {\n    key: 'reduceForStatement',\n    value: function reduceForStatement(node, _ref7) {\n      var init = _ref7.init,\n          test = _ref7.test,\n          update = _ref7.update,\n          body = _ref7.body;\n\n      if (init != null) {\n        init = init.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n        init = init.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForStatement', this).call(this, node, { init: init, test: test, update: update, body: body });\n      if (node.init != null && node.init.type === 'VariableDeclaration' && node.init.kind === 'const') {\n        node.init.declarators.forEach(function (declarator) {\n          if (declarator.init == null) {\n            s = s.addError(new _earlyErrorState.EarlyError(declarator, 'Constant lexical declarations must have an initialiser'));\n          }\n        });\n      }\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for statement must not be a labeled function declaration'));\n      }\n      s = s.clearFreeContinueStatements();\n      s = s.clearFreeBreakStatements();\n      s = s.observeLexicalBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceForInStatement',\n    value: function reduceForInStatement(node, _ref8) {\n      var left = _ref8.left,\n          right = _ref8.right,\n          body = _ref8.body;\n\n      left = left.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      left = left.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForInStatement', this).call(this, node, { left: left, right: right, body: body });\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for-in statement must not be a labeled function declaration'));\n      }\n      s = s.clearFreeContinueStatements();\n      s = s.clearFreeBreakStatements();\n      s = s.observeLexicalBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceForOfStatement',\n    value: function reduceForOfStatement(node, _ref9) {\n      var left = _ref9.left,\n          right = _ref9.right,\n          body = _ref9.body;\n\n      left = left.recordForOfVars();\n      left = left.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      left = left.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForOfStatement', this).call(this, node, { left: left, right: right, body: body });\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for-of statement must not be a labeled function declaration'));\n      }\n      s = s.clearFreeContinueStatements();\n      s = s.clearFreeBreakStatements();\n      s = s.observeLexicalBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceFunctionBody',\n    value: function reduceFunctionBody(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionBody', this).apply(this, arguments);\n      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);\n      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);\n      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);\n      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);\n      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);\n      s = s.clearUsedLabelNames();\n      s = s.clearYieldExpressions();\n      s = s.clearAwaitExpressions();\n      if (isStrictFunctionBody(node)) {\n        s = s.enforceStrictErrors();\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceFunctionDeclaration',\n    value: function reduceFunctionDeclaration(node, _ref10) {\n      var name = _ref10.name,\n          params = _ref10.params,\n          body = _ref10.body;\n\n      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {\n        return i.type === 'BindingIdentifier';\n      });\n      var addError = !isSimpleParameterList || node.isGenerator ? 'addError' : 'addStrictError';\n      params.lexicallyDeclaredNames.forEachEntry(function (nodes) {\n        if (nodes.length > 1) {\n          nodes.slice(1).forEach(function (dupeNode) {\n            params = params[addError](DUPLICATE_BINDING(dupeNode));\n          });\n        }\n      });\n      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);\n      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      body = body.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      params = params.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      if (node.isGenerator) {\n        params.yieldExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));\n        });\n      }\n      if (node.isAsync) {\n        params.awaitExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));\n        });\n      }\n      params = params.clearNewTargetExpressions();\n      body = body.clearNewTargetExpressions();\n      if (isStrictFunctionBody(node.body)) {\n        params = params.enforceStrictErrors();\n        body = body.enforceStrictErrors();\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionDeclaration', this).call(this, node, { name: name, params: params, body: body });\n      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a \"use strict\" directive'));\n      }\n      s = s.clearYieldExpressions();\n      s = s.clearAwaitExpressions();\n      s = s.observeFunctionDeclaration();\n      return s;\n    }\n  }, {\n    key: 'reduceFunctionExpression',\n    value: function reduceFunctionExpression(node, _ref11) {\n      var name = _ref11.name,\n          params = _ref11.params,\n          body = _ref11.body;\n\n      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {\n        return i.type === 'BindingIdentifier';\n      });\n      var addError = !isSimpleParameterList || node.isGenerator ? 'addError' : 'addStrictError';\n      params.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {\n        if (nodes.length > 1) {\n          nodes.slice(1).forEach(function (dupeNode) {\n            params = params[addError](new _earlyErrorState.EarlyError(dupeNode, 'Duplicate binding ' + JSON.stringify(bindingName)));\n          });\n        }\n      });\n      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);\n      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      body = body.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      params = params.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      if (node.isGenerator) {\n        params.yieldExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));\n        });\n      }\n      if (node.isAsync) {\n        params.awaitExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));\n        });\n      }\n      params = params.clearNewTargetExpressions();\n      body = body.clearNewTargetExpressions();\n      if (isStrictFunctionBody(node.body)) {\n        params = params.enforceStrictErrors();\n        body = body.enforceStrictErrors();\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionExpression', this).call(this, node, { name: name, params: params, body: body });\n      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a \"use strict\" directive'));\n      }\n      s = s.clearBoundNames();\n      s = s.clearYieldExpressions();\n      s = s.clearAwaitExpressions();\n      s = s.observeVarBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceGetter',\n    value: function reduceGetter(node, _ref12) {\n      var name = _ref12.name,\n          body = _ref12.body;\n\n      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      body = body.clearSuperPropertyExpressions();\n      body = body.clearNewTargetExpressions();\n      if (isStrictFunctionBody(node.body)) {\n        body = body.enforceStrictErrors();\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceGetter', this).call(this, node, { name: name, body: body });\n      s = s.observeVarBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceIdentifierExpression',\n    value: function reduceIdentifierExpression(node) {\n      var s = this.identity;\n      if ((0, _utils.isStrictModeReservedWord)(node.name)) {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in expression position in strict mode'));\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceIfStatement',\n    value: function reduceIfStatement(node, _ref13) {\n      var test = _ref13.test,\n          consequent = _ref13.consequent,\n          alternate = _ref13.alternate;\n\n      if (isLabelledFunction(node.consequent)) {\n        consequent = consequent.addError(new _earlyErrorState.EarlyError(node.consequent, 'The consequent of an if statement must not be a labeled function declaration'));\n      }\n      if (node.alternate != null && isLabelledFunction(node.alternate)) {\n        alternate = alternate.addError(new _earlyErrorState.EarlyError(node.alternate, 'The alternate of an if statement must not be a labeled function declaration'));\n      }\n      if (node.consequent.type === 'FunctionDeclaration') {\n        consequent = consequent.addStrictError(new _earlyErrorState.EarlyError(node.consequent, 'FunctionDeclarations in IfStatements are disallowed in strict mode'));\n        consequent = consequent.observeLexicalBoundary();\n      }\n      if (node.alternate != null && node.alternate.type === 'FunctionDeclaration') {\n        alternate = alternate.addStrictError(new _earlyErrorState.EarlyError(node.alternate, 'FunctionDeclarations in IfStatements are disallowed in strict mode'));\n        alternate = alternate.observeLexicalBoundary();\n      }\n      return _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceIfStatement', this).call(this, node, { test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'reduceImport',\n    value: function reduceImport() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceImport', this).apply(this, arguments);\n      s = s.observeLexicalDeclaration();\n      return s;\n    }\n  }, {\n    key: 'reduceImportNamespace',\n    value: function reduceImportNamespace() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceImportNamespace', this).apply(this, arguments);\n      s = s.observeLexicalDeclaration();\n      return s;\n    }\n  }, {\n    key: 'reduceLabeledStatement',\n    value: function reduceLabeledStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceLabeledStatement', this).apply(this, arguments);\n      if (node.label === 'yield' || (0, _utils.isStrictModeReservedWord)(node.label)) {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.label) + ' must not be in label position in strict mode'));\n      }\n      if (s.usedLabelNames.indexOf(node.label) >= 0) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Label ' + JSON.stringify(node.label) + ' has already been declared'));\n      }\n      if (node.body.type === 'FunctionDeclaration') {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Labeled FunctionDeclarations are disallowed in strict mode'));\n      }\n      s = isIterationStatement(node.body) ? s.observeIterationLabel(node.label) : s.observeNonIterationLabel(node.label);\n      return s;\n    }\n  }, {\n    key: 'reduceLiteralRegExpExpression',\n    value: function reduceLiteralRegExpExpression() {\n      var s = this.identity;\n      // NOTE: the RegExp pattern acceptor is disabled until we have more confidence in its correctness (more tests)\n      // if (!PatternAcceptor.test(node.pattern, node.flags.indexOf(\"u\") >= 0)) {\n      //  s = s.addError(new EarlyError(node, \"Invalid regular expression pattern\"));\n      // }\n      return s;\n    }\n  }, {\n    key: 'reduceMethod',\n    value: function reduceMethod(node, _ref14) {\n      var name = _ref14.name,\n          params = _ref14.params,\n          body = _ref14.body;\n\n      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {\n        return i.type === 'BindingIdentifier';\n      });\n      params = params.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);\n      if (node.name.type === 'StaticPropertyName' && node.name.value === 'constructor') {\n        body = body.observeConstructorMethod();\n        params = params.observeConstructorMethod();\n      } else {\n        body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);\n        params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      }\n      if (node.isGenerator) {\n        params.yieldExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));\n        });\n      }\n      if (node.isAsync) {\n        params.awaitExpressions.forEach(function (n) {\n          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));\n        });\n      }\n      body = body.clearSuperPropertyExpressions();\n      params = params.clearSuperPropertyExpressions();\n      params = params.clearNewTargetExpressions();\n      body = body.clearNewTargetExpressions();\n      if (isStrictFunctionBody(node.body)) {\n        params = params.enforceStrictErrors();\n        body = body.enforceStrictErrors();\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceMethod', this).call(this, node, { name: name, params: params, body: body });\n      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a \"use strict\" directive'));\n      }\n      s = s.clearYieldExpressions();\n      s = s.clearAwaitExpressions();\n      s = s.observeVarBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceModule',\n    value: function reduceModule() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceModule', this).apply(this, arguments);\n      s = s.functionDeclarationNamesAreLexical();\n      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);\n      s.exportedNames.forEachEntry(function (nodes, bindingName) {\n        if (nodes.length > 1) {\n          nodes.slice(1).forEach(function (dupeNode) {\n            s = s.addError(new _earlyErrorState.EarlyError(dupeNode, 'Duplicate export ' + JSON.stringify(bindingName)));\n          });\n        }\n      });\n      s.exportedBindings.forEachEntry(function (nodes, bindingName) {\n        if (!s.lexicallyDeclaredNames.has(bindingName) && !s.varDeclaredNames.has(bindingName)) {\n          nodes.forEach(function (undeclaredNode) {\n            s = s.addError(new _earlyErrorState.EarlyError(undeclaredNode, 'Exported binding ' + JSON.stringify(bindingName) + ' is not declared'));\n          });\n        }\n      });\n      s.newTargetExpressions.forEach(function (node) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'new.target must be within function (but not arrow expression) code'));\n      });\n      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);\n      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);\n      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);\n      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);\n      s = s.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      s = s.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      s = s.enforceStrictErrors();\n      return s;\n    }\n  }, {\n    key: 'reduceNewTargetExpression',\n    value: function reduceNewTargetExpression(node) {\n      return this.identity.observeNewTargetExpression(node);\n    }\n  }, {\n    key: 'reduceObjectExpression',\n    value: function reduceObjectExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceObjectExpression', this).apply(this, arguments);\n      s = s.enforceSuperCallExpressionsInConstructorMethod(SUPERCALL_ERROR);\n      var protos = node.properties.filter(function (p) {\n        return p.type === 'DataProperty' && p.name.type === 'StaticPropertyName' && p.name.value === '__proto__';\n      });\n      protos.slice(1).forEach(function (n) {\n        s = s.addError(new _earlyErrorState.EarlyError(n, 'Duplicate __proto__ property in object literal not allowed'));\n      });\n      return s;\n    }\n  }, {\n    key: 'reduceUpdateExpression',\n    value: function reduceUpdateExpression() {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceUpdateExpression', this).apply(this, arguments);\n      s = s.clearBoundNames();\n      return s;\n    }\n  }, {\n    key: 'reduceUnaryExpression',\n    value: function reduceUnaryExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceUnaryExpression', this).apply(this, arguments);\n      if (node.operator === 'delete' && node.operand.type === 'IdentifierExpression') {\n        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Identifier expressions must not be deleted in strict mode'));\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceScript', this).apply(this, arguments);\n      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);\n      s.newTargetExpressions.forEach(function (n) {\n        s = s.addError(new _earlyErrorState.EarlyError(n, 'new.target must be within function (but not arrow expression) code'));\n      });\n      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);\n      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);\n      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);\n      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);\n      s = s.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      s = s.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);\n      if (isStrictFunctionBody(node)) {\n        s = s.enforceStrictErrors();\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceSetter',\n    value: function reduceSetter(node, _ref15) {\n      var name = _ref15.name,\n          param = _ref15.param,\n          body = _ref15.body;\n\n      var isSimpleParameterList = node.param.type === 'BindingIdentifier';\n      param = param.observeLexicalDeclaration();\n      param = param.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      body = body.enforceConflictingLexicallyDeclaredNames(param.lexicallyDeclaredNames, DUPLICATE_BINDING);\n      param = param.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);\n      param = param.clearSuperPropertyExpressions();\n      body = body.clearSuperPropertyExpressions();\n      param = param.clearNewTargetExpressions();\n      body = body.clearNewTargetExpressions();\n      if (isStrictFunctionBody(node.body)) {\n        param = param.enforceStrictErrors();\n        body = body.enforceStrictErrors();\n      }\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceSetter', this).call(this, node, { name: name, param: param, body: body });\n      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a \"use strict\" directive'));\n      }\n      s = s.observeVarBoundary();\n      return s;\n    }\n  }, {\n    key: 'reduceStaticMemberExpression',\n    value: function reduceStaticMemberExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceStaticMemberExpression', this).apply(this, arguments);\n      if (node.object.type === 'Super') {\n        s = s.observeSuperPropertyExpression(node);\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceSwitchStatement',\n    value: function reduceSwitchStatement(node, _ref16) {\n      var discriminant = _ref16.discriminant,\n          cases = _ref16.cases;\n\n      var sCases = this.append.apply(this, _toConsumableArray(cases));\n      sCases = sCases.functionDeclarationNamesAreLexical();\n      sCases = sCases.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      sCases = sCases.enforceConflictingLexicallyDeclaredNames(sCases.varDeclaredNames, DUPLICATE_BINDING);\n      sCases = sCases.observeLexicalBoundary();\n      var s = this.append(discriminant, sCases);\n      s = s.clearFreeBreakStatements();\n      return s;\n    }\n  }, {\n    key: 'reduceSwitchStatementWithDefault',\n    value: function reduceSwitchStatementWithDefault(node, _ref17) {\n      var discriminant = _ref17.discriminant,\n          preDefaultCases = _ref17.preDefaultCases,\n          defaultCase = _ref17.defaultCase,\n          postDefaultCases = _ref17.postDefaultCases;\n\n      var sCases = this.append.apply(this, [defaultCase].concat(_toConsumableArray(preDefaultCases), _toConsumableArray(postDefaultCases)));\n      sCases = sCases.functionDeclarationNamesAreLexical();\n      sCases = sCases.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);\n      sCases = sCases.enforceConflictingLexicallyDeclaredNames(sCases.varDeclaredNames, DUPLICATE_BINDING);\n      sCases = sCases.observeLexicalBoundary();\n      var s = this.append(discriminant, sCases);\n      s = s.clearFreeBreakStatements();\n      return s;\n    }\n  }, {\n    key: 'reduceVariableDeclaration',\n    value: function reduceVariableDeclaration(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceVariableDeclaration', this).apply(this, arguments);\n      switch (node.kind) {\n        case 'const':\n        case 'let':\n          {\n            s = s.observeLexicalDeclaration();\n            if (s.lexicallyDeclaredNames.has('let')) {\n              s.lexicallyDeclaredNames.get('let').forEach(function (n) {\n                s = s.addError(new _earlyErrorState.EarlyError(n, 'Lexical declarations must not have a binding named \"let\"'));\n              });\n            }\n            break;\n          }\n        case 'var':\n          s = s.observeVarDeclaration();\n          break;\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceVariableDeclarationStatement',\n    value: function reduceVariableDeclarationStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceVariableDeclarationStatement', this).apply(this, arguments);\n      if (node.declaration.kind === 'const') {\n        node.declaration.declarators.forEach(function (declarator) {\n          if (declarator.init == null) {\n            s = s.addError(new _earlyErrorState.EarlyError(declarator, 'Constant lexical declarations must have an initialiser'));\n          }\n        });\n      }\n      return s;\n    }\n  }, {\n    key: 'reduceWhileStatement',\n    value: function reduceWhileStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceWhileStatement', this).apply(this, arguments);\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a while statement must not be a labeled function declaration'));\n      }\n      s = s.clearFreeContinueStatements().clearFreeBreakStatements();\n      return s;\n    }\n  }, {\n    key: 'reduceWithStatement',\n    value: function reduceWithStatement(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceWithStatement', this).apply(this, arguments);\n      if (isLabelledFunction(node.body)) {\n        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a with statement must not be a labeled function declaration'));\n      }\n      s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Strict mode code must not include a with statement'));\n      return s;\n    }\n  }, {\n    key: 'reduceYieldExpression',\n    value: function reduceYieldExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceYieldExpression', this).apply(this, arguments);\n      s = s.observeYieldExpression(node);\n      return s;\n    }\n  }, {\n    key: 'reduceYieldGeneratorExpression',\n    value: function reduceYieldGeneratorExpression(node) {\n      var s = _get(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceYieldGeneratorExpression', this).apply(this, arguments);\n      s = s.observeYieldExpression(node);\n      return s;\n    }\n  }], [{\n    key: 'check',\n    value: function check(node) {\n      return (0, _shiftReducer2.default)(new EarlyErrorChecker(), node).errors;\n    }\n  }]);\n\n  return EarlyErrorChecker;\n}(_shiftReducer.MonoidalReducer);\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/early-errors.js?")},"./node_modules/shift-parser/dist/errors.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright 2014 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar ErrorMessages = exports.ErrorMessages = {\n  UNEXPECTED_TOKEN: function UNEXPECTED_TOKEN(id) {\n    return 'Unexpected token ' + JSON.stringify(id);\n  },\n  UNEXPECTED_ILLEGAL_TOKEN: function UNEXPECTED_ILLEGAL_TOKEN(id) {\n    return 'Unexpected ' + JSON.stringify(id);\n  },\n\n  UNEXPECTED_ESCAPED_KEYWORD: 'Unexpected escaped keyword',\n  UNEXPECTED_NUMBER: 'Unexpected number',\n  UNEXPECTED_STRING: 'Unexpected string',\n  UNEXPECTED_IDENTIFIER: 'Unexpected identifier',\n  UNEXPECTED_RESERVED_WORD: 'Unexpected reserved word',\n  UNEXPECTED_TEMPLATE: 'Unexpected template',\n  UNEXPECTED_EOS: 'Unexpected end of input',\n  UNEXPECTED_LINE_TERMINATOR: 'Unexpected line terminator',\n  UNEXPECTED_COMMA_AFTER_REST: 'Unexpected comma after rest',\n  UNEXPECTED_REST_PARAMETERS_INITIALIZATION: 'Rest parameter may not have a default initializer',\n  NEWLINE_AFTER_THROW: 'Illegal newline after throw',\n  UNTERMINATED_REGEXP: 'Invalid regular expression: missing /',\n  INVALID_LAST_REST_PARAMETER: 'Rest parameter must be last formal parameter',\n  INVALID_REST_PARAMETERS_INITIALIZATION: 'Rest parameter may not have a default initializer',\n  INVALID_REGEXP_FLAGS: 'Invalid regular expression flags',\n  INVALID_REGEX: 'Invalid regular expression',\n  INVALID_LHS_IN_ASSIGNMENT: 'Invalid left-hand side in assignment',\n  INVALID_LHS_IN_BINDING: 'Invalid left-hand side in binding', // todo collapse messages?\n  INVALID_LHS_IN_FOR_IN: 'Invalid left-hand side in for-in',\n  INVALID_LHS_IN_FOR_OF: 'Invalid left-hand side in for-of',\n  INVALID_LHS_IN_FOR_AWAIT: 'Invalid left-hand side in for-await',\n  INVALID_UPDATE_OPERAND: 'Increment/decrement target must be an identifier or member expression',\n  INVALID_EXPONENTIATION_LHS: 'Unary expressions as the left operand of an exponentation expression ' + 'must be disambiguated with parentheses',\n  MULTIPLE_DEFAULTS_IN_SWITCH: 'More than one default clause in switch statement',\n  NO_CATCH_OR_FINALLY: 'Missing catch or finally after try',\n  ILLEGAL_RETURN: 'Illegal return statement',\n  ILLEGAL_ARROW_FUNCTION_PARAMS: 'Illegal arrow function parameter list',\n  INVALID_ASYNC_PARAMS: 'Async function parameters must not contain await expressions',\n  INVALID_VAR_INIT_FOR_IN: 'Invalid variable declaration in for-in statement',\n  INVALID_VAR_INIT_FOR_OF: 'Invalid variable declaration in for-of statement',\n  INVALID_VAR_INIT_FOR_AWAIT: 'Invalid variable declaration in for-await statement',\n  UNINITIALIZED_BINDINGPATTERN_IN_FOR_INIT: 'Binding pattern appears without initializer in for statement init',\n  ILLEGAL_PROPERTY: 'Illegal property initializer',\n  INVALID_ID_BINDING_STRICT_MODE: function INVALID_ID_BINDING_STRICT_MODE(id) {\n    return 'The identifier ' + JSON.stringify(id) + ' must not be in binding position in strict mode';\n  },\n  INVALID_ID_IN_LABEL_STRICT_MODE: function INVALID_ID_IN_LABEL_STRICT_MODE(id) {\n    return 'The identifier ' + JSON.stringify(id) + ' must not be in label position in strict mode';\n  },\n  INVALID_ID_IN_EXPRESSION_STRICT_MODE: function INVALID_ID_IN_EXPRESSION_STRICT_MODE(id) {\n    return 'The identifier ' + JSON.stringify(id) + ' must not be in expression position in strict mode';\n  },\n\n  INVALID_CALL_TO_SUPER: 'Calls to super must be in the \"constructor\" method of a class expression ' + 'or class declaration that has a superclass',\n  INVALID_DELETE_STRICT_MODE: 'Identifier expressions must not be deleted in strict mode',\n  DUPLICATE_BINDING: function DUPLICATE_BINDING(id) {\n    return 'Duplicate binding ' + JSON.stringify(id);\n  },\n  ILLEGAL_ID_IN_LEXICAL_DECLARATION: function ILLEGAL_ID_IN_LEXICAL_DECLARATION(id) {\n    return 'Lexical declarations must not have a binding named ' + JSON.stringify(id);\n  },\n\n  UNITIALIZED_CONST: 'Constant lexical declarations must have an initialiser',\n  ILLEGAL_LABEL_IN_BODY: function ILLEGAL_LABEL_IN_BODY(stmt) {\n    return 'The body of a ' + stmt + ' statement must not be a labeled function declaration';\n  },\n\n  ILLEGEAL_LABEL_IN_IF: 'The consequent of an if statement must not be a labeled function declaration',\n  ILLEGAL_LABEL_IN_ELSE: 'The alternate of an if statement must not be a labeled function declaration',\n  ILLEGAL_CONTINUE_WITHOUT_ITERATION_WITH_ID: function ILLEGAL_CONTINUE_WITHOUT_ITERATION_WITH_ID(id) {\n    return 'Continue statement must be nested within an iteration statement with label ' + JSON.stringify(id);\n  },\n\n  ILLEGAL_CONTINUE_WITHOUT_ITERATION: 'Continue statement must be nested within an iteration statement',\n  ILLEGAL_BREAK_WITHOUT_ITERATION_OR_SWITCH: 'Break statement must be nested within an iteration statement or a switch statement',\n  ILLEGAL_WITH_STRICT_MODE: 'Strict mode code must not include a with statement',\n  ILLEGAL_ACCESS_SUPER_MEMBER: 'Member access on super must be in a method',\n  ILLEGAL_SUPER_CALL: 'Calls to super must be in the \"constructor\" method of a class expression or class declaration that has a superclass',\n  DUPLICATE_LABEL_DECLARATION: function DUPLICATE_LABEL_DECLARATION(label) {\n    return 'Label ' + JSON.stringify(label) + ' has already been declared';\n  },\n  ILLEGAL_BREAK_WITHIN_LABEL: function ILLEGAL_BREAK_WITHIN_LABEL(label) {\n    return 'Break statement must be nested within a statement with label ' + JSON.stringify(label);\n  },\n  ILLEGAL_YIELD_EXPRESSIONS: function ILLEGAL_YIELD_EXPRESSIONS(paramType) {\n    return paramType + ' parameters must not contain yield expressions';\n  },\n\n  ILLEGAL_YIELD_IDENTIFIER: '\"yield\" may not be used as an identifier in this context',\n  ILLEGAL_AWAIT_IDENTIFIER: '\"await\" may not be used as an identifier in this context',\n  DUPLICATE_CONSTRUCTOR: 'Duplicate constructor method in class',\n  ILLEGAL_CONSTRUCTORS: 'Constructors cannot be async, generators, getters or setters',\n  ILLEGAL_STATIC_CLASS_NAME: 'Static class methods cannot be named \"prototype\"',\n  NEW_TARGET_ERROR: 'new.target must be within function (but not arrow expression) code',\n  DUPLICATE_EXPORT: function DUPLICATE_EXPORT(id) {\n    return 'Duplicate export ' + JSON.stringify(id);\n  },\n  UNDECLARED_BINDING: function UNDECLARED_BINDING(id) {\n    return 'Exported binding ' + JSON.stringify(id) + ' is not declared';\n  },\n\n  DUPLICATE_PROPTO_PROP: 'Duplicate __proto__ property in object literal not allowed',\n  ILLEGAL_LABEL_FUNC_DECLARATION: 'Labeled FunctionDeclarations are disallowed in strict mode',\n  ILLEGAL_FUNC_DECL_IF: 'FunctionDeclarations in IfStatements are disallowed in strict mode',\n  ILLEGAL_USE_STRICT: 'Functions with non-simple parameter lists may not contain a \"use strict\" directive',\n  ILLEGAL_EXPORTED_NAME: 'Names of variables used in an export specifier from the current module must be identifiers',\n  NO_OCTALS_IN_TEMPLATES: 'Template literals may not contain octal escape sequences',\n  NO_AWAIT_IN_ASYNC_PARAMS: 'Async arrow parameters may not contain \"await\"'\n};\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/errors.js?")},"./node_modules/shift-parser/dist/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenType = exports.TokenClass = exports.Tokenizer = exports.ParserWithLocation = exports.GenericParser = exports.EarlyErrorChecker = exports.parseScriptWithLocation = exports.parseModuleWithLocation = exports.parseScript = exports.parseModule = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _tokenizer = __webpack_require__(\"./node_modules/shift-parser/dist/tokenizer.js\");\n\nObject.defineProperty(exports, 'Tokenizer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_tokenizer).default;\n  }\n});\nObject.defineProperty(exports, 'TokenClass', {\n  enumerable: true,\n  get: function get() {\n    return _tokenizer.TokenClass;\n  }\n});\nObject.defineProperty(exports, 'TokenType', {\n  enumerable: true,\n  get: function get() {\n    return _tokenizer.TokenType;\n  }\n});\n\nvar _parser = __webpack_require__(\"./node_modules/shift-parser/dist/parser.js\");\n\nvar _earlyErrors = __webpack_require__(\"./node_modules/shift-parser/dist/early-errors.js\");\n\nvar _utils = __webpack_require__(\"./node_modules/shift-parser/dist/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Shape Security, Inc.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\")\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar ParserWithLocation = function (_GenericParser) {\n  _inherits(ParserWithLocation, _GenericParser);\n\n  function ParserWithLocation(source) {\n    _classCallCheck(this, ParserWithLocation);\n\n    var _this = _possibleConstructorReturn(this, (ParserWithLocation.__proto__ || Object.getPrototypeOf(ParserWithLocation)).call(this, source));\n\n    _this.locations = new WeakMap();\n    _this.comments = [];\n    return _this;\n  }\n\n  _createClass(ParserWithLocation, [{\n    key: 'startNode',\n    value: function startNode() {\n      return this.getLocation();\n    }\n  }, {\n    key: 'finishNode',\n    value: function finishNode(node, start) {\n      if (node.type === 'Script' || node.type === 'Module') {\n        this.locations.set(node, {\n          start: { line: 1, column: 0, offset: 0 },\n          end: this.getLocation()\n        });\n        return node;\n      }\n      if (node.type === 'TemplateExpression') {\n        // Adjust TemplateElements to not include surrounding backticks or braces\n        for (var i = 0; i < node.elements.length; i += 2) {\n          var endAdjustment = i < node.elements.length - 1 ? 2 : 1; // discard '${' or '`' respectively\n          var element = node.elements[i];\n          var location = this.locations.get(element);\n          this.locations.set(element, {\n            start: { line: location.start.line, column: location.start.column + 1, offset: location.start.offset + 1 }, // discard '}' or '`'\n            end: { line: location.end.line, column: location.end.column - endAdjustment, offset: location.end.offset - endAdjustment }\n          });\n        }\n      }\n      this.locations.set(node, {\n        start: start,\n        end: this.getLastTokenEndLocation()\n      });\n      return node;\n    }\n  }, {\n    key: 'copyNode',\n    value: function copyNode(src, dest) {\n      this.locations.set(dest, this.locations.get(src)); // todo check undefined\n      return dest;\n    }\n  }, {\n    key: 'skipSingleLineComment',\n    value: function skipSingleLineComment(offset) {\n      // We're actually extending the *tokenizer*, here.\n      var start = {\n        line: this.line + 1,\n        column: this.index - this.lineStart,\n        offset: this.index\n      };\n      var c = this.source[this.index];\n      var type = c === '/' ? 'SingleLine' : c === '<' ? 'HTMLOpen' : 'HTMLClose';\n\n      _get(ParserWithLocation.prototype.__proto__ || Object.getPrototypeOf(ParserWithLocation.prototype), 'skipSingleLineComment', this).call(this, offset);\n\n      var end = {\n        line: this.line + 1,\n        column: this.index - this.lineStart,\n        offset: this.index\n      };\n      var trailingLineTerminatorCharacters = this.source[this.index - 2] === '\\r' ? 2 : (0, _utils.isLineTerminator)(this.source.charCodeAt(this.index - 1)) ? 1 : 0;\n      var text = this.source.substring(start.offset + offset, end.offset - trailingLineTerminatorCharacters);\n\n      this.comments.push({ text: text, type: type, start: start, end: end });\n    }\n  }, {\n    key: 'skipMultiLineComment',\n    value: function skipMultiLineComment() {\n      var start = {\n        line: this.line + 1,\n        column: this.index - this.lineStart,\n        offset: this.index\n      };\n      var type = 'MultiLine';\n\n      var retval = _get(ParserWithLocation.prototype.__proto__ || Object.getPrototypeOf(ParserWithLocation.prototype), 'skipMultiLineComment', this).call(this);\n\n      var end = {\n        line: this.line + 1,\n        column: this.index - this.lineStart,\n        offset: this.index\n      };\n      var text = this.source.substring(start.offset + 2, end.offset - 2);\n\n      this.comments.push({ text: text, type: type, start: start, end: end });\n\n      return retval;\n    }\n  }]);\n\n  return ParserWithLocation;\n}(_parser.GenericParser);\n\nfunction generateInterface(parsingFunctionName) {\n  return function parse(code) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$earlyErrors = _ref.earlyErrors,\n        earlyErrors = _ref$earlyErrors === undefined ? true : _ref$earlyErrors;\n\n    var parser = new _parser.GenericParser(code);\n    var tree = parser[parsingFunctionName]();\n    if (earlyErrors) {\n      var errors = _earlyErrors.EarlyErrorChecker.check(tree);\n      // for now, just throw the first error; we will handle multiple errors later\n      if (errors.length > 0) {\n        throw new _tokenizer.JsError(0, 1, 0, errors[0].message);\n      }\n    }\n    return tree;\n  };\n}\n\nfunction generateInterfaceWithLocation(parsingFunctionName) {\n  return function parse(code) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$earlyErrors = _ref2.earlyErrors,\n        earlyErrors = _ref2$earlyErrors === undefined ? true : _ref2$earlyErrors;\n\n    var parser = new ParserWithLocation(code);\n    var tree = parser[parsingFunctionName]();\n    if (earlyErrors) {\n      var errors = _earlyErrors.EarlyErrorChecker.check(tree);\n      // for now, just throw the first error; we will handle multiple errors later\n      if (errors.length > 0) {\n        var _errors$ = errors[0],\n            node = _errors$.node,\n            message = _errors$.message;\n        var _parser$locations$get = parser.locations.get(node).start,\n            offset = _parser$locations$get.offset,\n            line = _parser$locations$get.line,\n            column = _parser$locations$get.column;\n\n        throw new _tokenizer.JsError(offset, line, column, message);\n      }\n    }\n    return { tree: tree, locations: parser.locations, comments: parser.comments };\n  };\n}\n\nvar parseModule = exports.parseModule = generateInterface('parseModule');\nvar parseScript = exports.parseScript = generateInterface('parseScript');\nvar parseModuleWithLocation = exports.parseModuleWithLocation = generateInterfaceWithLocation('parseModule');\nvar parseScriptWithLocation = exports.parseScriptWithLocation = generateInterfaceWithLocation('parseScript');\nexports.default = parseScript;\nexports.EarlyErrorChecker = _earlyErrors.EarlyErrorChecker;\nexports.GenericParser = _parser.GenericParser;\nexports.ParserWithLocation = ParserWithLocation;\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/index.js?")},"./node_modules/shift-parser/dist/parser.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenericParser = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _errors = __webpack_require__(\"./node_modules/shift-parser/dist/errors.js\");\n\nvar _shiftRegexpAcceptor = __webpack_require__(\"./node_modules/shift-regexp-acceptor/dist/index.js\");\n\nvar _shiftRegexpAcceptor2 = _interopRequireDefault(_shiftRegexpAcceptor);\n\nvar _tokenizer = __webpack_require__(\"./node_modules/shift-parser/dist/tokenizer.js\");\n\nvar _tokenizer2 = _interopRequireDefault(_tokenizer);\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar AST = _interopRequireWildcard(_shiftAst);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\")\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n// Empty parameter list for ArrowExpression\nvar ARROW_EXPRESSION_PARAMS = 'CoverParenthesizedExpressionAndArrowParameterList';\nvar EXPORT_UNKNOWN_SPECIFIER = 'ExportNameOfUnknownType';\n\nvar Precedence = {\n  Sequence: 0,\n  Yield: 1,\n  Assignment: 1,\n  Conditional: 2,\n  ArrowFunction: 2,\n  LogicalOR: 3,\n  LogicalAND: 4,\n  BitwiseOR: 5,\n  BitwiseXOR: 6,\n  BitwiseAND: 7,\n  Equality: 8,\n  Relational: 9,\n  BitwiseSHIFT: 10,\n  Additive: 11,\n  Multiplicative: 12,\n  Unary: 13,\n  Postfix: 14,\n  Call: 15,\n  New: 16,\n  TaggedTemplate: 17,\n  Member: 18,\n  Primary: 19\n};\n\nvar BinaryPrecedence = {\n  '||': Precedence.LogicalOR,\n  '&&': Precedence.LogicalAND,\n  '|': Precedence.BitwiseOR,\n  '^': Precedence.BitwiseXOR,\n  '&': Precedence.BitwiseAND,\n  '==': Precedence.Equality,\n  '!=': Precedence.Equality,\n  '===': Precedence.Equality,\n  '!==': Precedence.Equality,\n  '<': Precedence.Relational,\n  '>': Precedence.Relational,\n  '<=': Precedence.Relational,\n  '>=': Precedence.Relational,\n  'in': Precedence.Relational,\n  'instanceof': Precedence.Relational,\n  '<<': Precedence.BitwiseSHIFT,\n  '>>': Precedence.BitwiseSHIFT,\n  '>>>': Precedence.BitwiseSHIFT,\n  '+': Precedence.Additive,\n  '-': Precedence.Additive,\n  '*': Precedence.Multiplicative,\n  '%': Precedence.Multiplicative,\n  '/': Precedence.Multiplicative\n};\n\nfunction isValidSimpleAssignmentTarget(node) {\n  if (node == null) return false;\n  switch (node.type) {\n    case 'IdentifierExpression':\n    case 'ComputedMemberExpression':\n    case 'StaticMemberExpression':\n      return true;\n  }\n  return false;\n}\n\nfunction isPrefixOperator(token) {\n  switch (token.type) {\n    case _tokenizer.TokenType.INC:\n    case _tokenizer.TokenType.DEC:\n    case _tokenizer.TokenType.ADD:\n    case _tokenizer.TokenType.SUB:\n    case _tokenizer.TokenType.BIT_NOT:\n    case _tokenizer.TokenType.NOT:\n    case _tokenizer.TokenType.DELETE:\n    case _tokenizer.TokenType.VOID:\n    case _tokenizer.TokenType.TYPEOF:\n      return true;\n  }\n  return false;\n}\n\nfunction isUpdateOperator(token) {\n  return token.type === _tokenizer.TokenType.INC || token.type === _tokenizer.TokenType.DEC;\n}\n\nvar GenericParser = exports.GenericParser = function (_Tokenizer) {\n  _inherits(GenericParser, _Tokenizer);\n\n  function GenericParser(source) {\n    _classCallCheck(this, GenericParser);\n\n    var _this = _possibleConstructorReturn(this, (GenericParser.__proto__ || Object.getPrototypeOf(GenericParser)).call(this, source));\n\n    _this.allowIn = true;\n    _this.inFunctionBody = false;\n    _this.inParameter = false;\n    _this.allowYieldExpression = false;\n    _this.allowAwaitExpression = false;\n    _this.firstAwaitLocation = null; // for forbidding `await` in async arrow params.\n    _this.module = false;\n    _this.moduleIsTheGoalSymbol = false;\n    _this.strict = false;\n\n    // Cover grammar\n    _this.isBindingElement = true;\n    _this.isAssignmentTarget = true;\n    _this.firstExprError = null;\n    return _this;\n  }\n\n  _createClass(GenericParser, [{\n    key: 'match',\n    value: function match(subType) {\n      return this.lookahead.type === subType;\n    }\n  }, {\n    key: 'matchIdentifier',\n    value: function matchIdentifier() {\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.IDENTIFIER:\n        case _tokenizer.TokenType.LET:\n        case _tokenizer.TokenType.YIELD:\n        case _tokenizer.TokenType.ASYNC:\n          return true;\n        case _tokenizer.TokenType.AWAIT:\n          if (!this.moduleIsTheGoalSymbol) {\n            if (this.firstAwaitLocation === null) {\n              this.firstAwaitLocation = this.getLocation();\n            }\n            return true;\n          }\n          return false;\n        case _tokenizer.TokenType.ESCAPED_KEYWORD:\n          if (this.lookahead.value === 'await' && !this.moduleIsTheGoalSymbol) {\n            if (this.firstAwaitLocation === null) {\n              this.firstAwaitLocation = this.getLocation();\n            }\n            return true;\n          }\n          return this.lookahead.value === 'let' || this.lookahead.value === 'yield' || this.lookahead.value === 'async';\n      }\n      return false;\n    }\n  }, {\n    key: 'eat',\n    value: function eat(tokenType) {\n      if (this.lookahead.type === tokenType) {\n        return this.lex();\n      }\n      return null;\n    }\n  }, {\n    key: 'expect',\n    value: function expect(tokenType) {\n      if (this.lookahead.type === tokenType) {\n        return this.lex();\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'matchContextualKeyword',\n    value: function matchContextualKeyword(keyword) {\n      return this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword;\n    }\n  }, {\n    key: 'expectContextualKeyword',\n    value: function expectContextualKeyword(keyword) {\n      if (this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword) {\n        return this.lex();\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'eatContextualKeyword',\n    value: function eatContextualKeyword(keyword) {\n      if (this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword) {\n        return this.lex();\n      }\n      return null;\n    }\n  }, {\n    key: 'consumeSemicolon',\n    value: function consumeSemicolon() {\n      if (this.eat(_tokenizer.TokenType.SEMICOLON)) return;\n      if (this.hasLineTerminatorBeforeNext) return;\n      if (!this.eof() && !this.match(_tokenizer.TokenType.RBRACE)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n    }\n\n    // this is a no-op, reserved for future use\n\n  }, {\n    key: 'startNode',\n    value: function startNode(node) {\n      return node;\n    }\n  }, {\n    key: 'copyNode',\n    value: function copyNode(src, dest) {\n      return dest;\n    }\n  }, {\n    key: 'finishNode',\n    value: function finishNode(node /* , startState */) {\n      return node;\n    }\n  }, {\n    key: 'parseModule',\n    value: function parseModule() {\n      this.moduleIsTheGoalSymbol = this.module = this.strict = true;\n      this.lookahead = this.advance();\n\n      var startState = this.startNode();\n\n      var _parseBody = this.parseBody(),\n          directives = _parseBody.directives,\n          statements = _parseBody.statements;\n\n      if (!this.match(_tokenizer.TokenType.EOS)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n      return this.finishNode(new AST.Module({ directives: directives, items: statements }), startState);\n    }\n  }, {\n    key: 'parseScript',\n    value: function parseScript() {\n      this.lookahead = this.advance();\n\n      var startState = this.startNode();\n\n      var _parseBody2 = this.parseBody(),\n          directives = _parseBody2.directives,\n          statements = _parseBody2.statements;\n\n      if (!this.match(_tokenizer.TokenType.EOS)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n      return this.finishNode(new AST.Script({ directives: directives, statements: statements }), startState);\n    }\n  }, {\n    key: 'parseFunctionBody',\n    value: function parseFunctionBody() {\n      var oldInFunctionBody = this.inFunctionBody;\n      var oldModule = this.module;\n      var oldStrict = this.strict;\n      this.inFunctionBody = true;\n      this.module = false;\n\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.LBRACE);\n      var body = new AST.FunctionBody(this.parseBody());\n      this.expect(_tokenizer.TokenType.RBRACE);\n      body = this.finishNode(body, startState);\n\n      this.inFunctionBody = oldInFunctionBody;\n      this.module = oldModule;\n      this.strict = oldStrict;\n\n      return body;\n    }\n  }, {\n    key: 'parseBody',\n    value: function parseBody() {\n      var directives = [],\n          statements = [],\n          parsingDirectives = true,\n          directiveOctal = null;\n\n      while (true) {\n        if (this.eof() || this.match(_tokenizer.TokenType.RBRACE)) break;\n        var token = this.lookahead;\n        var text = token.slice.text;\n        var isStringLiteral = token.type === _tokenizer.TokenType.STRING;\n        var isModule = this.module;\n        var directiveLocation = this.getLocation();\n        var directiveStartState = this.startNode();\n        var stmt = isModule ? this.parseModuleItem() : this.parseStatementListItem();\n        if (parsingDirectives) {\n          if (isStringLiteral && stmt.type === 'ExpressionStatement' && stmt.expression.type === 'LiteralStringExpression') {\n            if (!directiveOctal && token.octal) {\n              directiveOctal = this.createErrorWithLocation(directiveLocation, 'Unexpected legacy octal escape sequence: \\\\' + token.octal);\n            }\n            var rawValue = text.slice(1, -1);\n            if (rawValue === 'use strict') {\n              this.strict = true;\n            }\n            directives.push(this.finishNode(new AST.Directive({ rawValue: rawValue }), directiveStartState));\n          } else {\n            parsingDirectives = false;\n            if (directiveOctal && this.strict) {\n              throw directiveOctal;\n            }\n            statements.push(stmt);\n          }\n        } else {\n          statements.push(stmt);\n        }\n      }\n      if (directiveOctal && this.strict) {\n        throw directiveOctal;\n      }\n\n      return { directives: directives, statements: statements };\n    }\n  }, {\n    key: 'parseImportSpecifier',\n    value: function parseImportSpecifier() {\n      var startState = this.startNode(),\n          name = void 0;\n      if (this.matchIdentifier()) {\n        name = this.parseIdentifier();\n        if (!this.eatContextualKeyword('as')) {\n          return this.finishNode(new AST.ImportSpecifier({\n            name: null,\n            binding: this.finishNode(new AST.BindingIdentifier({ name: name }), startState)\n          }), startState);\n        }\n      } else if (this.lookahead.type.klass.isIdentifierName) {\n        name = this.parseIdentifierName();\n        this.expectContextualKeyword('as');\n      }\n\n      return this.finishNode(new AST.ImportSpecifier({ name: name, binding: this.parseBindingIdentifier() }), startState);\n    }\n  }, {\n    key: 'parseNameSpaceBinding',\n    value: function parseNameSpaceBinding() {\n      this.expect(_tokenizer.TokenType.MUL);\n      this.expectContextualKeyword('as');\n      return this.parseBindingIdentifier();\n    }\n  }, {\n    key: 'parseNamedImports',\n    value: function parseNamedImports() {\n      var result = [];\n      this.expect(_tokenizer.TokenType.LBRACE);\n      while (!this.eat(_tokenizer.TokenType.RBRACE)) {\n        result.push(this.parseImportSpecifier());\n        if (!this.eat(_tokenizer.TokenType.COMMA)) {\n          this.expect(_tokenizer.TokenType.RBRACE);\n          break;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: 'parseFromClause',\n    value: function parseFromClause() {\n      this.expectContextualKeyword('from');\n      var value = this.expect(_tokenizer.TokenType.STRING).str;\n      return value;\n    }\n  }, {\n    key: 'parseImportDeclaration',\n    value: function parseImportDeclaration() {\n      var startState = this.startNode(),\n          defaultBinding = null,\n          moduleSpecifier = void 0;\n      this.expect(_tokenizer.TokenType.IMPORT);\n      if (this.match(_tokenizer.TokenType.STRING)) {\n        moduleSpecifier = this.lex().str;\n        this.consumeSemicolon();\n        return this.finishNode(new AST.Import({ defaultBinding: null, namedImports: [], moduleSpecifier: moduleSpecifier }), startState);\n      }\n      if (this.matchIdentifier()) {\n        defaultBinding = this.parseBindingIdentifier();\n        if (!this.eat(_tokenizer.TokenType.COMMA)) {\n          var decl = new AST.Import({ defaultBinding: defaultBinding, namedImports: [], moduleSpecifier: this.parseFromClause() });\n          this.consumeSemicolon();\n          return this.finishNode(decl, startState);\n        }\n      }\n      if (this.match(_tokenizer.TokenType.MUL)) {\n        var _decl = new AST.ImportNamespace({\n          defaultBinding: defaultBinding,\n          namespaceBinding: this.parseNameSpaceBinding(),\n          moduleSpecifier: this.parseFromClause()\n        });\n        this.consumeSemicolon();\n        return this.finishNode(_decl, startState);\n      } else if (this.match(_tokenizer.TokenType.LBRACE)) {\n        var _decl2 = new AST.Import({\n          defaultBinding: defaultBinding,\n          namedImports: this.parseNamedImports(),\n          moduleSpecifier: this.parseFromClause()\n        });\n        this.consumeSemicolon();\n        return this.finishNode(_decl2, startState);\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'parseExportSpecifier',\n    value: function parseExportSpecifier() {\n      var startState = this.startNode();\n      var name = this.finishNode({ type: EXPORT_UNKNOWN_SPECIFIER, isIdentifier: this.matchIdentifier(), value: this.parseIdentifierName() }, startState);\n      if (this.eatContextualKeyword('as')) {\n        var exportedName = this.parseIdentifierName();\n        return this.finishNode({ name: name, exportedName: exportedName }, startState);\n      }\n      return this.finishNode({ name: name, exportedName: null }, startState);\n    }\n  }, {\n    key: 'parseExportClause',\n    value: function parseExportClause() {\n      this.expect(_tokenizer.TokenType.LBRACE);\n      var result = [];\n      while (!this.eat(_tokenizer.TokenType.RBRACE)) {\n        result.push(this.parseExportSpecifier());\n        if (!this.eat(_tokenizer.TokenType.COMMA)) {\n          this.expect(_tokenizer.TokenType.RBRACE);\n          break;\n        }\n      }\n      return result;\n    }\n  }, {\n    key: 'parseExportDeclaration',\n    value: function parseExportDeclaration() {\n      var _this2 = this;\n\n      var startState = this.startNode(),\n          decl = void 0;\n      this.expect(_tokenizer.TokenType.EXPORT);\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.MUL:\n          this.lex();\n          // export * FromClause ;\n          decl = new AST.ExportAllFrom({ moduleSpecifier: this.parseFromClause() });\n          this.consumeSemicolon();\n          break;\n        case _tokenizer.TokenType.LBRACE:\n          {\n            // export ExportClause FromClause ;\n            // export ExportClause ;\n            var namedExports = this.parseExportClause();\n            var moduleSpecifier = null;\n            if (this.matchContextualKeyword('from')) {\n              moduleSpecifier = this.parseFromClause();\n              decl = new AST.ExportFrom({ namedExports: namedExports.map(function (e) {\n                  return _this2.copyNode(e, new AST.ExportFromSpecifier({ name: e.name.value, exportedName: e.exportedName }));\n                }), moduleSpecifier: moduleSpecifier });\n            } else {\n              namedExports.forEach(function (_ref) {\n                var name = _ref.name;\n\n                if (!name.isIdentifier) {\n                  throw _this2.createError(_errors.ErrorMessages.ILLEGAL_EXPORTED_NAME);\n                }\n              });\n              decl = new AST.ExportLocals({ namedExports: namedExports.map(function (e) {\n                  return _this2.copyNode(e, new AST.ExportLocalSpecifier({ name: _this2.copyNode(e.name, new AST.IdentifierExpression({ name: e.name.value })), exportedName: e.exportedName }));\n                }) });\n            }\n            this.consumeSemicolon();\n            break;\n          }\n        case _tokenizer.TokenType.CLASS:\n          // export ClassDeclaration\n          decl = new AST.Export({ declaration: this.parseClass({ isExpr: false, inDefault: false }) });\n          break;\n        case _tokenizer.TokenType.FUNCTION:\n          // export HoistableDeclaration\n          decl = new AST.Export({ declaration: this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: false }) });\n          break;\n        case _tokenizer.TokenType.ASYNC:\n          {\n            var preAsyncStartState = this.startNode();\n            this.lex();\n            decl = new AST.Export({ declaration: this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: true, startState: preAsyncStartState }) });\n            break;\n          }\n        case _tokenizer.TokenType.DEFAULT:\n          this.lex();\n          switch (this.lookahead.type) {\n            case _tokenizer.TokenType.FUNCTION:\n              // export default HoistableDeclaration[Default]\n              decl = new AST.ExportDefault({\n                body: this.parseFunction({ isExpr: false, inDefault: true, allowGenerator: true, isAsync: false })\n              });\n              break;\n            case _tokenizer.TokenType.CLASS:\n              // export default ClassDeclaration[Default]\n              decl = new AST.ExportDefault({ body: this.parseClass({ isExpr: false, inDefault: true }) });\n              break;\n            case _tokenizer.TokenType.ASYNC:\n              {\n                var _preAsyncStartState = this.startNode();\n                var lexerState = this.saveLexerState();\n                this.lex();\n                if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {\n                  decl = new AST.ExportDefault({\n                    body: this.parseFunction({ isExpr: false, inDefault: true, allowGenerator: false, isAsync: true, startState: _preAsyncStartState })\n                  });\n                  break;\n                }\n                this.restoreLexerState(lexerState);\n              }\n            // else fall through\n            default:\n              // export default [lookahead ∉ {function, async [no LineTerminatorHere] function, class}] AssignmentExpression[In] ;\n              decl = new AST.ExportDefault({ body: this.parseAssignmentExpression() });\n              this.consumeSemicolon();\n              break;\n          }\n          break;\n        case _tokenizer.TokenType.VAR:\n        case _tokenizer.TokenType.LET:\n        case _tokenizer.TokenType.CONST:\n          // export LexicalDeclaration\n          decl = new AST.Export({ declaration: this.parseVariableDeclaration(true) });\n          this.consumeSemicolon();\n          break;\n        default:\n          throw this.createUnexpected(this.lookahead);\n      }\n      return this.finishNode(decl, startState);\n    }\n  }, {\n    key: 'parseModuleItem',\n    value: function parseModuleItem() {\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.IMPORT:\n          return this.parseImportDeclaration();\n        case _tokenizer.TokenType.EXPORT:\n          return this.parseExportDeclaration();\n        default:\n          return this.parseStatementListItem();\n      }\n    }\n  }, {\n    key: 'lookaheadLexicalDeclaration',\n    value: function lookaheadLexicalDeclaration() {\n      if (this.match(_tokenizer.TokenType.LET) || this.match(_tokenizer.TokenType.CONST)) {\n        var lexerState = this.saveLexerState();\n        this.lex();\n        if (this.matchIdentifier() || this.match(_tokenizer.TokenType.LBRACE) || this.match(_tokenizer.TokenType.LBRACK)) {\n          this.restoreLexerState(lexerState);\n          return true;\n        }\n        this.restoreLexerState(lexerState);\n      }\n      return false;\n    }\n  }, {\n    key: 'parseStatementListItem',\n    value: function parseStatementListItem() {\n      if (this.eof()) throw this.createUnexpected(this.lookahead);\n\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.FUNCTION:\n          return this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: false });\n        case _tokenizer.TokenType.CLASS:\n          return this.parseClass({ isExpr: false, inDefault: false });\n        case _tokenizer.TokenType.ASYNC:\n          {\n            var preAsyncStartState = this.getLocation();\n            var lexerState = this.saveLexerState();\n            this.lex();\n            if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {\n              return this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: true, startState: preAsyncStartState });\n            }\n            this.restoreLexerState(lexerState);\n            return this.parseStatement();\n          }\n        default:\n          if (this.lookaheadLexicalDeclaration()) {\n            var startState = this.startNode();\n            return this.finishNode(this.parseVariableDeclarationStatement(), startState);\n          }\n          return this.parseStatement();\n      }\n    }\n  }, {\n    key: 'parseStatement',\n    value: function parseStatement() {\n      var startState = this.startNode();\n      var stmt = this.isolateCoverGrammar(this.parseStatementHelper);\n      return this.finishNode(stmt, startState);\n    }\n  }, {\n    key: 'parseStatementHelper',\n    value: function parseStatementHelper() {\n      if (this.eof()) {\n        throw this.createUnexpected(this.lookahead);\n      }\n\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.SEMICOLON:\n          return this.parseEmptyStatement();\n        case _tokenizer.TokenType.LBRACE:\n          return this.parseBlockStatement();\n        case _tokenizer.TokenType.LPAREN:\n          return this.parseExpressionStatement();\n        case _tokenizer.TokenType.BREAK:\n          return this.parseBreakStatement();\n        case _tokenizer.TokenType.CONTINUE:\n          return this.parseContinueStatement();\n        case _tokenizer.TokenType.DEBUGGER:\n          return this.parseDebuggerStatement();\n        case _tokenizer.TokenType.DO:\n          return this.parseDoWhileStatement();\n        case _tokenizer.TokenType.FOR:\n          return this.parseForStatement();\n        case _tokenizer.TokenType.IF:\n          return this.parseIfStatement();\n        case _tokenizer.TokenType.RETURN:\n          return this.parseReturnStatement();\n        case _tokenizer.TokenType.SWITCH:\n          return this.parseSwitchStatement();\n        case _tokenizer.TokenType.THROW:\n          return this.parseThrowStatement();\n        case _tokenizer.TokenType.TRY:\n          return this.parseTryStatement();\n        case _tokenizer.TokenType.VAR:\n          return this.parseVariableDeclarationStatement();\n        case _tokenizer.TokenType.WHILE:\n          return this.parseWhileStatement();\n        case _tokenizer.TokenType.WITH:\n          return this.parseWithStatement();\n        case _tokenizer.TokenType.FUNCTION:\n        case _tokenizer.TokenType.CLASS:\n          throw this.createUnexpected(this.lookahead);\n\n        default:\n          {\n            var lexerState = this.saveLexerState();\n            if (this.eat(_tokenizer.TokenType.LET)) {\n              if (this.match(_tokenizer.TokenType.LBRACK)) {\n                this.restoreLexerState(lexerState);\n                throw this.createUnexpected(this.lookahead);\n              }\n              this.restoreLexerState(lexerState);\n            } else if (this.eat(_tokenizer.TokenType.ASYNC)) {\n              if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {\n                throw this.createUnexpected(this.lookahead);\n              }\n              this.restoreLexerState(lexerState);\n            }\n            var expr = this.parseExpression();\n            // 12.12 Labelled Statements;\n            if (expr.type === 'IdentifierExpression' && this.eat(_tokenizer.TokenType.COLON)) {\n              var labeledBody = this.match(_tokenizer.TokenType.FUNCTION) ? this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: false, isAsync: false }) : this.parseStatement();\n              return new AST.LabeledStatement({ label: expr.name, body: labeledBody });\n            }\n            this.consumeSemicolon();\n            return new AST.ExpressionStatement({ expression: expr });\n          }\n      }\n    }\n  }, {\n    key: 'parseEmptyStatement',\n    value: function parseEmptyStatement() {\n      this.lex();\n      return new AST.EmptyStatement();\n    }\n  }, {\n    key: 'parseBlockStatement',\n    value: function parseBlockStatement() {\n      return new AST.BlockStatement({ block: this.parseBlock() });\n    }\n  }, {\n    key: 'parseExpressionStatement',\n    value: function parseExpressionStatement() {\n      var expr = this.parseExpression();\n      this.consumeSemicolon();\n      return new AST.ExpressionStatement({ expression: expr });\n    }\n  }, {\n    key: 'parseBreakStatement',\n    value: function parseBreakStatement() {\n      this.lex();\n\n      // Catch the very common case first: immediately a semicolon (U+003B).\n      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {\n        return new AST.BreakStatement({ label: null });\n      }\n\n      var label = null;\n      if (this.matchIdentifier()) {\n        label = this.parseIdentifier();\n      }\n\n      this.consumeSemicolon();\n\n      return new AST.BreakStatement({ label: label });\n    }\n  }, {\n    key: 'parseContinueStatement',\n    value: function parseContinueStatement() {\n      this.lex();\n\n      // Catch the very common case first: immediately a semicolon (U+003B).\n      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {\n        return new AST.ContinueStatement({ label: null });\n      }\n\n      var label = null;\n      if (this.matchIdentifier()) {\n        label = this.parseIdentifier();\n      }\n\n      this.consumeSemicolon();\n\n      return new AST.ContinueStatement({ label: label });\n    }\n  }, {\n    key: 'parseDebuggerStatement',\n    value: function parseDebuggerStatement() {\n      this.lex();\n      this.consumeSemicolon();\n      return new AST.DebuggerStatement();\n    }\n  }, {\n    key: 'parseDoWhileStatement',\n    value: function parseDoWhileStatement() {\n      this.lex();\n      var body = this.parseStatement();\n      this.expect(_tokenizer.TokenType.WHILE);\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var test = this.parseExpression();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      this.eat(_tokenizer.TokenType.SEMICOLON);\n      return new AST.DoWhileStatement({ body: body, test: test });\n    }\n  }, {\n    key: 'parseForStatement',\n    value: function parseForStatement() {\n      this.lex();\n      var isAwait = this.allowAwaitExpression && this.eat(_tokenizer.TokenType.AWAIT);\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var test = null;\n      var right = null;\n      if (isAwait && this.match(_tokenizer.TokenType.SEMICOLON)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n      if (this.eat(_tokenizer.TokenType.SEMICOLON)) {\n        if (!this.match(_tokenizer.TokenType.SEMICOLON)) {\n          test = this.parseExpression();\n        }\n        this.expect(_tokenizer.TokenType.SEMICOLON);\n        if (!this.match(_tokenizer.TokenType.RPAREN)) {\n          right = this.parseExpression();\n        }\n        return new AST.ForStatement({ init: null, test: test, update: right, body: this.getIteratorStatementEpilogue() });\n      }\n      var startsWithLet = this.match(_tokenizer.TokenType.LET);\n      var isForDecl = this.lookaheadLexicalDeclaration();\n      var leftStartState = this.startNode();\n      if (this.match(_tokenizer.TokenType.VAR) || isForDecl) {\n        var _previousAllowIn = this.allowIn;\n        this.allowIn = false;\n        var init = this.parseVariableDeclaration(false);\n        this.allowIn = _previousAllowIn;\n\n        if (init.declarators.length === 1 && (this.match(_tokenizer.TokenType.IN) || this.matchContextualKeyword('of'))) {\n          var ctor = void 0;\n          var decl = init.declarators[0];\n\n          if (this.match(_tokenizer.TokenType.IN)) {\n            if (isAwait) {\n              throw this.createUnexpected(this.lookahead);\n            }\n            if (decl.init !== null && (this.strict || init.kind !== 'var' || decl.binding.type !== 'BindingIdentifier')) {\n              throw this.createError(_errors.ErrorMessages.INVALID_VAR_INIT_FOR_IN);\n            }\n            ctor = AST.ForInStatement;\n            this.lex();\n            right = this.parseExpression();\n          } else {\n            if (decl.init !== null) {\n              throw this.createError(isAwait ? _errors.ErrorMessages.INVALID_VAR_INIT_FOR_AWAIT : _errors.ErrorMessages.INVALID_VAR_INIT_FOR_OF);\n            }\n            if (isAwait) {\n              ctor = AST.ForAwaitStatement;\n            } else {\n              ctor = AST.ForOfStatement;\n            }\n            this.lex();\n            right = this.parseAssignmentExpression();\n          }\n\n          var body = this.getIteratorStatementEpilogue();\n\n          return new ctor({ left: init, right: right, body: body });\n        } else if (isAwait) {\n          throw this.createUnexpected(this.lookahead);\n        }\n        this.expect(_tokenizer.TokenType.SEMICOLON);\n        if (init.declarators.some(function (decl) {\n          return decl.binding.type !== 'BindingIdentifier' && decl.init === null;\n        })) {\n          throw this.createError(_errors.ErrorMessages.UNINITIALIZED_BINDINGPATTERN_IN_FOR_INIT);\n        }\n        if (!this.match(_tokenizer.TokenType.SEMICOLON)) {\n          test = this.parseExpression();\n        }\n        this.expect(_tokenizer.TokenType.SEMICOLON);\n        if (!this.match(_tokenizer.TokenType.RPAREN)) {\n          right = this.parseExpression();\n        }\n        return new AST.ForStatement({ init: init, test: test, update: right, body: this.getIteratorStatementEpilogue() });\n      }\n      var previousAllowIn = this.allowIn;\n      this.allowIn = false;\n      var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n      this.allowIn = previousAllowIn;\n\n      if (this.isAssignmentTarget && expr.type !== 'AssignmentExpression' && (this.match(_tokenizer.TokenType.IN) || this.matchContextualKeyword('of'))) {\n        if (expr.type === 'ObjectAssignmentTarget' || expr.type === 'ArrayAssignmentTarget') {\n          this.firstExprError = null;\n        }\n        if (startsWithLet && this.matchContextualKeyword('of')) {\n          throw this.createError(isAwait ? _errors.ErrorMessages.INVALID_LHS_IN_FOR_AWAIT : _errors.ErrorMessages.INVALID_LHS_IN_FOR_OF);\n        }\n        var _ctor = void 0;\n        if (this.match(_tokenizer.TokenType.IN)) {\n          if (isAwait) {\n            throw this.createUnexpected(this.lookahead);\n          }\n          _ctor = AST.ForInStatement;\n          this.lex();\n          right = this.parseExpression();\n        } else {\n          if (isAwait) {\n            _ctor = AST.ForAwaitStatement;\n          } else {\n            _ctor = AST.ForOfStatement;\n          }\n          this.lex();\n          right = this.parseAssignmentExpression();\n        }\n\n        return new _ctor({ left: this.transformDestructuring(expr), right: right, body: this.getIteratorStatementEpilogue() });\n      } else if (isAwait) {\n        throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_FOR_AWAIT);\n      }\n      if (this.firstExprError) {\n        throw this.firstExprError;\n      }\n      while (this.eat(_tokenizer.TokenType.COMMA)) {\n        var rhs = this.parseAssignmentExpression();\n        expr = this.finishNode(new AST.BinaryExpression({ left: expr, operator: ',', right: rhs }), leftStartState);\n      }\n      if (this.match(_tokenizer.TokenType.IN)) {\n        throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_FOR_IN);\n      }\n      if (this.matchContextualKeyword('of')) {\n        throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_FOR_OF);\n      }\n      this.expect(_tokenizer.TokenType.SEMICOLON);\n      if (!this.match(_tokenizer.TokenType.SEMICOLON)) {\n        test = this.parseExpression();\n      }\n      this.expect(_tokenizer.TokenType.SEMICOLON);\n      if (!this.match(_tokenizer.TokenType.RPAREN)) {\n        right = this.parseExpression();\n      }\n      return new AST.ForStatement({ init: expr, test: test, update: right, body: this.getIteratorStatementEpilogue() });\n    }\n  }, {\n    key: 'getIteratorStatementEpilogue',\n    value: function getIteratorStatementEpilogue() {\n      this.expect(_tokenizer.TokenType.RPAREN);\n      var body = this.parseStatement();\n      return body;\n    }\n  }, {\n    key: 'parseIfStatementChild',\n    value: function parseIfStatementChild() {\n      return this.match(_tokenizer.TokenType.FUNCTION) ? this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: false, isAsync: false }) : this.parseStatement();\n    }\n  }, {\n    key: 'parseIfStatement',\n    value: function parseIfStatement() {\n      this.lex();\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var test = this.parseExpression();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      var consequent = this.parseIfStatementChild();\n      var alternate = null;\n      if (this.eat(_tokenizer.TokenType.ELSE)) {\n        alternate = this.parseIfStatementChild();\n      }\n      return new AST.IfStatement({ test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'parseReturnStatement',\n    value: function parseReturnStatement() {\n      if (!this.inFunctionBody) {\n        throw this.createError(_errors.ErrorMessages.ILLEGAL_RETURN);\n      }\n\n      this.lex();\n\n      // Catch the very common case first: immediately a semicolon (U+003B).\n      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {\n        return new AST.ReturnStatement({ expression: null });\n      }\n\n      var expression = null;\n      if (!this.match(_tokenizer.TokenType.RBRACE) && !this.eof()) {\n        expression = this.parseExpression();\n      }\n\n      this.consumeSemicolon();\n      return new AST.ReturnStatement({ expression: expression });\n    }\n  }, {\n    key: 'parseSwitchStatement',\n    value: function parseSwitchStatement() {\n      this.lex();\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var discriminant = this.parseExpression();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      this.expect(_tokenizer.TokenType.LBRACE);\n\n      if (this.eat(_tokenizer.TokenType.RBRACE)) {\n        return new AST.SwitchStatement({ discriminant: discriminant, cases: [] });\n      }\n\n      var cases = this.parseSwitchCases();\n      if (this.match(_tokenizer.TokenType.DEFAULT)) {\n        var defaultCase = this.parseSwitchDefault();\n        var postDefaultCases = this.parseSwitchCases();\n        if (this.match(_tokenizer.TokenType.DEFAULT)) {\n          throw this.createError(_errors.ErrorMessages.MULTIPLE_DEFAULTS_IN_SWITCH);\n        }\n        this.expect(_tokenizer.TokenType.RBRACE);\n        return new AST.SwitchStatementWithDefault({\n          discriminant: discriminant,\n          preDefaultCases: cases,\n          defaultCase: defaultCase,\n          postDefaultCases: postDefaultCases\n        });\n      }\n      this.expect(_tokenizer.TokenType.RBRACE);\n      return new AST.SwitchStatement({ discriminant: discriminant, cases: cases });\n    }\n  }, {\n    key: 'parseSwitchCases',\n    value: function parseSwitchCases() {\n      var result = [];\n      while (!(this.eof() || this.match(_tokenizer.TokenType.RBRACE) || this.match(_tokenizer.TokenType.DEFAULT))) {\n        result.push(this.parseSwitchCase());\n      }\n      return result;\n    }\n  }, {\n    key: 'parseSwitchCase',\n    value: function parseSwitchCase() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.CASE);\n      return this.finishNode(new AST.SwitchCase({\n        test: this.parseExpression(),\n        consequent: this.parseSwitchCaseBody()\n      }), startState);\n    }\n  }, {\n    key: 'parseSwitchDefault',\n    value: function parseSwitchDefault() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.DEFAULT);\n      return this.finishNode(new AST.SwitchDefault({ consequent: this.parseSwitchCaseBody() }), startState);\n    }\n  }, {\n    key: 'parseSwitchCaseBody',\n    value: function parseSwitchCaseBody() {\n      this.expect(_tokenizer.TokenType.COLON);\n      return this.parseStatementListInSwitchCaseBody();\n    }\n  }, {\n    key: 'parseStatementListInSwitchCaseBody',\n    value: function parseStatementListInSwitchCaseBody() {\n      var result = [];\n      while (!(this.eof() || this.match(_tokenizer.TokenType.RBRACE) || this.match(_tokenizer.TokenType.DEFAULT) || this.match(_tokenizer.TokenType.CASE))) {\n        result.push(this.parseStatementListItem());\n      }\n      return result;\n    }\n  }, {\n    key: 'parseThrowStatement',\n    value: function parseThrowStatement() {\n      var token = this.lex();\n      if (this.hasLineTerminatorBeforeNext) {\n        throw this.createErrorWithLocation(token, _errors.ErrorMessages.NEWLINE_AFTER_THROW);\n      }\n      var expression = this.parseExpression();\n      this.consumeSemicolon();\n      return new AST.ThrowStatement({ expression: expression });\n    }\n  }, {\n    key: 'parseTryStatement',\n    value: function parseTryStatement() {\n      this.lex();\n      var body = this.parseBlock();\n\n      if (this.match(_tokenizer.TokenType.CATCH)) {\n        var catchClause = this.parseCatchClause();\n        if (this.eat(_tokenizer.TokenType.FINALLY)) {\n          var finalizer = this.parseBlock();\n          return new AST.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });\n        }\n        return new AST.TryCatchStatement({ body: body, catchClause: catchClause });\n      }\n\n      if (this.eat(_tokenizer.TokenType.FINALLY)) {\n        var _finalizer = this.parseBlock();\n        return new AST.TryFinallyStatement({ body: body, catchClause: null, finalizer: _finalizer });\n      }\n      throw this.createError(_errors.ErrorMessages.NO_CATCH_OR_FINALLY);\n    }\n  }, {\n    key: 'parseVariableDeclarationStatement',\n    value: function parseVariableDeclarationStatement() {\n      var declaration = this.parseVariableDeclaration(true);\n      this.consumeSemicolon();\n      return new AST.VariableDeclarationStatement({ declaration: declaration });\n    }\n  }, {\n    key: 'parseWhileStatement',\n    value: function parseWhileStatement() {\n      this.lex();\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var test = this.parseExpression();\n      var body = this.getIteratorStatementEpilogue();\n      return new AST.WhileStatement({ test: test, body: body });\n    }\n  }, {\n    key: 'parseWithStatement',\n    value: function parseWithStatement() {\n      this.lex();\n      this.expect(_tokenizer.TokenType.LPAREN);\n      var object = this.parseExpression();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      var body = this.parseStatement();\n      return new AST.WithStatement({ object: object, body: body });\n    }\n  }, {\n    key: 'parseCatchClause',\n    value: function parseCatchClause() {\n      var startState = this.startNode();\n\n      this.lex();\n      this.expect(_tokenizer.TokenType.LPAREN);\n      if (this.match(_tokenizer.TokenType.RPAREN) || this.match(_tokenizer.TokenType.LPAREN)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n      var binding = this.parseBindingTarget();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      var body = this.parseBlock();\n\n      return this.finishNode(new AST.CatchClause({ binding: binding, body: body }), startState);\n    }\n  }, {\n    key: 'parseBlock',\n    value: function parseBlock() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.LBRACE);\n      var body = [];\n      while (!this.match(_tokenizer.TokenType.RBRACE)) {\n        body.push(this.parseStatementListItem());\n      }\n      this.expect(_tokenizer.TokenType.RBRACE);\n      return this.finishNode(new AST.Block({ statements: body }), startState);\n    }\n  }, {\n    key: 'parseVariableDeclaration',\n    value: function parseVariableDeclaration(bindingPatternsMustHaveInit) {\n      var startState = this.startNode();\n      var token = this.lex();\n\n      // preceded by this.match(TokenSubType.VAR) || this.match(TokenSubType.LET);\n      var kind = token.type === _tokenizer.TokenType.VAR ? 'var' : token.type === _tokenizer.TokenType.CONST ? 'const' : 'let';\n      var declarators = this.parseVariableDeclaratorList(bindingPatternsMustHaveInit);\n      return this.finishNode(new AST.VariableDeclaration({ kind: kind, declarators: declarators }), startState);\n    }\n  }, {\n    key: 'parseVariableDeclaratorList',\n    value: function parseVariableDeclaratorList(bindingPatternsMustHaveInit) {\n      var result = [];\n      do {\n        result.push(this.parseVariableDeclarator(bindingPatternsMustHaveInit));\n      } while (this.eat(_tokenizer.TokenType.COMMA));\n      return result;\n    }\n  }, {\n    key: 'parseVariableDeclarator',\n    value: function parseVariableDeclarator(bindingPatternsMustHaveInit) {\n      var startState = this.startNode();\n\n      if (this.match(_tokenizer.TokenType.LPAREN)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n\n      var previousAllowIn = this.allowIn;\n      this.allowIn = true;\n      var binding = this.parseBindingTarget();\n      this.allowIn = previousAllowIn;\n\n      if (bindingPatternsMustHaveInit && binding.type !== 'BindingIdentifier' && !this.match(_tokenizer.TokenType.ASSIGN)) {\n        this.expect(_tokenizer.TokenType.ASSIGN);\n      }\n\n      var init = null;\n      if (this.eat(_tokenizer.TokenType.ASSIGN)) {\n        init = this.parseAssignmentExpression();\n      }\n\n      return this.finishNode(new AST.VariableDeclarator({ binding: binding, init: init }), startState);\n    }\n  }, {\n    key: 'isolateCoverGrammar',\n    value: function isolateCoverGrammar(parser) {\n      var oldIsBindingElement = this.isBindingElement,\n          oldIsAssignmentTarget = this.isAssignmentTarget,\n          oldFirstExprError = this.firstExprError,\n          result = void 0;\n      this.isBindingElement = this.isAssignmentTarget = true;\n      this.firstExprError = null;\n      result = parser.call(this);\n      if (this.firstExprError !== null) {\n        throw this.firstExprError;\n      }\n      this.isBindingElement = oldIsBindingElement;\n      this.isAssignmentTarget = oldIsAssignmentTarget;\n      this.firstExprError = oldFirstExprError;\n      return result;\n    }\n  }, {\n    key: 'inheritCoverGrammar',\n    value: function inheritCoverGrammar(parser) {\n      var oldIsBindingElement = this.isBindingElement,\n          oldIsAssignmentTarget = this.isAssignmentTarget,\n          oldFirstExprError = this.firstExprError,\n          result = void 0;\n      this.isBindingElement = this.isAssignmentTarget = true;\n      this.firstExprError = null;\n      result = parser.call(this);\n      this.isBindingElement = this.isBindingElement && oldIsBindingElement;\n      this.isAssignmentTarget = this.isAssignmentTarget && oldIsAssignmentTarget;\n      this.firstExprError = oldFirstExprError || this.firstExprError;\n      return result;\n    }\n  }, {\n    key: 'parseExpression',\n    value: function parseExpression() {\n      var startState = this.startNode();\n\n      var left = this.parseAssignmentExpression();\n      if (this.match(_tokenizer.TokenType.COMMA)) {\n        while (!this.eof()) {\n          if (!this.match(_tokenizer.TokenType.COMMA)) break;\n          this.lex();\n          var right = this.parseAssignmentExpression();\n          left = this.finishNode(new AST.BinaryExpression({ left: left, operator: ',', right: right }), startState);\n        }\n      }\n      return left;\n    }\n  }, {\n    key: 'finishArrowParams',\n    value: function finishArrowParams(head) {\n      var _head$params = head.params,\n          params = _head$params === undefined ? null : _head$params,\n          _head$rest = head.rest,\n          rest = _head$rest === undefined ? null : _head$rest;\n\n      if (head.type !== ARROW_EXPRESSION_PARAMS) {\n        if (head.type === 'IdentifierExpression') {\n          params = [this.targetToBinding(this.transformDestructuring(head))];\n        } else {\n          throw this.createUnexpected(this.lookahead);\n        }\n      }\n      return this.copyNode(head, new AST.FormalParameters({ items: params, rest: rest }));\n    }\n  }, {\n    key: 'parseArrowExpressionTail',\n    value: function parseArrowExpressionTail(params, isAsync, startState) {\n      this.expect(_tokenizer.TokenType.ARROW);\n      var previousYield = this.allowYieldExpression;\n      var previousAwait = this.allowAwaitExpression;\n      var previousAwaitLocation = this.firstAwaitLocation;\n      this.allowYieldExpression = false;\n      this.allowAwaitExpression = isAsync;\n      this.firstAwaitLocation = null;\n      var body = void 0;\n      if (this.match(_tokenizer.TokenType.LBRACE)) {\n        var previousAllowIn = this.allowIn;\n        this.allowIn = true;\n        body = this.parseFunctionBody();\n        this.allowIn = previousAllowIn;\n      } else {\n        body = this.parseAssignmentExpression();\n      }\n      this.allowYieldExpression = previousYield;\n      this.allowAwaitExpression = previousAwait;\n      this.firstAwaitLocation = previousAwaitLocation;\n      return this.finishNode(new AST.ArrowExpression({ isAsync: isAsync, params: params, body: body }), startState);\n    }\n  }, {\n    key: 'parseAssignmentExpression',\n    value: function parseAssignmentExpression() {\n      return this.isolateCoverGrammar(this.parseAssignmentExpressionOrTarget);\n    }\n  }, {\n    key: 'parseAssignmentExpressionOrTarget',\n    value: function parseAssignmentExpressionOrTarget() {\n      var startState = this.startNode();\n      if (this.allowYieldExpression && this.match(_tokenizer.TokenType.YIELD)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n        return this.parseYieldExpression();\n      }\n      var expr = this.parseConditionalExpression();\n      if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n        this.firstExprError = null;\n        var isAsync = expr.type === ARROW_EXPRESSION_PARAMS && expr.isAsync;\n        return this.parseArrowExpressionTail(this.finishArrowParams(expr), isAsync, startState);\n      }\n      var isAssignmentOperator = false;\n      var operator = this.lookahead;\n      switch (operator.type) {\n        case _tokenizer.TokenType.ASSIGN_BIT_OR:\n        case _tokenizer.TokenType.ASSIGN_BIT_XOR:\n        case _tokenizer.TokenType.ASSIGN_BIT_AND:\n        case _tokenizer.TokenType.ASSIGN_SHL:\n        case _tokenizer.TokenType.ASSIGN_SHR:\n        case _tokenizer.TokenType.ASSIGN_SHR_UNSIGNED:\n        case _tokenizer.TokenType.ASSIGN_ADD:\n        case _tokenizer.TokenType.ASSIGN_SUB:\n        case _tokenizer.TokenType.ASSIGN_MUL:\n        case _tokenizer.TokenType.ASSIGN_DIV:\n        case _tokenizer.TokenType.ASSIGN_MOD:\n        case _tokenizer.TokenType.ASSIGN_EXP:\n          isAssignmentOperator = true;\n          break;\n      }\n      if (isAssignmentOperator) {\n        if (!this.isAssignmentTarget || !isValidSimpleAssignmentTarget(expr)) {\n          throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_ASSIGNMENT);\n        }\n        expr = this.transformDestructuring(expr);\n      } else if (operator.type === _tokenizer.TokenType.ASSIGN) {\n        if (!this.isAssignmentTarget) {\n          throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_ASSIGNMENT);\n        }\n        expr = this.transformDestructuring(expr);\n      } else {\n        return expr;\n      }\n      this.lex();\n      var rhs = this.parseAssignmentExpression();\n\n      this.firstExprError = null;\n      var node = void 0;\n      if (operator.type === _tokenizer.TokenType.ASSIGN) {\n        node = new AST.AssignmentExpression({ binding: expr, expression: rhs });\n      } else {\n        node = new AST.CompoundAssignmentExpression({ binding: expr, operator: operator.type.name, expression: rhs });\n        this.isBindingElement = this.isAssignmentTarget = false;\n      }\n      return this.finishNode(node, startState);\n    }\n  }, {\n    key: 'targetToBinding',\n    value: function targetToBinding(node) {\n      var _this3 = this;\n\n      if (node === null) {\n        return null;\n      }\n\n      switch (node.type) {\n        case 'AssignmentTargetIdentifier':\n          return this.copyNode(node, new AST.BindingIdentifier({ name: node.name }));\n        case 'ArrayAssignmentTarget':\n          return this.copyNode(node, new AST.ArrayBinding({ elements: node.elements.map(function (e) {\n              return _this3.targetToBinding(e);\n            }), rest: this.targetToBinding(node.rest) }));\n        case 'ObjectAssignmentTarget':\n          return this.copyNode(node, new AST.ObjectBinding({ properties: node.properties.map(function (p) {\n              return _this3.targetToBinding(p);\n            }), rest: this.targetToBinding(node.rest) }));\n        case 'AssignmentTargetPropertyIdentifier':\n          return this.copyNode(node, new AST.BindingPropertyIdentifier({ binding: this.targetToBinding(node.binding), init: node.init }));\n        case 'AssignmentTargetPropertyProperty':\n          return this.copyNode(node, new AST.BindingPropertyProperty({ name: node.name, binding: this.targetToBinding(node.binding) }));\n        case 'AssignmentTargetWithDefault':\n          return this.copyNode(node, new AST.BindingWithDefault({ binding: this.targetToBinding(node.binding), init: node.init }));\n      }\n\n      // istanbul ignore next\n      throw new Error('Not reached');\n    }\n  }, {\n    key: 'transformDestructuring',\n    value: function transformDestructuring(node) {\n      var _this4 = this;\n\n      switch (node.type) {\n\n        case 'DataProperty':\n          return this.copyNode(node, new AST.AssignmentTargetPropertyProperty({\n            name: node.name,\n            binding: this.transformDestructuringWithDefault(node.expression)\n          }));\n        case 'ShorthandProperty':\n          return this.copyNode(node, new AST.AssignmentTargetPropertyIdentifier({\n            binding: this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.name.name })),\n            init: null\n          }));\n\n        case 'ObjectExpression':\n          {\n            var last = node.properties.length > 0 ? node.properties[node.properties.length - 1] : void 0;\n            if (last != null && last.type === 'SpreadProperty') {\n              return this.copyNode(node, new AST.ObjectAssignmentTarget({\n                properties: node.properties.slice(0, -1).map(function (e) {\n                  return e && _this4.transformDestructuringWithDefault(e);\n                }),\n                rest: this.transformDestructuring(last.expression)\n              }));\n            }\n\n            return this.copyNode(node, new AST.ObjectAssignmentTarget({\n              properties: node.properties.map(function (e) {\n                return e && _this4.transformDestructuringWithDefault(e);\n              }),\n              rest: null\n            }));\n          }\n        case 'ArrayExpression':\n          {\n            var _last = node.elements[node.elements.length - 1];\n            if (_last != null && _last.type === 'SpreadElement') {\n              return this.copyNode(node, new AST.ArrayAssignmentTarget({\n                elements: node.elements.slice(0, -1).map(function (e) {\n                  return e && _this4.transformDestructuringWithDefault(e);\n                }),\n                rest: this.copyNode(_last.expression, this.transformDestructuring(_last.expression))\n              }));\n            }\n            return this.copyNode(node, new AST.ArrayAssignmentTarget({\n              elements: node.elements.map(function (e) {\n                return e && _this4.transformDestructuringWithDefault(e);\n              }),\n              rest: null\n            }));\n          }\n        case 'IdentifierExpression':\n          return this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.name }));\n\n        case 'StaticPropertyName':\n          return this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.value }));\n\n        case 'ComputedMemberExpression':\n          return this.copyNode(node, new AST.ComputedMemberAssignmentTarget({ object: node.object, expression: node.expression }));\n        case 'StaticMemberExpression':\n          return this.copyNode(node, new AST.StaticMemberAssignmentTarget({ object: node.object, property: node.property }));\n\n        case 'ArrayAssignmentTarget':\n        case 'ObjectAssignmentTarget':\n        case 'ComputedMemberAssignmentTarget':\n        case 'StaticMemberAssignmentTarget':\n        case 'AssignmentTargetIdentifier':\n        case 'AssignmentTargetPropertyIdentifier':\n        case 'AssignmentTargetPropertyProperty':\n        case 'AssignmentTargetWithDefault':\n          return node;\n      }\n      // istanbul ignore next\n      throw new Error('Not reached');\n    }\n  }, {\n    key: 'transformDestructuringWithDefault',\n    value: function transformDestructuringWithDefault(node) {\n      switch (node.type) {\n        case 'AssignmentExpression':\n          return this.copyNode(node, new AST.AssignmentTargetWithDefault({\n            binding: this.transformDestructuring(node.binding),\n            init: node.expression\n          }));\n      }\n      return this.transformDestructuring(node);\n    }\n  }, {\n    key: 'lookaheadAssignmentExpression',\n    value: function lookaheadAssignmentExpression() {\n      if (this.matchIdentifier()) {\n        return true;\n      }\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.ADD:\n        case _tokenizer.TokenType.ASSIGN_DIV:\n        case _tokenizer.TokenType.BIT_NOT:\n        case _tokenizer.TokenType.CLASS:\n        case _tokenizer.TokenType.DEC:\n        case _tokenizer.TokenType.DELETE:\n        case _tokenizer.TokenType.DIV:\n        case _tokenizer.TokenType.FALSE:\n        case _tokenizer.TokenType.FUNCTION:\n        case _tokenizer.TokenType.INC:\n        case _tokenizer.TokenType.LBRACE:\n        case _tokenizer.TokenType.LBRACK:\n        case _tokenizer.TokenType.LPAREN:\n        case _tokenizer.TokenType.NEW:\n        case _tokenizer.TokenType.NOT:\n        case _tokenizer.TokenType.NULL:\n        case _tokenizer.TokenType.NUMBER:\n        case _tokenizer.TokenType.STRING:\n        case _tokenizer.TokenType.SUB:\n        case _tokenizer.TokenType.SUPER:\n        case _tokenizer.TokenType.THIS:\n        case _tokenizer.TokenType.TRUE:\n        case _tokenizer.TokenType.TYPEOF:\n        case _tokenizer.TokenType.VOID:\n        case _tokenizer.TokenType.TEMPLATE:\n          return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'parseYieldExpression',\n    value: function parseYieldExpression() {\n      var startState = this.startNode();\n\n      this.lex();\n      if (this.hasLineTerminatorBeforeNext) {\n        return this.finishNode(new AST.YieldExpression({ expression: null }), startState);\n      }\n      var isGenerator = !!this.eat(_tokenizer.TokenType.MUL);\n      var expr = null;\n      if (isGenerator || this.lookaheadAssignmentExpression()) {\n        expr = this.parseAssignmentExpression();\n      }\n      var ctor = isGenerator ? AST.YieldGeneratorExpression : AST.YieldExpression;\n      return this.finishNode(new ctor({ expression: expr }), startState);\n    }\n  }, {\n    key: 'parseConditionalExpression',\n    value: function parseConditionalExpression() {\n      var startState = this.startNode();\n      var test = this.parseBinaryExpression();\n      if (this.firstExprError) return test;\n      if (this.eat(_tokenizer.TokenType.CONDITIONAL)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n        var previousAllowIn = this.allowIn;\n        this.allowIn = true;\n        var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n        this.allowIn = previousAllowIn;\n        this.expect(_tokenizer.TokenType.COLON);\n        var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n        return this.finishNode(new AST.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate }), startState);\n      }\n      return test;\n    }\n  }, {\n    key: 'isBinaryOperator',\n    value: function isBinaryOperator(type) {\n      switch (type) {\n        case _tokenizer.TokenType.OR:\n        case _tokenizer.TokenType.AND:\n        case _tokenizer.TokenType.BIT_OR:\n        case _tokenizer.TokenType.BIT_XOR:\n        case _tokenizer.TokenType.BIT_AND:\n        case _tokenizer.TokenType.EQ:\n        case _tokenizer.TokenType.NE:\n        case _tokenizer.TokenType.EQ_STRICT:\n        case _tokenizer.TokenType.NE_STRICT:\n        case _tokenizer.TokenType.LT:\n        case _tokenizer.TokenType.GT:\n        case _tokenizer.TokenType.LTE:\n        case _tokenizer.TokenType.GTE:\n        case _tokenizer.TokenType.INSTANCEOF:\n        case _tokenizer.TokenType.SHL:\n        case _tokenizer.TokenType.SHR:\n        case _tokenizer.TokenType.SHR_UNSIGNED:\n        case _tokenizer.TokenType.ADD:\n        case _tokenizer.TokenType.SUB:\n        case _tokenizer.TokenType.MUL:\n        case _tokenizer.TokenType.DIV:\n        case _tokenizer.TokenType.MOD:\n          return true;\n        case _tokenizer.TokenType.IN:\n          return this.allowIn;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: 'parseBinaryExpression',\n    value: function parseBinaryExpression() {\n      var _this5 = this;\n\n      var startState = this.startNode();\n      var left = this.parseExponentiationExpression();\n      if (this.firstExprError) {\n        return left;\n      }\n\n      var operator = this.lookahead.type;\n      if (!this.isBinaryOperator(operator)) return left;\n\n      this.isBindingElement = this.isAssignmentTarget = false;\n\n      this.lex();\n      var stack = [];\n      stack.push({ startState: startState, left: left, operator: operator, precedence: BinaryPrecedence[operator.name] });\n      startState = this.startNode();\n      var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n      operator = this.lookahead.type;\n      while (this.isBinaryOperator(operator)) {\n        var precedence = BinaryPrecedence[operator.name];\n        // Reduce: make a binary expression from the three topmost entries.\n        while (stack.length && precedence <= stack[stack.length - 1].precedence) {\n          var stackItem = stack[stack.length - 1];\n          var stackOperator = stackItem.operator;\n          left = stackItem.left;\n          stack.pop();\n          startState = stackItem.startState;\n          right = this.finishNode(new AST.BinaryExpression({ left: left, operator: stackOperator.name, right: right }), startState);\n        }\n\n        this.lex();\n        stack.push({ startState: startState, left: right, operator: operator, precedence: precedence });\n\n        startState = this.startNode();\n        right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n        operator = this.lookahead.type;\n      }\n\n      // Final reduce to clean-up the stack.\n      return stack.reduceRight(function (expr, stackItem) {\n        return _this5.finishNode(new AST.BinaryExpression({\n          left: stackItem.left,\n          operator: stackItem.operator.name,\n          right: expr\n        }), stackItem.startState);\n      }, right);\n    }\n  }, {\n    key: 'parseExponentiationExpression',\n    value: function parseExponentiationExpression() {\n      var startState = this.startNode();\n\n      var leftIsParenthesized = this.lookahead.type === _tokenizer.TokenType.LPAREN;\n      var left = this.parseUnaryExpression();\n      if (this.lookahead.type !== _tokenizer.TokenType.EXP) {\n        return left;\n      }\n      if (left.type === 'UnaryExpression' && !leftIsParenthesized) {\n        throw this.createError(_errors.ErrorMessages.INVALID_EXPONENTIATION_LHS);\n      }\n      this.lex();\n\n      this.isBindingElement = this.isAssignmentTarget = false;\n\n      var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n      return this.finishNode(new AST.BinaryExpression({ left: left, operator: '**', right: right }), startState);\n    }\n  }, {\n    key: 'parseUnaryExpression',\n    value: function parseUnaryExpression() {\n      if (this.lookahead.type.klass !== _tokenizer.TokenClass.Punctuator && this.lookahead.type.klass !== _tokenizer.TokenClass.Keyword) {\n        return this.parseUpdateExpression();\n      }\n\n      var startState = this.startNode();\n      if (this.allowAwaitExpression && this.eat(_tokenizer.TokenType.AWAIT)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n        var expression = this.isolateCoverGrammar(this.parseUnaryExpression);\n        return this.finishNode(new AST.AwaitExpression({ expression: expression }), startState);\n      }\n\n      var operator = this.lookahead;\n      if (!isPrefixOperator(operator)) {\n        return this.parseUpdateExpression();\n      }\n\n      this.lex();\n      this.isBindingElement = this.isAssignmentTarget = false;\n\n      var node = void 0;\n      if (isUpdateOperator(operator)) {\n        var operandStartLocation = this.getLocation();\n        var operand = this.isolateCoverGrammar(this.parseUnaryExpression);\n        if (!isValidSimpleAssignmentTarget(operand)) {\n          throw this.createErrorWithLocation(operandStartLocation, _errors.ErrorMessages.INVALID_UPDATE_OPERAND);\n        }\n        operand = this.transformDestructuring(operand);\n        node = new AST.UpdateExpression({ isPrefix: true, operator: operator.value, operand: operand });\n      } else {\n        var _operand = this.isolateCoverGrammar(this.parseUnaryExpression);\n        node = new AST.UnaryExpression({ operator: operator.value, operand: _operand });\n      }\n\n      return this.finishNode(node, startState);\n    }\n  }, {\n    key: 'parseUpdateExpression',\n    value: function parseUpdateExpression() {\n      var startLocation = this.getLocation();\n      var startState = this.startNode();\n\n      var operand = this.parseLeftHandSideExpression({ allowCall: true });\n      if (this.firstExprError || this.hasLineTerminatorBeforeNext) return operand;\n\n      var operator = this.lookahead;\n      if (!isUpdateOperator(operator)) return operand;\n      this.lex();\n      this.isBindingElement = this.isAssignmentTarget = false;\n      if (!isValidSimpleAssignmentTarget(operand)) {\n        throw this.createErrorWithLocation(startLocation, _errors.ErrorMessages.INVALID_UPDATE_OPERAND);\n      }\n      operand = this.transformDestructuring(operand);\n\n      return this.finishNode(new AST.UpdateExpression({ isPrefix: false, operator: operator.value, operand: operand }), startState);\n    }\n  }, {\n    key: 'parseLeftHandSideExpression',\n    value: function parseLeftHandSideExpression(_ref2) {\n      var _this6 = this;\n\n      var allowCall = _ref2.allowCall;\n\n      var startState = this.startNode();\n      var previousAllowIn = this.allowIn;\n      this.allowIn = true;\n\n      var expr = void 0,\n          token = this.lookahead;\n\n      if (this.eat(_tokenizer.TokenType.SUPER)) {\n        this.isBindingElement = false;\n        this.isAssignmentTarget = false;\n        expr = this.finishNode(new AST.Super(), startState);\n        if (this.match(_tokenizer.TokenType.LPAREN)) {\n          if (allowCall) {\n            expr = this.finishNode(new AST.CallExpression({\n              callee: expr,\n              arguments: this.parseArgumentList().args\n            }), startState);\n          } else {\n            throw this.createUnexpected(token);\n          }\n        } else if (this.match(_tokenizer.TokenType.LBRACK)) {\n          expr = this.finishNode(new AST.ComputedMemberExpression({\n            object: expr,\n            expression: this.parseComputedMember()\n          }), startState);\n          this.isAssignmentTarget = true;\n        } else if (this.match(_tokenizer.TokenType.PERIOD)) {\n          expr = this.finishNode(new AST.StaticMemberExpression({\n            object: expr,\n            property: this.parseStaticMember()\n          }), startState);\n          this.isAssignmentTarget = true;\n        } else {\n          throw this.createUnexpected(token);\n        }\n      } else if (this.match(_tokenizer.TokenType.NEW)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n        expr = this.parseNewExpression();\n      } else if (this.match(_tokenizer.TokenType.ASYNC)) {\n        expr = this.parsePrimaryExpression();\n        // there's only three things this could be: an identifier, an async arrow, or an async function expression.\n        if (expr.type === 'IdentifierExpression' && allowCall && !this.hasLineTerminatorBeforeNext) {\n          if (this.matchIdentifier()) {\n            // `async [no lineterminator here] identifier` must be an async arrow\n            var afterAsyncStartState = this.startNode();\n            var previousAwait = this.allowAwaitExpression;\n            this.allowAwaitExpression = true;\n            var param = this.parseBindingIdentifier();\n            this.allowAwaitExpression = previousAwait;\n            this.ensureArrow();\n            return this.finishNode({\n              type: ARROW_EXPRESSION_PARAMS,\n              params: [param],\n              rest: null,\n              isAsync: true\n            }, afterAsyncStartState);\n          }\n          if (this.match(_tokenizer.TokenType.LPAREN)) {\n            // the maximally obnoxious case: `async (`\n            var _afterAsyncStartState = this.startNode();\n            var previousAwaitLocation = this.firstAwaitLocation;\n            this.firstAwaitLocation = null;\n\n            var _parseArgumentList = this.parseArgumentList(),\n                args = _parseArgumentList.args,\n                locationFollowingFirstSpread = _parseArgumentList.locationFollowingFirstSpread;\n\n            if (this.isBindingElement && !this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {\n              if (locationFollowingFirstSpread !== null) {\n                throw this.createErrorWithLocation(locationFollowingFirstSpread, _errors.ErrorMessages.UNEXPECTED_TOKEN(','));\n              }\n              if (this.firstAwaitLocation !== null) {\n                throw this.createErrorWithLocation(this.firstAwaitLocation, _errors.ErrorMessages.NO_AWAIT_IN_ASYNC_PARAMS);\n              }\n              var rest = null;\n              if (args.length > 0 && args[args.length - 1].type === 'SpreadElement') {\n                rest = this.targetToBinding(this.transformDestructuringWithDefault(args[args.length - 1].expression));\n                if (rest.init != null) {\n                  throw this.createError(_errors.ErrorMessages.UNEXPECTED_REST_PARAMETERS_INITIALIZATION);\n                }\n                args = args.slice(0, -1);\n              }\n              var params = args.map(function (arg) {\n                return _this6.targetToBinding(_this6.transformDestructuringWithDefault(arg));\n              });\n              return this.finishNode({\n                type: ARROW_EXPRESSION_PARAMS,\n                params: params,\n                rest: rest,\n                isAsync: true\n              }, _afterAsyncStartState);\n            }\n            this.firstAwaitLocation = previousAwaitLocation || this.firstAwaitLocation;\n            // otherwise we've just taken the first iteration of the loop below\n            this.isBindingElement = this.isAssignmentTarget = false;\n            expr = this.finishNode(new AST.CallExpression({\n              callee: expr,\n              arguments: args\n            }), startState);\n          }\n        }\n      } else {\n        expr = this.parsePrimaryExpression();\n        if (this.firstExprError) {\n          return expr;\n        }\n      }\n\n      while (true) {\n        if (allowCall && this.match(_tokenizer.TokenType.LPAREN)) {\n          this.isBindingElement = this.isAssignmentTarget = false;\n          expr = this.finishNode(new AST.CallExpression({\n            callee: expr,\n            arguments: this.parseArgumentList().args\n          }), startState);\n        } else if (this.match(_tokenizer.TokenType.LBRACK)) {\n          this.isBindingElement = false;\n          this.isAssignmentTarget = true;\n          expr = this.finishNode(new AST.ComputedMemberExpression({\n            object: expr,\n            expression: this.parseComputedMember()\n          }), startState);\n        } else if (this.match(_tokenizer.TokenType.PERIOD)) {\n          this.isBindingElement = false;\n          this.isAssignmentTarget = true;\n          expr = this.finishNode(new AST.StaticMemberExpression({\n            object: expr,\n            property: this.parseStaticMember()\n          }), startState);\n        } else if (this.match(_tokenizer.TokenType.TEMPLATE)) {\n          this.isBindingElement = this.isAssignmentTarget = false;\n          expr = this.finishNode(new AST.TemplateExpression({\n            tag: expr,\n            elements: this.parseTemplateElements()\n          }), startState);\n        } else {\n          break;\n        }\n      }\n\n      this.allowIn = previousAllowIn;\n\n      return expr;\n    }\n  }, {\n    key: 'parseTemplateElements',\n    value: function parseTemplateElements() {\n      var startState = this.startNode();\n      var token = this.lookahead;\n      if (token.tail) {\n        this.lex();\n        return [this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -1) }), startState)];\n      }\n      var result = [this.finishNode(new AST.TemplateElement({ rawValue: this.lex().slice.text.slice(1, -2) }), startState)];\n      while (true) {\n        result.push(this.parseExpression());\n        if (!this.match(_tokenizer.TokenType.RBRACE)) {\n          throw this.createILLEGAL();\n        }\n        this.index = this.startIndex;\n        this.line = this.startLine;\n        this.lineStart = this.startLineStart;\n        this.lookahead = this.scanTemplateElement();\n        startState = this.startNode();\n        token = this.lex();\n        if (token.tail) {\n          result.push(this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -1) }), startState));\n          return result;\n        }\n        result.push(this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -2) }), startState));\n      }\n    }\n  }, {\n    key: 'parseStaticMember',\n    value: function parseStaticMember() {\n      this.lex();\n      if (this.lookahead.type.klass.isIdentifierName) {\n        return this.lex().value;\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'parseComputedMember',\n    value: function parseComputedMember() {\n      this.lex();\n      var expr = this.parseExpression();\n      this.expect(_tokenizer.TokenType.RBRACK);\n      return expr;\n    }\n  }, {\n    key: 'parseNewExpression',\n    value: function parseNewExpression() {\n      var _this7 = this;\n\n      var startState = this.startNode();\n      this.lex();\n      if (this.eat(_tokenizer.TokenType.PERIOD)) {\n        this.expectContextualKeyword('target');\n        return this.finishNode(new AST.NewTargetExpression(), startState);\n      }\n      var callee = this.isolateCoverGrammar(function () {\n        return _this7.parseLeftHandSideExpression({ allowCall: false });\n      });\n      return this.finishNode(new AST.NewExpression({\n        callee: callee,\n        arguments: this.match(_tokenizer.TokenType.LPAREN) ? this.parseArgumentList().args : []\n      }), startState);\n    }\n  }, {\n    key: 'parseRegexFlags',\n    value: function parseRegexFlags(flags) {\n      var global = false,\n          ignoreCase = false,\n          multiLine = false,\n          unicode = false,\n          sticky = false,\n          dotAll = false;\n      for (var i = 0; i < flags.length; ++i) {\n        var f = flags[i];\n        switch (f) {\n          case 'g':\n            if (global) {\n              throw this.createError('Duplicate regular expression flag \\'g\\'');\n            }\n            global = true;\n            break;\n          case 'i':\n            if (ignoreCase) {\n              throw this.createError('Duplicate regular expression flag \\'i\\'');\n            }\n            ignoreCase = true;\n            break;\n          case 'm':\n            if (multiLine) {\n              throw this.createError('Duplicate regular expression flag \\'m\\'');\n            }\n            multiLine = true;\n            break;\n          case 'u':\n            if (unicode) {\n              throw this.createError('Duplicate regular expression flag \\'u\\'');\n            }\n            unicode = true;\n            break;\n          case 'y':\n            if (sticky) {\n              throw this.createError('Duplicate regular expression flag \\'y\\'');\n            }\n            sticky = true;\n            break;\n          case 's':\n            if (dotAll) {\n              throw this.createError('Duplicate regular expression flag \\'s\\'');\n            }\n            dotAll = true;\n            break;\n          default:\n            throw this.createError('Invalid regular expression flag \\'' + f + '\\'');\n        }\n      }\n      return { global: global, ignoreCase: ignoreCase, multiLine: multiLine, unicode: unicode, sticky: sticky, dotAll: dotAll };\n    }\n  }, {\n    key: 'parsePrimaryExpression',\n    value: function parsePrimaryExpression() {\n      if (this.match(_tokenizer.TokenType.LPAREN)) {\n        return this.parseGroupExpression();\n      }\n\n      var startState = this.startNode();\n\n      if (this.eat(_tokenizer.TokenType.ASYNC)) {\n        if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(this.parseFunction({ isExpr: true, inDefault: false, allowGenerator: true, isAsync: true }), startState);\n        }\n        return this.finishNode(new AST.IdentifierExpression({ name: 'async' }), startState);\n      }\n\n      if (this.matchIdentifier()) {\n        return this.finishNode(new AST.IdentifierExpression({ name: this.parseIdentifier() }), startState);\n      }\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.STRING:\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.parseStringLiteral();\n        case _tokenizer.TokenType.NUMBER:\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.parseNumericLiteral();\n        case _tokenizer.TokenType.THIS:\n          this.lex();\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(new AST.ThisExpression(), startState);\n        case _tokenizer.TokenType.FUNCTION:\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(this.parseFunction({ isExpr: true, inDefault: false, allowGenerator: true, isAsync: false }), startState);\n        case _tokenizer.TokenType.TRUE:\n          this.lex();\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(new AST.LiteralBooleanExpression({ value: true }), startState);\n        case _tokenizer.TokenType.FALSE:\n          this.lex();\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(new AST.LiteralBooleanExpression({ value: false }), startState);\n        case _tokenizer.TokenType.NULL:\n          this.lex();\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(new AST.LiteralNullExpression(), startState);\n        case _tokenizer.TokenType.LBRACK:\n          return this.parseArrayExpression();\n        case _tokenizer.TokenType.LBRACE:\n          return this.parseObjectExpression();\n        case _tokenizer.TokenType.TEMPLATE:\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.finishNode(new AST.TemplateExpression({ tag: null, elements: this.parseTemplateElements() }), startState);\n        case _tokenizer.TokenType.DIV:\n        case _tokenizer.TokenType.ASSIGN_DIV:\n          {\n            this.isBindingElement = this.isAssignmentTarget = false;\n            this.lookahead = this.scanRegExp(this.match(_tokenizer.TokenType.DIV) ? '/' : '/=');\n            var token = this.lex();\n            var lastSlash = token.value.lastIndexOf('/');\n            var pattern = token.value.slice(1, lastSlash);\n            var flags = token.value.slice(lastSlash + 1);\n            var ctorArgs = this.parseRegexFlags(flags);\n            if (!(0, _shiftRegexpAcceptor2.default)(pattern, ctorArgs)) {\n              throw this.createError(_errors.ErrorMessages.INVALID_REGEX);\n            }\n            ctorArgs.pattern = pattern;\n            return this.finishNode(new AST.LiteralRegExpExpression(ctorArgs), startState);\n          }\n        case _tokenizer.TokenType.CLASS:\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return this.parseClass({ isExpr: true, inDefault: false });\n        default:\n          throw this.createUnexpected(this.lookahead);\n      }\n    }\n  }, {\n    key: 'parseNumericLiteral',\n    value: function parseNumericLiteral() {\n      var startLocation = this.getLocation();\n      var startState = this.startNode();\n      var token = this.lex();\n      if (token.octal && this.strict) {\n        if (token.noctal) {\n          throw this.createErrorWithLocation(startLocation, 'Unexpected noctal integer literal');\n        } else {\n          throw this.createErrorWithLocation(startLocation, 'Unexpected legacy octal integer literal');\n        }\n      }\n      var node = token.value === 1 / 0 ? new AST.LiteralInfinityExpression() : new AST.LiteralNumericExpression({ value: token.value });\n      return this.finishNode(node, startState);\n    }\n  }, {\n    key: 'parseStringLiteral',\n    value: function parseStringLiteral() {\n      var startLocation = this.getLocation();\n      var startState = this.startNode();\n      var token = this.lex();\n      if (token.octal != null && this.strict) {\n        throw this.createErrorWithLocation(startLocation, 'Unexpected legacy octal escape sequence: \\\\' + token.octal);\n      }\n      return this.finishNode(new AST.LiteralStringExpression({ value: token.str }), startState);\n    }\n  }, {\n    key: 'parseIdentifierName',\n    value: function parseIdentifierName() {\n      if (this.lookahead.type.klass.isIdentifierName) {\n        return this.lex().value;\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'parseBindingIdentifier',\n    value: function parseBindingIdentifier() {\n      var startState = this.startNode();\n      return this.finishNode(new AST.BindingIdentifier({ name: this.parseIdentifier() }), startState);\n    }\n  }, {\n    key: 'parseIdentifier',\n    value: function parseIdentifier() {\n      if (this.lookahead.value === 'yield' && this.allowYieldExpression) {\n        throw this.createError(_errors.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);\n      }\n      if (this.lookahead.value === 'await' && this.allowAwaitExpression) {\n        throw this.createError(_errors.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);\n      }\n      if (this.matchIdentifier()) {\n        return this.lex().value;\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'parseArgumentList',\n    value: function parseArgumentList() {\n      this.lex();\n      var args = this.parseArguments();\n      this.expect(_tokenizer.TokenType.RPAREN);\n      return args;\n    }\n  }, {\n    key: 'parseArguments',\n    value: function parseArguments() {\n      var args = [];\n      var locationFollowingFirstSpread = null;\n      while (!this.match(_tokenizer.TokenType.RPAREN)) {\n        var arg = void 0;\n        var startState = this.startNode();\n        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n          arg = this.finishNode(new AST.SpreadElement({ expression: this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget) }), startState);\n          if (locationFollowingFirstSpread === null) {\n            args.push(arg);\n            if (this.match(_tokenizer.TokenType.RPAREN)) {\n              break;\n            }\n            locationFollowingFirstSpread = this.getLocation();\n            this.expect(_tokenizer.TokenType.COMMA);\n            continue;\n          }\n        } else {\n          arg = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n        }\n        args.push(arg);\n        if (this.match(_tokenizer.TokenType.RPAREN)) {\n          break;\n        }\n        this.expect(_tokenizer.TokenType.COMMA);\n      }\n      return { args: args, locationFollowingFirstSpread: locationFollowingFirstSpread };\n    }\n\n    // 11.2 Left-Hand-Side Expressions;\n\n  }, {\n    key: 'ensureArrow',\n    value: function ensureArrow() {\n      if (this.hasLineTerminatorBeforeNext) {\n        throw this.createError(_errors.ErrorMessages.UNEXPECTED_LINE_TERMINATOR);\n      }\n      if (!this.match(_tokenizer.TokenType.ARROW)) {\n        this.expect(_tokenizer.TokenType.ARROW);\n      }\n    }\n  }, {\n    key: 'parseGroupExpression',\n    value: function parseGroupExpression() {\n      // At this point, we need to parse 3 things:\n      //  1. Group expression\n      //  2. Assignment target of assignment expression\n      //  3. Parameter list of arrow function\n      var rest = null;\n      var preParenStartState = this.startNode();\n      var start = this.expect(_tokenizer.TokenType.LPAREN);\n      var postParenStartState = this.startNode();\n      if (this.match(_tokenizer.TokenType.RPAREN)) {\n        this.lex();\n        var paramsNode = this.finishNode({\n          type: ARROW_EXPRESSION_PARAMS,\n          params: [],\n          rest: null,\n          isAsync: false\n        }, preParenStartState);\n        this.ensureArrow();\n        this.isBindingElement = this.isAssignmentTarget = false;\n        return paramsNode;\n      } else if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n        rest = this.parseBindingTarget();\n        if (this.match(_tokenizer.TokenType.ASSIGN)) {\n          throw this.createError(_errors.ErrorMessages.INVALID_REST_PARAMETERS_INITIALIZATION);\n        }\n        if (this.match(_tokenizer.TokenType.COMMA)) {\n          throw this.createError(_errors.ErrorMessages.INVALID_LAST_REST_PARAMETER);\n        }\n        this.expect(_tokenizer.TokenType.RPAREN);\n        var _paramsNode = this.finishNode({\n          type: ARROW_EXPRESSION_PARAMS,\n          params: [],\n          rest: rest,\n          isAsync: false\n        }, preParenStartState);\n        this.ensureArrow();\n        this.isBindingElement = this.isAssignmentTarget = false;\n        return _paramsNode;\n      }\n      var group = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n\n      var params = this.isBindingElement ? [this.targetToBinding(this.transformDestructuringWithDefault(group))] : null;\n\n      while (this.eat(_tokenizer.TokenType.COMMA)) {\n        if (this.match(_tokenizer.TokenType.RPAREN)) {\n          if (!this.isBindingElement) {\n            throw this.createUnexpected(this.lookahead);\n          }\n          this.firstExprError = this.firstExprError || this.createUnexpected(this.lookahead);\n          group = null;\n          break;\n        }\n        this.isAssignmentTarget = false;\n        if (this.match(_tokenizer.TokenType.ELLIPSIS)) {\n          if (!this.isBindingElement) {\n            throw this.createUnexpected(this.lookahead);\n          }\n          this.lex();\n          rest = this.parseBindingTarget();\n          if (this.match(_tokenizer.TokenType.ASSIGN)) {\n            throw this.createError(_errors.ErrorMessages.INVALID_REST_PARAMETERS_INITIALIZATION);\n          }\n          if (this.match(_tokenizer.TokenType.COMMA)) {\n            throw this.createError(_errors.ErrorMessages.INVALID_LAST_REST_PARAMETER);\n          }\n          break;\n        }\n\n        if (group) {\n          // Can be either binding element or assignment target.\n          var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n          if (this.isBindingElement) {\n            params.push(this.targetToBinding(this.transformDestructuringWithDefault(expr)));\n          } else {\n            params = null;\n          }\n\n          if (this.firstExprError) {\n            group = null;\n          } else {\n            group = this.finishNode(new AST.BinaryExpression({\n              left: group,\n              operator: ',',\n              right: expr\n            }), postParenStartState);\n          }\n        } else {\n          // Can be only binding elements.\n          var binding = this.parseBindingElement();\n          params.push(binding);\n        }\n      }\n      this.expect(_tokenizer.TokenType.RPAREN);\n\n      if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {\n        if (!this.isBindingElement) {\n          throw this.createErrorWithLocation(start, _errors.ErrorMessages.ILLEGAL_ARROW_FUNCTION_PARAMS);\n        }\n\n        this.isBindingElement = false;\n        return this.finishNode({\n          type: ARROW_EXPRESSION_PARAMS,\n          params: params,\n          rest: rest,\n          isAsync: false\n        }, preParenStartState);\n      }\n      // Ensure assignment pattern:\n      if (rest) {\n        this.ensureArrow();\n      }\n      this.isBindingElement = false;\n      if (!isValidSimpleAssignmentTarget(group)) {\n        this.isAssignmentTarget = false;\n      }\n      return group;\n    }\n  }, {\n    key: 'parseArrayExpression',\n    value: function parseArrayExpression() {\n      var _this8 = this;\n\n      var startLocation = this.getLocation();\n      var startState = this.startNode();\n\n      this.lex();\n\n      var exprs = [];\n      var rest = null;\n\n      while (true) {\n        if (this.match(_tokenizer.TokenType.RBRACK)) {\n          break;\n        }\n        if (this.eat(_tokenizer.TokenType.COMMA)) {\n          exprs.push(null);\n        } else {\n          var elementStartState = this.startNode();\n          var expr = void 0;\n          if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n            // Spread/Rest element\n            expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n            if (!this.isAssignmentTarget && this.firstExprError) {\n              throw this.firstExprError;\n            }\n            if (expr.type === 'ArrayAssignmentTarget' || expr.type === 'ObjectAssignmentTarget') {\n              rest = expr;\n              break;\n            }\n            if (expr.type !== 'ArrayExpression' && expr.type !== 'ObjectExpression' && !isValidSimpleAssignmentTarget(expr)) {\n              this.isBindingElement = this.isAssignmentTarget = false;\n            }\n            expr = this.finishNode(new AST.SpreadElement({ expression: expr }), elementStartState);\n            if (!this.match(_tokenizer.TokenType.RBRACK)) {\n              this.isBindingElement = this.isAssignmentTarget = false;\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n            if (!this.isAssignmentTarget && this.firstExprError) {\n              throw this.firstExprError;\n            }\n          }\n          exprs.push(expr);\n\n          if (!this.match(_tokenizer.TokenType.RBRACK)) {\n            this.expect(_tokenizer.TokenType.COMMA);\n          }\n        }\n      }\n\n      if (rest && this.match(_tokenizer.TokenType.COMMA)) {\n        throw this.createErrorWithLocation(startLocation, _errors.ErrorMessages.UNEXPECTED_COMMA_AFTER_REST);\n      }\n\n      this.expect(_tokenizer.TokenType.RBRACK);\n\n      if (rest) {\n        // No need to check isAssignmentTarget: the only way to have something we know is a rest element is if we have ...Object/ArrayAssignmentTarget, which implies we have a firstExprError; as such, if isAssignmentTarget were false, we'd've thrown above before setting rest.\n        return this.finishNode(new AST.ArrayAssignmentTarget({\n          elements: exprs.map(function (e) {\n            return e && _this8.transformDestructuringWithDefault(e);\n          }),\n          rest: rest\n        }), startState);\n      } else if (this.firstExprError) {\n        var last = exprs[exprs.length - 1];\n        if (last != null && last.type === 'SpreadElement') {\n          return this.finishNode(new AST.ArrayAssignmentTarget({\n            elements: exprs.slice(0, -1).map(function (e) {\n              return e && _this8.transformDestructuringWithDefault(e);\n            }),\n            rest: this.transformDestructuring(last.expression)\n          }), startState);\n        }\n        return this.finishNode(new AST.ArrayAssignmentTarget({\n          elements: exprs.map(function (e) {\n            return e && _this8.transformDestructuringWithDefault(e);\n          }),\n          rest: null\n        }), startState);\n      }\n      return this.finishNode(new AST.ArrayExpression({ elements: exprs }), startState);\n    }\n  }, {\n    key: 'parseObjectExpression',\n    value: function parseObjectExpression() {\n      var _this9 = this;\n\n      var startState = this.startNode();\n      this.lex();\n      var rest = null;\n      var properties = [];\n      while (!this.match(_tokenizer.TokenType.RBRACE)) {\n        var property = null;\n        var isSpreadProperty = false;\n        if (this.match(_tokenizer.TokenType.ELLIPSIS)) {\n          var spreadPropertyOrAssignmentTarget = this.parseSpreadPropertyDefinition();\n          isSpreadProperty = true;\n          property = spreadPropertyOrAssignmentTarget.expression;\n          rest = property;\n          properties.push(spreadPropertyOrAssignmentTarget);\n        } else {\n          property = this.inheritCoverGrammar(this.parsePropertyDefinition);\n          properties.push(property);\n        }\n        if (!this.match(_tokenizer.TokenType.RBRACE)) {\n          this.expect(_tokenizer.TokenType.COMMA);\n          if (isSpreadProperty) {\n            this.isBindingElement = this.isAssignmentTarget = false;\n          }\n        }\n      }\n      this.expect(_tokenizer.TokenType.RBRACE);\n      if (this.firstExprError) {\n        if (!this.isAssignmentTarget) {\n          throw this.createError(_errors.ErrorMessages.INVALID_LHS_IN_BINDING);\n        }\n        return this.finishNode(new AST.ObjectAssignmentTarget({ properties: properties.map(function (p) {\n            return _this9.transformDestructuringWithDefault(p);\n          }), rest: rest }), startState);\n      }\n      return this.finishNode(new AST.ObjectExpression({ properties: properties }), startState);\n    }\n  }, {\n    key: 'parseSpreadPropertyDefinition',\n    value: function parseSpreadPropertyDefinition() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.ELLIPSIS);\n      var expressionOrAssignmentTarget = this.parseAssignmentExpressionOrTarget();\n      if (!isValidSimpleAssignmentTarget(expressionOrAssignmentTarget)) {\n        this.isBindingElement = this.isAssignmentTarget = false;\n      } else if (expressionOrAssignmentTarget.type !== 'IdentifierExpression') {\n        this.isBindingElement = false;\n      }\n      return this.finishNode(new AST.SpreadProperty({ expression: expressionOrAssignmentTarget }), startState);\n    }\n  }, {\n    key: 'parsePropertyDefinition',\n    value: function parsePropertyDefinition() {\n      var startLocation = this.getLocation();\n      var startState = this.startNode();\n      var token = this.lookahead;\n\n      var _parseMethodDefinitio = this.parseMethodDefinition(),\n          methodOrKey = _parseMethodDefinitio.methodOrKey,\n          kind = _parseMethodDefinitio.kind;\n\n      switch (kind) {\n        case 'method':\n          this.isBindingElement = this.isAssignmentTarget = false;\n          return methodOrKey;\n        case 'identifier':\n          if (token.value === 'await' && this.firstAwaitLocation == null) {\n            this.firstAwaitLocation = this.getLocation();\n          }\n          if (this.eat(_tokenizer.TokenType.ASSIGN)) {\n            if (this.allowYieldExpression && token.value === 'yield') {\n              throw this.createError(_errors.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);\n            }\n            if (this.allowAwaitExpression && token.value === 'await') {\n              throw this.createError(_errors.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);\n            }\n            // CoverInitializedName\n            var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.firstExprError = this.createErrorWithLocation(startLocation, _errors.ErrorMessages.ILLEGAL_PROPERTY);\n            return this.finishNode(new AST.AssignmentTargetPropertyIdentifier({\n              binding: this.transformDestructuring(methodOrKey),\n              init: init\n            }), startState);\n          } else if (!this.match(_tokenizer.TokenType.COLON)) {\n            if (this.allowYieldExpression && token.value === 'yield') {\n              throw this.createError(_errors.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);\n            }\n            if (this.allowAwaitExpression && token.value === 'await') {\n              throw this.createError(_errors.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);\n            }\n            if (token.type === _tokenizer.TokenType.IDENTIFIER || token.value === 'let' || token.value === 'yield' || token.value === 'async' || token.value === 'await') {\n              return this.finishNode(new AST.ShorthandProperty({ name: this.finishNode(new AST.IdentifierExpression({ name: methodOrKey.value }), startState) }), startState);\n            }\n            throw this.createUnexpected(token);\n          }\n      }\n\n      // property\n      this.expect(_tokenizer.TokenType.COLON);\n\n      var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);\n      if (this.firstExprError) {\n        return this.finishNode(new AST.AssignmentTargetPropertyProperty({ name: methodOrKey, binding: expr }), startState);\n      }\n      return this.finishNode(new AST.DataProperty({ name: methodOrKey, expression: expr }), startState);\n    }\n  }, {\n    key: 'parsePropertyName',\n    value: function parsePropertyName() {\n      // PropertyName[Yield,GeneratorParameter]:\n      var token = this.lookahead;\n      var startState = this.startNode();\n\n      if (this.eof()) {\n        throw this.createUnexpected(token);\n      }\n\n      switch (token.type) {\n        case _tokenizer.TokenType.STRING:\n          return {\n            name: this.finishNode(new AST.StaticPropertyName({\n              value: this.parseStringLiteral().value\n            }), startState),\n            binding: null\n          };\n        case _tokenizer.TokenType.NUMBER:\n          {\n            var numLiteral = this.parseNumericLiteral();\n            return {\n              name: this.finishNode(new AST.StaticPropertyName({\n                value: '' + (numLiteral.type === 'LiteralInfinityExpression' ? 1 / 0 : numLiteral.value)\n              }), startState),\n              binding: null\n            };\n          }\n        case _tokenizer.TokenType.LBRACK:\n          {\n            this.lex();\n            var expr = this.parseAssignmentExpression();\n            this.expect(_tokenizer.TokenType.RBRACK);\n            return { name: this.finishNode(new AST.ComputedPropertyName({ expression: expr }), startState), binding: null };\n          }\n      }\n\n      var name = this.parseIdentifierName();\n      return {\n        name: this.finishNode(new AST.StaticPropertyName({ value: name }), startState),\n        binding: this.finishNode(new AST.BindingIdentifier({ name: name }), startState)\n      };\n    }\n\n    /**\n     * Test if lookahead can be the beginning of a `PropertyName`.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'lookaheadPropertyName',\n    value: function lookaheadPropertyName() {\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.NUMBER:\n        case _tokenizer.TokenType.STRING:\n        case _tokenizer.TokenType.LBRACK:\n          return true;\n        default:\n          return this.lookahead.type.klass.isIdentifierName;\n      }\n    }\n\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Try to parse a method definition.\n     *\n     * If it turns out to be one of:\n     *  * `IdentifierReference`\n     *  * `CoverInitializedName` (`IdentifierReference \"=\" AssignmentExpression`)\n     *  * `PropertyName : AssignmentExpression`\n     * The parser will stop at the end of the leading `Identifier` or `PropertyName` and return it.\n     *\n     * @returns {{methodOrKey: (Method|PropertyName), kind: string}}\n     */\n\n  }, {\n    key: 'parseMethodDefinition',\n    value: function parseMethodDefinition() {\n      var token = this.lookahead;\n      var startState = this.startNode();\n\n      var preAsyncTokenState = this.saveLexerState();\n\n      var isAsync = !!this.eat(_tokenizer.TokenType.ASYNC);\n      if (isAsync && this.hasLineTerminatorBeforeNext) {\n        isAsync = false;\n        this.restoreLexerState(preAsyncTokenState);\n      }\n\n      var isGenerator = !!this.eat(_tokenizer.TokenType.MUL);\n      if (isAsync && !this.lookaheadPropertyName()) {\n        isAsync = false;\n        isGenerator = false;\n        this.restoreLexerState(preAsyncTokenState);\n      }\n\n      var _parsePropertyName = this.parsePropertyName(),\n          name = _parsePropertyName.name;\n\n      if (!isGenerator && !isAsync) {\n        if (token.type === _tokenizer.TokenType.IDENTIFIER && token.value.length === 3) {\n          // Property Assignment: Getter and Setter.\n          if (token.value === 'get' && this.lookaheadPropertyName() && !token.escaped) {\n            var _parsePropertyName2 = this.parsePropertyName();\n\n            name = _parsePropertyName2.name;\n\n            this.expect(_tokenizer.TokenType.LPAREN);\n            this.expect(_tokenizer.TokenType.RPAREN);\n            var previousYield = this.allowYieldExpression;\n            var previousAwait = this.allowAwaitExpression;\n            var previousAwaitLocation = this.firstAwaitLocation;\n            this.allowYieldExpression = false;\n            this.allowAwaitExpression = false;\n            this.previousAwaitLocation = null;\n            var body = this.parseFunctionBody();\n            this.allowYieldExpression = previousYield;\n            this.allowAwaitExpression = previousAwait;\n            this.previousAwaitLocation = previousAwaitLocation;\n            return {\n              methodOrKey: this.finishNode(new AST.Getter({ name: name, body: body }), startState),\n              kind: 'method'\n            };\n          } else if (token.value === 'set' && this.lookaheadPropertyName() && !token.escaped) {\n            var _parsePropertyName3 = this.parsePropertyName();\n\n            name = _parsePropertyName3.name;\n\n            this.expect(_tokenizer.TokenType.LPAREN);\n            var _previousYield = this.allowYieldExpression;\n            var _previousAwait = this.allowAwaitExpression;\n            var _previousAwaitLocation = this.firstAwaitLocation;\n            this.allowYieldExpression = false;\n            this.allowAwaitExpression = false;\n            this.previousAwaitLocation = null;\n            var param = this.parseBindingElement();\n            this.expect(_tokenizer.TokenType.RPAREN);\n            var _body = this.parseFunctionBody();\n            this.allowYieldExpression = _previousYield;\n            this.allowAwaitExpression = _previousAwait;\n            this.previousAwaitLocation = _previousAwaitLocation;\n            return {\n              methodOrKey: this.finishNode(new AST.Setter({ name: name, param: param, body: _body }), startState),\n              kind: 'method'\n            };\n          }\n        }\n      }\n      if (isAsync) {\n        var _previousYield2 = this.allowYieldExpression;\n        var _previousAwait2 = this.allowAwaitExpression;\n        this.allowYieldExpression = isGenerator;\n        this.allowAwaitExpression = true;\n        var params = this.parseParams();\n        this.allowYieldExpression = isGenerator;\n        this.allowAwaitExpression = true;\n        var _body2 = this.parseFunctionBody();\n        this.allowYieldExpression = _previousYield2;\n        this.allowAwaitExpression = _previousAwait2;\n        return {\n          methodOrKey: this.finishNode(new AST.Method({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: params, body: _body2 }), startState),\n          kind: 'method'\n        };\n      }\n\n      if (this.match(_tokenizer.TokenType.LPAREN)) {\n        var _previousYield3 = this.allowYieldExpression;\n        var _previousAwait3 = this.allowAwaitExpression;\n        var _previousAwaitLocation2 = this.firstAwaitLocation;\n        this.allowYieldExpression = isGenerator;\n        this.allowAwaitExpression = false;\n        this.firstAwaitLocation = null;\n        var _params = this.parseParams();\n        var _body3 = this.parseFunctionBody();\n        this.allowYieldExpression = _previousYield3;\n        this.allowAwaitExpression = _previousAwait3;\n        this.previousAwaitLocation = _previousAwaitLocation2;\n\n        return {\n          methodOrKey: this.finishNode(new AST.Method({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: _params, body: _body3 }), startState),\n          kind: 'method'\n        };\n      }\n\n      if (isGenerator && this.match(_tokenizer.TokenType.COLON)) {\n        throw this.createUnexpected(this.lookahead);\n      }\n\n      return {\n        methodOrKey: name,\n        kind: token.type.klass.isIdentifierName ? 'identifier' : 'property',\n        escaped: token.escaped\n      };\n    }\n  }, {\n    key: 'parseClass',\n    value: function parseClass(_ref3) {\n      var _this10 = this;\n\n      var isExpr = _ref3.isExpr,\n          inDefault = _ref3.inDefault;\n\n      var startState = this.startNode();\n\n      this.lex();\n      var name = null;\n      var heritage = null;\n\n      if (this.matchIdentifier()) {\n        name = this.parseBindingIdentifier();\n      } else if (!isExpr) {\n        if (inDefault) {\n          name = new AST.BindingIdentifier({ name: '*default*' });\n        } else {\n          throw this.createUnexpected(this.lookahead);\n        }\n      }\n\n      if (this.eat(_tokenizer.TokenType.EXTENDS)) {\n        heritage = this.isolateCoverGrammar(function () {\n          return _this10.parseLeftHandSideExpression({ allowCall: true });\n        });\n      }\n\n      this.expect(_tokenizer.TokenType.LBRACE);\n      var elements = [];\n      while (!this.eat(_tokenizer.TokenType.RBRACE)) {\n        if (this.eat(_tokenizer.TokenType.SEMICOLON)) {\n          continue;\n        }\n        var isStatic = false;\n        var classElementStart = this.startNode();\n\n        var _parseMethodDefinitio2 = this.parseMethodDefinition(),\n            methodOrKey = _parseMethodDefinitio2.methodOrKey,\n            kind = _parseMethodDefinitio2.kind,\n            escaped = _parseMethodDefinitio2.escaped;\n\n        if (kind === 'identifier' && methodOrKey.value === 'static' && !escaped) {\n          isStatic = true;\n\n          var _parseMethodDefinitio3 = this.parseMethodDefinition();\n\n          methodOrKey = _parseMethodDefinitio3.methodOrKey;\n          kind = _parseMethodDefinitio3.kind;\n        }\n        if (kind === 'method') {\n          elements.push(this.finishNode(new AST.ClassElement({ isStatic: isStatic, method: methodOrKey }), classElementStart));\n        } else {\n          throw this.createError('Only methods are allowed in classes');\n        }\n      }\n      return this.finishNode(new (isExpr ? AST.ClassExpression : AST.ClassDeclaration)({ name: name, super: heritage, elements: elements }), startState);\n    }\n  }, {\n    key: 'parseFunction',\n    value: function parseFunction(_ref4) {\n      var isExpr = _ref4.isExpr,\n          inDefault = _ref4.inDefault,\n          allowGenerator = _ref4.allowGenerator,\n          isAsync = _ref4.isAsync,\n          _ref4$startState = _ref4.startState,\n          startState = _ref4$startState === undefined ? this.startNode() : _ref4$startState;\n\n      this.lex();\n      var name = null;\n      var isGenerator = allowGenerator && !!this.eat(_tokenizer.TokenType.MUL);\n\n      var previousYield = this.allowYieldExpression;\n      var previousAwait = this.allowAwaitExpression;\n      var previousAwaitLocation = this.firstAwaitLocation;\n\n      if (isExpr) {\n        this.allowYieldExpression = isGenerator;\n        this.allowAwaitExpression = isAsync;\n      }\n\n      if (!this.match(_tokenizer.TokenType.LPAREN)) {\n        name = this.parseBindingIdentifier();\n      } else if (!isExpr) {\n        if (inDefault) {\n          name = new AST.BindingIdentifier({ name: '*default*' });\n        } else {\n          throw this.createUnexpected(this.lookahead);\n        }\n      }\n      this.allowYieldExpression = isGenerator;\n      this.allowAwaitExpression = isAsync;\n      this.firstAwaitLocation = null;\n      var params = this.parseParams();\n      var body = this.parseFunctionBody();\n      this.allowYieldExpression = previousYield;\n      this.allowAwaitExpression = previousAwait;\n      this.firstAwaitLocation = previousAwaitLocation;\n\n      return this.finishNode(new (isExpr ? AST.FunctionExpression : AST.FunctionDeclaration)({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: params, body: body }), startState);\n    }\n  }, {\n    key: 'parseArrayBinding',\n    value: function parseArrayBinding() {\n      var startState = this.startNode();\n\n      this.expect(_tokenizer.TokenType.LBRACK);\n\n      var elements = [],\n          rest = null;\n\n      while (true) {\n        if (this.match(_tokenizer.TokenType.RBRACK)) {\n          break;\n        }\n        var el = void 0;\n\n        if (this.eat(_tokenizer.TokenType.COMMA)) {\n          el = null;\n        } else {\n          if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n            rest = this.parseBindingTarget();\n            break;\n          } else {\n            el = this.parseBindingElement();\n          }\n          if (!this.match(_tokenizer.TokenType.RBRACK)) {\n            this.expect(_tokenizer.TokenType.COMMA);\n          }\n        }\n        elements.push(el);\n      }\n\n      this.expect(_tokenizer.TokenType.RBRACK);\n\n      return this.finishNode(new AST.ArrayBinding({ elements: elements, rest: rest }), startState);\n    }\n  }, {\n    key: 'parseBindingProperty',\n    value: function parseBindingProperty() {\n      var startState = this.startNode();\n      var isIdentifier = this.matchIdentifier();\n      var token = this.lookahead;\n\n      var _parsePropertyName4 = this.parsePropertyName(),\n          name = _parsePropertyName4.name,\n          binding = _parsePropertyName4.binding;\n\n      if (isIdentifier && name.type === 'StaticPropertyName') {\n        if (!this.match(_tokenizer.TokenType.COLON)) {\n          if (this.allowYieldExpression && token.value === 'yield') {\n            throw this.createError(_errors.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);\n          }\n          if (this.allowAwaitExpression && token.value === 'await') {\n            throw this.createError(_errors.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);\n          }\n          var defaultValue = null;\n          if (this.eat(_tokenizer.TokenType.ASSIGN)) {\n            defaultValue = this.parseAssignmentExpression();\n          }\n          return this.finishNode(new AST.BindingPropertyIdentifier({\n            binding: binding,\n            init: defaultValue\n          }), startState);\n        }\n      }\n      this.expect(_tokenizer.TokenType.COLON);\n      binding = this.parseBindingElement();\n      return this.finishNode(new AST.BindingPropertyProperty({ name: name, binding: binding }), startState);\n    }\n  }, {\n    key: 'parseObjectBinding',\n    value: function parseObjectBinding() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.LBRACE);\n\n      var properties = [];\n      var rest = null;\n      while (!this.match(_tokenizer.TokenType.RBRACE)) {\n        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n          rest = this.parseBindingIdentifier();\n          break;\n        }\n        properties.push(this.parseBindingProperty());\n        if (!this.match(_tokenizer.TokenType.RBRACE)) {\n          this.expect(_tokenizer.TokenType.COMMA);\n        }\n      }\n\n      this.expect(_tokenizer.TokenType.RBRACE);\n\n      return this.finishNode(new AST.ObjectBinding({ properties: properties, rest: rest }), startState);\n    }\n  }, {\n    key: 'parseBindingTarget',\n    value: function parseBindingTarget() {\n      if (this.matchIdentifier()) {\n        return this.parseBindingIdentifier();\n      }\n      switch (this.lookahead.type) {\n        case _tokenizer.TokenType.LBRACK:\n          return this.parseArrayBinding();\n        case _tokenizer.TokenType.LBRACE:\n          return this.parseObjectBinding();\n      }\n      throw this.createUnexpected(this.lookahead);\n    }\n  }, {\n    key: 'parseBindingElement',\n    value: function parseBindingElement() {\n      var startState = this.startNode();\n      var binding = this.parseBindingTarget();\n      if (this.eat(_tokenizer.TokenType.ASSIGN)) {\n        var init = this.parseAssignmentExpression();\n        binding = this.finishNode(new AST.BindingWithDefault({ binding: binding, init: init }), startState);\n      }\n      return binding;\n    }\n  }, {\n    key: 'parseParam',\n    value: function parseParam() {\n      var previousInParameter = this.inParameter;\n      this.inParameter = true;\n      var param = this.parseBindingElement();\n      this.inParameter = previousInParameter;\n      return param;\n    }\n  }, {\n    key: 'parseParams',\n    value: function parseParams() {\n      var startState = this.startNode();\n      this.expect(_tokenizer.TokenType.LPAREN);\n\n      var items = [],\n          rest = null;\n      while (!this.match(_tokenizer.TokenType.RPAREN)) {\n        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {\n          rest = this.parseBindingTarget();\n          if (this.lookahead.type === _tokenizer.TokenType.ASSIGN) {\n            throw this.createError(_errors.ErrorMessages.UNEXPECTED_REST_PARAMETERS_INITIALIZATION);\n          }\n          if (this.match(_tokenizer.TokenType.COMMA)) {\n            throw this.createError(_errors.ErrorMessages.UNEXPECTED_COMMA_AFTER_REST);\n          }\n          break;\n        }\n        items.push(this.parseParam());\n        if (this.match(_tokenizer.TokenType.RPAREN)) break;\n        this.expect(_tokenizer.TokenType.COMMA);\n      }\n\n      this.expect(_tokenizer.TokenType.RPAREN);\n\n      return this.finishNode(new AST.FormalParameters({ items: items, rest: rest }), startState);\n    }\n  }]);\n\n  return GenericParser;\n}(_tokenizer2.default);\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/parser.js?")},"./node_modules/shift-parser/dist/tokenizer.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsError = exports.TokenType = exports.TokenClass = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(\"./node_modules/shift-parser/dist/utils.js\");\n\nvar _errors = __webpack_require__(\"./node_modules/shift-parser/dist/errors.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the \"License\")\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\nhttp://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar TokenClass = exports.TokenClass = {\n  Eof: { name: '<End>' },\n  Ident: { name: 'Identifier', isIdentifierName: true },\n  Keyword: { name: 'Keyword', isIdentifierName: true },\n  NumericLiteral: { name: 'Numeric' },\n  TemplateElement: { name: 'Template' },\n  Punctuator: { name: 'Punctuator' },\n  StringLiteral: { name: 'String' },\n  RegularExpression: { name: 'RegularExpression' },\n  Illegal: { name: 'Illegal' }\n};\n\nvar TokenType = exports.TokenType = {\n  EOS: { klass: TokenClass.Eof, name: 'EOS' },\n  LPAREN: { klass: TokenClass.Punctuator, name: '(' },\n  RPAREN: { klass: TokenClass.Punctuator, name: ')' },\n  LBRACK: { klass: TokenClass.Punctuator, name: '[' },\n  RBRACK: { klass: TokenClass.Punctuator, name: ']' },\n  LBRACE: { klass: TokenClass.Punctuator, name: '{' },\n  RBRACE: { klass: TokenClass.Punctuator, name: '}' },\n  COLON: { klass: TokenClass.Punctuator, name: ':' },\n  SEMICOLON: { klass: TokenClass.Punctuator, name: ';' },\n  PERIOD: { klass: TokenClass.Punctuator, name: '.' },\n  ELLIPSIS: { klass: TokenClass.Punctuator, name: '...' },\n  ARROW: { klass: TokenClass.Punctuator, name: '=>' },\n  CONDITIONAL: { klass: TokenClass.Punctuator, name: '?' },\n  INC: { klass: TokenClass.Punctuator, name: '++' },\n  DEC: { klass: TokenClass.Punctuator, name: '--' },\n  ASSIGN: { klass: TokenClass.Punctuator, name: '=' },\n  ASSIGN_BIT_OR: { klass: TokenClass.Punctuator, name: '|=' },\n  ASSIGN_BIT_XOR: { klass: TokenClass.Punctuator, name: '^=' },\n  ASSIGN_BIT_AND: { klass: TokenClass.Punctuator, name: '&=' },\n  ASSIGN_SHL: { klass: TokenClass.Punctuator, name: '<<=' },\n  ASSIGN_SHR: { klass: TokenClass.Punctuator, name: '>>=' },\n  ASSIGN_SHR_UNSIGNED: { klass: TokenClass.Punctuator, name: '>>>=' },\n  ASSIGN_ADD: { klass: TokenClass.Punctuator, name: '+=' },\n  ASSIGN_SUB: { klass: TokenClass.Punctuator, name: '-=' },\n  ASSIGN_MUL: { klass: TokenClass.Punctuator, name: '*=' },\n  ASSIGN_DIV: { klass: TokenClass.Punctuator, name: '/=' },\n  ASSIGN_MOD: { klass: TokenClass.Punctuator, name: '%=' },\n  ASSIGN_EXP: { klass: TokenClass.Punctuator, name: '**=' },\n  COMMA: { klass: TokenClass.Punctuator, name: ',' },\n  OR: { klass: TokenClass.Punctuator, name: '||' },\n  AND: { klass: TokenClass.Punctuator, name: '&&' },\n  BIT_OR: { klass: TokenClass.Punctuator, name: '|' },\n  BIT_XOR: { klass: TokenClass.Punctuator, name: '^' },\n  BIT_AND: { klass: TokenClass.Punctuator, name: '&' },\n  SHL: { klass: TokenClass.Punctuator, name: '<<' },\n  SHR: { klass: TokenClass.Punctuator, name: '>>' },\n  SHR_UNSIGNED: { klass: TokenClass.Punctuator, name: '>>>' },\n  ADD: { klass: TokenClass.Punctuator, name: '+' },\n  SUB: { klass: TokenClass.Punctuator, name: '-' },\n  MUL: { klass: TokenClass.Punctuator, name: '*' },\n  DIV: { klass: TokenClass.Punctuator, name: '/' },\n  MOD: { klass: TokenClass.Punctuator, name: '%' },\n  EXP: { klass: TokenClass.Punctuator, name: '**' },\n  EQ: { klass: TokenClass.Punctuator, name: '==' },\n  NE: { klass: TokenClass.Punctuator, name: '!=' },\n  EQ_STRICT: { klass: TokenClass.Punctuator, name: '===' },\n  NE_STRICT: { klass: TokenClass.Punctuator, name: '!==' },\n  LT: { klass: TokenClass.Punctuator, name: '<' },\n  GT: { klass: TokenClass.Punctuator, name: '>' },\n  LTE: { klass: TokenClass.Punctuator, name: '<=' },\n  GTE: { klass: TokenClass.Punctuator, name: '>=' },\n  INSTANCEOF: { klass: TokenClass.Keyword, name: 'instanceof' },\n  IN: { klass: TokenClass.Keyword, name: 'in' },\n  NOT: { klass: TokenClass.Punctuator, name: '!' },\n  BIT_NOT: { klass: TokenClass.Punctuator, name: '~' },\n  ASYNC: { klass: TokenClass.Keyword, name: 'async' },\n  AWAIT: { klass: TokenClass.Keyword, name: 'await' },\n  ENUM: { klass: TokenClass.Keyword, name: 'enum' },\n  DELETE: { klass: TokenClass.Keyword, name: 'delete' },\n  TYPEOF: { klass: TokenClass.Keyword, name: 'typeof' },\n  VOID: { klass: TokenClass.Keyword, name: 'void' },\n  BREAK: { klass: TokenClass.Keyword, name: 'break' },\n  CASE: { klass: TokenClass.Keyword, name: 'case' },\n  CATCH: { klass: TokenClass.Keyword, name: 'catch' },\n  CLASS: { klass: TokenClass.Keyword, name: 'class' },\n  CONTINUE: { klass: TokenClass.Keyword, name: 'continue' },\n  DEBUGGER: { klass: TokenClass.Keyword, name: 'debugger' },\n  DEFAULT: { klass: TokenClass.Keyword, name: 'default' },\n  DO: { klass: TokenClass.Keyword, name: 'do' },\n  ELSE: { klass: TokenClass.Keyword, name: 'else' },\n  EXPORT: { klass: TokenClass.Keyword, name: 'export' },\n  EXTENDS: { klass: TokenClass.Keyword, name: 'extends' },\n  FINALLY: { klass: TokenClass.Keyword, name: 'finally' },\n  FOR: { klass: TokenClass.Keyword, name: 'for' },\n  FUNCTION: { klass: TokenClass.Keyword, name: 'function' },\n  IF: { klass: TokenClass.Keyword, name: 'if' },\n  IMPORT: { klass: TokenClass.Keyword, name: 'import' },\n  LET: { klass: TokenClass.Keyword, name: 'let' },\n  NEW: { klass: TokenClass.Keyword, name: 'new' },\n  RETURN: { klass: TokenClass.Keyword, name: 'return' },\n  SUPER: { klass: TokenClass.Keyword, name: 'super' },\n  SWITCH: { klass: TokenClass.Keyword, name: 'switch' },\n  THIS: { klass: TokenClass.Keyword, name: 'this' },\n  THROW: { klass: TokenClass.Keyword, name: 'throw' },\n  TRY: { klass: TokenClass.Keyword, name: 'try' },\n  VAR: { klass: TokenClass.Keyword, name: 'var' },\n  WHILE: { klass: TokenClass.Keyword, name: 'while' },\n  WITH: { klass: TokenClass.Keyword, name: 'with' },\n  NULL: { klass: TokenClass.Keyword, name: 'null' },\n  TRUE: { klass: TokenClass.Keyword, name: 'true' },\n  FALSE: { klass: TokenClass.Keyword, name: 'false' },\n  YIELD: { klass: TokenClass.Keyword, name: 'yield' },\n  NUMBER: { klass: TokenClass.NumericLiteral, name: '' },\n  STRING: { klass: TokenClass.StringLiteral, name: '' },\n  REGEXP: { klass: TokenClass.RegularExpression, name: '' },\n  IDENTIFIER: { klass: TokenClass.Ident, name: '' },\n  CONST: { klass: TokenClass.Keyword, name: 'const' },\n  TEMPLATE: { klass: TokenClass.TemplateElement, name: '' },\n  ESCAPED_KEYWORD: { klass: TokenClass.Keyword, name: '' },\n  ILLEGAL: { klass: TokenClass.Illegal, name: '' }\n};\n\nvar TT = TokenType;\nvar I = TT.ILLEGAL;\nvar F = false;\nvar T = true;\n\nvar ONE_CHAR_PUNCTUATOR = [I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.NOT, I, I, I, TT.MOD, TT.BIT_AND, I, TT.LPAREN, TT.RPAREN, TT.MUL, TT.ADD, TT.COMMA, TT.SUB, TT.PERIOD, TT.DIV, I, I, I, I, I, I, I, I, I, I, TT.COLON, TT.SEMICOLON, TT.LT, TT.ASSIGN, TT.GT, TT.CONDITIONAL, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.LBRACK, I, TT.RBRACK, TT.BIT_XOR, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.LBRACE, TT.BIT_OR, TT.RBRACE, TT.BIT_NOT];\n\nvar PUNCTUATOR_START = [F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, F, F, F, T, T, F, T, T, T, T, T, T, F, T, F, F, F, F, F, F, F, F, F, F, T, T, T, T, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, F, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, T, T, T, F];\n\nvar JsError = exports.JsError = function (_Error) {\n  _inherits(JsError, _Error);\n\n  function JsError(index, line, column, msg) {\n    _classCallCheck(this, JsError);\n\n    var _this = _possibleConstructorReturn(this, (JsError.__proto__ || Object.getPrototypeOf(JsError)).call(this, msg));\n\n    _this.index = index;\n    // Safari defines these properties as non-writable and non-configurable on Error objects\n    try {\n      _this.line = line;\n      _this.column = column;\n    } catch (e) {}\n    // define these as well so Safari still has access to this info\n    _this.parseErrorLine = line;\n    _this.parseErrorColumn = column;\n    _this.description = msg;\n    _this.message = '[' + line + ':' + column + ']: ' + msg;\n    return _this;\n  }\n\n  return JsError;\n}(Error);\n\nfunction fromCodePoint(cp) {\n  if (cp <= 0xFFFF) return String.fromCharCode(cp);\n  var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);\n  var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);\n  return cu1 + cu2;\n}\n\nfunction decodeUtf16(lead, trail) {\n  return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n}\n\nvar Tokenizer = function () {\n  function Tokenizer(source) {\n    _classCallCheck(this, Tokenizer);\n\n    this.source = source;\n    this.index = 0;\n    this.line = 0;\n    this.lineStart = 0;\n    this.startIndex = 0;\n    this.startLine = 0;\n    this.startLineStart = 0;\n    this.lastIndex = 0;\n    this.lastLine = 0;\n    this.lastLineStart = 0;\n    this.hasLineTerminatorBeforeNext = false;\n    this.tokenIndex = 0;\n  }\n\n  _createClass(Tokenizer, [{\n    key: 'saveLexerState',\n    value: function saveLexerState() {\n      return {\n        source: this.source,\n        index: this.index,\n        line: this.line,\n        lineStart: this.lineStart,\n        startIndex: this.startIndex,\n        startLine: this.startLine,\n        startLineStart: this.startLineStart,\n        lastIndex: this.lastIndex,\n        lastLine: this.lastLine,\n        lastLineStart: this.lastLineStart,\n        lookahead: this.lookahead,\n        hasLineTerminatorBeforeNext: this.hasLineTerminatorBeforeNext,\n        tokenIndex: this.tokenIndex\n      };\n    }\n  }, {\n    key: 'restoreLexerState',\n    value: function restoreLexerState(state) {\n      this.source = state.source;\n      this.index = state.index;\n      this.line = state.line;\n      this.lineStart = state.lineStart;\n      this.startIndex = state.startIndex;\n      this.startLine = state.startLine;\n      this.startLineStart = state.startLineStart;\n      this.lastIndex = state.lastIndex;\n      this.lastLine = state.lastLine;\n      this.lastLineStart = state.lastLineStart;\n      this.lookahead = state.lookahead;\n      this.hasLineTerminatorBeforeNext = state.hasLineTerminatorBeforeNext;\n      this.tokenIndex = state.tokenIndex;\n    }\n  }, {\n    key: 'createILLEGAL',\n    value: function createILLEGAL() {\n      this.startIndex = this.index;\n      this.startLine = this.line;\n      this.startLineStart = this.lineStart;\n      return this.index < this.source.length ? this.createError(_errors.ErrorMessages.UNEXPECTED_ILLEGAL_TOKEN, this.source.charAt(this.index)) : this.createError(_errors.ErrorMessages.UNEXPECTED_EOS);\n    }\n  }, {\n    key: 'createUnexpected',\n    value: function createUnexpected(token) {\n      switch (token.type.klass) {\n        case TokenClass.Eof:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_EOS);\n        case TokenClass.Ident:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_IDENTIFIER);\n        case TokenClass.Keyword:\n          if (token.type === TokenType.ESCAPED_KEYWORD) {\n            return this.createError(_errors.ErrorMessages.UNEXPECTED_ESCAPED_KEYWORD);\n          }\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_TOKEN, token.slice.text);\n        case TokenClass.NumericLiteral:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_NUMBER);\n        case TokenClass.TemplateElement:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_TEMPLATE);\n        case TokenClass.Punctuator:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_TOKEN, token.type.name);\n        case TokenClass.StringLiteral:\n          return this.createError(_errors.ErrorMessages.UNEXPECTED_STRING);\n        // the other token classes are RegularExpression and Illegal, but they cannot reach here\n      }\n      // istanbul ignore next\n      throw new Error('Unreachable: unexpected token of class ' + token.type.klass);\n    }\n  }, {\n    key: 'createError',\n    value: function createError(message) {\n      var msg = void 0;\n      if (typeof message === 'function') {\n        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n\n        msg = message.apply(undefined, params);\n      } else {\n        msg = message;\n      }\n      return new JsError(this.startIndex, this.startLine + 1, this.startIndex - this.startLineStart + 1, msg);\n    }\n  }, {\n    key: 'createErrorWithLocation',\n    value: function createErrorWithLocation(location, message) {\n      var _arguments = arguments;\n\n      /* istanbul ignore next */\n      var msg = message.replace(/\\{(\\d+)\\}/g, function (_, n) {\n        return JSON.stringify(_arguments[+n + 2]);\n      });\n      if (location.slice && location.slice.startLocation) {\n        location = location.slice.startLocation;\n      }\n      return new JsError(location.offset, location.line, location.column + 1, msg);\n    }\n  }, {\n    key: 'getKeyword',\n    value: function getKeyword(id) {\n      if (id.length === 1 || id.length > 10) {\n        return TokenType.IDENTIFIER;\n      }\n\n      /* istanbul ignore next */\n      switch (id.length) {\n        case 2:\n          switch (id.charAt(0)) {\n            case 'i':\n              switch (id.charAt(1)) {\n                case 'f':\n                  return TokenType.IF;\n                case 'n':\n                  return TokenType.IN;\n                default:\n                  break;\n              }\n              break;\n            case 'd':\n              if (id.charAt(1) === 'o') {\n                return TokenType.DO;\n              }\n              break;\n          }\n          break;\n        case 3:\n          switch (id.charAt(0)) {\n            case 'v':\n              if (Tokenizer.cse2(id, 'a', 'r')) {\n                return TokenType.VAR;\n              }\n              break;\n            case 'f':\n              if (Tokenizer.cse2(id, 'o', 'r')) {\n                return TokenType.FOR;\n              }\n              break;\n            case 'n':\n              if (Tokenizer.cse2(id, 'e', 'w')) {\n                return TokenType.NEW;\n              }\n              break;\n            case 't':\n              if (Tokenizer.cse2(id, 'r', 'y')) {\n                return TokenType.TRY;\n              }\n              break;\n            case 'l':\n              if (Tokenizer.cse2(id, 'e', 't')) {\n                return TokenType.LET;\n              }\n              break;\n          }\n          break;\n        case 4:\n          switch (id.charAt(0)) {\n            case 't':\n              if (Tokenizer.cse3(id, 'h', 'i', 's')) {\n                return TokenType.THIS;\n              } else if (Tokenizer.cse3(id, 'r', 'u', 'e')) {\n                return TokenType.TRUE;\n              }\n              break;\n            case 'n':\n              if (Tokenizer.cse3(id, 'u', 'l', 'l')) {\n                return TokenType.NULL;\n              }\n              break;\n            case 'e':\n              if (Tokenizer.cse3(id, 'l', 's', 'e')) {\n                return TokenType.ELSE;\n              } else if (Tokenizer.cse3(id, 'n', 'u', 'm')) {\n                return TokenType.ENUM;\n              }\n              break;\n            case 'c':\n              if (Tokenizer.cse3(id, 'a', 's', 'e')) {\n                return TokenType.CASE;\n              }\n              break;\n            case 'v':\n              if (Tokenizer.cse3(id, 'o', 'i', 'd')) {\n                return TokenType.VOID;\n              }\n              break;\n            case 'w':\n              if (Tokenizer.cse3(id, 'i', 't', 'h')) {\n                return TokenType.WITH;\n              }\n              break;\n          }\n          break;\n        case 5:\n          switch (id.charAt(0)) {\n            case 'a':\n              if (Tokenizer.cse4(id, 's', 'y', 'n', 'c')) {\n                return TokenType.ASYNC;\n              }\n              if (Tokenizer.cse4(id, 'w', 'a', 'i', 't')) {\n                return TokenType.AWAIT;\n              }\n              break;\n            case 'w':\n              if (Tokenizer.cse4(id, 'h', 'i', 'l', 'e')) {\n                return TokenType.WHILE;\n              }\n              break;\n            case 'b':\n              if (Tokenizer.cse4(id, 'r', 'e', 'a', 'k')) {\n                return TokenType.BREAK;\n              }\n              break;\n            case 'f':\n              if (Tokenizer.cse4(id, 'a', 'l', 's', 'e')) {\n                return TokenType.FALSE;\n              }\n              break;\n            case 'c':\n              if (Tokenizer.cse4(id, 'a', 't', 'c', 'h')) {\n                return TokenType.CATCH;\n              } else if (Tokenizer.cse4(id, 'o', 'n', 's', 't')) {\n                return TokenType.CONST;\n              } else if (Tokenizer.cse4(id, 'l', 'a', 's', 's')) {\n                return TokenType.CLASS;\n              }\n              break;\n            case 't':\n              if (Tokenizer.cse4(id, 'h', 'r', 'o', 'w')) {\n                return TokenType.THROW;\n              }\n              break;\n            case 'y':\n              if (Tokenizer.cse4(id, 'i', 'e', 'l', 'd')) {\n                return TokenType.YIELD;\n              }\n              break;\n            case 's':\n              if (Tokenizer.cse4(id, 'u', 'p', 'e', 'r')) {\n                return TokenType.SUPER;\n              }\n              break;\n          }\n          break;\n        case 6:\n          switch (id.charAt(0)) {\n            case 'r':\n              if (Tokenizer.cse5(id, 'e', 't', 'u', 'r', 'n')) {\n                return TokenType.RETURN;\n              }\n              break;\n            case 't':\n              if (Tokenizer.cse5(id, 'y', 'p', 'e', 'o', 'f')) {\n                return TokenType.TYPEOF;\n              }\n              break;\n            case 'd':\n              if (Tokenizer.cse5(id, 'e', 'l', 'e', 't', 'e')) {\n                return TokenType.DELETE;\n              }\n              break;\n            case 's':\n              if (Tokenizer.cse5(id, 'w', 'i', 't', 'c', 'h')) {\n                return TokenType.SWITCH;\n              }\n              break;\n            case 'e':\n              if (Tokenizer.cse5(id, 'x', 'p', 'o', 'r', 't')) {\n                return TokenType.EXPORT;\n              }\n              break;\n            case 'i':\n              if (Tokenizer.cse5(id, 'm', 'p', 'o', 'r', 't')) {\n                return TokenType.IMPORT;\n              }\n              break;\n          }\n          break;\n        case 7:\n          switch (id.charAt(0)) {\n            case 'd':\n              if (Tokenizer.cse6(id, 'e', 'f', 'a', 'u', 'l', 't')) {\n                return TokenType.DEFAULT;\n              }\n              break;\n            case 'f':\n              if (Tokenizer.cse6(id, 'i', 'n', 'a', 'l', 'l', 'y')) {\n                return TokenType.FINALLY;\n              }\n              break;\n            case 'e':\n              if (Tokenizer.cse6(id, 'x', 't', 'e', 'n', 'd', 's')) {\n                return TokenType.EXTENDS;\n              }\n              break;\n          }\n          break;\n        case 8:\n          switch (id.charAt(0)) {\n            case 'f':\n              if (Tokenizer.cse7(id, 'u', 'n', 'c', 't', 'i', 'o', 'n')) {\n                return TokenType.FUNCTION;\n              }\n              break;\n            case 'c':\n              if (Tokenizer.cse7(id, 'o', 'n', 't', 'i', 'n', 'u', 'e')) {\n                return TokenType.CONTINUE;\n              }\n              break;\n            case 'd':\n              if (Tokenizer.cse7(id, 'e', 'b', 'u', 'g', 'g', 'e', 'r')) {\n                return TokenType.DEBUGGER;\n              }\n              break;\n          }\n          break;\n        case 10:\n          if (id === 'instanceof') {\n            return TokenType.INSTANCEOF;\n          }\n          break;\n      }\n      return TokenType.IDENTIFIER;\n    }\n  }, {\n    key: 'skipSingleLineComment',\n    value: function skipSingleLineComment(offset) {\n      this.index += offset;\n      while (this.index < this.source.length) {\n        /**\n         * @type {Number}\n         */\n        var chCode = this.source.charCodeAt(this.index);\n        this.index++;\n        if ((0, _utils.isLineTerminator)(chCode)) {\n          this.hasLineTerminatorBeforeNext = true;\n          if (chCode === 0xD /* \"\\r\" */ && this.source.charCodeAt(this.index) === 0xA /* \"\\n\" */) {\n              this.index++;\n            }\n          this.lineStart = this.index;\n          this.line++;\n          return;\n        }\n      }\n    }\n  }, {\n    key: 'skipMultiLineComment',\n    value: function skipMultiLineComment() {\n      this.index += 2;\n      var length = this.source.length;\n      var isLineStart = false;\n      while (this.index < length) {\n        var chCode = this.source.charCodeAt(this.index);\n        if (chCode < 0x80) {\n          switch (chCode) {\n            case 42:\n              // \"*\"\n              // Block comment ends with \"*/\".\n              if (this.source.charAt(this.index + 1) === '/') {\n                this.index = this.index + 2;\n                return isLineStart;\n              }\n              this.index++;\n              break;\n            case 10:\n              // \"\\n\"\n              isLineStart = true;\n              this.hasLineTerminatorBeforeNext = true;\n              this.index++;\n              this.lineStart = this.index;\n              this.line++;\n              break;\n            case 13:\n              // \"\\r\":\n              isLineStart = true;\n              this.hasLineTerminatorBeforeNext = true;\n              if (this.source.charAt(this.index + 1) === '\\n') {\n                this.index++;\n              }\n              this.index++;\n              this.lineStart = this.index;\n              this.line++;\n              break;\n            default:\n              this.index++;\n          }\n        } else if (chCode === 0x2028 || chCode === 0x2029) {\n          isLineStart = true;\n          this.hasLineTerminatorBeforeNext = true;\n          this.index++;\n          this.lineStart = this.index;\n          this.line++;\n        } else {\n          this.index++;\n        }\n      }\n      throw this.createILLEGAL();\n    }\n  }, {\n    key: 'skipComment',\n    value: function skipComment() {\n      this.hasLineTerminatorBeforeNext = false;\n\n      var isLineStart = this.index === 0;\n      var length = this.source.length;\n\n      while (this.index < length) {\n        var chCode = this.source.charCodeAt(this.index);\n        if ((0, _utils.isWhiteSpace)(chCode)) {\n          this.index++;\n        } else if ((0, _utils.isLineTerminator)(chCode)) {\n          this.hasLineTerminatorBeforeNext = true;\n          this.index++;\n          if (chCode === 13 /* \"\\r\" */ && this.source.charAt(this.index) === '\\n') {\n            this.index++;\n          }\n          this.lineStart = this.index;\n          this.line++;\n          isLineStart = true;\n        } else if (chCode === 47 /* \"/\" */) {\n            if (this.index + 1 >= length) {\n              break;\n            }\n            chCode = this.source.charCodeAt(this.index + 1);\n            if (chCode === 47 /* \"/\" */) {\n                this.skipSingleLineComment(2);\n                isLineStart = true;\n              } else if (chCode === 42 /* \"*\" */) {\n                isLineStart = this.skipMultiLineComment() || isLineStart;\n              } else {\n              break;\n            }\n          } else if (!this.moduleIsTheGoalSymbol && isLineStart && chCode === 45 /* \"-\" */) {\n            if (this.index + 2 >= length) {\n              break;\n            }\n            // U+003E is \">\"\n            if (this.source.charAt(this.index + 1) === '-' && this.source.charAt(this.index + 2) === '>') {\n              // \"--\x3e\" is a single-line comment\n              this.skipSingleLineComment(3);\n            } else {\n              break;\n            }\n          } else if (!this.moduleIsTheGoalSymbol && chCode === 60 /* \"<\" */) {\n            if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n              this.skipSingleLineComment(4);\n              isLineStart = true;\n            } else {\n              break;\n            }\n          } else {\n          break;\n        }\n      }\n    }\n  }, {\n    key: 'scanHexEscape2',\n    value: function scanHexEscape2() {\n      if (this.index + 2 > this.source.length) {\n        return -1;\n      }\n      var r1 = (0, _utils.getHexValue)(this.source.charAt(this.index));\n      if (r1 === -1) {\n        return -1;\n      }\n      var r2 = (0, _utils.getHexValue)(this.source.charAt(this.index + 1));\n      if (r2 === -1) {\n        return -1;\n      }\n      this.index += 2;\n      return r1 << 4 | r2;\n    }\n  }, {\n    key: 'scanUnicode',\n    value: function scanUnicode() {\n      if (this.source.charAt(this.index) === '{') {\n        // \\u{HexDigits}\n        var i = this.index + 1;\n        var hexDigits = 0,\n            ch = void 0;\n        while (i < this.source.length) {\n          ch = this.source.charAt(i);\n          var hex = (0, _utils.getHexValue)(ch);\n          if (hex === -1) {\n            break;\n          }\n          hexDigits = hexDigits << 4 | hex;\n          if (hexDigits > 0x10FFFF) {\n            throw this.createILLEGAL();\n          }\n          i++;\n        }\n        if (ch !== '}') {\n          throw this.createILLEGAL();\n        }\n        if (i === this.index + 1) {\n          ++this.index; // This is so that the error is 'Unexpected \"}\"' instead of 'Unexpected \"{\"'.\n          throw this.createILLEGAL();\n        }\n        this.index = i + 1;\n        return hexDigits;\n      }\n      // \\uHex4Digits\n      if (this.index + 4 > this.source.length) {\n        return -1;\n      }\n      var r1 = (0, _utils.getHexValue)(this.source.charAt(this.index));\n      if (r1 === -1) {\n        return -1;\n      }\n      var r2 = (0, _utils.getHexValue)(this.source.charAt(this.index + 1));\n      if (r2 === -1) {\n        return -1;\n      }\n      var r3 = (0, _utils.getHexValue)(this.source.charAt(this.index + 2));\n      if (r3 === -1) {\n        return -1;\n      }\n      var r4 = (0, _utils.getHexValue)(this.source.charAt(this.index + 3));\n      if (r4 === -1) {\n        return -1;\n      }\n      this.index += 4;\n      return r1 << 12 | r2 << 8 | r3 << 4 | r4;\n    }\n  }, {\n    key: 'getEscapedIdentifier',\n    value: function getEscapedIdentifier() {\n      var id = '';\n      var check = _utils.isIdentifierStart;\n\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        var code = ch.charCodeAt(0);\n        var start = this.index;\n        ++this.index;\n        if (ch === '\\\\') {\n          if (this.index >= this.source.length) {\n            throw this.createILLEGAL();\n          }\n          if (this.source.charAt(this.index) !== 'u') {\n            throw this.createILLEGAL();\n          }\n          ++this.index;\n          code = this.scanUnicode();\n          if (code < 0) {\n            throw this.createILLEGAL();\n          }\n          ch = fromCodePoint(code);\n        } else if (code >= 0xD800 && code <= 0xDBFF) {\n          if (this.index >= this.source.length) {\n            throw this.createILLEGAL();\n          }\n          var lowSurrogateCode = this.source.charCodeAt(this.index);\n          ++this.index;\n          if (!(lowSurrogateCode >= 0xDC00 && lowSurrogateCode <= 0xDFFF)) {\n            throw this.createILLEGAL();\n          }\n          code = decodeUtf16(code, lowSurrogateCode);\n          ch = fromCodePoint(code);\n        }\n        if (!check(code)) {\n          if (id.length < 1) {\n            throw this.createILLEGAL();\n          }\n          this.index = start;\n          return id;\n        }\n        check = _utils.isIdentifierPart;\n        id += ch;\n      }\n      return id;\n    }\n  }, {\n    key: 'getIdentifier',\n    value: function getIdentifier() {\n      var start = this.index;\n      var l = this.source.length;\n      var i = this.index;\n      var check = _utils.isIdentifierStart;\n      while (i < l) {\n        var ch = this.source.charAt(i);\n        var code = ch.charCodeAt(0);\n        if (ch === '\\\\' || code >= 0xD800 && code <= 0xDBFF) {\n          // Go back and try the hard one.\n          this.index = start;\n          return this.getEscapedIdentifier();\n        }\n        if (!check(code)) {\n          this.index = i;\n          return this.source.slice(start, i);\n        }\n        ++i;\n        check = _utils.isIdentifierPart;\n      }\n      this.index = i;\n      return this.source.slice(start, i);\n    }\n  }, {\n    key: 'scanIdentifier',\n    value: function scanIdentifier() {\n      var startLocation = this.getLocation();\n      var start = this.index;\n\n      // Backslash (U+005C) starts an escaped character.\n      var id = this.source.charAt(this.index) === '\\\\' ? this.getEscapedIdentifier() : this.getIdentifier();\n\n      var slice = this.getSlice(start, startLocation);\n      slice.text = id;\n      var hasEscape = this.index - start !== id.length;\n\n      var type = this.getKeyword(id);\n      if (hasEscape && type !== TokenType.IDENTIFIER) {\n        type = TokenType.ESCAPED_KEYWORD;\n      }\n      return { type: type, value: id, slice: slice, escaped: hasEscape };\n    }\n  }, {\n    key: 'getLocation',\n    value: function getLocation() {\n      return {\n        line: this.startLine + 1,\n        column: this.startIndex - this.startLineStart,\n        offset: this.startIndex\n      };\n    }\n  }, {\n    key: 'getLastTokenEndLocation',\n    value: function getLastTokenEndLocation() {\n      return {\n        line: this.lastLine + 1,\n        column: this.lastIndex - this.lastLineStart,\n        offset: this.lastIndex\n      };\n    }\n  }, {\n    key: 'getSlice',\n    value: function getSlice(start, startLocation) {\n      return { text: this.source.slice(start, this.index), start: start, startLocation: startLocation, end: this.index };\n    }\n  }, {\n    key: 'scanPunctuatorHelper',\n    value: function scanPunctuatorHelper() {\n      var ch1 = this.source.charAt(this.index);\n\n      switch (ch1) {\n        // Check for most common single-character punctuators.\n        case '.':\n          {\n            var ch2 = this.source.charAt(this.index + 1);\n            if (ch2 !== '.') return TokenType.PERIOD;\n            var ch3 = this.source.charAt(this.index + 2);\n            if (ch3 !== '.') return TokenType.PERIOD;\n            return TokenType.ELLIPSIS;\n          }\n        case '(':\n          return TokenType.LPAREN;\n        case ')':\n        case ';':\n        case ',':\n          return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];\n        case '{':\n          return TokenType.LBRACE;\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case '?':\n        case '~':\n          return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];\n        default:\n          // \"=\" (U+003D) marks an assignment or comparison operator.\n          if (this.index + 1 < this.source.length && this.source.charAt(this.index + 1) === '=') {\n            switch (ch1) {\n              case '=':\n                if (this.index + 2 < this.source.length && this.source.charAt(this.index + 2) === '=') {\n                  return TokenType.EQ_STRICT;\n                }\n                return TokenType.EQ;\n              case '!':\n                if (this.index + 2 < this.source.length && this.source.charAt(this.index + 2) === '=') {\n                  return TokenType.NE_STRICT;\n                }\n                return TokenType.NE;\n              case '|':\n                return TokenType.ASSIGN_BIT_OR;\n              case '+':\n                return TokenType.ASSIGN_ADD;\n              case '-':\n                return TokenType.ASSIGN_SUB;\n              case '*':\n                return TokenType.ASSIGN_MUL;\n              case '<':\n                return TokenType.LTE;\n              case '>':\n                return TokenType.GTE;\n              case '/':\n                return TokenType.ASSIGN_DIV;\n              case '%':\n                return TokenType.ASSIGN_MOD;\n              case '^':\n                return TokenType.ASSIGN_BIT_XOR;\n              case '&':\n                return TokenType.ASSIGN_BIT_AND;\n              // istanbul ignore next\n              default:\n                break; // failed\n            }\n          }\n      }\n\n      if (this.index + 1 < this.source.length) {\n        var _ch = this.source.charAt(this.index + 1);\n        if (ch1 === _ch) {\n          if (this.index + 2 < this.source.length) {\n            var _ch2 = this.source.charAt(this.index + 2);\n            if (ch1 === '>' && _ch2 === '>') {\n              // 4-character punctuator: >>>=\n              if (this.index + 3 < this.source.length && this.source.charAt(this.index + 3) === '=') {\n                return TokenType.ASSIGN_SHR_UNSIGNED;\n              }\n              return TokenType.SHR_UNSIGNED;\n            }\n\n            if (ch1 === '<' && _ch2 === '=') {\n              return TokenType.ASSIGN_SHL;\n            }\n\n            if (ch1 === '>' && _ch2 === '=') {\n              return TokenType.ASSIGN_SHR;\n            }\n\n            if (ch1 === '*' && _ch2 === '=') {\n              return TokenType.ASSIGN_EXP;\n            }\n          }\n          // Other 2-character punctuators: ++ -- << >> && ||\n          switch (ch1) {\n            case '*':\n              return TokenType.EXP;\n            case '+':\n              return TokenType.INC;\n            case '-':\n              return TokenType.DEC;\n            case '<':\n              return TokenType.SHL;\n            case '>':\n              return TokenType.SHR;\n            case '&':\n              return TokenType.AND;\n            case '|':\n              return TokenType.OR;\n            // istanbul ignore next\n            default:\n              break; // failed\n          }\n        } else if (ch1 === '=' && _ch === '>') {\n          return TokenType.ARROW;\n        }\n      }\n\n      return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];\n    }\n\n    // 7.7 Punctuators\n\n  }, {\n    key: 'scanPunctuator',\n    value: function scanPunctuator() {\n      var startLocation = this.getLocation();\n      var start = this.index;\n      var subType = this.scanPunctuatorHelper();\n      this.index += subType.name.length;\n      return { type: subType, value: subType.name, slice: this.getSlice(start, startLocation) };\n    }\n  }, {\n    key: 'scanHexLiteral',\n    value: function scanHexLiteral(start, startLocation) {\n      var i = this.index;\n      while (i < this.source.length) {\n        var ch = this.source.charAt(i);\n        var hex = (0, _utils.getHexValue)(ch);\n        if (hex === -1) {\n          break;\n        }\n        i++;\n      }\n\n      if (this.index === i) {\n        throw this.createILLEGAL();\n      }\n\n      if (i < this.source.length && (0, _utils.isIdentifierStart)(this.source.charCodeAt(i))) {\n        throw this.createILLEGAL();\n      }\n\n      this.index = i;\n\n      var slice = this.getSlice(start, startLocation);\n      return { type: TokenType.NUMBER, value: parseInt(slice.text.substr(2), 16), slice: slice };\n    }\n  }, {\n    key: 'scanBinaryLiteral',\n    value: function scanBinaryLiteral(start, startLocation) {\n      var offset = this.index - start;\n\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        if (ch !== '0' && ch !== '1') {\n          break;\n        }\n        this.index++;\n      }\n\n      if (this.index - start <= offset) {\n        throw this.createILLEGAL();\n      }\n\n      if (this.index < this.source.length && ((0, _utils.isIdentifierStart)(this.source.charCodeAt(this.index)) || (0, _utils.isDecimalDigit)(this.source.charCodeAt(this.index)))) {\n        throw this.createILLEGAL();\n      }\n\n      return {\n        type: TokenType.NUMBER,\n        value: parseInt(this.getSlice(start, startLocation).text.substr(offset), 2),\n        slice: this.getSlice(start, startLocation),\n        octal: false,\n        noctal: false\n      };\n    }\n  }, {\n    key: 'scanOctalLiteral',\n    value: function scanOctalLiteral(start, startLocation) {\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        if (ch >= '0' && ch <= '7') {\n          this.index++;\n        } else if ((0, _utils.isIdentifierPart)(ch.charCodeAt(0))) {\n          throw this.createILLEGAL();\n        } else {\n          break;\n        }\n      }\n\n      if (this.index - start === 2) {\n        throw this.createILLEGAL();\n      }\n\n      return {\n        type: TokenType.NUMBER,\n        value: parseInt(this.getSlice(start, startLocation).text.substr(2), 8),\n        slice: this.getSlice(start, startLocation),\n        octal: false,\n        noctal: false\n      };\n    }\n  }, {\n    key: 'scanLegacyOctalLiteral',\n    value: function scanLegacyOctalLiteral(start, startLocation) {\n      var isOctal = true;\n\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        if (ch >= '0' && ch <= '7') {\n          this.index++;\n        } else if (ch === '8' || ch === '9') {\n          isOctal = false;\n          this.index++;\n        } else if ((0, _utils.isIdentifierPart)(ch.charCodeAt(0))) {\n          throw this.createILLEGAL();\n        } else {\n          break;\n        }\n      }\n\n      var slice = this.getSlice(start, startLocation);\n      if (!isOctal) {\n        this.eatDecimalLiteralSuffix();\n        return {\n          type: TokenType.NUMBER,\n          slice: slice,\n          value: +slice.text,\n          octal: true,\n          noctal: !isOctal\n        };\n      }\n\n      return {\n        type: TokenType.NUMBER,\n        slice: slice,\n        value: parseInt(slice.text.substr(1), 8),\n        octal: true,\n        noctal: !isOctal\n      };\n    }\n  }, {\n    key: 'scanNumericLiteral',\n    value: function scanNumericLiteral() {\n      var ch = this.source.charAt(this.index);\n      // assert(ch === \".\" || \"0\" <= ch && ch <= \"9\")\n      var startLocation = this.getLocation();\n      var start = this.index;\n\n      if (ch === '0') {\n        this.index++;\n        if (this.index < this.source.length) {\n          ch = this.source.charAt(this.index);\n          if (ch === 'x' || ch === 'X') {\n            this.index++;\n            return this.scanHexLiteral(start, startLocation);\n          } else if (ch === 'b' || ch === 'B') {\n            this.index++;\n            return this.scanBinaryLiteral(start, startLocation);\n          } else if (ch === 'o' || ch === 'O') {\n            this.index++;\n            return this.scanOctalLiteral(start, startLocation);\n          } else if (ch >= '0' && ch <= '9') {\n            return this.scanLegacyOctalLiteral(start, startLocation);\n          }\n        } else {\n          var _slice = this.getSlice(start, startLocation);\n          return {\n            type: TokenType.NUMBER,\n            value: +_slice.text,\n            slice: _slice,\n            octal: false,\n            noctal: false\n          };\n        }\n      } else if (ch !== '.') {\n        // Must be \"1\"..\"9\"\n        ch = this.source.charAt(this.index);\n        while (ch >= '0' && ch <= '9') {\n          this.index++;\n          if (this.index === this.source.length) {\n            var _slice2 = this.getSlice(start, startLocation);\n            return {\n              type: TokenType.NUMBER,\n              value: +_slice2.text,\n              slice: _slice2,\n              octal: false,\n              noctal: false\n            };\n          }\n          ch = this.source.charAt(this.index);\n        }\n      }\n\n      this.eatDecimalLiteralSuffix();\n\n      if (this.index !== this.source.length && (0, _utils.isIdentifierStart)(this.source.charCodeAt(this.index))) {\n        throw this.createILLEGAL();\n      }\n\n      var slice = this.getSlice(start, startLocation);\n      return {\n        type: TokenType.NUMBER,\n        value: +slice.text,\n        slice: slice,\n        octal: false,\n        noctal: false\n      };\n    }\n  }, {\n    key: 'eatDecimalLiteralSuffix',\n    value: function eatDecimalLiteralSuffix() {\n      var ch = this.source.charAt(this.index);\n      if (ch === '.') {\n        this.index++;\n        if (this.index === this.source.length) {\n          return;\n        }\n\n        ch = this.source.charAt(this.index);\n        while (ch >= '0' && ch <= '9') {\n          this.index++;\n          if (this.index === this.source.length) {\n            return;\n          }\n          ch = this.source.charAt(this.index);\n        }\n      }\n\n      // EOF not reached here\n      if (ch === 'e' || ch === 'E') {\n        this.index++;\n        if (this.index === this.source.length) {\n          throw this.createILLEGAL();\n        }\n\n        ch = this.source.charAt(this.index);\n        if (ch === '+' || ch === '-') {\n          this.index++;\n          if (this.index === this.source.length) {\n            throw this.createILLEGAL();\n          }\n          ch = this.source.charAt(this.index);\n        }\n\n        if (ch >= '0' && ch <= '9') {\n          while (ch >= '0' && ch <= '9') {\n            this.index++;\n            if (this.index === this.source.length) {\n              break;\n            }\n            ch = this.source.charAt(this.index);\n          }\n        } else {\n          throw this.createILLEGAL();\n        }\n      }\n    }\n  }, {\n    key: 'scanStringEscape',\n    value: function scanStringEscape(str, octal) {\n      this.index++;\n      if (this.index === this.source.length) {\n        throw this.createILLEGAL();\n      }\n      var ch = this.source.charAt(this.index);\n      if ((0, _utils.isLineTerminator)(ch.charCodeAt(0))) {\n        this.index++;\n        if (ch === '\\r' && this.source.charAt(this.index) === '\\n') {\n          this.index++;\n        }\n        this.lineStart = this.index;\n        this.line++;\n      } else {\n        switch (ch) {\n          case 'n':\n            str += '\\n';\n            this.index++;\n            break;\n          case 'r':\n            str += '\\r';\n            this.index++;\n            break;\n          case 't':\n            str += '\\t';\n            this.index++;\n            break;\n          case 'u':\n          case 'x':\n            {\n              var unescaped = void 0;\n              this.index++;\n              if (this.index >= this.source.length) {\n                throw this.createILLEGAL();\n              }\n              unescaped = ch === 'u' ? this.scanUnicode() : this.scanHexEscape2();\n              if (unescaped < 0) {\n                throw this.createILLEGAL();\n              }\n              str += fromCodePoint(unescaped);\n              break;\n            }\n          case 'b':\n            str += '\\b';\n            this.index++;\n            break;\n          case 'f':\n            str += '\\f';\n            this.index++;\n            break;\n          case 'v':\n            str += '\\x0B';\n            this.index++;\n            break;\n          default:\n            if (ch >= '0' && ch <= '7') {\n              var octalStart = this.index;\n              var octLen = 1;\n              // 3 digits are only allowed when string starts\n              // with 0, 1, 2, 3\n              if (ch >= '0' && ch <= '3') {\n                octLen = 0;\n              }\n              var code = 0;\n              while (octLen < 3 && ch >= '0' && ch <= '7') {\n                this.index++;\n                if (octLen > 0 || ch !== '0') {\n                  octal = this.source.slice(octalStart, this.index);\n                }\n                code *= 8;\n                code += ch - '0';\n                octLen++;\n                if (this.index === this.source.length) {\n                  throw this.createILLEGAL();\n                }\n                ch = this.source.charAt(this.index);\n              }\n              if (code === 0 && octLen === 1 && (ch === '8' || ch === '9')) {\n                octal = this.source.slice(octalStart, this.index + 1);\n              }\n              str += String.fromCharCode(code);\n            } else if (ch === '8' || ch === '9') {\n              throw this.createILLEGAL();\n            } else {\n              str += ch;\n              this.index++;\n            }\n        }\n      }\n      return [str, octal];\n    }\n    // 7.8.4 String Literals\n\n  }, {\n    key: 'scanStringLiteral',\n    value: function scanStringLiteral() {\n      var str = '';\n\n      var quote = this.source.charAt(this.index);\n      //  assert((quote === \"\\\"\" || quote === \"\"\"), \"String literal must starts with a quote\")\n\n      var startLocation = this.getLocation();\n      var start = this.index;\n      this.index++;\n\n      var octal = null;\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        if (ch === quote) {\n          this.index++;\n          return { type: TokenType.STRING, slice: this.getSlice(start, startLocation), str: str, octal: octal };\n        } else if (ch === '\\\\') {\n          var _scanStringEscape = this.scanStringEscape(str, octal);\n\n          var _scanStringEscape2 = _slicedToArray(_scanStringEscape, 2);\n\n          str = _scanStringEscape2[0];\n          octal = _scanStringEscape2[1];\n        } else if ((0, _utils.isLineTerminator)(ch.charCodeAt(0))) {\n          throw this.createILLEGAL();\n        } else {\n          str += ch;\n          this.index++;\n        }\n      }\n\n      throw this.createILLEGAL();\n    }\n  }, {\n    key: 'scanTemplateElement',\n    value: function scanTemplateElement() {\n      var startLocation = this.getLocation();\n      var start = this.index;\n      this.index++;\n      while (this.index < this.source.length) {\n        var ch = this.source.charCodeAt(this.index);\n        switch (ch) {\n          case 0x60:\n            {\n              // `\n              this.index++;\n              return { type: TokenType.TEMPLATE, tail: true, slice: this.getSlice(start, startLocation) };\n            }\n          case 0x24:\n            {\n              // $\n              if (this.source.charCodeAt(this.index + 1) === 0x7B) {\n                // {\n                this.index += 2;\n                return { type: TokenType.TEMPLATE, tail: false, slice: this.getSlice(start, startLocation) };\n              }\n              this.index++;\n              break;\n            }\n          case 0x5C:\n            {\n              // \\\\\n              var octal = this.scanStringEscape('', null)[1];\n              if (octal != null) {\n                throw this.createError(_errors.ErrorMessages.NO_OCTALS_IN_TEMPLATES);\n              }\n              break;\n            }\n          case 0x0D:\n            {\n              // \\r\n              this.line++;\n              this.index++;\n              if (this.index < this.source.length && this.source.charAt(this.index) === '\\n') {\n                this.index++;\n              }\n              this.lineStart = this.index;\n              break;\n            }\n          case 0x0A: // \\r\n          case 0x2028:\n          case 0x2029:\n            {\n              this.line++;\n              this.index++;\n              this.lineStart = this.index;\n              break;\n            }\n          default:\n            this.index++;\n        }\n      }\n\n      throw this.createILLEGAL();\n    }\n  }, {\n    key: 'scanRegExp',\n    value: function scanRegExp(str) {\n      var startLocation = this.getLocation();\n      var start = this.index;\n\n      var terminated = false;\n      var classMarker = false;\n      while (this.index < this.source.length) {\n        var ch = this.source.charAt(this.index);\n        if (ch === '\\\\') {\n          str += ch;\n          this.index++;\n          ch = this.source.charAt(this.index);\n          // ECMA-262 7.8.5\n          if ((0, _utils.isLineTerminator)(ch.charCodeAt(0))) {\n            throw this.createError(_errors.ErrorMessages.UNTERMINATED_REGEXP);\n          }\n          str += ch;\n          this.index++;\n        } else if ((0, _utils.isLineTerminator)(ch.charCodeAt(0))) {\n          throw this.createError(_errors.ErrorMessages.UNTERMINATED_REGEXP);\n        } else {\n          if (classMarker) {\n            if (ch === ']') {\n              classMarker = false;\n            }\n          } else if (ch === '/') {\n            terminated = true;\n            str += ch;\n            this.index++;\n            break;\n          } else if (ch === '[') {\n            classMarker = true;\n          }\n          str += ch;\n          this.index++;\n        }\n      }\n\n      if (!terminated) {\n        throw this.createError(_errors.ErrorMessages.UNTERMINATED_REGEXP);\n      }\n\n      while (this.index < this.source.length) {\n        var _ch3 = this.source.charAt(this.index);\n        if (_ch3 === '\\\\') {\n          throw this.createError(_errors.ErrorMessages.INVALID_REGEXP_FLAGS);\n        }\n        if (!(0, _utils.isIdentifierPart)(_ch3.charCodeAt(0))) {\n          break;\n        }\n        this.index++;\n        str += _ch3;\n      }\n      return { type: TokenType.REGEXP, value: str, slice: this.getSlice(start, startLocation) };\n    }\n  }, {\n    key: 'advance',\n    value: function advance() {\n      var startLocation = this.getLocation();\n\n      this.lastIndex = this.index;\n      this.lastLine = this.line;\n      this.lastLineStart = this.lineStart;\n\n      this.skipComment();\n\n      this.startIndex = this.index;\n      this.startLine = this.line;\n      this.startLineStart = this.lineStart;\n\n      if (this.lastIndex === 0) {\n        this.lastIndex = this.index;\n        this.lastLine = this.line;\n        this.lastLineStart = this.lineStart;\n      }\n\n      if (this.index >= this.source.length) {\n        return { type: TokenType.EOS, slice: this.getSlice(this.index, startLocation) };\n      }\n\n      var charCode = this.source.charCodeAt(this.index);\n\n      if (charCode < 0x80) {\n        if (PUNCTUATOR_START[charCode]) {\n          return this.scanPunctuator();\n        }\n\n        if ((0, _utils.isIdentifierStart)(charCode) || charCode === 0x5C /* backslash (\\) */) {\n            return this.scanIdentifier();\n          }\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (charCode === 0x2E) {\n          if (this.index + 1 < this.source.length && (0, _utils.isDecimalDigit)(this.source.charCodeAt(this.index + 1))) {\n            return this.scanNumericLiteral();\n          }\n          return this.scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (charCode === 0x27 || charCode === 0x22) {\n          return this.scanStringLiteral();\n        }\n\n        // Template literal starts with back quote (U+0060)\n        if (charCode === 0x60) {\n          return this.scanTemplateElement();\n        }\n\n        if (charCode /* \"0\" */ >= 0x30 && charCode <= 0x39 /* \"9\" */) {\n            return this.scanNumericLiteral();\n          }\n\n        // Slash (/) U+002F can also start a regex.\n        throw this.createILLEGAL();\n      } else {\n        if ((0, _utils.isIdentifierStart)(charCode) || charCode >= 0xD800 && charCode <= 0xDBFF) {\n          return this.scanIdentifier();\n        }\n\n        throw this.createILLEGAL();\n      }\n    }\n  }, {\n    key: 'eof',\n    value: function eof() {\n      return this.lookahead.type === TokenType.EOS;\n    }\n  }, {\n    key: 'lex',\n    value: function lex() {\n      var prevToken = this.lookahead;\n      this.lookahead = this.advance();\n      this.tokenIndex++;\n      return prevToken;\n    }\n  }], [{\n    key: 'cse2',\n    value: function cse2(id, ch1, ch2) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2;\n    }\n  }, {\n    key: 'cse3',\n    value: function cse3(id, ch1, ch2, ch3) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3;\n    }\n  }, {\n    key: 'cse4',\n    value: function cse4(id, ch1, ch2, ch3, ch4) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4;\n    }\n  }, {\n    key: 'cse5',\n    value: function cse5(id, ch1, ch2, ch3, ch4, ch5) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5;\n    }\n  }, {\n    key: 'cse6',\n    value: function cse6(id, ch1, ch2, ch3, ch4, ch5, ch6) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5 && id.charAt(6) === ch6;\n    }\n  }, {\n    key: 'cse7',\n    value: function cse7(id, ch1, ch2, ch3, ch4, ch5, ch6, ch7) {\n      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5 && id.charAt(6) === ch6 && id.charAt(7) === ch7;\n    }\n  }]);\n\n  return Tokenizer;\n}();\n\nexports.default = Tokenizer;\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/tokenizer.js?")},"./node_modules/shift-parser/dist/unicode.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n// Generated by scripts/generate-unicode-data.js\n\nvar whitespaceArray = exports.whitespaceArray = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];\nvar whitespaceBool = exports.whitespaceBool = [false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];\n\nvar idStartLargeRegex = exports.idStartLargeRegex = /^[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]$/;\nvar idStartBool = exports.idStartBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];\n\nvar idContinueLargeRegex = exports.idContinueLargeRegex = /^[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]$/;\nvar idContinueBool = exports.idContinueBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/unicode.js?')},"./node_modules/shift-parser/dist/utils.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isStrictModeReservedWord = isStrictModeReservedWord;\nexports.isWhiteSpace = isWhiteSpace;\nexports.isLineTerminator = isLineTerminator;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierPart = isIdentifierPart;\nexports.isDecimalDigit = isDecimalDigit;\nexports.getHexValue = getHexValue;\n\nvar _unicode = __webpack_require__(\"./node_modules/shift-parser/dist/unicode.js\");\n\nvar strictReservedWords = ['null', 'true', 'false', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'let', 'if', 'in', 'do', 'var', 'for', 'new', 'try', 'this', 'else', 'case', 'void', 'with', 'enum', 'while', 'break', 'catch', 'throw', 'const', 'yield', 'class', 'super', 'return', 'typeof', 'delete', 'switch', 'export', 'import', 'default', 'finally', 'extends', 'function', 'continue', 'debugger', 'instanceof']; /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Copyright 2017 Shape Security, Inc.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Licensed under the Apache License, Version 2.0 (the \"License\")\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * you may not use this file except in compliance with the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * You may obtain a copy of the License at\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *     http://www.apache.org/licenses/LICENSE-2.0\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Unless required by applicable law or agreed to in writing, software\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * distributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * See the License for the specific language governing permissions and\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * limitations under the License.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    */\n\nfunction isStrictModeReservedWord(id) {\n  return strictReservedWords.indexOf(id) !== -1;\n}\n\nfunction isWhiteSpace(ch) {\n  return ch < 128 ? _unicode.whitespaceBool[ch] : ch === 0xA0 || ch > 0x167F && _unicode.whitespaceArray.indexOf(ch) !== -1;\n}\n\nfunction isLineTerminator(ch) {\n  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\n}\n\nfunction isIdentifierStart(ch) {\n  return ch < 128 ? _unicode.idStartBool[ch] : _unicode.idStartLargeRegex.test(String.fromCodePoint(ch));\n}\n\nfunction isIdentifierPart(ch) {\n  return ch < 128 ? _unicode.idContinueBool[ch] : _unicode.idContinueLargeRegex.test(String.fromCodePoint(ch));\n}\n\nfunction isDecimalDigit(ch) {\n  return ch >= 48 && ch <= 57;\n}\n\nfunction getHexValue(rune) {\n  if (rune >= '0' && rune <= '9') {\n    return rune.charCodeAt(0) - 48;\n  }\n  if (rune >= 'a' && rune <= 'f') {\n    return rune.charCodeAt(0) - 87;\n  }\n  if (rune >= 'A' && rune <= 'F') {\n    return rune.charCodeAt(0) - 55;\n  }\n  return -1;\n}\n\n//# sourceURL=webpack:///./node_modules/shift-parser/dist/utils.js?")},"./node_modules/shift-reducer/dist/adapt.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; // Generated by generate-adapt.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar Shift = _interopRequireWildcard(_shiftAst);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.default = function (fn, reducer) {\n  var _obj;\n\n  return _obj = {\n    __proto__: reducer,\n\n    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayAssignmentTarget', this).call(this, node, data), node);\n    },\n    reduceArrayBinding: function reduceArrayBinding(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayBinding', this).call(this, node, data), node);\n    },\n    reduceArrayExpression: function reduceArrayExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayExpression', this).call(this, node, data), node);\n    },\n    reduceArrowExpression: function reduceArrowExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrowExpression', this).call(this, node, data), node);\n    },\n    reduceAssignmentExpression: function reduceAssignmentExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentExpression', this).call(this, node, data), node);\n    },\n    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetIdentifier', this).call(this, node, data), node);\n    },\n    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetPropertyIdentifier', this).call(this, node, data), node);\n    },\n    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetPropertyProperty', this).call(this, node, data), node);\n    },\n    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetWithDefault', this).call(this, node, data), node);\n    },\n    reduceAwaitExpression: function reduceAwaitExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAwaitExpression', this).call(this, node, data), node);\n    },\n    reduceBinaryExpression: function reduceBinaryExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBinaryExpression', this).call(this, node, data), node);\n    },\n    reduceBindingIdentifier: function reduceBindingIdentifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingIdentifier', this).call(this, node, data), node);\n    },\n    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingPropertyIdentifier', this).call(this, node, data), node);\n    },\n    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingPropertyProperty', this).call(this, node, data), node);\n    },\n    reduceBindingWithDefault: function reduceBindingWithDefault(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingWithDefault', this).call(this, node, data), node);\n    },\n    reduceBlock: function reduceBlock(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBlock', this).call(this, node, data), node);\n    },\n    reduceBlockStatement: function reduceBlockStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBlockStatement', this).call(this, node, data), node);\n    },\n    reduceBreakStatement: function reduceBreakStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBreakStatement', this).call(this, node, data), node);\n    },\n    reduceCallExpression: function reduceCallExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCallExpression', this).call(this, node, data), node);\n    },\n    reduceCatchClause: function reduceCatchClause(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCatchClause', this).call(this, node, data), node);\n    },\n    reduceClassDeclaration: function reduceClassDeclaration(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassDeclaration', this).call(this, node, data), node);\n    },\n    reduceClassElement: function reduceClassElement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassElement', this).call(this, node, data), node);\n    },\n    reduceClassExpression: function reduceClassExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassExpression', this).call(this, node, data), node);\n    },\n    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCompoundAssignmentExpression', this).call(this, node, data), node);\n    },\n    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedMemberAssignmentTarget', this).call(this, node, data), node);\n    },\n    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedMemberExpression', this).call(this, node, data), node);\n    },\n    reduceComputedPropertyName: function reduceComputedPropertyName(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedPropertyName', this).call(this, node, data), node);\n    },\n    reduceConditionalExpression: function reduceConditionalExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceConditionalExpression', this).call(this, node, data), node);\n    },\n    reduceContinueStatement: function reduceContinueStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceContinueStatement', this).call(this, node, data), node);\n    },\n    reduceDataProperty: function reduceDataProperty(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDataProperty', this).call(this, node, data), node);\n    },\n    reduceDebuggerStatement: function reduceDebuggerStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDebuggerStatement', this).call(this, node, data), node);\n    },\n    reduceDirective: function reduceDirective(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDirective', this).call(this, node, data), node);\n    },\n    reduceDoWhileStatement: function reduceDoWhileStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDoWhileStatement', this).call(this, node, data), node);\n    },\n    reduceEmptyStatement: function reduceEmptyStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceEmptyStatement', this).call(this, node, data), node);\n    },\n    reduceExport: function reduceExport(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExport', this).call(this, node, data), node);\n    },\n    reduceExportAllFrom: function reduceExportAllFrom(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportAllFrom', this).call(this, node, data), node);\n    },\n    reduceExportDefault: function reduceExportDefault(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportDefault', this).call(this, node, data), node);\n    },\n    reduceExportFrom: function reduceExportFrom(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportFrom', this).call(this, node, data), node);\n    },\n    reduceExportFromSpecifier: function reduceExportFromSpecifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportFromSpecifier', this).call(this, node, data), node);\n    },\n    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportLocalSpecifier', this).call(this, node, data), node);\n    },\n    reduceExportLocals: function reduceExportLocals(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportLocals', this).call(this, node, data), node);\n    },\n    reduceExpressionStatement: function reduceExpressionStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExpressionStatement', this).call(this, node, data), node);\n    },\n    reduceForAwaitStatement: function reduceForAwaitStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForAwaitStatement', this).call(this, node, data), node);\n    },\n    reduceForInStatement: function reduceForInStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForInStatement', this).call(this, node, data), node);\n    },\n    reduceForOfStatement: function reduceForOfStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForOfStatement', this).call(this, node, data), node);\n    },\n    reduceForStatement: function reduceForStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForStatement', this).call(this, node, data), node);\n    },\n    reduceFormalParameters: function reduceFormalParameters(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFormalParameters', this).call(this, node, data), node);\n    },\n    reduceFunctionBody: function reduceFunctionBody(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionBody', this).call(this, node, data), node);\n    },\n    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionDeclaration', this).call(this, node, data), node);\n    },\n    reduceFunctionExpression: function reduceFunctionExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionExpression', this).call(this, node, data), node);\n    },\n    reduceGetter: function reduceGetter(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceGetter', this).call(this, node, data), node);\n    },\n    reduceIdentifierExpression: function reduceIdentifierExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceIdentifierExpression', this).call(this, node, data), node);\n    },\n    reduceIfStatement: function reduceIfStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceIfStatement', this).call(this, node, data), node);\n    },\n    reduceImport: function reduceImport(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImport', this).call(this, node, data), node);\n    },\n    reduceImportNamespace: function reduceImportNamespace(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImportNamespace', this).call(this, node, data), node);\n    },\n    reduceImportSpecifier: function reduceImportSpecifier(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImportSpecifier', this).call(this, node, data), node);\n    },\n    reduceLabeledStatement: function reduceLabeledStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLabeledStatement', this).call(this, node, data), node);\n    },\n    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralBooleanExpression', this).call(this, node, data), node);\n    },\n    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralInfinityExpression', this).call(this, node, data), node);\n    },\n    reduceLiteralNullExpression: function reduceLiteralNullExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralNullExpression', this).call(this, node, data), node);\n    },\n    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralNumericExpression', this).call(this, node, data), node);\n    },\n    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralRegExpExpression', this).call(this, node, data), node);\n    },\n    reduceLiteralStringExpression: function reduceLiteralStringExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralStringExpression', this).call(this, node, data), node);\n    },\n    reduceMethod: function reduceMethod(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceMethod', this).call(this, node, data), node);\n    },\n    reduceModule: function reduceModule(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceModule', this).call(this, node, data), node);\n    },\n    reduceNewExpression: function reduceNewExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceNewExpression', this).call(this, node, data), node);\n    },\n    reduceNewTargetExpression: function reduceNewTargetExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceNewTargetExpression', this).call(this, node, data), node);\n    },\n    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectAssignmentTarget', this).call(this, node, data), node);\n    },\n    reduceObjectBinding: function reduceObjectBinding(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectBinding', this).call(this, node, data), node);\n    },\n    reduceObjectExpression: function reduceObjectExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectExpression', this).call(this, node, data), node);\n    },\n    reduceReturnStatement: function reduceReturnStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceReturnStatement', this).call(this, node, data), node);\n    },\n    reduceScript: function reduceScript(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceScript', this).call(this, node, data), node);\n    },\n    reduceSetter: function reduceSetter(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSetter', this).call(this, node, data), node);\n    },\n    reduceShorthandProperty: function reduceShorthandProperty(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceShorthandProperty', this).call(this, node, data), node);\n    },\n    reduceSpreadElement: function reduceSpreadElement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSpreadElement', this).call(this, node, data), node);\n    },\n    reduceSpreadProperty: function reduceSpreadProperty(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSpreadProperty', this).call(this, node, data), node);\n    },\n    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticMemberAssignmentTarget', this).call(this, node, data), node);\n    },\n    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticMemberExpression', this).call(this, node, data), node);\n    },\n    reduceStaticPropertyName: function reduceStaticPropertyName(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticPropertyName', this).call(this, node, data), node);\n    },\n    reduceSuper: function reduceSuper(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSuper', this).call(this, node, data), node);\n    },\n    reduceSwitchCase: function reduceSwitchCase(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchCase', this).call(this, node, data), node);\n    },\n    reduceSwitchDefault: function reduceSwitchDefault(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchDefault', this).call(this, node, data), node);\n    },\n    reduceSwitchStatement: function reduceSwitchStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchStatement', this).call(this, node, data), node);\n    },\n    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchStatementWithDefault', this).call(this, node, data), node);\n    },\n    reduceTemplateElement: function reduceTemplateElement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTemplateElement', this).call(this, node, data), node);\n    },\n    reduceTemplateExpression: function reduceTemplateExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTemplateExpression', this).call(this, node, data), node);\n    },\n    reduceThisExpression: function reduceThisExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceThisExpression', this).call(this, node, data), node);\n    },\n    reduceThrowStatement: function reduceThrowStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceThrowStatement', this).call(this, node, data), node);\n    },\n    reduceTryCatchStatement: function reduceTryCatchStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTryCatchStatement', this).call(this, node, data), node);\n    },\n    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTryFinallyStatement', this).call(this, node, data), node);\n    },\n    reduceUnaryExpression: function reduceUnaryExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceUnaryExpression', this).call(this, node, data), node);\n    },\n    reduceUpdateExpression: function reduceUpdateExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceUpdateExpression', this).call(this, node, data), node);\n    },\n    reduceVariableDeclaration: function reduceVariableDeclaration(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclaration', this).call(this, node, data), node);\n    },\n    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclarationStatement', this).call(this, node, data), node);\n    },\n    reduceVariableDeclarator: function reduceVariableDeclarator(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclarator', this).call(this, node, data), node);\n    },\n    reduceWhileStatement: function reduceWhileStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceWhileStatement', this).call(this, node, data), node);\n    },\n    reduceWithStatement: function reduceWithStatement(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceWithStatement', this).call(this, node, data), node);\n    },\n    reduceYieldExpression: function reduceYieldExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceYieldExpression', this).call(this, node, data), node);\n    },\n    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, data) {\n      return fn(_get(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceYieldGeneratorExpression', this).call(this, node, data), node);\n    }\n  };\n};\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/adapt.js?")},"./node_modules/shift-reducer/dist/clone-reducer.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar Shift = _interopRequireWildcard(_shiftAst);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CloneReducer = function () {\n  function CloneReducer() {\n    _classCallCheck(this, CloneReducer);\n  }\n\n  _createClass(CloneReducer, [{\n    key: 'reduceArrayAssignmentTarget',\n    value: function reduceArrayAssignmentTarget(node, _ref) {\n      var elements = _ref.elements,\n          rest = _ref.rest;\n\n      return new Shift.ArrayAssignmentTarget({ elements: elements, rest: rest });\n    }\n  }, {\n    key: 'reduceArrayBinding',\n    value: function reduceArrayBinding(node, _ref2) {\n      var elements = _ref2.elements,\n          rest = _ref2.rest;\n\n      return new Shift.ArrayBinding({ elements: elements, rest: rest });\n    }\n  }, {\n    key: 'reduceArrayExpression',\n    value: function reduceArrayExpression(node, _ref3) {\n      var elements = _ref3.elements;\n\n      return new Shift.ArrayExpression({ elements: elements });\n    }\n  }, {\n    key: 'reduceArrowExpression',\n    value: function reduceArrowExpression(node, _ref4) {\n      var params = _ref4.params,\n          body = _ref4.body;\n\n      return new Shift.ArrowExpression({ isAsync: node.isAsync, params: params, body: body });\n    }\n  }, {\n    key: 'reduceAssignmentExpression',\n    value: function reduceAssignmentExpression(node, _ref5) {\n      var binding = _ref5.binding,\n          expression = _ref5.expression;\n\n      return new Shift.AssignmentExpression({ binding: binding, expression: expression });\n    }\n  }, {\n    key: 'reduceAssignmentTargetIdentifier',\n    value: function reduceAssignmentTargetIdentifier(node) {\n      return new Shift.AssignmentTargetIdentifier({ name: node.name });\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyIdentifier',\n    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n      var binding = _ref6.binding,\n          init = _ref6.init;\n\n      return new Shift.AssignmentTargetPropertyIdentifier({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyProperty',\n    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n      var name = _ref7.name,\n          binding = _ref7.binding;\n\n      return new Shift.AssignmentTargetPropertyProperty({ name: name, binding: binding });\n    }\n  }, {\n    key: 'reduceAssignmentTargetWithDefault',\n    value: function reduceAssignmentTargetWithDefault(node, _ref8) {\n      var binding = _ref8.binding,\n          init = _ref8.init;\n\n      return new Shift.AssignmentTargetWithDefault({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceAwaitExpression',\n    value: function reduceAwaitExpression(node, _ref9) {\n      var expression = _ref9.expression;\n\n      return new Shift.AwaitExpression({ expression: expression });\n    }\n  }, {\n    key: 'reduceBinaryExpression',\n    value: function reduceBinaryExpression(node, _ref10) {\n      var left = _ref10.left,\n          right = _ref10.right;\n\n      return new Shift.BinaryExpression({ left: left, operator: node.operator, right: right });\n    }\n  }, {\n    key: 'reduceBindingIdentifier',\n    value: function reduceBindingIdentifier(node) {\n      return new Shift.BindingIdentifier({ name: node.name });\n    }\n  }, {\n    key: 'reduceBindingPropertyIdentifier',\n    value: function reduceBindingPropertyIdentifier(node, _ref11) {\n      var binding = _ref11.binding,\n          init = _ref11.init;\n\n      return new Shift.BindingPropertyIdentifier({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceBindingPropertyProperty',\n    value: function reduceBindingPropertyProperty(node, _ref12) {\n      var name = _ref12.name,\n          binding = _ref12.binding;\n\n      return new Shift.BindingPropertyProperty({ name: name, binding: binding });\n    }\n  }, {\n    key: 'reduceBindingWithDefault',\n    value: function reduceBindingWithDefault(node, _ref13) {\n      var binding = _ref13.binding,\n          init = _ref13.init;\n\n      return new Shift.BindingWithDefault({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceBlock',\n    value: function reduceBlock(node, _ref14) {\n      var statements = _ref14.statements;\n\n      return new Shift.Block({ statements: statements });\n    }\n  }, {\n    key: 'reduceBlockStatement',\n    value: function reduceBlockStatement(node, _ref15) {\n      var block = _ref15.block;\n\n      return new Shift.BlockStatement({ block: block });\n    }\n  }, {\n    key: 'reduceBreakStatement',\n    value: function reduceBreakStatement(node) {\n      return new Shift.BreakStatement({ label: node.label });\n    }\n  }, {\n    key: 'reduceCallExpression',\n    value: function reduceCallExpression(node, _ref16) {\n      var callee = _ref16.callee,\n          _arguments = _ref16.arguments;\n\n      return new Shift.CallExpression({ callee: callee, arguments: _arguments });\n    }\n  }, {\n    key: 'reduceCatchClause',\n    value: function reduceCatchClause(node, _ref17) {\n      var binding = _ref17.binding,\n          body = _ref17.body;\n\n      return new Shift.CatchClause({ binding: binding, body: body });\n    }\n  }, {\n    key: 'reduceClassDeclaration',\n    value: function reduceClassDeclaration(node, _ref18) {\n      var name = _ref18.name,\n          _super = _ref18.super,\n          elements = _ref18.elements;\n\n      return new Shift.ClassDeclaration({ name: name, super: _super, elements: elements });\n    }\n  }, {\n    key: 'reduceClassElement',\n    value: function reduceClassElement(node, _ref19) {\n      var method = _ref19.method;\n\n      return new Shift.ClassElement({ isStatic: node.isStatic, method: method });\n    }\n  }, {\n    key: 'reduceClassExpression',\n    value: function reduceClassExpression(node, _ref20) {\n      var name = _ref20.name,\n          _super = _ref20.super,\n          elements = _ref20.elements;\n\n      return new Shift.ClassExpression({ name: name, super: _super, elements: elements });\n    }\n  }, {\n    key: 'reduceCompoundAssignmentExpression',\n    value: function reduceCompoundAssignmentExpression(node, _ref21) {\n      var binding = _ref21.binding,\n          expression = _ref21.expression;\n\n      return new Shift.CompoundAssignmentExpression({ binding: binding, operator: node.operator, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedMemberAssignmentTarget',\n    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n      var object = _ref22.object,\n          expression = _ref22.expression;\n\n      return new Shift.ComputedMemberAssignmentTarget({ object: object, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedMemberExpression',\n    value: function reduceComputedMemberExpression(node, _ref23) {\n      var object = _ref23.object,\n          expression = _ref23.expression;\n\n      return new Shift.ComputedMemberExpression({ object: object, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedPropertyName',\n    value: function reduceComputedPropertyName(node, _ref24) {\n      var expression = _ref24.expression;\n\n      return new Shift.ComputedPropertyName({ expression: expression });\n    }\n  }, {\n    key: 'reduceConditionalExpression',\n    value: function reduceConditionalExpression(node, _ref25) {\n      var test = _ref25.test,\n          consequent = _ref25.consequent,\n          alternate = _ref25.alternate;\n\n      return new Shift.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'reduceContinueStatement',\n    value: function reduceContinueStatement(node) {\n      return new Shift.ContinueStatement({ label: node.label });\n    }\n  }, {\n    key: 'reduceDataProperty',\n    value: function reduceDataProperty(node, _ref26) {\n      var name = _ref26.name,\n          expression = _ref26.expression;\n\n      return new Shift.DataProperty({ name: name, expression: expression });\n    }\n  }, {\n    key: 'reduceDebuggerStatement',\n    value: function reduceDebuggerStatement(node) {\n      return new Shift.DebuggerStatement();\n    }\n  }, {\n    key: 'reduceDirective',\n    value: function reduceDirective(node) {\n      return new Shift.Directive({ rawValue: node.rawValue });\n    }\n  }, {\n    key: 'reduceDoWhileStatement',\n    value: function reduceDoWhileStatement(node, _ref27) {\n      var body = _ref27.body,\n          test = _ref27.test;\n\n      return new Shift.DoWhileStatement({ body: body, test: test });\n    }\n  }, {\n    key: 'reduceEmptyStatement',\n    value: function reduceEmptyStatement(node) {\n      return new Shift.EmptyStatement();\n    }\n  }, {\n    key: 'reduceExport',\n    value: function reduceExport(node, _ref28) {\n      var declaration = _ref28.declaration;\n\n      return new Shift.Export({ declaration: declaration });\n    }\n  }, {\n    key: 'reduceExportAllFrom',\n    value: function reduceExportAllFrom(node) {\n      return new Shift.ExportAllFrom({ moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceExportDefault',\n    value: function reduceExportDefault(node, _ref29) {\n      var body = _ref29.body;\n\n      return new Shift.ExportDefault({ body: body });\n    }\n  }, {\n    key: 'reduceExportFrom',\n    value: function reduceExportFrom(node, _ref30) {\n      var namedExports = _ref30.namedExports;\n\n      return new Shift.ExportFrom({ namedExports: namedExports, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceExportFromSpecifier',\n    value: function reduceExportFromSpecifier(node) {\n      return new Shift.ExportFromSpecifier({ name: node.name, exportedName: node.exportedName });\n    }\n  }, {\n    key: 'reduceExportLocalSpecifier',\n    value: function reduceExportLocalSpecifier(node, _ref31) {\n      var name = _ref31.name;\n\n      return new Shift.ExportLocalSpecifier({ name: name, exportedName: node.exportedName });\n    }\n  }, {\n    key: 'reduceExportLocals',\n    value: function reduceExportLocals(node, _ref32) {\n      var namedExports = _ref32.namedExports;\n\n      return new Shift.ExportLocals({ namedExports: namedExports });\n    }\n  }, {\n    key: 'reduceExpressionStatement',\n    value: function reduceExpressionStatement(node, _ref33) {\n      var expression = _ref33.expression;\n\n      return new Shift.ExpressionStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceForAwaitStatement',\n    value: function reduceForAwaitStatement(node, _ref34) {\n      var left = _ref34.left,\n          right = _ref34.right,\n          body = _ref34.body;\n\n      return new Shift.ForAwaitStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForInStatement',\n    value: function reduceForInStatement(node, _ref35) {\n      var left = _ref35.left,\n          right = _ref35.right,\n          body = _ref35.body;\n\n      return new Shift.ForInStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForOfStatement',\n    value: function reduceForOfStatement(node, _ref36) {\n      var left = _ref36.left,\n          right = _ref36.right,\n          body = _ref36.body;\n\n      return new Shift.ForOfStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForStatement',\n    value: function reduceForStatement(node, _ref37) {\n      var init = _ref37.init,\n          test = _ref37.test,\n          update = _ref37.update,\n          body = _ref37.body;\n\n      return new Shift.ForStatement({ init: init, test: test, update: update, body: body });\n    }\n  }, {\n    key: 'reduceFormalParameters',\n    value: function reduceFormalParameters(node, _ref38) {\n      var items = _ref38.items,\n          rest = _ref38.rest;\n\n      return new Shift.FormalParameters({ items: items, rest: rest });\n    }\n  }, {\n    key: 'reduceFunctionBody',\n    value: function reduceFunctionBody(node, _ref39) {\n      var directives = _ref39.directives,\n          statements = _ref39.statements;\n\n      return new Shift.FunctionBody({ directives: directives, statements: statements });\n    }\n  }, {\n    key: 'reduceFunctionDeclaration',\n    value: function reduceFunctionDeclaration(node, _ref40) {\n      var name = _ref40.name,\n          params = _ref40.params,\n          body = _ref40.body;\n\n      return new Shift.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceFunctionExpression',\n    value: function reduceFunctionExpression(node, _ref41) {\n      var name = _ref41.name,\n          params = _ref41.params,\n          body = _ref41.body;\n\n      return new Shift.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceGetter',\n    value: function reduceGetter(node, _ref42) {\n      var name = _ref42.name,\n          body = _ref42.body;\n\n      return new Shift.Getter({ name: name, body: body });\n    }\n  }, {\n    key: 'reduceIdentifierExpression',\n    value: function reduceIdentifierExpression(node) {\n      return new Shift.IdentifierExpression({ name: node.name });\n    }\n  }, {\n    key: 'reduceIfStatement',\n    value: function reduceIfStatement(node, _ref43) {\n      var test = _ref43.test,\n          consequent = _ref43.consequent,\n          alternate = _ref43.alternate;\n\n      return new Shift.IfStatement({ test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'reduceImport',\n    value: function reduceImport(node, _ref44) {\n      var defaultBinding = _ref44.defaultBinding,\n          namedImports = _ref44.namedImports;\n\n      return new Shift.Import({ defaultBinding: defaultBinding, namedImports: namedImports, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceImportNamespace',\n    value: function reduceImportNamespace(node, _ref45) {\n      var defaultBinding = _ref45.defaultBinding,\n          namespaceBinding = _ref45.namespaceBinding;\n\n      return new Shift.ImportNamespace({ defaultBinding: defaultBinding, namespaceBinding: namespaceBinding, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceImportSpecifier',\n    value: function reduceImportSpecifier(node, _ref46) {\n      var binding = _ref46.binding;\n\n      return new Shift.ImportSpecifier({ name: node.name, binding: binding });\n    }\n  }, {\n    key: 'reduceLabeledStatement',\n    value: function reduceLabeledStatement(node, _ref47) {\n      var body = _ref47.body;\n\n      return new Shift.LabeledStatement({ label: node.label, body: body });\n    }\n  }, {\n    key: 'reduceLiteralBooleanExpression',\n    value: function reduceLiteralBooleanExpression(node) {\n      return new Shift.LiteralBooleanExpression({ value: node.value });\n    }\n  }, {\n    key: 'reduceLiteralInfinityExpression',\n    value: function reduceLiteralInfinityExpression(node) {\n      return new Shift.LiteralInfinityExpression();\n    }\n  }, {\n    key: 'reduceLiteralNullExpression',\n    value: function reduceLiteralNullExpression(node) {\n      return new Shift.LiteralNullExpression();\n    }\n  }, {\n    key: 'reduceLiteralNumericExpression',\n    value: function reduceLiteralNumericExpression(node) {\n      return new Shift.LiteralNumericExpression({ value: node.value });\n    }\n  }, {\n    key: 'reduceLiteralRegExpExpression',\n    value: function reduceLiteralRegExpExpression(node) {\n      return new Shift.LiteralRegExpExpression({ pattern: node.pattern, global: node.global, ignoreCase: node.ignoreCase, multiLine: node.multiLine, dotAll: node.dotAll, unicode: node.unicode, sticky: node.sticky });\n    }\n  }, {\n    key: 'reduceLiteralStringExpression',\n    value: function reduceLiteralStringExpression(node) {\n      return new Shift.LiteralStringExpression({ value: node.value });\n    }\n  }, {\n    key: 'reduceMethod',\n    value: function reduceMethod(node, _ref48) {\n      var name = _ref48.name,\n          params = _ref48.params,\n          body = _ref48.body;\n\n      return new Shift.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceModule',\n    value: function reduceModule(node, _ref49) {\n      var directives = _ref49.directives,\n          items = _ref49.items;\n\n      return new Shift.Module({ directives: directives, items: items });\n    }\n  }, {\n    key: 'reduceNewExpression',\n    value: function reduceNewExpression(node, _ref50) {\n      var callee = _ref50.callee,\n          _arguments = _ref50.arguments;\n\n      return new Shift.NewExpression({ callee: callee, arguments: _arguments });\n    }\n  }, {\n    key: 'reduceNewTargetExpression',\n    value: function reduceNewTargetExpression(node) {\n      return new Shift.NewTargetExpression();\n    }\n  }, {\n    key: 'reduceObjectAssignmentTarget',\n    value: function reduceObjectAssignmentTarget(node, _ref51) {\n      var properties = _ref51.properties,\n          rest = _ref51.rest;\n\n      return new Shift.ObjectAssignmentTarget({ properties: properties, rest: rest });\n    }\n  }, {\n    key: 'reduceObjectBinding',\n    value: function reduceObjectBinding(node, _ref52) {\n      var properties = _ref52.properties,\n          rest = _ref52.rest;\n\n      return new Shift.ObjectBinding({ properties: properties, rest: rest });\n    }\n  }, {\n    key: 'reduceObjectExpression',\n    value: function reduceObjectExpression(node, _ref53) {\n      var properties = _ref53.properties;\n\n      return new Shift.ObjectExpression({ properties: properties });\n    }\n  }, {\n    key: 'reduceReturnStatement',\n    value: function reduceReturnStatement(node, _ref54) {\n      var expression = _ref54.expression;\n\n      return new Shift.ReturnStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(node, _ref55) {\n      var directives = _ref55.directives,\n          statements = _ref55.statements;\n\n      return new Shift.Script({ directives: directives, statements: statements });\n    }\n  }, {\n    key: 'reduceSetter',\n    value: function reduceSetter(node, _ref56) {\n      var name = _ref56.name,\n          param = _ref56.param,\n          body = _ref56.body;\n\n      return new Shift.Setter({ name: name, param: param, body: body });\n    }\n  }, {\n    key: 'reduceShorthandProperty',\n    value: function reduceShorthandProperty(node, _ref57) {\n      var name = _ref57.name;\n\n      return new Shift.ShorthandProperty({ name: name });\n    }\n  }, {\n    key: 'reduceSpreadElement',\n    value: function reduceSpreadElement(node, _ref58) {\n      var expression = _ref58.expression;\n\n      return new Shift.SpreadElement({ expression: expression });\n    }\n  }, {\n    key: 'reduceSpreadProperty',\n    value: function reduceSpreadProperty(node, _ref59) {\n      var expression = _ref59.expression;\n\n      return new Shift.SpreadProperty({ expression: expression });\n    }\n  }, {\n    key: 'reduceStaticMemberAssignmentTarget',\n    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n      var object = _ref60.object;\n\n      return new Shift.StaticMemberAssignmentTarget({ object: object, property: node.property });\n    }\n  }, {\n    key: 'reduceStaticMemberExpression',\n    value: function reduceStaticMemberExpression(node, _ref61) {\n      var object = _ref61.object;\n\n      return new Shift.StaticMemberExpression({ object: object, property: node.property });\n    }\n  }, {\n    key: 'reduceStaticPropertyName',\n    value: function reduceStaticPropertyName(node) {\n      return new Shift.StaticPropertyName({ value: node.value });\n    }\n  }, {\n    key: 'reduceSuper',\n    value: function reduceSuper(node) {\n      return new Shift.Super();\n    }\n  }, {\n    key: 'reduceSwitchCase',\n    value: function reduceSwitchCase(node, _ref62) {\n      var test = _ref62.test,\n          consequent = _ref62.consequent;\n\n      return new Shift.SwitchCase({ test: test, consequent: consequent });\n    }\n  }, {\n    key: 'reduceSwitchDefault',\n    value: function reduceSwitchDefault(node, _ref63) {\n      var consequent = _ref63.consequent;\n\n      return new Shift.SwitchDefault({ consequent: consequent });\n    }\n  }, {\n    key: 'reduceSwitchStatement',\n    value: function reduceSwitchStatement(node, _ref64) {\n      var discriminant = _ref64.discriminant,\n          cases = _ref64.cases;\n\n      return new Shift.SwitchStatement({ discriminant: discriminant, cases: cases });\n    }\n  }, {\n    key: 'reduceSwitchStatementWithDefault',\n    value: function reduceSwitchStatementWithDefault(node, _ref65) {\n      var discriminant = _ref65.discriminant,\n          preDefaultCases = _ref65.preDefaultCases,\n          defaultCase = _ref65.defaultCase,\n          postDefaultCases = _ref65.postDefaultCases;\n\n      return new Shift.SwitchStatementWithDefault({ discriminant: discriminant, preDefaultCases: preDefaultCases, defaultCase: defaultCase, postDefaultCases: postDefaultCases });\n    }\n  }, {\n    key: 'reduceTemplateElement',\n    value: function reduceTemplateElement(node) {\n      return new Shift.TemplateElement({ rawValue: node.rawValue });\n    }\n  }, {\n    key: 'reduceTemplateExpression',\n    value: function reduceTemplateExpression(node, _ref66) {\n      var tag = _ref66.tag,\n          elements = _ref66.elements;\n\n      return new Shift.TemplateExpression({ tag: tag, elements: elements });\n    }\n  }, {\n    key: 'reduceThisExpression',\n    value: function reduceThisExpression(node) {\n      return new Shift.ThisExpression();\n    }\n  }, {\n    key: 'reduceThrowStatement',\n    value: function reduceThrowStatement(node, _ref67) {\n      var expression = _ref67.expression;\n\n      return new Shift.ThrowStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceTryCatchStatement',\n    value: function reduceTryCatchStatement(node, _ref68) {\n      var body = _ref68.body,\n          catchClause = _ref68.catchClause;\n\n      return new Shift.TryCatchStatement({ body: body, catchClause: catchClause });\n    }\n  }, {\n    key: 'reduceTryFinallyStatement',\n    value: function reduceTryFinallyStatement(node, _ref69) {\n      var body = _ref69.body,\n          catchClause = _ref69.catchClause,\n          finalizer = _ref69.finalizer;\n\n      return new Shift.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });\n    }\n  }, {\n    key: 'reduceUnaryExpression',\n    value: function reduceUnaryExpression(node, _ref70) {\n      var operand = _ref70.operand;\n\n      return new Shift.UnaryExpression({ operator: node.operator, operand: operand });\n    }\n  }, {\n    key: 'reduceUpdateExpression',\n    value: function reduceUpdateExpression(node, _ref71) {\n      var operand = _ref71.operand;\n\n      return new Shift.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand: operand });\n    }\n  }, {\n    key: 'reduceVariableDeclaration',\n    value: function reduceVariableDeclaration(node, _ref72) {\n      var declarators = _ref72.declarators;\n\n      return new Shift.VariableDeclaration({ kind: node.kind, declarators: declarators });\n    }\n  }, {\n    key: 'reduceVariableDeclarationStatement',\n    value: function reduceVariableDeclarationStatement(node, _ref73) {\n      var declaration = _ref73.declaration;\n\n      return new Shift.VariableDeclarationStatement({ declaration: declaration });\n    }\n  }, {\n    key: 'reduceVariableDeclarator',\n    value: function reduceVariableDeclarator(node, _ref74) {\n      var binding = _ref74.binding,\n          init = _ref74.init;\n\n      return new Shift.VariableDeclarator({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceWhileStatement',\n    value: function reduceWhileStatement(node, _ref75) {\n      var test = _ref75.test,\n          body = _ref75.body;\n\n      return new Shift.WhileStatement({ test: test, body: body });\n    }\n  }, {\n    key: 'reduceWithStatement',\n    value: function reduceWithStatement(node, _ref76) {\n      var object = _ref76.object,\n          body = _ref76.body;\n\n      return new Shift.WithStatement({ object: object, body: body });\n    }\n  }, {\n    key: 'reduceYieldExpression',\n    value: function reduceYieldExpression(node, _ref77) {\n      var expression = _ref77.expression;\n\n      return new Shift.YieldExpression({ expression: expression });\n    }\n  }, {\n    key: 'reduceYieldGeneratorExpression',\n    value: function reduceYieldGeneratorExpression(node, _ref78) {\n      var expression = _ref78.expression;\n\n      return new Shift.YieldGeneratorExpression({ expression: expression });\n    }\n  }]);\n\n  return CloneReducer;\n}();\n\nexports.default = CloneReducer;\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/clone-reducer.js?")},"./node_modules/shift-reducer/dist/director.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.reduce = reduce;\n// Generated by generate-director.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar director = {\n  ArrayAssignmentTarget: function ArrayAssignmentTarget(reducer, node) {\n    var _this = this;\n\n    return reducer.reduceArrayAssignmentTarget(node, { elements: node.elements.map(function (v) {\n        return v && _this[v.type](reducer, v);\n      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });\n  },\n  ArrayBinding: function ArrayBinding(reducer, node) {\n    var _this2 = this;\n\n    return reducer.reduceArrayBinding(node, { elements: node.elements.map(function (v) {\n        return v && _this2[v.type](reducer, v);\n      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });\n  },\n  ArrayExpression: function ArrayExpression(reducer, node) {\n    var _this3 = this;\n\n    return reducer.reduceArrayExpression(node, { elements: node.elements.map(function (v) {\n        return v && _this3[v.type](reducer, v);\n      }) });\n  },\n  ArrowExpression: function ArrowExpression(reducer, node) {\n    return reducer.reduceArrowExpression(node, { params: this.FormalParameters(reducer, node.params), body: this[node.body.type](reducer, node.body) });\n  },\n  AssignmentExpression: function AssignmentExpression(reducer, node) {\n    return reducer.reduceAssignmentExpression(node, { binding: this[node.binding.type](reducer, node.binding), expression: this[node.expression.type](reducer, node.expression) });\n  },\n  AssignmentTargetIdentifier: function AssignmentTargetIdentifier(reducer, node) {\n    return reducer.reduceAssignmentTargetIdentifier(node);\n  },\n  AssignmentTargetPropertyIdentifier: function AssignmentTargetPropertyIdentifier(reducer, node) {\n    return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: this.AssignmentTargetIdentifier(reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });\n  },\n  AssignmentTargetPropertyProperty: function AssignmentTargetPropertyProperty(reducer, node) {\n    return reducer.reduceAssignmentTargetPropertyProperty(node, { name: this[node.name.type](reducer, node.name), binding: this[node.binding.type](reducer, node.binding) });\n  },\n  AssignmentTargetWithDefault: function AssignmentTargetWithDefault(reducer, node) {\n    return reducer.reduceAssignmentTargetWithDefault(node, { binding: this[node.binding.type](reducer, node.binding), init: this[node.init.type](reducer, node.init) });\n  },\n  AwaitExpression: function AwaitExpression(reducer, node) {\n    return reducer.reduceAwaitExpression(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  BinaryExpression: function BinaryExpression(reducer, node) {\n    return reducer.reduceBinaryExpression(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right) });\n  },\n  BindingIdentifier: function BindingIdentifier(reducer, node) {\n    return reducer.reduceBindingIdentifier(node);\n  },\n  BindingPropertyIdentifier: function BindingPropertyIdentifier(reducer, node) {\n    return reducer.reduceBindingPropertyIdentifier(node, { binding: this.BindingIdentifier(reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });\n  },\n  BindingPropertyProperty: function BindingPropertyProperty(reducer, node) {\n    return reducer.reduceBindingPropertyProperty(node, { name: this[node.name.type](reducer, node.name), binding: this[node.binding.type](reducer, node.binding) });\n  },\n  BindingWithDefault: function BindingWithDefault(reducer, node) {\n    return reducer.reduceBindingWithDefault(node, { binding: this[node.binding.type](reducer, node.binding), init: this[node.init.type](reducer, node.init) });\n  },\n  Block: function Block(reducer, node) {\n    var _this4 = this;\n\n    return reducer.reduceBlock(node, { statements: node.statements.map(function (v) {\n        return _this4[v.type](reducer, v);\n      }) });\n  },\n  BlockStatement: function BlockStatement(reducer, node) {\n    return reducer.reduceBlockStatement(node, { block: this.Block(reducer, node.block) });\n  },\n  BreakStatement: function BreakStatement(reducer, node) {\n    return reducer.reduceBreakStatement(node);\n  },\n  CallExpression: function CallExpression(reducer, node) {\n    var _this5 = this;\n\n    return reducer.reduceCallExpression(node, { callee: this[node.callee.type](reducer, node.callee), arguments: node.arguments.map(function (v) {\n        return _this5[v.type](reducer, v);\n      }) });\n  },\n  CatchClause: function CatchClause(reducer, node) {\n    return reducer.reduceCatchClause(node, { binding: this[node.binding.type](reducer, node.binding), body: this.Block(reducer, node.body) });\n  },\n  ClassDeclaration: function ClassDeclaration(reducer, node) {\n    var _this6 = this;\n\n    return reducer.reduceClassDeclaration(node, { name: this.BindingIdentifier(reducer, node.name), super: node.super && this[node.super.type](reducer, node.super), elements: node.elements.map(function (v) {\n        return _this6.ClassElement(reducer, v);\n      }) });\n  },\n  ClassElement: function ClassElement(reducer, node) {\n    return reducer.reduceClassElement(node, { method: this[node.method.type](reducer, node.method) });\n  },\n  ClassExpression: function ClassExpression(reducer, node) {\n    var _this7 = this;\n\n    return reducer.reduceClassExpression(node, { name: node.name && this.BindingIdentifier(reducer, node.name), super: node.super && this[node.super.type](reducer, node.super), elements: node.elements.map(function (v) {\n        return _this7.ClassElement(reducer, v);\n      }) });\n  },\n  CompoundAssignmentExpression: function CompoundAssignmentExpression(reducer, node) {\n    return reducer.reduceCompoundAssignmentExpression(node, { binding: this[node.binding.type](reducer, node.binding), expression: this[node.expression.type](reducer, node.expression) });\n  },\n  ComputedMemberAssignmentTarget: function ComputedMemberAssignmentTarget(reducer, node) {\n    return reducer.reduceComputedMemberAssignmentTarget(node, { object: this[node.object.type](reducer, node.object), expression: this[node.expression.type](reducer, node.expression) });\n  },\n  ComputedMemberExpression: function ComputedMemberExpression(reducer, node) {\n    return reducer.reduceComputedMemberExpression(node, { object: this[node.object.type](reducer, node.object), expression: this[node.expression.type](reducer, node.expression) });\n  },\n  ComputedPropertyName: function ComputedPropertyName(reducer, node) {\n    return reducer.reduceComputedPropertyName(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  ConditionalExpression: function ConditionalExpression(reducer, node) {\n    return reducer.reduceConditionalExpression(node, { test: this[node.test.type](reducer, node.test), consequent: this[node.consequent.type](reducer, node.consequent), alternate: this[node.alternate.type](reducer, node.alternate) });\n  },\n  ContinueStatement: function ContinueStatement(reducer, node) {\n    return reducer.reduceContinueStatement(node);\n  },\n  DataProperty: function DataProperty(reducer, node) {\n    return reducer.reduceDataProperty(node, { name: this[node.name.type](reducer, node.name), expression: this[node.expression.type](reducer, node.expression) });\n  },\n  DebuggerStatement: function DebuggerStatement(reducer, node) {\n    return reducer.reduceDebuggerStatement(node);\n  },\n  Directive: function Directive(reducer, node) {\n    return reducer.reduceDirective(node);\n  },\n  DoWhileStatement: function DoWhileStatement(reducer, node) {\n    return reducer.reduceDoWhileStatement(node, { body: this[node.body.type](reducer, node.body), test: this[node.test.type](reducer, node.test) });\n  },\n  EmptyStatement: function EmptyStatement(reducer, node) {\n    return reducer.reduceEmptyStatement(node);\n  },\n  Export: function Export(reducer, node) {\n    return reducer.reduceExport(node, { declaration: this[node.declaration.type](reducer, node.declaration) });\n  },\n  ExportAllFrom: function ExportAllFrom(reducer, node) {\n    return reducer.reduceExportAllFrom(node);\n  },\n  ExportDefault: function ExportDefault(reducer, node) {\n    return reducer.reduceExportDefault(node, { body: this[node.body.type](reducer, node.body) });\n  },\n  ExportFrom: function ExportFrom(reducer, node) {\n    var _this8 = this;\n\n    return reducer.reduceExportFrom(node, { namedExports: node.namedExports.map(function (v) {\n        return _this8.ExportFromSpecifier(reducer, v);\n      }) });\n  },\n  ExportFromSpecifier: function ExportFromSpecifier(reducer, node) {\n    return reducer.reduceExportFromSpecifier(node);\n  },\n  ExportLocalSpecifier: function ExportLocalSpecifier(reducer, node) {\n    return reducer.reduceExportLocalSpecifier(node, { name: this.IdentifierExpression(reducer, node.name) });\n  },\n  ExportLocals: function ExportLocals(reducer, node) {\n    var _this9 = this;\n\n    return reducer.reduceExportLocals(node, { namedExports: node.namedExports.map(function (v) {\n        return _this9.ExportLocalSpecifier(reducer, v);\n      }) });\n  },\n  ExpressionStatement: function ExpressionStatement(reducer, node) {\n    return reducer.reduceExpressionStatement(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  ForAwaitStatement: function ForAwaitStatement(reducer, node) {\n    return reducer.reduceForAwaitStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });\n  },\n  ForInStatement: function ForInStatement(reducer, node) {\n    return reducer.reduceForInStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });\n  },\n  ForOfStatement: function ForOfStatement(reducer, node) {\n    return reducer.reduceForOfStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });\n  },\n  ForStatement: function ForStatement(reducer, node) {\n    return reducer.reduceForStatement(node, { init: node.init && this[node.init.type](reducer, node.init), test: node.test && this[node.test.type](reducer, node.test), update: node.update && this[node.update.type](reducer, node.update), body: this[node.body.type](reducer, node.body) });\n  },\n  FormalParameters: function FormalParameters(reducer, node) {\n    var _this10 = this;\n\n    return reducer.reduceFormalParameters(node, { items: node.items.map(function (v) {\n        return _this10[v.type](reducer, v);\n      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });\n  },\n  FunctionBody: function FunctionBody(reducer, node) {\n    var _this11 = this;\n\n    return reducer.reduceFunctionBody(node, { directives: node.directives.map(function (v) {\n        return _this11.Directive(reducer, v);\n      }), statements: node.statements.map(function (v) {\n        return _this11[v.type](reducer, v);\n      }) });\n  },\n  FunctionDeclaration: function FunctionDeclaration(reducer, node) {\n    return reducer.reduceFunctionDeclaration(node, { name: this.BindingIdentifier(reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });\n  },\n  FunctionExpression: function FunctionExpression(reducer, node) {\n    return reducer.reduceFunctionExpression(node, { name: node.name && this.BindingIdentifier(reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });\n  },\n  Getter: function Getter(reducer, node) {\n    return reducer.reduceGetter(node, { name: this[node.name.type](reducer, node.name), body: this.FunctionBody(reducer, node.body) });\n  },\n  IdentifierExpression: function IdentifierExpression(reducer, node) {\n    return reducer.reduceIdentifierExpression(node);\n  },\n  IfStatement: function IfStatement(reducer, node) {\n    return reducer.reduceIfStatement(node, { test: this[node.test.type](reducer, node.test), consequent: this[node.consequent.type](reducer, node.consequent), alternate: node.alternate && this[node.alternate.type](reducer, node.alternate) });\n  },\n  Import: function Import(reducer, node) {\n    var _this12 = this;\n\n    return reducer.reduceImport(node, { defaultBinding: node.defaultBinding && this.BindingIdentifier(reducer, node.defaultBinding), namedImports: node.namedImports.map(function (v) {\n        return _this12.ImportSpecifier(reducer, v);\n      }) });\n  },\n  ImportNamespace: function ImportNamespace(reducer, node) {\n    return reducer.reduceImportNamespace(node, { defaultBinding: node.defaultBinding && this.BindingIdentifier(reducer, node.defaultBinding), namespaceBinding: this.BindingIdentifier(reducer, node.namespaceBinding) });\n  },\n  ImportSpecifier: function ImportSpecifier(reducer, node) {\n    return reducer.reduceImportSpecifier(node, { binding: this.BindingIdentifier(reducer, node.binding) });\n  },\n  LabeledStatement: function LabeledStatement(reducer, node) {\n    return reducer.reduceLabeledStatement(node, { body: this[node.body.type](reducer, node.body) });\n  },\n  LiteralBooleanExpression: function LiteralBooleanExpression(reducer, node) {\n    return reducer.reduceLiteralBooleanExpression(node);\n  },\n  LiteralInfinityExpression: function LiteralInfinityExpression(reducer, node) {\n    return reducer.reduceLiteralInfinityExpression(node);\n  },\n  LiteralNullExpression: function LiteralNullExpression(reducer, node) {\n    return reducer.reduceLiteralNullExpression(node);\n  },\n  LiteralNumericExpression: function LiteralNumericExpression(reducer, node) {\n    return reducer.reduceLiteralNumericExpression(node);\n  },\n  LiteralRegExpExpression: function LiteralRegExpExpression(reducer, node) {\n    return reducer.reduceLiteralRegExpExpression(node);\n  },\n  LiteralStringExpression: function LiteralStringExpression(reducer, node) {\n    return reducer.reduceLiteralStringExpression(node);\n  },\n  Method: function Method(reducer, node) {\n    return reducer.reduceMethod(node, { name: this[node.name.type](reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });\n  },\n  Module: function Module(reducer, node) {\n    var _this13 = this;\n\n    return reducer.reduceModule(node, { directives: node.directives.map(function (v) {\n        return _this13.Directive(reducer, v);\n      }), items: node.items.map(function (v) {\n        return _this13[v.type](reducer, v);\n      }) });\n  },\n  NewExpression: function NewExpression(reducer, node) {\n    var _this14 = this;\n\n    return reducer.reduceNewExpression(node, { callee: this[node.callee.type](reducer, node.callee), arguments: node.arguments.map(function (v) {\n        return _this14[v.type](reducer, v);\n      }) });\n  },\n  NewTargetExpression: function NewTargetExpression(reducer, node) {\n    return reducer.reduceNewTargetExpression(node);\n  },\n  ObjectAssignmentTarget: function ObjectAssignmentTarget(reducer, node) {\n    var _this15 = this;\n\n    return reducer.reduceObjectAssignmentTarget(node, { properties: node.properties.map(function (v) {\n        return _this15[v.type](reducer, v);\n      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });\n  },\n  ObjectBinding: function ObjectBinding(reducer, node) {\n    var _this16 = this;\n\n    return reducer.reduceObjectBinding(node, { properties: node.properties.map(function (v) {\n        return _this16[v.type](reducer, v);\n      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });\n  },\n  ObjectExpression: function ObjectExpression(reducer, node) {\n    var _this17 = this;\n\n    return reducer.reduceObjectExpression(node, { properties: node.properties.map(function (v) {\n        return _this17[v.type](reducer, v);\n      }) });\n  },\n  ReturnStatement: function ReturnStatement(reducer, node) {\n    return reducer.reduceReturnStatement(node, { expression: node.expression && this[node.expression.type](reducer, node.expression) });\n  },\n  Script: function Script(reducer, node) {\n    var _this18 = this;\n\n    return reducer.reduceScript(node, { directives: node.directives.map(function (v) {\n        return _this18.Directive(reducer, v);\n      }), statements: node.statements.map(function (v) {\n        return _this18[v.type](reducer, v);\n      }) });\n  },\n  Setter: function Setter(reducer, node) {\n    return reducer.reduceSetter(node, { name: this[node.name.type](reducer, node.name), param: this[node.param.type](reducer, node.param), body: this.FunctionBody(reducer, node.body) });\n  },\n  ShorthandProperty: function ShorthandProperty(reducer, node) {\n    return reducer.reduceShorthandProperty(node, { name: this.IdentifierExpression(reducer, node.name) });\n  },\n  SpreadElement: function SpreadElement(reducer, node) {\n    return reducer.reduceSpreadElement(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  SpreadProperty: function SpreadProperty(reducer, node) {\n    return reducer.reduceSpreadProperty(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  StaticMemberAssignmentTarget: function StaticMemberAssignmentTarget(reducer, node) {\n    return reducer.reduceStaticMemberAssignmentTarget(node, { object: this[node.object.type](reducer, node.object) });\n  },\n  StaticMemberExpression: function StaticMemberExpression(reducer, node) {\n    return reducer.reduceStaticMemberExpression(node, { object: this[node.object.type](reducer, node.object) });\n  },\n  StaticPropertyName: function StaticPropertyName(reducer, node) {\n    return reducer.reduceStaticPropertyName(node);\n  },\n  Super: function Super(reducer, node) {\n    return reducer.reduceSuper(node);\n  },\n  SwitchCase: function SwitchCase(reducer, node) {\n    var _this19 = this;\n\n    return reducer.reduceSwitchCase(node, { test: this[node.test.type](reducer, node.test), consequent: node.consequent.map(function (v) {\n        return _this19[v.type](reducer, v);\n      }) });\n  },\n  SwitchDefault: function SwitchDefault(reducer, node) {\n    var _this20 = this;\n\n    return reducer.reduceSwitchDefault(node, { consequent: node.consequent.map(function (v) {\n        return _this20[v.type](reducer, v);\n      }) });\n  },\n  SwitchStatement: function SwitchStatement(reducer, node) {\n    var _this21 = this;\n\n    return reducer.reduceSwitchStatement(node, { discriminant: this[node.discriminant.type](reducer, node.discriminant), cases: node.cases.map(function (v) {\n        return _this21.SwitchCase(reducer, v);\n      }) });\n  },\n  SwitchStatementWithDefault: function SwitchStatementWithDefault(reducer, node) {\n    var _this22 = this;\n\n    return reducer.reduceSwitchStatementWithDefault(node, { discriminant: this[node.discriminant.type](reducer, node.discriminant), preDefaultCases: node.preDefaultCases.map(function (v) {\n        return _this22.SwitchCase(reducer, v);\n      }), defaultCase: this.SwitchDefault(reducer, node.defaultCase), postDefaultCases: node.postDefaultCases.map(function (v) {\n        return _this22.SwitchCase(reducer, v);\n      }) });\n  },\n  TemplateElement: function TemplateElement(reducer, node) {\n    return reducer.reduceTemplateElement(node);\n  },\n  TemplateExpression: function TemplateExpression(reducer, node) {\n    var _this23 = this;\n\n    return reducer.reduceTemplateExpression(node, { tag: node.tag && this[node.tag.type](reducer, node.tag), elements: node.elements.map(function (v) {\n        return _this23[v.type](reducer, v);\n      }) });\n  },\n  ThisExpression: function ThisExpression(reducer, node) {\n    return reducer.reduceThisExpression(node);\n  },\n  ThrowStatement: function ThrowStatement(reducer, node) {\n    return reducer.reduceThrowStatement(node, { expression: this[node.expression.type](reducer, node.expression) });\n  },\n  TryCatchStatement: function TryCatchStatement(reducer, node) {\n    return reducer.reduceTryCatchStatement(node, { body: this.Block(reducer, node.body), catchClause: this.CatchClause(reducer, node.catchClause) });\n  },\n  TryFinallyStatement: function TryFinallyStatement(reducer, node) {\n    return reducer.reduceTryFinallyStatement(node, { body: this.Block(reducer, node.body), catchClause: node.catchClause && this.CatchClause(reducer, node.catchClause), finalizer: this.Block(reducer, node.finalizer) });\n  },\n  UnaryExpression: function UnaryExpression(reducer, node) {\n    return reducer.reduceUnaryExpression(node, { operand: this[node.operand.type](reducer, node.operand) });\n  },\n  UpdateExpression: function UpdateExpression(reducer, node) {\n    return reducer.reduceUpdateExpression(node, { operand: this[node.operand.type](reducer, node.operand) });\n  },\n  VariableDeclaration: function VariableDeclaration(reducer, node) {\n    var _this24 = this;\n\n    return reducer.reduceVariableDeclaration(node, { declarators: node.declarators.map(function (v) {\n        return _this24.VariableDeclarator(reducer, v);\n      }) });\n  },\n  VariableDeclarationStatement: function VariableDeclarationStatement(reducer, node) {\n    return reducer.reduceVariableDeclarationStatement(node, { declaration: this.VariableDeclaration(reducer, node.declaration) });\n  },\n  VariableDeclarator: function VariableDeclarator(reducer, node) {\n    return reducer.reduceVariableDeclarator(node, { binding: this[node.binding.type](reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });\n  },\n  WhileStatement: function WhileStatement(reducer, node) {\n    return reducer.reduceWhileStatement(node, { test: this[node.test.type](reducer, node.test), body: this[node.body.type](reducer, node.body) });\n  },\n  WithStatement: function WithStatement(reducer, node) {\n    return reducer.reduceWithStatement(node, { object: this[node.object.type](reducer, node.object), body: this[node.body.type](reducer, node.body) });\n  },\n  YieldExpression: function YieldExpression(reducer, node) {\n    return reducer.reduceYieldExpression(node, { expression: node.expression && this[node.expression.type](reducer, node.expression) });\n  },\n  YieldGeneratorExpression: function YieldGeneratorExpression(reducer, node) {\n    return reducer.reduceYieldGeneratorExpression(node, { expression: this[node.expression.type](reducer, node.expression) });\n  }\n};\n\nfunction reduce(reducer, node) {\n  return director[node.type](reducer, node);\n}\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/director.js?')},"./node_modules/shift-reducer/dist/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _director = __webpack_require__(\"./node_modules/shift-reducer/dist/director.js\");\n\nObject.defineProperty(exports, 'reduce', {\n  enumerable: true,\n  get: function get() {\n    return _director.reduce;\n  }\n});\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _director.reduce;\n  }\n});\n\nvar _thunkedDirector = __webpack_require__(\"./node_modules/shift-reducer/dist/thunked-director.js\");\n\nObject.defineProperty(exports, 'thunkedReduce', {\n  enumerable: true,\n  get: function get() {\n    return _thunkedDirector.thunkedReduce;\n  }\n});\n\nvar _thunkify = __webpack_require__(\"./node_modules/shift-reducer/dist/thunkify.js\");\n\nObject.defineProperty(exports, 'thunkify', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_thunkify).default;\n  }\n});\n\nvar _thunkifyClass = __webpack_require__(\"./node_modules/shift-reducer/dist/thunkify-class.js\");\n\nObject.defineProperty(exports, 'thunkifyClass', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_thunkifyClass).default;\n  }\n});\n\nvar _memoize = __webpack_require__(\"./node_modules/shift-reducer/dist/memoize.js\");\n\nObject.defineProperty(exports, 'memoize', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_memoize).default;\n  }\n});\n\nvar _cloneReducer = __webpack_require__(\"./node_modules/shift-reducer/dist/clone-reducer.js\");\n\nObject.defineProperty(exports, 'CloneReducer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_cloneReducer).default;\n  }\n});\n\nvar _lazyCloneReducer = __webpack_require__(\"./node_modules/shift-reducer/dist/lazy-clone-reducer.js\");\n\nObject.defineProperty(exports, 'LazyCloneReducer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_lazyCloneReducer).default;\n  }\n});\n\nvar _monoidalReducer = __webpack_require__(\"./node_modules/shift-reducer/dist/monoidal-reducer.js\");\n\nObject.defineProperty(exports, 'MonoidalReducer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_monoidalReducer).default;\n  }\n});\n\nvar _thunkedMonoidalReducer = __webpack_require__(\"./node_modules/shift-reducer/dist/thunked-monoidal-reducer.js\");\n\nObject.defineProperty(exports, 'ThunkedMonoidalReducer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_thunkedMonoidalReducer).default;\n  }\n});\n\nvar _adapt = __webpack_require__(\"./node_modules/shift-reducer/dist/adapt.js\");\n\nObject.defineProperty(exports, 'adapt', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_adapt).default;\n  }\n});\n\nvar _reducers = __webpack_require__(\"./node_modules/shift-reducer/dist/reducers.js\");\n\nObject.defineProperty(exports, 'PlusReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.PlusReducer;\n  }\n});\nObject.defineProperty(exports, 'ThunkedPlusReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.ThunkedPlusReducer;\n  }\n});\nObject.defineProperty(exports, 'ConcatReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.ConcatReducer;\n  }\n});\nObject.defineProperty(exports, 'ThunkedConcatReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.ThunkedConcatReducer;\n  }\n});\nObject.defineProperty(exports, 'AndReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.AndReducer;\n  }\n});\nObject.defineProperty(exports, 'ThunkedAndReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.ThunkedAndReducer;\n  }\n});\nObject.defineProperty(exports, 'OrReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.OrReducer;\n  }\n});\nObject.defineProperty(exports, 'ThunkedOrReducer', {\n  enumerable: true,\n  get: function get() {\n    return _reducers.ThunkedOrReducer;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/index.js?")},"./node_modules/shift-reducer/dist/lazy-clone-reducer.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-lazy-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar Shift = _interopRequireWildcard(_shiftAst);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LazyCloneReducer = function () {\n  function LazyCloneReducer() {\n    _classCallCheck(this, LazyCloneReducer);\n  }\n\n  _createClass(LazyCloneReducer, [{\n    key: 'reduceArrayAssignmentTarget',\n    value: function reduceArrayAssignmentTarget(node, _ref) {\n      var elements = _ref.elements,\n          rest = _ref.rest;\n\n      if (node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      }) && node.rest === rest) {\n        return node;\n      }\n      return new Shift.ArrayAssignmentTarget({ elements: elements, rest: rest });\n    }\n  }, {\n    key: 'reduceArrayBinding',\n    value: function reduceArrayBinding(node, _ref2) {\n      var elements = _ref2.elements,\n          rest = _ref2.rest;\n\n      if (node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      }) && node.rest === rest) {\n        return node;\n      }\n      return new Shift.ArrayBinding({ elements: elements, rest: rest });\n    }\n  }, {\n    key: 'reduceArrayExpression',\n    value: function reduceArrayExpression(node, _ref3) {\n      var elements = _ref3.elements;\n\n      if (node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      })) {\n        return node;\n      }\n      return new Shift.ArrayExpression({ elements: elements });\n    }\n  }, {\n    key: 'reduceArrowExpression',\n    value: function reduceArrowExpression(node, _ref4) {\n      var params = _ref4.params,\n          body = _ref4.body;\n\n      if (node.params === params && node.body === body) {\n        return node;\n      }\n      return new Shift.ArrowExpression({ isAsync: node.isAsync, params: params, body: body });\n    }\n  }, {\n    key: 'reduceAssignmentExpression',\n    value: function reduceAssignmentExpression(node, _ref5) {\n      var binding = _ref5.binding,\n          expression = _ref5.expression;\n\n      if (node.binding === binding && node.expression === expression) {\n        return node;\n      }\n      return new Shift.AssignmentExpression({ binding: binding, expression: expression });\n    }\n  }, {\n    key: 'reduceAssignmentTargetIdentifier',\n    value: function reduceAssignmentTargetIdentifier(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyIdentifier',\n    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n      var binding = _ref6.binding,\n          init = _ref6.init;\n\n      if (node.binding === binding && node.init === init) {\n        return node;\n      }\n      return new Shift.AssignmentTargetPropertyIdentifier({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyProperty',\n    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n      var name = _ref7.name,\n          binding = _ref7.binding;\n\n      if (node.name === name && node.binding === binding) {\n        return node;\n      }\n      return new Shift.AssignmentTargetPropertyProperty({ name: name, binding: binding });\n    }\n  }, {\n    key: 'reduceAssignmentTargetWithDefault',\n    value: function reduceAssignmentTargetWithDefault(node, _ref8) {\n      var binding = _ref8.binding,\n          init = _ref8.init;\n\n      if (node.binding === binding && node.init === init) {\n        return node;\n      }\n      return new Shift.AssignmentTargetWithDefault({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceAwaitExpression',\n    value: function reduceAwaitExpression(node, _ref9) {\n      var expression = _ref9.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.AwaitExpression({ expression: expression });\n    }\n  }, {\n    key: 'reduceBinaryExpression',\n    value: function reduceBinaryExpression(node, _ref10) {\n      var left = _ref10.left,\n          right = _ref10.right;\n\n      if (node.left === left && node.right === right) {\n        return node;\n      }\n      return new Shift.BinaryExpression({ left: left, operator: node.operator, right: right });\n    }\n  }, {\n    key: 'reduceBindingIdentifier',\n    value: function reduceBindingIdentifier(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceBindingPropertyIdentifier',\n    value: function reduceBindingPropertyIdentifier(node, _ref11) {\n      var binding = _ref11.binding,\n          init = _ref11.init;\n\n      if (node.binding === binding && node.init === init) {\n        return node;\n      }\n      return new Shift.BindingPropertyIdentifier({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceBindingPropertyProperty',\n    value: function reduceBindingPropertyProperty(node, _ref12) {\n      var name = _ref12.name,\n          binding = _ref12.binding;\n\n      if (node.name === name && node.binding === binding) {\n        return node;\n      }\n      return new Shift.BindingPropertyProperty({ name: name, binding: binding });\n    }\n  }, {\n    key: 'reduceBindingWithDefault',\n    value: function reduceBindingWithDefault(node, _ref13) {\n      var binding = _ref13.binding,\n          init = _ref13.init;\n\n      if (node.binding === binding && node.init === init) {\n        return node;\n      }\n      return new Shift.BindingWithDefault({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceBlock',\n    value: function reduceBlock(node, _ref14) {\n      var statements = _ref14.statements;\n\n      if (node.statements.length === statements.length && node.statements.every(function (v, i) {\n        return v === statements[i];\n      })) {\n        return node;\n      }\n      return new Shift.Block({ statements: statements });\n    }\n  }, {\n    key: 'reduceBlockStatement',\n    value: function reduceBlockStatement(node, _ref15) {\n      var block = _ref15.block;\n\n      if (node.block === block) {\n        return node;\n      }\n      return new Shift.BlockStatement({ block: block });\n    }\n  }, {\n    key: 'reduceBreakStatement',\n    value: function reduceBreakStatement(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceCallExpression',\n    value: function reduceCallExpression(node, _ref16) {\n      var callee = _ref16.callee,\n          _arguments = _ref16.arguments;\n\n      if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every(function (v, i) {\n        return v === _arguments[i];\n      })) {\n        return node;\n      }\n      return new Shift.CallExpression({ callee: callee, arguments: _arguments });\n    }\n  }, {\n    key: 'reduceCatchClause',\n    value: function reduceCatchClause(node, _ref17) {\n      var binding = _ref17.binding,\n          body = _ref17.body;\n\n      if (node.binding === binding && node.body === body) {\n        return node;\n      }\n      return new Shift.CatchClause({ binding: binding, body: body });\n    }\n  }, {\n    key: 'reduceClassDeclaration',\n    value: function reduceClassDeclaration(node, _ref18) {\n      var name = _ref18.name,\n          _super = _ref18.super,\n          elements = _ref18.elements;\n\n      if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      })) {\n        return node;\n      }\n      return new Shift.ClassDeclaration({ name: name, super: _super, elements: elements });\n    }\n  }, {\n    key: 'reduceClassElement',\n    value: function reduceClassElement(node, _ref19) {\n      var method = _ref19.method;\n\n      if (node.method === method) {\n        return node;\n      }\n      return new Shift.ClassElement({ isStatic: node.isStatic, method: method });\n    }\n  }, {\n    key: 'reduceClassExpression',\n    value: function reduceClassExpression(node, _ref20) {\n      var name = _ref20.name,\n          _super = _ref20.super,\n          elements = _ref20.elements;\n\n      if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      })) {\n        return node;\n      }\n      return new Shift.ClassExpression({ name: name, super: _super, elements: elements });\n    }\n  }, {\n    key: 'reduceCompoundAssignmentExpression',\n    value: function reduceCompoundAssignmentExpression(node, _ref21) {\n      var binding = _ref21.binding,\n          expression = _ref21.expression;\n\n      if (node.binding === binding && node.expression === expression) {\n        return node;\n      }\n      return new Shift.CompoundAssignmentExpression({ binding: binding, operator: node.operator, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedMemberAssignmentTarget',\n    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n      var object = _ref22.object,\n          expression = _ref22.expression;\n\n      if (node.object === object && node.expression === expression) {\n        return node;\n      }\n      return new Shift.ComputedMemberAssignmentTarget({ object: object, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedMemberExpression',\n    value: function reduceComputedMemberExpression(node, _ref23) {\n      var object = _ref23.object,\n          expression = _ref23.expression;\n\n      if (node.object === object && node.expression === expression) {\n        return node;\n      }\n      return new Shift.ComputedMemberExpression({ object: object, expression: expression });\n    }\n  }, {\n    key: 'reduceComputedPropertyName',\n    value: function reduceComputedPropertyName(node, _ref24) {\n      var expression = _ref24.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.ComputedPropertyName({ expression: expression });\n    }\n  }, {\n    key: 'reduceConditionalExpression',\n    value: function reduceConditionalExpression(node, _ref25) {\n      var test = _ref25.test,\n          consequent = _ref25.consequent,\n          alternate = _ref25.alternate;\n\n      if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n        return node;\n      }\n      return new Shift.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'reduceContinueStatement',\n    value: function reduceContinueStatement(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceDataProperty',\n    value: function reduceDataProperty(node, _ref26) {\n      var name = _ref26.name,\n          expression = _ref26.expression;\n\n      if (node.name === name && node.expression === expression) {\n        return node;\n      }\n      return new Shift.DataProperty({ name: name, expression: expression });\n    }\n  }, {\n    key: 'reduceDebuggerStatement',\n    value: function reduceDebuggerStatement(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceDirective',\n    value: function reduceDirective(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceDoWhileStatement',\n    value: function reduceDoWhileStatement(node, _ref27) {\n      var body = _ref27.body,\n          test = _ref27.test;\n\n      if (node.body === body && node.test === test) {\n        return node;\n      }\n      return new Shift.DoWhileStatement({ body: body, test: test });\n    }\n  }, {\n    key: 'reduceEmptyStatement',\n    value: function reduceEmptyStatement(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceExport',\n    value: function reduceExport(node, _ref28) {\n      var declaration = _ref28.declaration;\n\n      if (node.declaration === declaration) {\n        return node;\n      }\n      return new Shift.Export({ declaration: declaration });\n    }\n  }, {\n    key: 'reduceExportAllFrom',\n    value: function reduceExportAllFrom(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceExportDefault',\n    value: function reduceExportDefault(node, _ref29) {\n      var body = _ref29.body;\n\n      if (node.body === body) {\n        return node;\n      }\n      return new Shift.ExportDefault({ body: body });\n    }\n  }, {\n    key: 'reduceExportFrom',\n    value: function reduceExportFrom(node, _ref30) {\n      var namedExports = _ref30.namedExports;\n\n      if (node.namedExports.length === namedExports.length && node.namedExports.every(function (v, i) {\n        return v === namedExports[i];\n      })) {\n        return node;\n      }\n      return new Shift.ExportFrom({ namedExports: namedExports, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceExportFromSpecifier',\n    value: function reduceExportFromSpecifier(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceExportLocalSpecifier',\n    value: function reduceExportLocalSpecifier(node, _ref31) {\n      var name = _ref31.name;\n\n      if (node.name === name) {\n        return node;\n      }\n      return new Shift.ExportLocalSpecifier({ name: name, exportedName: node.exportedName });\n    }\n  }, {\n    key: 'reduceExportLocals',\n    value: function reduceExportLocals(node, _ref32) {\n      var namedExports = _ref32.namedExports;\n\n      if (node.namedExports.length === namedExports.length && node.namedExports.every(function (v, i) {\n        return v === namedExports[i];\n      })) {\n        return node;\n      }\n      return new Shift.ExportLocals({ namedExports: namedExports });\n    }\n  }, {\n    key: 'reduceExpressionStatement',\n    value: function reduceExpressionStatement(node, _ref33) {\n      var expression = _ref33.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.ExpressionStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceForAwaitStatement',\n    value: function reduceForAwaitStatement(node, _ref34) {\n      var left = _ref34.left,\n          right = _ref34.right,\n          body = _ref34.body;\n\n      if (node.left === left && node.right === right && node.body === body) {\n        return node;\n      }\n      return new Shift.ForAwaitStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForInStatement',\n    value: function reduceForInStatement(node, _ref35) {\n      var left = _ref35.left,\n          right = _ref35.right,\n          body = _ref35.body;\n\n      if (node.left === left && node.right === right && node.body === body) {\n        return node;\n      }\n      return new Shift.ForInStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForOfStatement',\n    value: function reduceForOfStatement(node, _ref36) {\n      var left = _ref36.left,\n          right = _ref36.right,\n          body = _ref36.body;\n\n      if (node.left === left && node.right === right && node.body === body) {\n        return node;\n      }\n      return new Shift.ForOfStatement({ left: left, right: right, body: body });\n    }\n  }, {\n    key: 'reduceForStatement',\n    value: function reduceForStatement(node, _ref37) {\n      var init = _ref37.init,\n          test = _ref37.test,\n          update = _ref37.update,\n          body = _ref37.body;\n\n      if (node.init === init && node.test === test && node.update === update && node.body === body) {\n        return node;\n      }\n      return new Shift.ForStatement({ init: init, test: test, update: update, body: body });\n    }\n  }, {\n    key: 'reduceFormalParameters',\n    value: function reduceFormalParameters(node, _ref38) {\n      var items = _ref38.items,\n          rest = _ref38.rest;\n\n      if (node.items.length === items.length && node.items.every(function (v, i) {\n        return v === items[i];\n      }) && node.rest === rest) {\n        return node;\n      }\n      return new Shift.FormalParameters({ items: items, rest: rest });\n    }\n  }, {\n    key: 'reduceFunctionBody',\n    value: function reduceFunctionBody(node, _ref39) {\n      var directives = _ref39.directives,\n          statements = _ref39.statements;\n\n      if (node.directives.length === directives.length && node.directives.every(function (v, i) {\n        return v === directives[i];\n      }) && node.statements.length === statements.length && node.statements.every(function (v, i) {\n        return v === statements[i];\n      })) {\n        return node;\n      }\n      return new Shift.FunctionBody({ directives: directives, statements: statements });\n    }\n  }, {\n    key: 'reduceFunctionDeclaration',\n    value: function reduceFunctionDeclaration(node, _ref40) {\n      var name = _ref40.name,\n          params = _ref40.params,\n          body = _ref40.body;\n\n      if (node.name === name && node.params === params && node.body === body) {\n        return node;\n      }\n      return new Shift.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceFunctionExpression',\n    value: function reduceFunctionExpression(node, _ref41) {\n      var name = _ref41.name,\n          params = _ref41.params,\n          body = _ref41.body;\n\n      if (node.name === name && node.params === params && node.body === body) {\n        return node;\n      }\n      return new Shift.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceGetter',\n    value: function reduceGetter(node, _ref42) {\n      var name = _ref42.name,\n          body = _ref42.body;\n\n      if (node.name === name && node.body === body) {\n        return node;\n      }\n      return new Shift.Getter({ name: name, body: body });\n    }\n  }, {\n    key: 'reduceIdentifierExpression',\n    value: function reduceIdentifierExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceIfStatement',\n    value: function reduceIfStatement(node, _ref43) {\n      var test = _ref43.test,\n          consequent = _ref43.consequent,\n          alternate = _ref43.alternate;\n\n      if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n        return node;\n      }\n      return new Shift.IfStatement({ test: test, consequent: consequent, alternate: alternate });\n    }\n  }, {\n    key: 'reduceImport',\n    value: function reduceImport(node, _ref44) {\n      var defaultBinding = _ref44.defaultBinding,\n          namedImports = _ref44.namedImports;\n\n      if (node.defaultBinding === defaultBinding && node.namedImports.length === namedImports.length && node.namedImports.every(function (v, i) {\n        return v === namedImports[i];\n      })) {\n        return node;\n      }\n      return new Shift.Import({ defaultBinding: defaultBinding, namedImports: namedImports, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceImportNamespace',\n    value: function reduceImportNamespace(node, _ref45) {\n      var defaultBinding = _ref45.defaultBinding,\n          namespaceBinding = _ref45.namespaceBinding;\n\n      if (node.defaultBinding === defaultBinding && node.namespaceBinding === namespaceBinding) {\n        return node;\n      }\n      return new Shift.ImportNamespace({ defaultBinding: defaultBinding, namespaceBinding: namespaceBinding, moduleSpecifier: node.moduleSpecifier });\n    }\n  }, {\n    key: 'reduceImportSpecifier',\n    value: function reduceImportSpecifier(node, _ref46) {\n      var binding = _ref46.binding;\n\n      if (node.binding === binding) {\n        return node;\n      }\n      return new Shift.ImportSpecifier({ name: node.name, binding: binding });\n    }\n  }, {\n    key: 'reduceLabeledStatement',\n    value: function reduceLabeledStatement(node, _ref47) {\n      var body = _ref47.body;\n\n      if (node.body === body) {\n        return node;\n      }\n      return new Shift.LabeledStatement({ label: node.label, body: body });\n    }\n  }, {\n    key: 'reduceLiteralBooleanExpression',\n    value: function reduceLiteralBooleanExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceLiteralInfinityExpression',\n    value: function reduceLiteralInfinityExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceLiteralNullExpression',\n    value: function reduceLiteralNullExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceLiteralNumericExpression',\n    value: function reduceLiteralNumericExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceLiteralRegExpExpression',\n    value: function reduceLiteralRegExpExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceLiteralStringExpression',\n    value: function reduceLiteralStringExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceMethod',\n    value: function reduceMethod(node, _ref48) {\n      var name = _ref48.name,\n          params = _ref48.params,\n          body = _ref48.body;\n\n      if (node.name === name && node.params === params && node.body === body) {\n        return node;\n      }\n      return new Shift.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });\n    }\n  }, {\n    key: 'reduceModule',\n    value: function reduceModule(node, _ref49) {\n      var directives = _ref49.directives,\n          items = _ref49.items;\n\n      if (node.directives.length === directives.length && node.directives.every(function (v, i) {\n        return v === directives[i];\n      }) && node.items.length === items.length && node.items.every(function (v, i) {\n        return v === items[i];\n      })) {\n        return node;\n      }\n      return new Shift.Module({ directives: directives, items: items });\n    }\n  }, {\n    key: 'reduceNewExpression',\n    value: function reduceNewExpression(node, _ref50) {\n      var callee = _ref50.callee,\n          _arguments = _ref50.arguments;\n\n      if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every(function (v, i) {\n        return v === _arguments[i];\n      })) {\n        return node;\n      }\n      return new Shift.NewExpression({ callee: callee, arguments: _arguments });\n    }\n  }, {\n    key: 'reduceNewTargetExpression',\n    value: function reduceNewTargetExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceObjectAssignmentTarget',\n    value: function reduceObjectAssignmentTarget(node, _ref51) {\n      var properties = _ref51.properties,\n          rest = _ref51.rest;\n\n      if (node.properties.length === properties.length && node.properties.every(function (v, i) {\n        return v === properties[i];\n      }) && node.rest === rest) {\n        return node;\n      }\n      return new Shift.ObjectAssignmentTarget({ properties: properties, rest: rest });\n    }\n  }, {\n    key: 'reduceObjectBinding',\n    value: function reduceObjectBinding(node, _ref52) {\n      var properties = _ref52.properties,\n          rest = _ref52.rest;\n\n      if (node.properties.length === properties.length && node.properties.every(function (v, i) {\n        return v === properties[i];\n      }) && node.rest === rest) {\n        return node;\n      }\n      return new Shift.ObjectBinding({ properties: properties, rest: rest });\n    }\n  }, {\n    key: 'reduceObjectExpression',\n    value: function reduceObjectExpression(node, _ref53) {\n      var properties = _ref53.properties;\n\n      if (node.properties.length === properties.length && node.properties.every(function (v, i) {\n        return v === properties[i];\n      })) {\n        return node;\n      }\n      return new Shift.ObjectExpression({ properties: properties });\n    }\n  }, {\n    key: 'reduceReturnStatement',\n    value: function reduceReturnStatement(node, _ref54) {\n      var expression = _ref54.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.ReturnStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(node, _ref55) {\n      var directives = _ref55.directives,\n          statements = _ref55.statements;\n\n      if (node.directives.length === directives.length && node.directives.every(function (v, i) {\n        return v === directives[i];\n      }) && node.statements.length === statements.length && node.statements.every(function (v, i) {\n        return v === statements[i];\n      })) {\n        return node;\n      }\n      return new Shift.Script({ directives: directives, statements: statements });\n    }\n  }, {\n    key: 'reduceSetter',\n    value: function reduceSetter(node, _ref56) {\n      var name = _ref56.name,\n          param = _ref56.param,\n          body = _ref56.body;\n\n      if (node.name === name && node.param === param && node.body === body) {\n        return node;\n      }\n      return new Shift.Setter({ name: name, param: param, body: body });\n    }\n  }, {\n    key: 'reduceShorthandProperty',\n    value: function reduceShorthandProperty(node, _ref57) {\n      var name = _ref57.name;\n\n      if (node.name === name) {\n        return node;\n      }\n      return new Shift.ShorthandProperty({ name: name });\n    }\n  }, {\n    key: 'reduceSpreadElement',\n    value: function reduceSpreadElement(node, _ref58) {\n      var expression = _ref58.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.SpreadElement({ expression: expression });\n    }\n  }, {\n    key: 'reduceSpreadProperty',\n    value: function reduceSpreadProperty(node, _ref59) {\n      var expression = _ref59.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.SpreadProperty({ expression: expression });\n    }\n  }, {\n    key: 'reduceStaticMemberAssignmentTarget',\n    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n      var object = _ref60.object;\n\n      if (node.object === object) {\n        return node;\n      }\n      return new Shift.StaticMemberAssignmentTarget({ object: object, property: node.property });\n    }\n  }, {\n    key: 'reduceStaticMemberExpression',\n    value: function reduceStaticMemberExpression(node, _ref61) {\n      var object = _ref61.object;\n\n      if (node.object === object) {\n        return node;\n      }\n      return new Shift.StaticMemberExpression({ object: object, property: node.property });\n    }\n  }, {\n    key: 'reduceStaticPropertyName',\n    value: function reduceStaticPropertyName(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceSuper',\n    value: function reduceSuper(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceSwitchCase',\n    value: function reduceSwitchCase(node, _ref62) {\n      var test = _ref62.test,\n          consequent = _ref62.consequent;\n\n      if (node.test === test && node.consequent.length === consequent.length && node.consequent.every(function (v, i) {\n        return v === consequent[i];\n      })) {\n        return node;\n      }\n      return new Shift.SwitchCase({ test: test, consequent: consequent });\n    }\n  }, {\n    key: 'reduceSwitchDefault',\n    value: function reduceSwitchDefault(node, _ref63) {\n      var consequent = _ref63.consequent;\n\n      if (node.consequent.length === consequent.length && node.consequent.every(function (v, i) {\n        return v === consequent[i];\n      })) {\n        return node;\n      }\n      return new Shift.SwitchDefault({ consequent: consequent });\n    }\n  }, {\n    key: 'reduceSwitchStatement',\n    value: function reduceSwitchStatement(node, _ref64) {\n      var discriminant = _ref64.discriminant,\n          cases = _ref64.cases;\n\n      if (node.discriminant === discriminant && node.cases.length === cases.length && node.cases.every(function (v, i) {\n        return v === cases[i];\n      })) {\n        return node;\n      }\n      return new Shift.SwitchStatement({ discriminant: discriminant, cases: cases });\n    }\n  }, {\n    key: 'reduceSwitchStatementWithDefault',\n    value: function reduceSwitchStatementWithDefault(node, _ref65) {\n      var discriminant = _ref65.discriminant,\n          preDefaultCases = _ref65.preDefaultCases,\n          defaultCase = _ref65.defaultCase,\n          postDefaultCases = _ref65.postDefaultCases;\n\n      if (node.discriminant === discriminant && node.preDefaultCases.length === preDefaultCases.length && node.preDefaultCases.every(function (v, i) {\n        return v === preDefaultCases[i];\n      }) && node.defaultCase === defaultCase && node.postDefaultCases.length === postDefaultCases.length && node.postDefaultCases.every(function (v, i) {\n        return v === postDefaultCases[i];\n      })) {\n        return node;\n      }\n      return new Shift.SwitchStatementWithDefault({ discriminant: discriminant, preDefaultCases: preDefaultCases, defaultCase: defaultCase, postDefaultCases: postDefaultCases });\n    }\n  }, {\n    key: 'reduceTemplateElement',\n    value: function reduceTemplateElement(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceTemplateExpression',\n    value: function reduceTemplateExpression(node, _ref66) {\n      var tag = _ref66.tag,\n          elements = _ref66.elements;\n\n      if (node.tag === tag && node.elements.length === elements.length && node.elements.every(function (v, i) {\n        return v === elements[i];\n      })) {\n        return node;\n      }\n      return new Shift.TemplateExpression({ tag: tag, elements: elements });\n    }\n  }, {\n    key: 'reduceThisExpression',\n    value: function reduceThisExpression(node) {\n      return node;\n    }\n  }, {\n    key: 'reduceThrowStatement',\n    value: function reduceThrowStatement(node, _ref67) {\n      var expression = _ref67.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.ThrowStatement({ expression: expression });\n    }\n  }, {\n    key: 'reduceTryCatchStatement',\n    value: function reduceTryCatchStatement(node, _ref68) {\n      var body = _ref68.body,\n          catchClause = _ref68.catchClause;\n\n      if (node.body === body && node.catchClause === catchClause) {\n        return node;\n      }\n      return new Shift.TryCatchStatement({ body: body, catchClause: catchClause });\n    }\n  }, {\n    key: 'reduceTryFinallyStatement',\n    value: function reduceTryFinallyStatement(node, _ref69) {\n      var body = _ref69.body,\n          catchClause = _ref69.catchClause,\n          finalizer = _ref69.finalizer;\n\n      if (node.body === body && node.catchClause === catchClause && node.finalizer === finalizer) {\n        return node;\n      }\n      return new Shift.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });\n    }\n  }, {\n    key: 'reduceUnaryExpression',\n    value: function reduceUnaryExpression(node, _ref70) {\n      var operand = _ref70.operand;\n\n      if (node.operand === operand) {\n        return node;\n      }\n      return new Shift.UnaryExpression({ operator: node.operator, operand: operand });\n    }\n  }, {\n    key: 'reduceUpdateExpression',\n    value: function reduceUpdateExpression(node, _ref71) {\n      var operand = _ref71.operand;\n\n      if (node.operand === operand) {\n        return node;\n      }\n      return new Shift.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand: operand });\n    }\n  }, {\n    key: 'reduceVariableDeclaration',\n    value: function reduceVariableDeclaration(node, _ref72) {\n      var declarators = _ref72.declarators;\n\n      if (node.declarators.length === declarators.length && node.declarators.every(function (v, i) {\n        return v === declarators[i];\n      })) {\n        return node;\n      }\n      return new Shift.VariableDeclaration({ kind: node.kind, declarators: declarators });\n    }\n  }, {\n    key: 'reduceVariableDeclarationStatement',\n    value: function reduceVariableDeclarationStatement(node, _ref73) {\n      var declaration = _ref73.declaration;\n\n      if (node.declaration === declaration) {\n        return node;\n      }\n      return new Shift.VariableDeclarationStatement({ declaration: declaration });\n    }\n  }, {\n    key: 'reduceVariableDeclarator',\n    value: function reduceVariableDeclarator(node, _ref74) {\n      var binding = _ref74.binding,\n          init = _ref74.init;\n\n      if (node.binding === binding && node.init === init) {\n        return node;\n      }\n      return new Shift.VariableDeclarator({ binding: binding, init: init });\n    }\n  }, {\n    key: 'reduceWhileStatement',\n    value: function reduceWhileStatement(node, _ref75) {\n      var test = _ref75.test,\n          body = _ref75.body;\n\n      if (node.test === test && node.body === body) {\n        return node;\n      }\n      return new Shift.WhileStatement({ test: test, body: body });\n    }\n  }, {\n    key: 'reduceWithStatement',\n    value: function reduceWithStatement(node, _ref76) {\n      var object = _ref76.object,\n          body = _ref76.body;\n\n      if (node.object === object && node.body === body) {\n        return node;\n      }\n      return new Shift.WithStatement({ object: object, body: body });\n    }\n  }, {\n    key: 'reduceYieldExpression',\n    value: function reduceYieldExpression(node, _ref77) {\n      var expression = _ref77.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.YieldExpression({ expression: expression });\n    }\n  }, {\n    key: 'reduceYieldGeneratorExpression',\n    value: function reduceYieldGeneratorExpression(node, _ref78) {\n      var expression = _ref78.expression;\n\n      if (node.expression === expression) {\n        return node;\n      }\n      return new Shift.YieldGeneratorExpression({ expression: expression });\n    }\n  }]);\n\n  return LazyCloneReducer;\n}();\n\nexports.default = LazyCloneReducer;\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/lazy-clone-reducer.js?")},"./node_modules/shift-reducer/dist/memoize.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.default = memoize;\n\nvar _shiftAst = __webpack_require__("./node_modules/shift-ast/dist/index.js");\n\nvar Shift = _interopRequireWildcard(_shiftAst);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction memoize(reducer) {\n  var cache = new WeakMap();\n  return {\n    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceArrayAssignmentTarget(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceArrayBinding: function reduceArrayBinding(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceArrayBinding(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceArrayExpression: function reduceArrayExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceArrayExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceArrowExpression: function reduceArrowExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceArrowExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAssignmentExpression: function reduceAssignmentExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAssignmentExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAssignmentTargetIdentifier(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAssignmentTargetPropertyIdentifier(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAssignmentTargetPropertyProperty(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAssignmentTargetWithDefault(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceAwaitExpression: function reduceAwaitExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceAwaitExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBinaryExpression: function reduceBinaryExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBinaryExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBindingIdentifier: function reduceBindingIdentifier(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBindingIdentifier(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBindingPropertyIdentifier(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBindingPropertyProperty(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBindingWithDefault: function reduceBindingWithDefault(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBindingWithDefault(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBlock: function reduceBlock(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBlock(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBlockStatement: function reduceBlockStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBlockStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceBreakStatement: function reduceBreakStatement(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceBreakStatement(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceCallExpression: function reduceCallExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceCallExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceCatchClause: function reduceCatchClause(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceCatchClause(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceClassDeclaration: function reduceClassDeclaration(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceClassDeclaration(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceClassElement: function reduceClassElement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceClassElement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceClassExpression: function reduceClassExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceClassExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceCompoundAssignmentExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceComputedMemberAssignmentTarget(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceComputedMemberExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceComputedPropertyName: function reduceComputedPropertyName(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceComputedPropertyName(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceConditionalExpression: function reduceConditionalExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceConditionalExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceContinueStatement: function reduceContinueStatement(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceContinueStatement(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceDataProperty: function reduceDataProperty(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceDataProperty(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceDebuggerStatement: function reduceDebuggerStatement(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceDebuggerStatement(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceDirective: function reduceDirective(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceDirective(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceDoWhileStatement: function reduceDoWhileStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceDoWhileStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceEmptyStatement: function reduceEmptyStatement(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceEmptyStatement(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExport: function reduceExport(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExport(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportAllFrom: function reduceExportAllFrom(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportAllFrom(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportDefault: function reduceExportDefault(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportDefault(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportFrom: function reduceExportFrom(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportFrom(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportFromSpecifier(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportLocalSpecifier(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExportLocals: function reduceExportLocals(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExportLocals(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceExpressionStatement: function reduceExpressionStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceExpressionStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceForAwaitStatement: function reduceForAwaitStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceForAwaitStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceForInStatement: function reduceForInStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceForInStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceForOfStatement: function reduceForOfStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceForOfStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceForStatement: function reduceForStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceForStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceFormalParameters: function reduceFormalParameters(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceFormalParameters(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceFunctionBody: function reduceFunctionBody(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceFunctionBody(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceFunctionDeclaration(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceFunctionExpression: function reduceFunctionExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceFunctionExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceGetter: function reduceGetter(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceGetter(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceIdentifierExpression: function reduceIdentifierExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceIdentifierExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceIfStatement: function reduceIfStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceIfStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceImport: function reduceImport(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceImport(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceImportNamespace: function reduceImportNamespace(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceImportNamespace(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceImportSpecifier: function reduceImportSpecifier(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceImportSpecifier(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLabeledStatement: function reduceLabeledStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLabeledStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralBooleanExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralInfinityExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralNullExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralNumericExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralRegExpExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceLiteralStringExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceMethod: function reduceMethod(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceMethod(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceModule: function reduceModule(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceModule(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceNewExpression: function reduceNewExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceNewExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceNewTargetExpression: function reduceNewTargetExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceNewTargetExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceObjectAssignmentTarget(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceObjectBinding: function reduceObjectBinding(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceObjectBinding(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceObjectExpression: function reduceObjectExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceObjectExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceReturnStatement: function reduceReturnStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceReturnStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceScript: function reduceScript(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceScript(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSetter: function reduceSetter(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSetter(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceShorthandProperty: function reduceShorthandProperty(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceShorthandProperty(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSpreadElement: function reduceSpreadElement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSpreadElement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSpreadProperty: function reduceSpreadProperty(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSpreadProperty(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceStaticMemberAssignmentTarget(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceStaticMemberExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceStaticPropertyName: function reduceStaticPropertyName(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceStaticPropertyName(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSuper: function reduceSuper(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSuper(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSwitchCase: function reduceSwitchCase(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSwitchCase(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSwitchDefault: function reduceSwitchDefault(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSwitchDefault(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSwitchStatement: function reduceSwitchStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSwitchStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceSwitchStatementWithDefault(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceTemplateElement: function reduceTemplateElement(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceTemplateElement(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceTemplateExpression: function reduceTemplateExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceTemplateExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceThisExpression: function reduceThisExpression(node) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceThisExpression(node);\n      cache.set(node, res);\n      return res;\n    },\n    reduceThrowStatement: function reduceThrowStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceThrowStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceTryCatchStatement: function reduceTryCatchStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceTryCatchStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceTryFinallyStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceUnaryExpression: function reduceUnaryExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceUnaryExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceUpdateExpression: function reduceUpdateExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceUpdateExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceVariableDeclaration: function reduceVariableDeclaration(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceVariableDeclaration(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceVariableDeclarationStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceVariableDeclarator: function reduceVariableDeclarator(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceVariableDeclarator(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceWhileStatement: function reduceWhileStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceWhileStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceWithStatement: function reduceWithStatement(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceWithStatement(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceYieldExpression: function reduceYieldExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceYieldExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    },\n    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, arg) {\n      if (cache.has(node)) {\n        return cache.get(node);\n      }\n      var res = reducer.reduceYieldGeneratorExpression(node, arg);\n      cache.set(node, res);\n      return res;\n    }\n  };\n} // Generated by generate-memoize.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/memoize.js?')},"./node_modules/shift-reducer/dist/monoidal-reducer.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-monoidal-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar _shiftAst2 = _interopRequireDefault(_shiftAst);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MonoidalReducer = function () {\n  function MonoidalReducer(monoid) {\n    _classCallCheck(this, MonoidalReducer);\n\n    var identity = monoid.empty();\n    this.identity = identity;\n    var concat = void 0;\n    if (monoid.prototype && typeof monoid.prototype.concat === 'function') {\n      concat = Function.prototype.call.bind(monoid.prototype.concat);\n    } else if (typeof monoid.concat === 'function') {\n      concat = monoid.concat;\n    } else {\n      throw new TypeError('Monoid must provide a `concat` method');\n    }\n    this.append = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return args.reduce(concat, identity);\n    };\n  }\n\n  _createClass(MonoidalReducer, [{\n    key: 'reduceArrayAssignmentTarget',\n    value: function reduceArrayAssignmentTarget(node, _ref) {\n      var elements = _ref.elements,\n          rest = _ref.rest;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })).concat([rest == null ? this.identity : rest]));\n    }\n  }, {\n    key: 'reduceArrayBinding',\n    value: function reduceArrayBinding(node, _ref2) {\n      var elements = _ref2.elements,\n          rest = _ref2.rest;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })).concat([rest == null ? this.identity : rest]));\n    }\n  }, {\n    key: 'reduceArrayExpression',\n    value: function reduceArrayExpression(node, _ref3) {\n      var elements = _ref3.elements;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })));\n    }\n  }, {\n    key: 'reduceArrowExpression',\n    value: function reduceArrowExpression(node, _ref4) {\n      var params = _ref4.params,\n          body = _ref4.body;\n\n      return this.append(params, body);\n    }\n  }, {\n    key: 'reduceAssignmentExpression',\n    value: function reduceAssignmentExpression(node, _ref5) {\n      var binding = _ref5.binding,\n          expression = _ref5.expression;\n\n      return this.append(binding, expression);\n    }\n  }, {\n    key: 'reduceAssignmentTargetIdentifier',\n    value: function reduceAssignmentTargetIdentifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyIdentifier',\n    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n      var binding = _ref6.binding,\n          init = _ref6.init;\n\n      return this.append(binding, init == null ? this.identity : init);\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyProperty',\n    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n      var name = _ref7.name,\n          binding = _ref7.binding;\n\n      return this.append(name, binding);\n    }\n  }, {\n    key: 'reduceAssignmentTargetWithDefault',\n    value: function reduceAssignmentTargetWithDefault(node, _ref8) {\n      var binding = _ref8.binding,\n          init = _ref8.init;\n\n      return this.append(binding, init);\n    }\n  }, {\n    key: 'reduceAwaitExpression',\n    value: function reduceAwaitExpression(node, _ref9) {\n      var expression = _ref9.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceBinaryExpression',\n    value: function reduceBinaryExpression(node, _ref10) {\n      var left = _ref10.left,\n          right = _ref10.right;\n\n      return this.append(left, right);\n    }\n  }, {\n    key: 'reduceBindingIdentifier',\n    value: function reduceBindingIdentifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceBindingPropertyIdentifier',\n    value: function reduceBindingPropertyIdentifier(node, _ref11) {\n      var binding = _ref11.binding,\n          init = _ref11.init;\n\n      return this.append(binding, init == null ? this.identity : init);\n    }\n  }, {\n    key: 'reduceBindingPropertyProperty',\n    value: function reduceBindingPropertyProperty(node, _ref12) {\n      var name = _ref12.name,\n          binding = _ref12.binding;\n\n      return this.append(name, binding);\n    }\n  }, {\n    key: 'reduceBindingWithDefault',\n    value: function reduceBindingWithDefault(node, _ref13) {\n      var binding = _ref13.binding,\n          init = _ref13.init;\n\n      return this.append(binding, init);\n    }\n  }, {\n    key: 'reduceBlock',\n    value: function reduceBlock(node, _ref14) {\n      var statements = _ref14.statements;\n\n      return this.append.apply(this, _toConsumableArray(statements));\n    }\n  }, {\n    key: 'reduceBlockStatement',\n    value: function reduceBlockStatement(node, _ref15) {\n      var block = _ref15.block;\n\n      return block;\n    }\n  }, {\n    key: 'reduceBreakStatement',\n    value: function reduceBreakStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceCallExpression',\n    value: function reduceCallExpression(node, _ref16) {\n      var callee = _ref16.callee,\n          _arguments = _ref16.arguments;\n\n      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));\n    }\n  }, {\n    key: 'reduceCatchClause',\n    value: function reduceCatchClause(node, _ref17) {\n      var binding = _ref17.binding,\n          body = _ref17.body;\n\n      return this.append(binding, body);\n    }\n  }, {\n    key: 'reduceClassDeclaration',\n    value: function reduceClassDeclaration(node, _ref18) {\n      var name = _ref18.name,\n          _super = _ref18.super,\n          elements = _ref18.elements;\n\n      return this.append.apply(this, [name, _super == null ? this.identity : _super].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceClassElement',\n    value: function reduceClassElement(node, _ref19) {\n      var method = _ref19.method;\n\n      return method;\n    }\n  }, {\n    key: 'reduceClassExpression',\n    value: function reduceClassExpression(node, _ref20) {\n      var name = _ref20.name,\n          _super = _ref20.super,\n          elements = _ref20.elements;\n\n      return this.append.apply(this, [name == null ? this.identity : name, _super == null ? this.identity : _super].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceCompoundAssignmentExpression',\n    value: function reduceCompoundAssignmentExpression(node, _ref21) {\n      var binding = _ref21.binding,\n          expression = _ref21.expression;\n\n      return this.append(binding, expression);\n    }\n  }, {\n    key: 'reduceComputedMemberAssignmentTarget',\n    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n      var object = _ref22.object,\n          expression = _ref22.expression;\n\n      return this.append(object, expression);\n    }\n  }, {\n    key: 'reduceComputedMemberExpression',\n    value: function reduceComputedMemberExpression(node, _ref23) {\n      var object = _ref23.object,\n          expression = _ref23.expression;\n\n      return this.append(object, expression);\n    }\n  }, {\n    key: 'reduceComputedPropertyName',\n    value: function reduceComputedPropertyName(node, _ref24) {\n      var expression = _ref24.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceConditionalExpression',\n    value: function reduceConditionalExpression(node, _ref25) {\n      var test = _ref25.test,\n          consequent = _ref25.consequent,\n          alternate = _ref25.alternate;\n\n      return this.append(test, consequent, alternate);\n    }\n  }, {\n    key: 'reduceContinueStatement',\n    value: function reduceContinueStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDataProperty',\n    value: function reduceDataProperty(node, _ref26) {\n      var name = _ref26.name,\n          expression = _ref26.expression;\n\n      return this.append(name, expression);\n    }\n  }, {\n    key: 'reduceDebuggerStatement',\n    value: function reduceDebuggerStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDirective',\n    value: function reduceDirective(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDoWhileStatement',\n    value: function reduceDoWhileStatement(node, _ref27) {\n      var body = _ref27.body,\n          test = _ref27.test;\n\n      return this.append(body, test);\n    }\n  }, {\n    key: 'reduceEmptyStatement',\n    value: function reduceEmptyStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExport',\n    value: function reduceExport(node, _ref28) {\n      var declaration = _ref28.declaration;\n\n      return declaration;\n    }\n  }, {\n    key: 'reduceExportAllFrom',\n    value: function reduceExportAllFrom(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExportDefault',\n    value: function reduceExportDefault(node, _ref29) {\n      var body = _ref29.body;\n\n      return body;\n    }\n  }, {\n    key: 'reduceExportFrom',\n    value: function reduceExportFrom(node, _ref30) {\n      var namedExports = _ref30.namedExports;\n\n      return this.append.apply(this, _toConsumableArray(namedExports));\n    }\n  }, {\n    key: 'reduceExportFromSpecifier',\n    value: function reduceExportFromSpecifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExportLocalSpecifier',\n    value: function reduceExportLocalSpecifier(node, _ref31) {\n      var name = _ref31.name;\n\n      return name;\n    }\n  }, {\n    key: 'reduceExportLocals',\n    value: function reduceExportLocals(node, _ref32) {\n      var namedExports = _ref32.namedExports;\n\n      return this.append.apply(this, _toConsumableArray(namedExports));\n    }\n  }, {\n    key: 'reduceExpressionStatement',\n    value: function reduceExpressionStatement(node, _ref33) {\n      var expression = _ref33.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceForAwaitStatement',\n    value: function reduceForAwaitStatement(node, _ref34) {\n      var left = _ref34.left,\n          right = _ref34.right,\n          body = _ref34.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForInStatement',\n    value: function reduceForInStatement(node, _ref35) {\n      var left = _ref35.left,\n          right = _ref35.right,\n          body = _ref35.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForOfStatement',\n    value: function reduceForOfStatement(node, _ref36) {\n      var left = _ref36.left,\n          right = _ref36.right,\n          body = _ref36.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForStatement',\n    value: function reduceForStatement(node, _ref37) {\n      var init = _ref37.init,\n          test = _ref37.test,\n          update = _ref37.update,\n          body = _ref37.body;\n\n      return this.append(init == null ? this.identity : init, test == null ? this.identity : test, update == null ? this.identity : update, body);\n    }\n  }, {\n    key: 'reduceFormalParameters',\n    value: function reduceFormalParameters(node, _ref38) {\n      var items = _ref38.items,\n          rest = _ref38.rest;\n\n      return this.append.apply(this, _toConsumableArray(items).concat([rest == null ? this.identity : rest]));\n    }\n  }, {\n    key: 'reduceFunctionBody',\n    value: function reduceFunctionBody(node, _ref39) {\n      var directives = _ref39.directives,\n          statements = _ref39.statements;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));\n    }\n  }, {\n    key: 'reduceFunctionDeclaration',\n    value: function reduceFunctionDeclaration(node, _ref40) {\n      var name = _ref40.name,\n          params = _ref40.params,\n          body = _ref40.body;\n\n      return this.append(name, params, body);\n    }\n  }, {\n    key: 'reduceFunctionExpression',\n    value: function reduceFunctionExpression(node, _ref41) {\n      var name = _ref41.name,\n          params = _ref41.params,\n          body = _ref41.body;\n\n      return this.append(name == null ? this.identity : name, params, body);\n    }\n  }, {\n    key: 'reduceGetter',\n    value: function reduceGetter(node, _ref42) {\n      var name = _ref42.name,\n          body = _ref42.body;\n\n      return this.append(name, body);\n    }\n  }, {\n    key: 'reduceIdentifierExpression',\n    value: function reduceIdentifierExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceIfStatement',\n    value: function reduceIfStatement(node, _ref43) {\n      var test = _ref43.test,\n          consequent = _ref43.consequent,\n          alternate = _ref43.alternate;\n\n      return this.append(test, consequent, alternate == null ? this.identity : alternate);\n    }\n  }, {\n    key: 'reduceImport',\n    value: function reduceImport(node, _ref44) {\n      var defaultBinding = _ref44.defaultBinding,\n          namedImports = _ref44.namedImports;\n\n      return this.append.apply(this, [defaultBinding == null ? this.identity : defaultBinding].concat(_toConsumableArray(namedImports)));\n    }\n  }, {\n    key: 'reduceImportNamespace',\n    value: function reduceImportNamespace(node, _ref45) {\n      var defaultBinding = _ref45.defaultBinding,\n          namespaceBinding = _ref45.namespaceBinding;\n\n      return this.append(defaultBinding == null ? this.identity : defaultBinding, namespaceBinding);\n    }\n  }, {\n    key: 'reduceImportSpecifier',\n    value: function reduceImportSpecifier(node, _ref46) {\n      var binding = _ref46.binding;\n\n      return binding;\n    }\n  }, {\n    key: 'reduceLabeledStatement',\n    value: function reduceLabeledStatement(node, _ref47) {\n      var body = _ref47.body;\n\n      return body;\n    }\n  }, {\n    key: 'reduceLiteralBooleanExpression',\n    value: function reduceLiteralBooleanExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralInfinityExpression',\n    value: function reduceLiteralInfinityExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralNullExpression',\n    value: function reduceLiteralNullExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralNumericExpression',\n    value: function reduceLiteralNumericExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralRegExpExpression',\n    value: function reduceLiteralRegExpExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralStringExpression',\n    value: function reduceLiteralStringExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceMethod',\n    value: function reduceMethod(node, _ref48) {\n      var name = _ref48.name,\n          params = _ref48.params,\n          body = _ref48.body;\n\n      return this.append(name, params, body);\n    }\n  }, {\n    key: 'reduceModule',\n    value: function reduceModule(node, _ref49) {\n      var directives = _ref49.directives,\n          items = _ref49.items;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(items)));\n    }\n  }, {\n    key: 'reduceNewExpression',\n    value: function reduceNewExpression(node, _ref50) {\n      var callee = _ref50.callee,\n          _arguments = _ref50.arguments;\n\n      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));\n    }\n  }, {\n    key: 'reduceNewTargetExpression',\n    value: function reduceNewTargetExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceObjectAssignmentTarget',\n    value: function reduceObjectAssignmentTarget(node, _ref51) {\n      var properties = _ref51.properties,\n          rest = _ref51.rest;\n\n      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? this.identity : rest]));\n    }\n  }, {\n    key: 'reduceObjectBinding',\n    value: function reduceObjectBinding(node, _ref52) {\n      var properties = _ref52.properties,\n          rest = _ref52.rest;\n\n      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? this.identity : rest]));\n    }\n  }, {\n    key: 'reduceObjectExpression',\n    value: function reduceObjectExpression(node, _ref53) {\n      var properties = _ref53.properties;\n\n      return this.append.apply(this, _toConsumableArray(properties));\n    }\n  }, {\n    key: 'reduceReturnStatement',\n    value: function reduceReturnStatement(node, _ref54) {\n      var expression = _ref54.expression;\n\n      return expression == null ? this.identity : expression;\n    }\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(node, _ref55) {\n      var directives = _ref55.directives,\n          statements = _ref55.statements;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));\n    }\n  }, {\n    key: 'reduceSetter',\n    value: function reduceSetter(node, _ref56) {\n      var name = _ref56.name,\n          param = _ref56.param,\n          body = _ref56.body;\n\n      return this.append(name, param, body);\n    }\n  }, {\n    key: 'reduceShorthandProperty',\n    value: function reduceShorthandProperty(node, _ref57) {\n      var name = _ref57.name;\n\n      return name;\n    }\n  }, {\n    key: 'reduceSpreadElement',\n    value: function reduceSpreadElement(node, _ref58) {\n      var expression = _ref58.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceSpreadProperty',\n    value: function reduceSpreadProperty(node, _ref59) {\n      var expression = _ref59.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceStaticMemberAssignmentTarget',\n    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n      var object = _ref60.object;\n\n      return object;\n    }\n  }, {\n    key: 'reduceStaticMemberExpression',\n    value: function reduceStaticMemberExpression(node, _ref61) {\n      var object = _ref61.object;\n\n      return object;\n    }\n  }, {\n    key: 'reduceStaticPropertyName',\n    value: function reduceStaticPropertyName(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceSuper',\n    value: function reduceSuper(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceSwitchCase',\n    value: function reduceSwitchCase(node, _ref62) {\n      var test = _ref62.test,\n          consequent = _ref62.consequent;\n\n      return this.append.apply(this, [test].concat(_toConsumableArray(consequent)));\n    }\n  }, {\n    key: 'reduceSwitchDefault',\n    value: function reduceSwitchDefault(node, _ref63) {\n      var consequent = _ref63.consequent;\n\n      return this.append.apply(this, _toConsumableArray(consequent));\n    }\n  }, {\n    key: 'reduceSwitchStatement',\n    value: function reduceSwitchStatement(node, _ref64) {\n      var discriminant = _ref64.discriminant,\n          cases = _ref64.cases;\n\n      return this.append.apply(this, [discriminant].concat(_toConsumableArray(cases)));\n    }\n  }, {\n    key: 'reduceSwitchStatementWithDefault',\n    value: function reduceSwitchStatementWithDefault(node, _ref65) {\n      var discriminant = _ref65.discriminant,\n          preDefaultCases = _ref65.preDefaultCases,\n          defaultCase = _ref65.defaultCase,\n          postDefaultCases = _ref65.postDefaultCases;\n\n      return this.append.apply(this, [discriminant].concat(_toConsumableArray(preDefaultCases), [defaultCase], _toConsumableArray(postDefaultCases)));\n    }\n  }, {\n    key: 'reduceTemplateElement',\n    value: function reduceTemplateElement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceTemplateExpression',\n    value: function reduceTemplateExpression(node, _ref66) {\n      var tag = _ref66.tag,\n          elements = _ref66.elements;\n\n      return this.append.apply(this, [tag == null ? this.identity : tag].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceThisExpression',\n    value: function reduceThisExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceThrowStatement',\n    value: function reduceThrowStatement(node, _ref67) {\n      var expression = _ref67.expression;\n\n      return expression;\n    }\n  }, {\n    key: 'reduceTryCatchStatement',\n    value: function reduceTryCatchStatement(node, _ref68) {\n      var body = _ref68.body,\n          catchClause = _ref68.catchClause;\n\n      return this.append(body, catchClause);\n    }\n  }, {\n    key: 'reduceTryFinallyStatement',\n    value: function reduceTryFinallyStatement(node, _ref69) {\n      var body = _ref69.body,\n          catchClause = _ref69.catchClause,\n          finalizer = _ref69.finalizer;\n\n      return this.append(body, catchClause == null ? this.identity : catchClause, finalizer);\n    }\n  }, {\n    key: 'reduceUnaryExpression',\n    value: function reduceUnaryExpression(node, _ref70) {\n      var operand = _ref70.operand;\n\n      return operand;\n    }\n  }, {\n    key: 'reduceUpdateExpression',\n    value: function reduceUpdateExpression(node, _ref71) {\n      var operand = _ref71.operand;\n\n      return operand;\n    }\n  }, {\n    key: 'reduceVariableDeclaration',\n    value: function reduceVariableDeclaration(node, _ref72) {\n      var declarators = _ref72.declarators;\n\n      return this.append.apply(this, _toConsumableArray(declarators));\n    }\n  }, {\n    key: 'reduceVariableDeclarationStatement',\n    value: function reduceVariableDeclarationStatement(node, _ref73) {\n      var declaration = _ref73.declaration;\n\n      return declaration;\n    }\n  }, {\n    key: 'reduceVariableDeclarator',\n    value: function reduceVariableDeclarator(node, _ref74) {\n      var binding = _ref74.binding,\n          init = _ref74.init;\n\n      return this.append(binding, init == null ? this.identity : init);\n    }\n  }, {\n    key: 'reduceWhileStatement',\n    value: function reduceWhileStatement(node, _ref75) {\n      var test = _ref75.test,\n          body = _ref75.body;\n\n      return this.append(test, body);\n    }\n  }, {\n    key: 'reduceWithStatement',\n    value: function reduceWithStatement(node, _ref76) {\n      var object = _ref76.object,\n          body = _ref76.body;\n\n      return this.append(object, body);\n    }\n  }, {\n    key: 'reduceYieldExpression',\n    value: function reduceYieldExpression(node, _ref77) {\n      var expression = _ref77.expression;\n\n      return expression == null ? this.identity : expression;\n    }\n  }, {\n    key: 'reduceYieldGeneratorExpression',\n    value: function reduceYieldGeneratorExpression(node, _ref78) {\n      var expression = _ref78.expression;\n\n      return expression;\n    }\n  }]);\n\n  return MonoidalReducer;\n}();\n\nexports.default = MonoidalReducer;\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/monoidal-reducer.js?")},"./node_modules/shift-reducer/dist/reducers.js":function(module,exports,__webpack_require__){"use strict";eval('/*\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.ThunkedOrReducer = exports.OrReducer = exports.ThunkedAndReducer = exports.AndReducer = exports.ThunkedConcatReducer = exports.ConcatReducer = exports.ThunkedPlusReducer = exports.PlusReducer = undefined;\n\nvar _monoidalReducer = __webpack_require__("./node_modules/shift-reducer/dist/monoidal-reducer.js");\n\nvar _monoidalReducer2 = _interopRequireDefault(_monoidalReducer);\n\nvar _thunkedMonoidalReducer = __webpack_require__("./node_modules/shift-reducer/dist/thunked-monoidal-reducer.js");\n\nvar _thunkedMonoidalReducer2 = _interopRequireDefault(_thunkedMonoidalReducer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PlusMonoid = {\n  empty: function empty() {\n    return 0;\n  },\n  concat: function concat(a, b) {\n    return a + b;\n  }\n};\n\nvar ConcatMonoid = {\n  empty: function empty() {\n    return [];\n  },\n  concat: function concat(a, b) {\n    return a.concat(b);\n  }\n};\n\nvar AndMonoid = {\n  empty: function empty() {\n    return true;\n  },\n  concat: function concat(a, b) {\n    return a && b;\n  },\n  concatThunk: function concatThunk(a, b) {\n    return a && b();\n  }\n};\n\nvar OrMonoid = {\n  empty: function empty() {\n    return false;\n  },\n  concat: function concat(a, b) {\n    return a || b;\n  },\n  concatThunk: function concatThunk(a, b) {\n    return a || b();\n  }\n};\n\nvar PlusReducer = exports.PlusReducer = function (_MonoidalReducer) {\n  _inherits(PlusReducer, _MonoidalReducer);\n\n  function PlusReducer() {\n    _classCallCheck(this, PlusReducer);\n\n    return _possibleConstructorReturn(this, (PlusReducer.__proto__ || Object.getPrototypeOf(PlusReducer)).call(this, PlusMonoid));\n  }\n\n  return PlusReducer;\n}(_monoidalReducer2.default);\n\nvar ThunkedPlusReducer = exports.ThunkedPlusReducer = function (_ThunkedMonoidalReduc) {\n  _inherits(ThunkedPlusReducer, _ThunkedMonoidalReduc);\n\n  function ThunkedPlusReducer() {\n    _classCallCheck(this, ThunkedPlusReducer);\n\n    return _possibleConstructorReturn(this, (ThunkedPlusReducer.__proto__ || Object.getPrototypeOf(ThunkedPlusReducer)).call(this, PlusMonoid));\n  }\n\n  return ThunkedPlusReducer;\n}(_thunkedMonoidalReducer2.default);\n\nvar ConcatReducer = exports.ConcatReducer = function (_MonoidalReducer2) {\n  _inherits(ConcatReducer, _MonoidalReducer2);\n\n  function ConcatReducer() {\n    _classCallCheck(this, ConcatReducer);\n\n    return _possibleConstructorReturn(this, (ConcatReducer.__proto__ || Object.getPrototypeOf(ConcatReducer)).call(this, ConcatMonoid));\n  }\n\n  return ConcatReducer;\n}(_monoidalReducer2.default);\n\nvar ThunkedConcatReducer = exports.ThunkedConcatReducer = function (_ThunkedMonoidalReduc2) {\n  _inherits(ThunkedConcatReducer, _ThunkedMonoidalReduc2);\n\n  function ThunkedConcatReducer() {\n    _classCallCheck(this, ThunkedConcatReducer);\n\n    return _possibleConstructorReturn(this, (ThunkedConcatReducer.__proto__ || Object.getPrototypeOf(ThunkedConcatReducer)).call(this, ConcatMonoid));\n  }\n\n  return ThunkedConcatReducer;\n}(_thunkedMonoidalReducer2.default);\n\nvar AndReducer = exports.AndReducer = function (_MonoidalReducer3) {\n  _inherits(AndReducer, _MonoidalReducer3);\n\n  function AndReducer() {\n    _classCallCheck(this, AndReducer);\n\n    return _possibleConstructorReturn(this, (AndReducer.__proto__ || Object.getPrototypeOf(AndReducer)).call(this, AndMonoid));\n  }\n\n  return AndReducer;\n}(_monoidalReducer2.default);\n\nvar ThunkedAndReducer = exports.ThunkedAndReducer = function (_ThunkedMonoidalReduc3) {\n  _inherits(ThunkedAndReducer, _ThunkedMonoidalReduc3);\n\n  function ThunkedAndReducer() {\n    _classCallCheck(this, ThunkedAndReducer);\n\n    return _possibleConstructorReturn(this, (ThunkedAndReducer.__proto__ || Object.getPrototypeOf(ThunkedAndReducer)).call(this, AndMonoid));\n  }\n\n  return ThunkedAndReducer;\n}(_thunkedMonoidalReducer2.default);\n\nvar OrReducer = exports.OrReducer = function (_MonoidalReducer4) {\n  _inherits(OrReducer, _MonoidalReducer4);\n\n  function OrReducer() {\n    _classCallCheck(this, OrReducer);\n\n    return _possibleConstructorReturn(this, (OrReducer.__proto__ || Object.getPrototypeOf(OrReducer)).call(this, OrMonoid));\n  }\n\n  return OrReducer;\n}(_monoidalReducer2.default);\n\nvar ThunkedOrReducer = exports.ThunkedOrReducer = function (_ThunkedMonoidalReduc4) {\n  _inherits(ThunkedOrReducer, _ThunkedMonoidalReduc4);\n\n  function ThunkedOrReducer() {\n    _classCallCheck(this, ThunkedOrReducer);\n\n    return _possibleConstructorReturn(this, (ThunkedOrReducer.__proto__ || Object.getPrototypeOf(ThunkedOrReducer)).call(this, OrMonoid));\n  }\n\n  return ThunkedOrReducer;\n}(_thunkedMonoidalReducer2.default);\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/reducers.js?')},"./node_modules/shift-reducer/dist/thunked-director.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.thunkedReduce = thunkedReduce;\n// Generated by generate-director.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar director = {\n  ArrayAssignmentTarget: function ArrayAssignmentTarget(reducer, node) {\n    var _this = this;\n\n    return reducer.reduceArrayAssignmentTarget(node, { elements: node.elements.map(function (v) {\n        return v && function () {\n          return _this[v.type](reducer, v);\n        };\n      }), rest: node.rest && function () {\n        return _this[node.rest.type](reducer, node.rest);\n      } });\n  },\n  ArrayBinding: function ArrayBinding(reducer, node) {\n    var _this2 = this;\n\n    return reducer.reduceArrayBinding(node, { elements: node.elements.map(function (v) {\n        return v && function () {\n          return _this2[v.type](reducer, v);\n        };\n      }), rest: node.rest && function () {\n        return _this2[node.rest.type](reducer, node.rest);\n      } });\n  },\n  ArrayExpression: function ArrayExpression(reducer, node) {\n    var _this3 = this;\n\n    return reducer.reduceArrayExpression(node, { elements: node.elements.map(function (v) {\n        return v && function () {\n          return _this3[v.type](reducer, v);\n        };\n      }) });\n  },\n  ArrowExpression: function ArrowExpression(reducer, node) {\n    var _this4 = this;\n\n    return reducer.reduceArrowExpression(node, { params: function params() {\n        return _this4.FormalParameters(reducer, node.params);\n      }, body: function body() {\n        return _this4[node.body.type](reducer, node.body);\n      } });\n  },\n  AssignmentExpression: function AssignmentExpression(reducer, node) {\n    var _this5 = this;\n\n    return reducer.reduceAssignmentExpression(node, { binding: function binding() {\n        return _this5[node.binding.type](reducer, node.binding);\n      }, expression: function expression() {\n        return _this5[node.expression.type](reducer, node.expression);\n      } });\n  },\n  AssignmentTargetIdentifier: function AssignmentTargetIdentifier(reducer, node) {\n    return reducer.reduceAssignmentTargetIdentifier(node);\n  },\n  AssignmentTargetPropertyIdentifier: function AssignmentTargetPropertyIdentifier(reducer, node) {\n    var _this6 = this;\n\n    return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: function binding() {\n        return _this6.AssignmentTargetIdentifier(reducer, node.binding);\n      }, init: node.init && function () {\n        return _this6[node.init.type](reducer, node.init);\n      } });\n  },\n  AssignmentTargetPropertyProperty: function AssignmentTargetPropertyProperty(reducer, node) {\n    var _this7 = this;\n\n    return reducer.reduceAssignmentTargetPropertyProperty(node, { name: function name() {\n        return _this7[node.name.type](reducer, node.name);\n      }, binding: function binding() {\n        return _this7[node.binding.type](reducer, node.binding);\n      } });\n  },\n  AssignmentTargetWithDefault: function AssignmentTargetWithDefault(reducer, node) {\n    var _this8 = this;\n\n    return reducer.reduceAssignmentTargetWithDefault(node, { binding: function binding() {\n        return _this8[node.binding.type](reducer, node.binding);\n      }, init: function init() {\n        return _this8[node.init.type](reducer, node.init);\n      } });\n  },\n  AwaitExpression: function AwaitExpression(reducer, node) {\n    var _this9 = this;\n\n    return reducer.reduceAwaitExpression(node, { expression: function expression() {\n        return _this9[node.expression.type](reducer, node.expression);\n      } });\n  },\n  BinaryExpression: function BinaryExpression(reducer, node) {\n    var _this10 = this;\n\n    return reducer.reduceBinaryExpression(node, { left: function left() {\n        return _this10[node.left.type](reducer, node.left);\n      }, right: function right() {\n        return _this10[node.right.type](reducer, node.right);\n      } });\n  },\n  BindingIdentifier: function BindingIdentifier(reducer, node) {\n    return reducer.reduceBindingIdentifier(node);\n  },\n  BindingPropertyIdentifier: function BindingPropertyIdentifier(reducer, node) {\n    var _this11 = this;\n\n    return reducer.reduceBindingPropertyIdentifier(node, { binding: function binding() {\n        return _this11.BindingIdentifier(reducer, node.binding);\n      }, init: node.init && function () {\n        return _this11[node.init.type](reducer, node.init);\n      } });\n  },\n  BindingPropertyProperty: function BindingPropertyProperty(reducer, node) {\n    var _this12 = this;\n\n    return reducer.reduceBindingPropertyProperty(node, { name: function name() {\n        return _this12[node.name.type](reducer, node.name);\n      }, binding: function binding() {\n        return _this12[node.binding.type](reducer, node.binding);\n      } });\n  },\n  BindingWithDefault: function BindingWithDefault(reducer, node) {\n    var _this13 = this;\n\n    return reducer.reduceBindingWithDefault(node, { binding: function binding() {\n        return _this13[node.binding.type](reducer, node.binding);\n      }, init: function init() {\n        return _this13[node.init.type](reducer, node.init);\n      } });\n  },\n  Block: function Block(reducer, node) {\n    var _this14 = this;\n\n    return reducer.reduceBlock(node, { statements: node.statements.map(function (v) {\n        return function () {\n          return _this14[v.type](reducer, v);\n        };\n      }) });\n  },\n  BlockStatement: function BlockStatement(reducer, node) {\n    var _this15 = this;\n\n    return reducer.reduceBlockStatement(node, { block: function block() {\n        return _this15.Block(reducer, node.block);\n      } });\n  },\n  BreakStatement: function BreakStatement(reducer, node) {\n    return reducer.reduceBreakStatement(node);\n  },\n  CallExpression: function CallExpression(reducer, node) {\n    var _this16 = this;\n\n    return reducer.reduceCallExpression(node, { callee: function callee() {\n        return _this16[node.callee.type](reducer, node.callee);\n      }, arguments: node.arguments.map(function (v) {\n        return function () {\n          return _this16[v.type](reducer, v);\n        };\n      }) });\n  },\n  CatchClause: function CatchClause(reducer, node) {\n    var _this17 = this;\n\n    return reducer.reduceCatchClause(node, { binding: function binding() {\n        return _this17[node.binding.type](reducer, node.binding);\n      }, body: function body() {\n        return _this17.Block(reducer, node.body);\n      } });\n  },\n  ClassDeclaration: function ClassDeclaration(reducer, node) {\n    var _this18 = this;\n\n    return reducer.reduceClassDeclaration(node, { name: function name() {\n        return _this18.BindingIdentifier(reducer, node.name);\n      }, super: node.super && function () {\n        return _this18[node.super.type](reducer, node.super);\n      }, elements: node.elements.map(function (v) {\n        return function () {\n          return _this18.ClassElement(reducer, v);\n        };\n      }) });\n  },\n  ClassElement: function ClassElement(reducer, node) {\n    var _this19 = this;\n\n    return reducer.reduceClassElement(node, { method: function method() {\n        return _this19[node.method.type](reducer, node.method);\n      } });\n  },\n  ClassExpression: function ClassExpression(reducer, node) {\n    var _this20 = this;\n\n    return reducer.reduceClassExpression(node, { name: node.name && function () {\n        return _this20.BindingIdentifier(reducer, node.name);\n      }, super: node.super && function () {\n        return _this20[node.super.type](reducer, node.super);\n      }, elements: node.elements.map(function (v) {\n        return function () {\n          return _this20.ClassElement(reducer, v);\n        };\n      }) });\n  },\n  CompoundAssignmentExpression: function CompoundAssignmentExpression(reducer, node) {\n    var _this21 = this;\n\n    return reducer.reduceCompoundAssignmentExpression(node, { binding: function binding() {\n        return _this21[node.binding.type](reducer, node.binding);\n      }, expression: function expression() {\n        return _this21[node.expression.type](reducer, node.expression);\n      } });\n  },\n  ComputedMemberAssignmentTarget: function ComputedMemberAssignmentTarget(reducer, node) {\n    var _this22 = this;\n\n    return reducer.reduceComputedMemberAssignmentTarget(node, { object: function object() {\n        return _this22[node.object.type](reducer, node.object);\n      }, expression: function expression() {\n        return _this22[node.expression.type](reducer, node.expression);\n      } });\n  },\n  ComputedMemberExpression: function ComputedMemberExpression(reducer, node) {\n    var _this23 = this;\n\n    return reducer.reduceComputedMemberExpression(node, { object: function object() {\n        return _this23[node.object.type](reducer, node.object);\n      }, expression: function expression() {\n        return _this23[node.expression.type](reducer, node.expression);\n      } });\n  },\n  ComputedPropertyName: function ComputedPropertyName(reducer, node) {\n    var _this24 = this;\n\n    return reducer.reduceComputedPropertyName(node, { expression: function expression() {\n        return _this24[node.expression.type](reducer, node.expression);\n      } });\n  },\n  ConditionalExpression: function ConditionalExpression(reducer, node) {\n    var _this25 = this;\n\n    return reducer.reduceConditionalExpression(node, { test: function test() {\n        return _this25[node.test.type](reducer, node.test);\n      }, consequent: function consequent() {\n        return _this25[node.consequent.type](reducer, node.consequent);\n      }, alternate: function alternate() {\n        return _this25[node.alternate.type](reducer, node.alternate);\n      } });\n  },\n  ContinueStatement: function ContinueStatement(reducer, node) {\n    return reducer.reduceContinueStatement(node);\n  },\n  DataProperty: function DataProperty(reducer, node) {\n    var _this26 = this;\n\n    return reducer.reduceDataProperty(node, { name: function name() {\n        return _this26[node.name.type](reducer, node.name);\n      }, expression: function expression() {\n        return _this26[node.expression.type](reducer, node.expression);\n      } });\n  },\n  DebuggerStatement: function DebuggerStatement(reducer, node) {\n    return reducer.reduceDebuggerStatement(node);\n  },\n  Directive: function Directive(reducer, node) {\n    return reducer.reduceDirective(node);\n  },\n  DoWhileStatement: function DoWhileStatement(reducer, node) {\n    var _this27 = this;\n\n    return reducer.reduceDoWhileStatement(node, { body: function body() {\n        return _this27[node.body.type](reducer, node.body);\n      }, test: function test() {\n        return _this27[node.test.type](reducer, node.test);\n      } });\n  },\n  EmptyStatement: function EmptyStatement(reducer, node) {\n    return reducer.reduceEmptyStatement(node);\n  },\n  Export: function Export(reducer, node) {\n    var _this28 = this;\n\n    return reducer.reduceExport(node, { declaration: function declaration() {\n        return _this28[node.declaration.type](reducer, node.declaration);\n      } });\n  },\n  ExportAllFrom: function ExportAllFrom(reducer, node) {\n    return reducer.reduceExportAllFrom(node);\n  },\n  ExportDefault: function ExportDefault(reducer, node) {\n    var _this29 = this;\n\n    return reducer.reduceExportDefault(node, { body: function body() {\n        return _this29[node.body.type](reducer, node.body);\n      } });\n  },\n  ExportFrom: function ExportFrom(reducer, node) {\n    var _this30 = this;\n\n    return reducer.reduceExportFrom(node, { namedExports: node.namedExports.map(function (v) {\n        return function () {\n          return _this30.ExportFromSpecifier(reducer, v);\n        };\n      }) });\n  },\n  ExportFromSpecifier: function ExportFromSpecifier(reducer, node) {\n    return reducer.reduceExportFromSpecifier(node);\n  },\n  ExportLocalSpecifier: function ExportLocalSpecifier(reducer, node) {\n    var _this31 = this;\n\n    return reducer.reduceExportLocalSpecifier(node, { name: function name() {\n        return _this31.IdentifierExpression(reducer, node.name);\n      } });\n  },\n  ExportLocals: function ExportLocals(reducer, node) {\n    var _this32 = this;\n\n    return reducer.reduceExportLocals(node, { namedExports: node.namedExports.map(function (v) {\n        return function () {\n          return _this32.ExportLocalSpecifier(reducer, v);\n        };\n      }) });\n  },\n  ExpressionStatement: function ExpressionStatement(reducer, node) {\n    var _this33 = this;\n\n    return reducer.reduceExpressionStatement(node, { expression: function expression() {\n        return _this33[node.expression.type](reducer, node.expression);\n      } });\n  },\n  ForAwaitStatement: function ForAwaitStatement(reducer, node) {\n    var _this34 = this;\n\n    return reducer.reduceForAwaitStatement(node, { left: function left() {\n        return _this34[node.left.type](reducer, node.left);\n      }, right: function right() {\n        return _this34[node.right.type](reducer, node.right);\n      }, body: function body() {\n        return _this34[node.body.type](reducer, node.body);\n      } });\n  },\n  ForInStatement: function ForInStatement(reducer, node) {\n    var _this35 = this;\n\n    return reducer.reduceForInStatement(node, { left: function left() {\n        return _this35[node.left.type](reducer, node.left);\n      }, right: function right() {\n        return _this35[node.right.type](reducer, node.right);\n      }, body: function body() {\n        return _this35[node.body.type](reducer, node.body);\n      } });\n  },\n  ForOfStatement: function ForOfStatement(reducer, node) {\n    var _this36 = this;\n\n    return reducer.reduceForOfStatement(node, { left: function left() {\n        return _this36[node.left.type](reducer, node.left);\n      }, right: function right() {\n        return _this36[node.right.type](reducer, node.right);\n      }, body: function body() {\n        return _this36[node.body.type](reducer, node.body);\n      } });\n  },\n  ForStatement: function ForStatement(reducer, node) {\n    var _this37 = this;\n\n    return reducer.reduceForStatement(node, { init: node.init && function () {\n        return _this37[node.init.type](reducer, node.init);\n      }, test: node.test && function () {\n        return _this37[node.test.type](reducer, node.test);\n      }, update: node.update && function () {\n        return _this37[node.update.type](reducer, node.update);\n      }, body: function body() {\n        return _this37[node.body.type](reducer, node.body);\n      } });\n  },\n  FormalParameters: function FormalParameters(reducer, node) {\n    var _this38 = this;\n\n    return reducer.reduceFormalParameters(node, { items: node.items.map(function (v) {\n        return function () {\n          return _this38[v.type](reducer, v);\n        };\n      }), rest: node.rest && function () {\n        return _this38[node.rest.type](reducer, node.rest);\n      } });\n  },\n  FunctionBody: function FunctionBody(reducer, node) {\n    var _this39 = this;\n\n    return reducer.reduceFunctionBody(node, { directives: node.directives.map(function (v) {\n        return function () {\n          return _this39.Directive(reducer, v);\n        };\n      }), statements: node.statements.map(function (v) {\n        return function () {\n          return _this39[v.type](reducer, v);\n        };\n      }) });\n  },\n  FunctionDeclaration: function FunctionDeclaration(reducer, node) {\n    var _this40 = this;\n\n    return reducer.reduceFunctionDeclaration(node, { name: function name() {\n        return _this40.BindingIdentifier(reducer, node.name);\n      }, params: function params() {\n        return _this40.FormalParameters(reducer, node.params);\n      }, body: function body() {\n        return _this40.FunctionBody(reducer, node.body);\n      } });\n  },\n  FunctionExpression: function FunctionExpression(reducer, node) {\n    var _this41 = this;\n\n    return reducer.reduceFunctionExpression(node, { name: node.name && function () {\n        return _this41.BindingIdentifier(reducer, node.name);\n      }, params: function params() {\n        return _this41.FormalParameters(reducer, node.params);\n      }, body: function body() {\n        return _this41.FunctionBody(reducer, node.body);\n      } });\n  },\n  Getter: function Getter(reducer, node) {\n    var _this42 = this;\n\n    return reducer.reduceGetter(node, { name: function name() {\n        return _this42[node.name.type](reducer, node.name);\n      }, body: function body() {\n        return _this42.FunctionBody(reducer, node.body);\n      } });\n  },\n  IdentifierExpression: function IdentifierExpression(reducer, node) {\n    return reducer.reduceIdentifierExpression(node);\n  },\n  IfStatement: function IfStatement(reducer, node) {\n    var _this43 = this;\n\n    return reducer.reduceIfStatement(node, { test: function test() {\n        return _this43[node.test.type](reducer, node.test);\n      }, consequent: function consequent() {\n        return _this43[node.consequent.type](reducer, node.consequent);\n      }, alternate: node.alternate && function () {\n        return _this43[node.alternate.type](reducer, node.alternate);\n      } });\n  },\n  Import: function Import(reducer, node) {\n    var _this44 = this;\n\n    return reducer.reduceImport(node, { defaultBinding: node.defaultBinding && function () {\n        return _this44.BindingIdentifier(reducer, node.defaultBinding);\n      }, namedImports: node.namedImports.map(function (v) {\n        return function () {\n          return _this44.ImportSpecifier(reducer, v);\n        };\n      }) });\n  },\n  ImportNamespace: function ImportNamespace(reducer, node) {\n    var _this45 = this;\n\n    return reducer.reduceImportNamespace(node, { defaultBinding: node.defaultBinding && function () {\n        return _this45.BindingIdentifier(reducer, node.defaultBinding);\n      }, namespaceBinding: function namespaceBinding() {\n        return _this45.BindingIdentifier(reducer, node.namespaceBinding);\n      } });\n  },\n  ImportSpecifier: function ImportSpecifier(reducer, node) {\n    var _this46 = this;\n\n    return reducer.reduceImportSpecifier(node, { binding: function binding() {\n        return _this46.BindingIdentifier(reducer, node.binding);\n      } });\n  },\n  LabeledStatement: function LabeledStatement(reducer, node) {\n    var _this47 = this;\n\n    return reducer.reduceLabeledStatement(node, { body: function body() {\n        return _this47[node.body.type](reducer, node.body);\n      } });\n  },\n  LiteralBooleanExpression: function LiteralBooleanExpression(reducer, node) {\n    return reducer.reduceLiteralBooleanExpression(node);\n  },\n  LiteralInfinityExpression: function LiteralInfinityExpression(reducer, node) {\n    return reducer.reduceLiteralInfinityExpression(node);\n  },\n  LiteralNullExpression: function LiteralNullExpression(reducer, node) {\n    return reducer.reduceLiteralNullExpression(node);\n  },\n  LiteralNumericExpression: function LiteralNumericExpression(reducer, node) {\n    return reducer.reduceLiteralNumericExpression(node);\n  },\n  LiteralRegExpExpression: function LiteralRegExpExpression(reducer, node) {\n    return reducer.reduceLiteralRegExpExpression(node);\n  },\n  LiteralStringExpression: function LiteralStringExpression(reducer, node) {\n    return reducer.reduceLiteralStringExpression(node);\n  },\n  Method: function Method(reducer, node) {\n    var _this48 = this;\n\n    return reducer.reduceMethod(node, { name: function name() {\n        return _this48[node.name.type](reducer, node.name);\n      }, params: function params() {\n        return _this48.FormalParameters(reducer, node.params);\n      }, body: function body() {\n        return _this48.FunctionBody(reducer, node.body);\n      } });\n  },\n  Module: function Module(reducer, node) {\n    var _this49 = this;\n\n    return reducer.reduceModule(node, { directives: node.directives.map(function (v) {\n        return function () {\n          return _this49.Directive(reducer, v);\n        };\n      }), items: node.items.map(function (v) {\n        return function () {\n          return _this49[v.type](reducer, v);\n        };\n      }) });\n  },\n  NewExpression: function NewExpression(reducer, node) {\n    var _this50 = this;\n\n    return reducer.reduceNewExpression(node, { callee: function callee() {\n        return _this50[node.callee.type](reducer, node.callee);\n      }, arguments: node.arguments.map(function (v) {\n        return function () {\n          return _this50[v.type](reducer, v);\n        };\n      }) });\n  },\n  NewTargetExpression: function NewTargetExpression(reducer, node) {\n    return reducer.reduceNewTargetExpression(node);\n  },\n  ObjectAssignmentTarget: function ObjectAssignmentTarget(reducer, node) {\n    var _this51 = this;\n\n    return reducer.reduceObjectAssignmentTarget(node, { properties: node.properties.map(function (v) {\n        return function () {\n          return _this51[v.type](reducer, v);\n        };\n      }), rest: node.rest && function () {\n        return _this51[node.rest.type](reducer, node.rest);\n      } });\n  },\n  ObjectBinding: function ObjectBinding(reducer, node) {\n    var _this52 = this;\n\n    return reducer.reduceObjectBinding(node, { properties: node.properties.map(function (v) {\n        return function () {\n          return _this52[v.type](reducer, v);\n        };\n      }), rest: node.rest && function () {\n        return _this52[node.rest.type](reducer, node.rest);\n      } });\n  },\n  ObjectExpression: function ObjectExpression(reducer, node) {\n    var _this53 = this;\n\n    return reducer.reduceObjectExpression(node, { properties: node.properties.map(function (v) {\n        return function () {\n          return _this53[v.type](reducer, v);\n        };\n      }) });\n  },\n  ReturnStatement: function ReturnStatement(reducer, node) {\n    var _this54 = this;\n\n    return reducer.reduceReturnStatement(node, { expression: node.expression && function () {\n        return _this54[node.expression.type](reducer, node.expression);\n      } });\n  },\n  Script: function Script(reducer, node) {\n    var _this55 = this;\n\n    return reducer.reduceScript(node, { directives: node.directives.map(function (v) {\n        return function () {\n          return _this55.Directive(reducer, v);\n        };\n      }), statements: node.statements.map(function (v) {\n        return function () {\n          return _this55[v.type](reducer, v);\n        };\n      }) });\n  },\n  Setter: function Setter(reducer, node) {\n    var _this56 = this;\n\n    return reducer.reduceSetter(node, { name: function name() {\n        return _this56[node.name.type](reducer, node.name);\n      }, param: function param() {\n        return _this56[node.param.type](reducer, node.param);\n      }, body: function body() {\n        return _this56.FunctionBody(reducer, node.body);\n      } });\n  },\n  ShorthandProperty: function ShorthandProperty(reducer, node) {\n    var _this57 = this;\n\n    return reducer.reduceShorthandProperty(node, { name: function name() {\n        return _this57.IdentifierExpression(reducer, node.name);\n      } });\n  },\n  SpreadElement: function SpreadElement(reducer, node) {\n    var _this58 = this;\n\n    return reducer.reduceSpreadElement(node, { expression: function expression() {\n        return _this58[node.expression.type](reducer, node.expression);\n      } });\n  },\n  SpreadProperty: function SpreadProperty(reducer, node) {\n    var _this59 = this;\n\n    return reducer.reduceSpreadProperty(node, { expression: function expression() {\n        return _this59[node.expression.type](reducer, node.expression);\n      } });\n  },\n  StaticMemberAssignmentTarget: function StaticMemberAssignmentTarget(reducer, node) {\n    var _this60 = this;\n\n    return reducer.reduceStaticMemberAssignmentTarget(node, { object: function object() {\n        return _this60[node.object.type](reducer, node.object);\n      } });\n  },\n  StaticMemberExpression: function StaticMemberExpression(reducer, node) {\n    var _this61 = this;\n\n    return reducer.reduceStaticMemberExpression(node, { object: function object() {\n        return _this61[node.object.type](reducer, node.object);\n      } });\n  },\n  StaticPropertyName: function StaticPropertyName(reducer, node) {\n    return reducer.reduceStaticPropertyName(node);\n  },\n  Super: function Super(reducer, node) {\n    return reducer.reduceSuper(node);\n  },\n  SwitchCase: function SwitchCase(reducer, node) {\n    var _this62 = this;\n\n    return reducer.reduceSwitchCase(node, { test: function test() {\n        return _this62[node.test.type](reducer, node.test);\n      }, consequent: node.consequent.map(function (v) {\n        return function () {\n          return _this62[v.type](reducer, v);\n        };\n      }) });\n  },\n  SwitchDefault: function SwitchDefault(reducer, node) {\n    var _this63 = this;\n\n    return reducer.reduceSwitchDefault(node, { consequent: node.consequent.map(function (v) {\n        return function () {\n          return _this63[v.type](reducer, v);\n        };\n      }) });\n  },\n  SwitchStatement: function SwitchStatement(reducer, node) {\n    var _this64 = this;\n\n    return reducer.reduceSwitchStatement(node, { discriminant: function discriminant() {\n        return _this64[node.discriminant.type](reducer, node.discriminant);\n      }, cases: node.cases.map(function (v) {\n        return function () {\n          return _this64.SwitchCase(reducer, v);\n        };\n      }) });\n  },\n  SwitchStatementWithDefault: function SwitchStatementWithDefault(reducer, node) {\n    var _this65 = this;\n\n    return reducer.reduceSwitchStatementWithDefault(node, { discriminant: function discriminant() {\n        return _this65[node.discriminant.type](reducer, node.discriminant);\n      }, preDefaultCases: node.preDefaultCases.map(function (v) {\n        return function () {\n          return _this65.SwitchCase(reducer, v);\n        };\n      }), defaultCase: function defaultCase() {\n        return _this65.SwitchDefault(reducer, node.defaultCase);\n      }, postDefaultCases: node.postDefaultCases.map(function (v) {\n        return function () {\n          return _this65.SwitchCase(reducer, v);\n        };\n      }) });\n  },\n  TemplateElement: function TemplateElement(reducer, node) {\n    return reducer.reduceTemplateElement(node);\n  },\n  TemplateExpression: function TemplateExpression(reducer, node) {\n    var _this66 = this;\n\n    return reducer.reduceTemplateExpression(node, { tag: node.tag && function () {\n        return _this66[node.tag.type](reducer, node.tag);\n      }, elements: node.elements.map(function (v) {\n        return function () {\n          return _this66[v.type](reducer, v);\n        };\n      }) });\n  },\n  ThisExpression: function ThisExpression(reducer, node) {\n    return reducer.reduceThisExpression(node);\n  },\n  ThrowStatement: function ThrowStatement(reducer, node) {\n    var _this67 = this;\n\n    return reducer.reduceThrowStatement(node, { expression: function expression() {\n        return _this67[node.expression.type](reducer, node.expression);\n      } });\n  },\n  TryCatchStatement: function TryCatchStatement(reducer, node) {\n    var _this68 = this;\n\n    return reducer.reduceTryCatchStatement(node, { body: function body() {\n        return _this68.Block(reducer, node.body);\n      }, catchClause: function catchClause() {\n        return _this68.CatchClause(reducer, node.catchClause);\n      } });\n  },\n  TryFinallyStatement: function TryFinallyStatement(reducer, node) {\n    var _this69 = this;\n\n    return reducer.reduceTryFinallyStatement(node, { body: function body() {\n        return _this69.Block(reducer, node.body);\n      }, catchClause: node.catchClause && function () {\n        return _this69.CatchClause(reducer, node.catchClause);\n      }, finalizer: function finalizer() {\n        return _this69.Block(reducer, node.finalizer);\n      } });\n  },\n  UnaryExpression: function UnaryExpression(reducer, node) {\n    var _this70 = this;\n\n    return reducer.reduceUnaryExpression(node, { operand: function operand() {\n        return _this70[node.operand.type](reducer, node.operand);\n      } });\n  },\n  UpdateExpression: function UpdateExpression(reducer, node) {\n    var _this71 = this;\n\n    return reducer.reduceUpdateExpression(node, { operand: function operand() {\n        return _this71[node.operand.type](reducer, node.operand);\n      } });\n  },\n  VariableDeclaration: function VariableDeclaration(reducer, node) {\n    var _this72 = this;\n\n    return reducer.reduceVariableDeclaration(node, { declarators: node.declarators.map(function (v) {\n        return function () {\n          return _this72.VariableDeclarator(reducer, v);\n        };\n      }) });\n  },\n  VariableDeclarationStatement: function VariableDeclarationStatement(reducer, node) {\n    var _this73 = this;\n\n    return reducer.reduceVariableDeclarationStatement(node, { declaration: function declaration() {\n        return _this73.VariableDeclaration(reducer, node.declaration);\n      } });\n  },\n  VariableDeclarator: function VariableDeclarator(reducer, node) {\n    var _this74 = this;\n\n    return reducer.reduceVariableDeclarator(node, { binding: function binding() {\n        return _this74[node.binding.type](reducer, node.binding);\n      }, init: node.init && function () {\n        return _this74[node.init.type](reducer, node.init);\n      } });\n  },\n  WhileStatement: function WhileStatement(reducer, node) {\n    var _this75 = this;\n\n    return reducer.reduceWhileStatement(node, { test: function test() {\n        return _this75[node.test.type](reducer, node.test);\n      }, body: function body() {\n        return _this75[node.body.type](reducer, node.body);\n      } });\n  },\n  WithStatement: function WithStatement(reducer, node) {\n    var _this76 = this;\n\n    return reducer.reduceWithStatement(node, { object: function object() {\n        return _this76[node.object.type](reducer, node.object);\n      }, body: function body() {\n        return _this76[node.body.type](reducer, node.body);\n      } });\n  },\n  YieldExpression: function YieldExpression(reducer, node) {\n    var _this77 = this;\n\n    return reducer.reduceYieldExpression(node, { expression: node.expression && function () {\n        return _this77[node.expression.type](reducer, node.expression);\n      } });\n  },\n  YieldGeneratorExpression: function YieldGeneratorExpression(reducer, node) {\n    var _this78 = this;\n\n    return reducer.reduceYieldGeneratorExpression(node, { expression: function expression() {\n        return _this78[node.expression.type](reducer, node.expression);\n      } });\n  }\n};\n\nfunction thunkedReduce(reducer, node) {\n  return director[node.type](reducer, node);\n}\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/thunked-director.js?')},"./node_modules/shift-reducer/dist/thunked-monoidal-reducer.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-monoidal-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _shiftAst = __webpack_require__(\"./node_modules/shift-ast/dist/index.js\");\n\nvar _shiftAst2 = _interopRequireDefault(_shiftAst);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MonoidalReducer = function () {\n  function MonoidalReducer(monoid) {\n    _classCallCheck(this, MonoidalReducer);\n\n    var identity = monoid.empty();\n    this.identity = identity;\n\n    var concatThunk = void 0;\n    if (monoid.prototype && typeof monoid.prototype.concatThunk === 'function') {\n      concatThunk = Function.prototype.call.bind(monoid.prototype.concatThunk);\n    } else if (typeof monoid.concatThunk === 'function') {\n      concatThunk = monoid.concatThunk;\n    } else {\n      var concat = void 0;\n      if (monoid.prototype && typeof monoid.prototype.concat === 'function') {\n        concat = Function.prototype.call.bind(monoid.prototype.concat);\n      } else if (typeof monoid.concat === 'function') {\n        concat = monoid.concat;\n      } else {\n        throw new TypeError('Monoid must provide a `concatThunk` or `concat` method');\n      }\n      if (typeof monoid.isAbsorbing === 'function') {\n        var isAbsorbing = monoid.isAbsorbing;\n        concatThunk = function concatThunk(a, b) {\n          return isAbsorbing(a) ? a : concat(a, b());\n        };\n      } else {\n        concatThunk = function concatThunk(a, b) {\n          return concat(a, b());\n        };\n      }\n    }\n    this.append = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return args.reduce(concatThunk, identity);\n    };\n  }\n\n  _createClass(MonoidalReducer, [{\n    key: 'reduceArrayAssignmentTarget',\n    value: function reduceArrayAssignmentTarget(node, _ref) {\n      var _this = this;\n\n      var elements = _ref.elements,\n          rest = _ref.rest;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })).concat([rest == null ? function () {\n        return _this.identity;\n      } : rest]));\n    }\n  }, {\n    key: 'reduceArrayBinding',\n    value: function reduceArrayBinding(node, _ref2) {\n      var _this2 = this;\n\n      var elements = _ref2.elements,\n          rest = _ref2.rest;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })).concat([rest == null ? function () {\n        return _this2.identity;\n      } : rest]));\n    }\n  }, {\n    key: 'reduceArrayExpression',\n    value: function reduceArrayExpression(node, _ref3) {\n      var elements = _ref3.elements;\n\n      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {\n        return n != null;\n      })));\n    }\n  }, {\n    key: 'reduceArrowExpression',\n    value: function reduceArrowExpression(node, _ref4) {\n      var params = _ref4.params,\n          body = _ref4.body;\n\n      return this.append(params, body);\n    }\n  }, {\n    key: 'reduceAssignmentExpression',\n    value: function reduceAssignmentExpression(node, _ref5) {\n      var binding = _ref5.binding,\n          expression = _ref5.expression;\n\n      return this.append(binding, expression);\n    }\n  }, {\n    key: 'reduceAssignmentTargetIdentifier',\n    value: function reduceAssignmentTargetIdentifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyIdentifier',\n    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n      var _this3 = this;\n\n      var binding = _ref6.binding,\n          init = _ref6.init;\n\n      return this.append(binding, init == null ? function () {\n        return _this3.identity;\n      } : init);\n    }\n  }, {\n    key: 'reduceAssignmentTargetPropertyProperty',\n    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n      var name = _ref7.name,\n          binding = _ref7.binding;\n\n      return this.append(name, binding);\n    }\n  }, {\n    key: 'reduceAssignmentTargetWithDefault',\n    value: function reduceAssignmentTargetWithDefault(node, _ref8) {\n      var binding = _ref8.binding,\n          init = _ref8.init;\n\n      return this.append(binding, init);\n    }\n  }, {\n    key: 'reduceAwaitExpression',\n    value: function reduceAwaitExpression(node, _ref9) {\n      var expression = _ref9.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceBinaryExpression',\n    value: function reduceBinaryExpression(node, _ref10) {\n      var left = _ref10.left,\n          right = _ref10.right;\n\n      return this.append(left, right);\n    }\n  }, {\n    key: 'reduceBindingIdentifier',\n    value: function reduceBindingIdentifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceBindingPropertyIdentifier',\n    value: function reduceBindingPropertyIdentifier(node, _ref11) {\n      var _this4 = this;\n\n      var binding = _ref11.binding,\n          init = _ref11.init;\n\n      return this.append(binding, init == null ? function () {\n        return _this4.identity;\n      } : init);\n    }\n  }, {\n    key: 'reduceBindingPropertyProperty',\n    value: function reduceBindingPropertyProperty(node, _ref12) {\n      var name = _ref12.name,\n          binding = _ref12.binding;\n\n      return this.append(name, binding);\n    }\n  }, {\n    key: 'reduceBindingWithDefault',\n    value: function reduceBindingWithDefault(node, _ref13) {\n      var binding = _ref13.binding,\n          init = _ref13.init;\n\n      return this.append(binding, init);\n    }\n  }, {\n    key: 'reduceBlock',\n    value: function reduceBlock(node, _ref14) {\n      var statements = _ref14.statements;\n\n      return this.append.apply(this, _toConsumableArray(statements));\n    }\n  }, {\n    key: 'reduceBlockStatement',\n    value: function reduceBlockStatement(node, _ref15) {\n      var block = _ref15.block;\n\n      return block();\n    }\n  }, {\n    key: 'reduceBreakStatement',\n    value: function reduceBreakStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceCallExpression',\n    value: function reduceCallExpression(node, _ref16) {\n      var callee = _ref16.callee,\n          _arguments = _ref16.arguments;\n\n      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));\n    }\n  }, {\n    key: 'reduceCatchClause',\n    value: function reduceCatchClause(node, _ref17) {\n      var binding = _ref17.binding,\n          body = _ref17.body;\n\n      return this.append(binding, body);\n    }\n  }, {\n    key: 'reduceClassDeclaration',\n    value: function reduceClassDeclaration(node, _ref18) {\n      var _this5 = this;\n\n      var name = _ref18.name,\n          _super = _ref18.super,\n          elements = _ref18.elements;\n\n      return this.append.apply(this, [name, _super == null ? function () {\n        return _this5.identity;\n      } : _super].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceClassElement',\n    value: function reduceClassElement(node, _ref19) {\n      var method = _ref19.method;\n\n      return method();\n    }\n  }, {\n    key: 'reduceClassExpression',\n    value: function reduceClassExpression(node, _ref20) {\n      var _this6 = this;\n\n      var name = _ref20.name,\n          _super = _ref20.super,\n          elements = _ref20.elements;\n\n      return this.append.apply(this, [name == null ? function () {\n        return _this6.identity;\n      } : name, _super == null ? function () {\n        return _this6.identity;\n      } : _super].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceCompoundAssignmentExpression',\n    value: function reduceCompoundAssignmentExpression(node, _ref21) {\n      var binding = _ref21.binding,\n          expression = _ref21.expression;\n\n      return this.append(binding, expression);\n    }\n  }, {\n    key: 'reduceComputedMemberAssignmentTarget',\n    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n      var object = _ref22.object,\n          expression = _ref22.expression;\n\n      return this.append(object, expression);\n    }\n  }, {\n    key: 'reduceComputedMemberExpression',\n    value: function reduceComputedMemberExpression(node, _ref23) {\n      var object = _ref23.object,\n          expression = _ref23.expression;\n\n      return this.append(object, expression);\n    }\n  }, {\n    key: 'reduceComputedPropertyName',\n    value: function reduceComputedPropertyName(node, _ref24) {\n      var expression = _ref24.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceConditionalExpression',\n    value: function reduceConditionalExpression(node, _ref25) {\n      var test = _ref25.test,\n          consequent = _ref25.consequent,\n          alternate = _ref25.alternate;\n\n      return this.append(test, consequent, alternate);\n    }\n  }, {\n    key: 'reduceContinueStatement',\n    value: function reduceContinueStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDataProperty',\n    value: function reduceDataProperty(node, _ref26) {\n      var name = _ref26.name,\n          expression = _ref26.expression;\n\n      return this.append(name, expression);\n    }\n  }, {\n    key: 'reduceDebuggerStatement',\n    value: function reduceDebuggerStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDirective',\n    value: function reduceDirective(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceDoWhileStatement',\n    value: function reduceDoWhileStatement(node, _ref27) {\n      var body = _ref27.body,\n          test = _ref27.test;\n\n      return this.append(body, test);\n    }\n  }, {\n    key: 'reduceEmptyStatement',\n    value: function reduceEmptyStatement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExport',\n    value: function reduceExport(node, _ref28) {\n      var declaration = _ref28.declaration;\n\n      return declaration();\n    }\n  }, {\n    key: 'reduceExportAllFrom',\n    value: function reduceExportAllFrom(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExportDefault',\n    value: function reduceExportDefault(node, _ref29) {\n      var body = _ref29.body;\n\n      return body();\n    }\n  }, {\n    key: 'reduceExportFrom',\n    value: function reduceExportFrom(node, _ref30) {\n      var namedExports = _ref30.namedExports;\n\n      return this.append.apply(this, _toConsumableArray(namedExports));\n    }\n  }, {\n    key: 'reduceExportFromSpecifier',\n    value: function reduceExportFromSpecifier(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceExportLocalSpecifier',\n    value: function reduceExportLocalSpecifier(node, _ref31) {\n      var name = _ref31.name;\n\n      return name();\n    }\n  }, {\n    key: 'reduceExportLocals',\n    value: function reduceExportLocals(node, _ref32) {\n      var namedExports = _ref32.namedExports;\n\n      return this.append.apply(this, _toConsumableArray(namedExports));\n    }\n  }, {\n    key: 'reduceExpressionStatement',\n    value: function reduceExpressionStatement(node, _ref33) {\n      var expression = _ref33.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceForAwaitStatement',\n    value: function reduceForAwaitStatement(node, _ref34) {\n      var left = _ref34.left,\n          right = _ref34.right,\n          body = _ref34.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForInStatement',\n    value: function reduceForInStatement(node, _ref35) {\n      var left = _ref35.left,\n          right = _ref35.right,\n          body = _ref35.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForOfStatement',\n    value: function reduceForOfStatement(node, _ref36) {\n      var left = _ref36.left,\n          right = _ref36.right,\n          body = _ref36.body;\n\n      return this.append(left, right, body);\n    }\n  }, {\n    key: 'reduceForStatement',\n    value: function reduceForStatement(node, _ref37) {\n      var _this7 = this;\n\n      var init = _ref37.init,\n          test = _ref37.test,\n          update = _ref37.update,\n          body = _ref37.body;\n\n      return this.append(init == null ? function () {\n        return _this7.identity;\n      } : init, test == null ? function () {\n        return _this7.identity;\n      } : test, update == null ? function () {\n        return _this7.identity;\n      } : update, body);\n    }\n  }, {\n    key: 'reduceFormalParameters',\n    value: function reduceFormalParameters(node, _ref38) {\n      var _this8 = this;\n\n      var items = _ref38.items,\n          rest = _ref38.rest;\n\n      return this.append.apply(this, _toConsumableArray(items).concat([rest == null ? function () {\n        return _this8.identity;\n      } : rest]));\n    }\n  }, {\n    key: 'reduceFunctionBody',\n    value: function reduceFunctionBody(node, _ref39) {\n      var directives = _ref39.directives,\n          statements = _ref39.statements;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));\n    }\n  }, {\n    key: 'reduceFunctionDeclaration',\n    value: function reduceFunctionDeclaration(node, _ref40) {\n      var name = _ref40.name,\n          params = _ref40.params,\n          body = _ref40.body;\n\n      return this.append(name, params, body);\n    }\n  }, {\n    key: 'reduceFunctionExpression',\n    value: function reduceFunctionExpression(node, _ref41) {\n      var _this9 = this;\n\n      var name = _ref41.name,\n          params = _ref41.params,\n          body = _ref41.body;\n\n      return this.append(name == null ? function () {\n        return _this9.identity;\n      } : name, params, body);\n    }\n  }, {\n    key: 'reduceGetter',\n    value: function reduceGetter(node, _ref42) {\n      var name = _ref42.name,\n          body = _ref42.body;\n\n      return this.append(name, body);\n    }\n  }, {\n    key: 'reduceIdentifierExpression',\n    value: function reduceIdentifierExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceIfStatement',\n    value: function reduceIfStatement(node, _ref43) {\n      var _this10 = this;\n\n      var test = _ref43.test,\n          consequent = _ref43.consequent,\n          alternate = _ref43.alternate;\n\n      return this.append(test, consequent, alternate == null ? function () {\n        return _this10.identity;\n      } : alternate);\n    }\n  }, {\n    key: 'reduceImport',\n    value: function reduceImport(node, _ref44) {\n      var _this11 = this;\n\n      var defaultBinding = _ref44.defaultBinding,\n          namedImports = _ref44.namedImports;\n\n      return this.append.apply(this, [defaultBinding == null ? function () {\n        return _this11.identity;\n      } : defaultBinding].concat(_toConsumableArray(namedImports)));\n    }\n  }, {\n    key: 'reduceImportNamespace',\n    value: function reduceImportNamespace(node, _ref45) {\n      var _this12 = this;\n\n      var defaultBinding = _ref45.defaultBinding,\n          namespaceBinding = _ref45.namespaceBinding;\n\n      return this.append(defaultBinding == null ? function () {\n        return _this12.identity;\n      } : defaultBinding, namespaceBinding);\n    }\n  }, {\n    key: 'reduceImportSpecifier',\n    value: function reduceImportSpecifier(node, _ref46) {\n      var binding = _ref46.binding;\n\n      return binding();\n    }\n  }, {\n    key: 'reduceLabeledStatement',\n    value: function reduceLabeledStatement(node, _ref47) {\n      var body = _ref47.body;\n\n      return body();\n    }\n  }, {\n    key: 'reduceLiteralBooleanExpression',\n    value: function reduceLiteralBooleanExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralInfinityExpression',\n    value: function reduceLiteralInfinityExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralNullExpression',\n    value: function reduceLiteralNullExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralNumericExpression',\n    value: function reduceLiteralNumericExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralRegExpExpression',\n    value: function reduceLiteralRegExpExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceLiteralStringExpression',\n    value: function reduceLiteralStringExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceMethod',\n    value: function reduceMethod(node, _ref48) {\n      var name = _ref48.name,\n          params = _ref48.params,\n          body = _ref48.body;\n\n      return this.append(name, params, body);\n    }\n  }, {\n    key: 'reduceModule',\n    value: function reduceModule(node, _ref49) {\n      var directives = _ref49.directives,\n          items = _ref49.items;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(items)));\n    }\n  }, {\n    key: 'reduceNewExpression',\n    value: function reduceNewExpression(node, _ref50) {\n      var callee = _ref50.callee,\n          _arguments = _ref50.arguments;\n\n      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));\n    }\n  }, {\n    key: 'reduceNewTargetExpression',\n    value: function reduceNewTargetExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceObjectAssignmentTarget',\n    value: function reduceObjectAssignmentTarget(node, _ref51) {\n      var _this13 = this;\n\n      var properties = _ref51.properties,\n          rest = _ref51.rest;\n\n      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? function () {\n        return _this13.identity;\n      } : rest]));\n    }\n  }, {\n    key: 'reduceObjectBinding',\n    value: function reduceObjectBinding(node, _ref52) {\n      var _this14 = this;\n\n      var properties = _ref52.properties,\n          rest = _ref52.rest;\n\n      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? function () {\n        return _this14.identity;\n      } : rest]));\n    }\n  }, {\n    key: 'reduceObjectExpression',\n    value: function reduceObjectExpression(node, _ref53) {\n      var properties = _ref53.properties;\n\n      return this.append.apply(this, _toConsumableArray(properties));\n    }\n  }, {\n    key: 'reduceReturnStatement',\n    value: function reduceReturnStatement(node, _ref54) {\n      var expression = _ref54.expression;\n\n      return expression == null ? this.identity : expression();\n    }\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(node, _ref55) {\n      var directives = _ref55.directives,\n          statements = _ref55.statements;\n\n      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));\n    }\n  }, {\n    key: 'reduceSetter',\n    value: function reduceSetter(node, _ref56) {\n      var name = _ref56.name,\n          param = _ref56.param,\n          body = _ref56.body;\n\n      return this.append(name, param, body);\n    }\n  }, {\n    key: 'reduceShorthandProperty',\n    value: function reduceShorthandProperty(node, _ref57) {\n      var name = _ref57.name;\n\n      return name();\n    }\n  }, {\n    key: 'reduceSpreadElement',\n    value: function reduceSpreadElement(node, _ref58) {\n      var expression = _ref58.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceSpreadProperty',\n    value: function reduceSpreadProperty(node, _ref59) {\n      var expression = _ref59.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceStaticMemberAssignmentTarget',\n    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n      var object = _ref60.object;\n\n      return object();\n    }\n  }, {\n    key: 'reduceStaticMemberExpression',\n    value: function reduceStaticMemberExpression(node, _ref61) {\n      var object = _ref61.object;\n\n      return object();\n    }\n  }, {\n    key: 'reduceStaticPropertyName',\n    value: function reduceStaticPropertyName(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceSuper',\n    value: function reduceSuper(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceSwitchCase',\n    value: function reduceSwitchCase(node, _ref62) {\n      var test = _ref62.test,\n          consequent = _ref62.consequent;\n\n      return this.append.apply(this, [test].concat(_toConsumableArray(consequent)));\n    }\n  }, {\n    key: 'reduceSwitchDefault',\n    value: function reduceSwitchDefault(node, _ref63) {\n      var consequent = _ref63.consequent;\n\n      return this.append.apply(this, _toConsumableArray(consequent));\n    }\n  }, {\n    key: 'reduceSwitchStatement',\n    value: function reduceSwitchStatement(node, _ref64) {\n      var discriminant = _ref64.discriminant,\n          cases = _ref64.cases;\n\n      return this.append.apply(this, [discriminant].concat(_toConsumableArray(cases)));\n    }\n  }, {\n    key: 'reduceSwitchStatementWithDefault',\n    value: function reduceSwitchStatementWithDefault(node, _ref65) {\n      var discriminant = _ref65.discriminant,\n          preDefaultCases = _ref65.preDefaultCases,\n          defaultCase = _ref65.defaultCase,\n          postDefaultCases = _ref65.postDefaultCases;\n\n      return this.append.apply(this, [discriminant].concat(_toConsumableArray(preDefaultCases), [defaultCase], _toConsumableArray(postDefaultCases)));\n    }\n  }, {\n    key: 'reduceTemplateElement',\n    value: function reduceTemplateElement(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceTemplateExpression',\n    value: function reduceTemplateExpression(node, _ref66) {\n      var _this15 = this;\n\n      var tag = _ref66.tag,\n          elements = _ref66.elements;\n\n      return this.append.apply(this, [tag == null ? function () {\n        return _this15.identity;\n      } : tag].concat(_toConsumableArray(elements)));\n    }\n  }, {\n    key: 'reduceThisExpression',\n    value: function reduceThisExpression(node) {\n      return this.identity;\n    }\n  }, {\n    key: 'reduceThrowStatement',\n    value: function reduceThrowStatement(node, _ref67) {\n      var expression = _ref67.expression;\n\n      return expression();\n    }\n  }, {\n    key: 'reduceTryCatchStatement',\n    value: function reduceTryCatchStatement(node, _ref68) {\n      var body = _ref68.body,\n          catchClause = _ref68.catchClause;\n\n      return this.append(body, catchClause);\n    }\n  }, {\n    key: 'reduceTryFinallyStatement',\n    value: function reduceTryFinallyStatement(node, _ref69) {\n      var _this16 = this;\n\n      var body = _ref69.body,\n          catchClause = _ref69.catchClause,\n          finalizer = _ref69.finalizer;\n\n      return this.append(body, catchClause == null ? function () {\n        return _this16.identity;\n      } : catchClause, finalizer);\n    }\n  }, {\n    key: 'reduceUnaryExpression',\n    value: function reduceUnaryExpression(node, _ref70) {\n      var operand = _ref70.operand;\n\n      return operand();\n    }\n  }, {\n    key: 'reduceUpdateExpression',\n    value: function reduceUpdateExpression(node, _ref71) {\n      var operand = _ref71.operand;\n\n      return operand();\n    }\n  }, {\n    key: 'reduceVariableDeclaration',\n    value: function reduceVariableDeclaration(node, _ref72) {\n      var declarators = _ref72.declarators;\n\n      return this.append.apply(this, _toConsumableArray(declarators));\n    }\n  }, {\n    key: 'reduceVariableDeclarationStatement',\n    value: function reduceVariableDeclarationStatement(node, _ref73) {\n      var declaration = _ref73.declaration;\n\n      return declaration();\n    }\n  }, {\n    key: 'reduceVariableDeclarator',\n    value: function reduceVariableDeclarator(node, _ref74) {\n      var _this17 = this;\n\n      var binding = _ref74.binding,\n          init = _ref74.init;\n\n      return this.append(binding, init == null ? function () {\n        return _this17.identity;\n      } : init);\n    }\n  }, {\n    key: 'reduceWhileStatement',\n    value: function reduceWhileStatement(node, _ref75) {\n      var test = _ref75.test,\n          body = _ref75.body;\n\n      return this.append(test, body);\n    }\n  }, {\n    key: 'reduceWithStatement',\n    value: function reduceWithStatement(node, _ref76) {\n      var object = _ref76.object,\n          body = _ref76.body;\n\n      return this.append(object, body);\n    }\n  }, {\n    key: 'reduceYieldExpression',\n    value: function reduceYieldExpression(node, _ref77) {\n      var expression = _ref77.expression;\n\n      return expression == null ? this.identity : expression();\n    }\n  }, {\n    key: 'reduceYieldGeneratorExpression',\n    value: function reduceYieldGeneratorExpression(node, _ref78) {\n      var expression = _ref78.expression;\n\n      return expression();\n    }\n  }]);\n\n  return MonoidalReducer;\n}();\n\nexports.default = MonoidalReducer;\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/thunked-monoidal-reducer.js?")},"./node_modules/shift-reducer/dist/thunkify-class.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nexports.default = thunkifyClass;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Generated by generate-thunkify.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction thunkifyClass(reducerClass) {\n  return function (_reducerClass) {\n    _inherits(_class, _reducerClass);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: "reduceArrayAssignmentTarget",\n      value: function reduceArrayAssignmentTarget(node, _ref) {\n        var elements = _ref.elements,\n            rest = _ref.rest;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayAssignmentTarget", this).call(this, node, { elements: elements.map(function (n) {\n            return n == null ? null : n();\n          }), rest: rest == null ? null : rest() });\n      }\n    }, {\n      key: "reduceArrayBinding",\n      value: function reduceArrayBinding(node, _ref2) {\n        var elements = _ref2.elements,\n            rest = _ref2.rest;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayBinding", this).call(this, node, { elements: elements.map(function (n) {\n            return n == null ? null : n();\n          }), rest: rest == null ? null : rest() });\n      }\n    }, {\n      key: "reduceArrayExpression",\n      value: function reduceArrayExpression(node, _ref3) {\n        var elements = _ref3.elements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayExpression", this).call(this, node, { elements: elements.map(function (n) {\n            return n == null ? null : n();\n          }) });\n      }\n    }, {\n      key: "reduceArrowExpression",\n      value: function reduceArrowExpression(node, _ref4) {\n        var params = _ref4.params,\n            body = _ref4.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrowExpression", this).call(this, node, { params: params(), body: body() });\n      }\n    }, {\n      key: "reduceAssignmentExpression",\n      value: function reduceAssignmentExpression(node, _ref5) {\n        var binding = _ref5.binding,\n            expression = _ref5.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentExpression", this).call(this, node, { binding: binding(), expression: expression() });\n      }\n    }, {\n      key: "reduceAssignmentTargetIdentifier",\n      value: function reduceAssignmentTargetIdentifier(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetIdentifier", this).call(this, node);\n      }\n    }, {\n      key: "reduceAssignmentTargetPropertyIdentifier",\n      value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n        var binding = _ref6.binding,\n            init = _ref6.init;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetPropertyIdentifier", this).call(this, node, { binding: binding(), init: init == null ? null : init() });\n      }\n    }, {\n      key: "reduceAssignmentTargetPropertyProperty",\n      value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n        var name = _ref7.name,\n            binding = _ref7.binding;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetPropertyProperty", this).call(this, node, { name: name(), binding: binding() });\n      }\n    }, {\n      key: "reduceAssignmentTargetWithDefault",\n      value: function reduceAssignmentTargetWithDefault(node, _ref8) {\n        var binding = _ref8.binding,\n            init = _ref8.init;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetWithDefault", this).call(this, node, { binding: binding(), init: init() });\n      }\n    }, {\n      key: "reduceAwaitExpression",\n      value: function reduceAwaitExpression(node, _ref9) {\n        var expression = _ref9.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAwaitExpression", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceBinaryExpression",\n      value: function reduceBinaryExpression(node, _ref10) {\n        var left = _ref10.left,\n            right = _ref10.right;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBinaryExpression", this).call(this, node, { left: left(), right: right() });\n      }\n    }, {\n      key: "reduceBindingIdentifier",\n      value: function reduceBindingIdentifier(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingIdentifier", this).call(this, node);\n      }\n    }, {\n      key: "reduceBindingPropertyIdentifier",\n      value: function reduceBindingPropertyIdentifier(node, _ref11) {\n        var binding = _ref11.binding,\n            init = _ref11.init;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingPropertyIdentifier", this).call(this, node, { binding: binding(), init: init == null ? null : init() });\n      }\n    }, {\n      key: "reduceBindingPropertyProperty",\n      value: function reduceBindingPropertyProperty(node, _ref12) {\n        var name = _ref12.name,\n            binding = _ref12.binding;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingPropertyProperty", this).call(this, node, { name: name(), binding: binding() });\n      }\n    }, {\n      key: "reduceBindingWithDefault",\n      value: function reduceBindingWithDefault(node, _ref13) {\n        var binding = _ref13.binding,\n            init = _ref13.init;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingWithDefault", this).call(this, node, { binding: binding(), init: init() });\n      }\n    }, {\n      key: "reduceBlock",\n      value: function reduceBlock(node, _ref14) {\n        var statements = _ref14.statements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBlock", this).call(this, node, { statements: statements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceBlockStatement",\n      value: function reduceBlockStatement(node, _ref15) {\n        var block = _ref15.block;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBlockStatement", this).call(this, node, { block: block() });\n      }\n    }, {\n      key: "reduceBreakStatement",\n      value: function reduceBreakStatement(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBreakStatement", this).call(this, node);\n      }\n    }, {\n      key: "reduceCallExpression",\n      value: function reduceCallExpression(node, _ref16) {\n        var callee = _ref16.callee,\n            _arguments = _ref16.arguments;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCallExpression", this).call(this, node, { callee: callee(), arguments: _arguments.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceCatchClause",\n      value: function reduceCatchClause(node, _ref17) {\n        var binding = _ref17.binding,\n            body = _ref17.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCatchClause", this).call(this, node, { binding: binding(), body: body() });\n      }\n    }, {\n      key: "reduceClassDeclaration",\n      value: function reduceClassDeclaration(node, _ref18) {\n        var name = _ref18.name,\n            _super = _ref18.super,\n            elements = _ref18.elements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassDeclaration", this).call(this, node, { name: name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceClassElement",\n      value: function reduceClassElement(node, _ref19) {\n        var method = _ref19.method;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassElement", this).call(this, node, { method: method() });\n      }\n    }, {\n      key: "reduceClassExpression",\n      value: function reduceClassExpression(node, _ref20) {\n        var name = _ref20.name,\n            _super = _ref20.super,\n            elements = _ref20.elements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassExpression", this).call(this, node, { name: name == null ? null : name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceCompoundAssignmentExpression",\n      value: function reduceCompoundAssignmentExpression(node, _ref21) {\n        var binding = _ref21.binding,\n            expression = _ref21.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCompoundAssignmentExpression", this).call(this, node, { binding: binding(), expression: expression() });\n      }\n    }, {\n      key: "reduceComputedMemberAssignmentTarget",\n      value: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n        var object = _ref22.object,\n            expression = _ref22.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedMemberAssignmentTarget", this).call(this, node, { object: object(), expression: expression() });\n      }\n    }, {\n      key: "reduceComputedMemberExpression",\n      value: function reduceComputedMemberExpression(node, _ref23) {\n        var object = _ref23.object,\n            expression = _ref23.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedMemberExpression", this).call(this, node, { object: object(), expression: expression() });\n      }\n    }, {\n      key: "reduceComputedPropertyName",\n      value: function reduceComputedPropertyName(node, _ref24) {\n        var expression = _ref24.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedPropertyName", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceConditionalExpression",\n      value: function reduceConditionalExpression(node, _ref25) {\n        var test = _ref25.test,\n            consequent = _ref25.consequent,\n            alternate = _ref25.alternate;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceConditionalExpression", this).call(this, node, { test: test(), consequent: consequent(), alternate: alternate() });\n      }\n    }, {\n      key: "reduceContinueStatement",\n      value: function reduceContinueStatement(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceContinueStatement", this).call(this, node);\n      }\n    }, {\n      key: "reduceDataProperty",\n      value: function reduceDataProperty(node, _ref26) {\n        var name = _ref26.name,\n            expression = _ref26.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDataProperty", this).call(this, node, { name: name(), expression: expression() });\n      }\n    }, {\n      key: "reduceDebuggerStatement",\n      value: function reduceDebuggerStatement(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDebuggerStatement", this).call(this, node);\n      }\n    }, {\n      key: "reduceDirective",\n      value: function reduceDirective(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDirective", this).call(this, node);\n      }\n    }, {\n      key: "reduceDoWhileStatement",\n      value: function reduceDoWhileStatement(node, _ref27) {\n        var body = _ref27.body,\n            test = _ref27.test;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDoWhileStatement", this).call(this, node, { body: body(), test: test() });\n      }\n    }, {\n      key: "reduceEmptyStatement",\n      value: function reduceEmptyStatement(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceEmptyStatement", this).call(this, node);\n      }\n    }, {\n      key: "reduceExport",\n      value: function reduceExport(node, _ref28) {\n        var declaration = _ref28.declaration;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExport", this).call(this, node, { declaration: declaration() });\n      }\n    }, {\n      key: "reduceExportAllFrom",\n      value: function reduceExportAllFrom(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportAllFrom", this).call(this, node);\n      }\n    }, {\n      key: "reduceExportDefault",\n      value: function reduceExportDefault(node, _ref29) {\n        var body = _ref29.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportDefault", this).call(this, node, { body: body() });\n      }\n    }, {\n      key: "reduceExportFrom",\n      value: function reduceExportFrom(node, _ref30) {\n        var namedExports = _ref30.namedExports;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportFrom", this).call(this, node, { namedExports: namedExports.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceExportFromSpecifier",\n      value: function reduceExportFromSpecifier(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportFromSpecifier", this).call(this, node);\n      }\n    }, {\n      key: "reduceExportLocalSpecifier",\n      value: function reduceExportLocalSpecifier(node, _ref31) {\n        var name = _ref31.name;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportLocalSpecifier", this).call(this, node, { name: name() });\n      }\n    }, {\n      key: "reduceExportLocals",\n      value: function reduceExportLocals(node, _ref32) {\n        var namedExports = _ref32.namedExports;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportLocals", this).call(this, node, { namedExports: namedExports.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceExpressionStatement",\n      value: function reduceExpressionStatement(node, _ref33) {\n        var expression = _ref33.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExpressionStatement", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceForAwaitStatement",\n      value: function reduceForAwaitStatement(node, _ref34) {\n        var left = _ref34.left,\n            right = _ref34.right,\n            body = _ref34.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForAwaitStatement", this).call(this, node, { left: left(), right: right(), body: body() });\n      }\n    }, {\n      key: "reduceForInStatement",\n      value: function reduceForInStatement(node, _ref35) {\n        var left = _ref35.left,\n            right = _ref35.right,\n            body = _ref35.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForInStatement", this).call(this, node, { left: left(), right: right(), body: body() });\n      }\n    }, {\n      key: "reduceForOfStatement",\n      value: function reduceForOfStatement(node, _ref36) {\n        var left = _ref36.left,\n            right = _ref36.right,\n            body = _ref36.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForOfStatement", this).call(this, node, { left: left(), right: right(), body: body() });\n      }\n    }, {\n      key: "reduceForStatement",\n      value: function reduceForStatement(node, _ref37) {\n        var init = _ref37.init,\n            test = _ref37.test,\n            update = _ref37.update,\n            body = _ref37.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForStatement", this).call(this, node, { init: init == null ? null : init(), test: test == null ? null : test(), update: update == null ? null : update(), body: body() });\n      }\n    }, {\n      key: "reduceFormalParameters",\n      value: function reduceFormalParameters(node, _ref38) {\n        var items = _ref38.items,\n            rest = _ref38.rest;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFormalParameters", this).call(this, node, { items: items.map(function (n) {\n            return n();\n          }), rest: rest == null ? null : rest() });\n      }\n    }, {\n      key: "reduceFunctionBody",\n      value: function reduceFunctionBody(node, _ref39) {\n        var directives = _ref39.directives,\n            statements = _ref39.statements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionBody", this).call(this, node, { directives: directives.map(function (n) {\n            return n();\n          }), statements: statements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceFunctionDeclaration",\n      value: function reduceFunctionDeclaration(node, _ref40) {\n        var name = _ref40.name,\n            params = _ref40.params,\n            body = _ref40.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionDeclaration", this).call(this, node, { name: name(), params: params(), body: body() });\n      }\n    }, {\n      key: "reduceFunctionExpression",\n      value: function reduceFunctionExpression(node, _ref41) {\n        var name = _ref41.name,\n            params = _ref41.params,\n            body = _ref41.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionExpression", this).call(this, node, { name: name == null ? null : name(), params: params(), body: body() });\n      }\n    }, {\n      key: "reduceGetter",\n      value: function reduceGetter(node, _ref42) {\n        var name = _ref42.name,\n            body = _ref42.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceGetter", this).call(this, node, { name: name(), body: body() });\n      }\n    }, {\n      key: "reduceIdentifierExpression",\n      value: function reduceIdentifierExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceIdentifierExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceIfStatement",\n      value: function reduceIfStatement(node, _ref43) {\n        var test = _ref43.test,\n            consequent = _ref43.consequent,\n            alternate = _ref43.alternate;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceIfStatement", this).call(this, node, { test: test(), consequent: consequent(), alternate: alternate == null ? null : alternate() });\n      }\n    }, {\n      key: "reduceImport",\n      value: function reduceImport(node, _ref44) {\n        var defaultBinding = _ref44.defaultBinding,\n            namedImports = _ref44.namedImports;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImport", this).call(this, node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namedImports: namedImports.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceImportNamespace",\n      value: function reduceImportNamespace(node, _ref45) {\n        var defaultBinding = _ref45.defaultBinding,\n            namespaceBinding = _ref45.namespaceBinding;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImportNamespace", this).call(this, node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namespaceBinding: namespaceBinding() });\n      }\n    }, {\n      key: "reduceImportSpecifier",\n      value: function reduceImportSpecifier(node, _ref46) {\n        var binding = _ref46.binding;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImportSpecifier", this).call(this, node, { binding: binding() });\n      }\n    }, {\n      key: "reduceLabeledStatement",\n      value: function reduceLabeledStatement(node, _ref47) {\n        var body = _ref47.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLabeledStatement", this).call(this, node, { body: body() });\n      }\n    }, {\n      key: "reduceLiteralBooleanExpression",\n      value: function reduceLiteralBooleanExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralBooleanExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceLiteralInfinityExpression",\n      value: function reduceLiteralInfinityExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralInfinityExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceLiteralNullExpression",\n      value: function reduceLiteralNullExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralNullExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceLiteralNumericExpression",\n      value: function reduceLiteralNumericExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralNumericExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceLiteralRegExpExpression",\n      value: function reduceLiteralRegExpExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralRegExpExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceLiteralStringExpression",\n      value: function reduceLiteralStringExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralStringExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceMethod",\n      value: function reduceMethod(node, _ref48) {\n        var name = _ref48.name,\n            params = _ref48.params,\n            body = _ref48.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceMethod", this).call(this, node, { name: name(), params: params(), body: body() });\n      }\n    }, {\n      key: "reduceModule",\n      value: function reduceModule(node, _ref49) {\n        var directives = _ref49.directives,\n            items = _ref49.items;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceModule", this).call(this, node, { directives: directives.map(function (n) {\n            return n();\n          }), items: items.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceNewExpression",\n      value: function reduceNewExpression(node, _ref50) {\n        var callee = _ref50.callee,\n            _arguments = _ref50.arguments;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceNewExpression", this).call(this, node, { callee: callee(), arguments: _arguments.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceNewTargetExpression",\n      value: function reduceNewTargetExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceNewTargetExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceObjectAssignmentTarget",\n      value: function reduceObjectAssignmentTarget(node, _ref51) {\n        var properties = _ref51.properties,\n            rest = _ref51.rest;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectAssignmentTarget", this).call(this, node, { properties: properties.map(function (n) {\n            return n();\n          }), rest: rest == null ? null : rest() });\n      }\n    }, {\n      key: "reduceObjectBinding",\n      value: function reduceObjectBinding(node, _ref52) {\n        var properties = _ref52.properties,\n            rest = _ref52.rest;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectBinding", this).call(this, node, { properties: properties.map(function (n) {\n            return n();\n          }), rest: rest == null ? null : rest() });\n      }\n    }, {\n      key: "reduceObjectExpression",\n      value: function reduceObjectExpression(node, _ref53) {\n        var properties = _ref53.properties;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectExpression", this).call(this, node, { properties: properties.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceReturnStatement",\n      value: function reduceReturnStatement(node, _ref54) {\n        var expression = _ref54.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceReturnStatement", this).call(this, node, { expression: expression == null ? null : expression() });\n      }\n    }, {\n      key: "reduceScript",\n      value: function reduceScript(node, _ref55) {\n        var directives = _ref55.directives,\n            statements = _ref55.statements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceScript", this).call(this, node, { directives: directives.map(function (n) {\n            return n();\n          }), statements: statements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceSetter",\n      value: function reduceSetter(node, _ref56) {\n        var name = _ref56.name,\n            param = _ref56.param,\n            body = _ref56.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSetter", this).call(this, node, { name: name(), param: param(), body: body() });\n      }\n    }, {\n      key: "reduceShorthandProperty",\n      value: function reduceShorthandProperty(node, _ref57) {\n        var name = _ref57.name;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceShorthandProperty", this).call(this, node, { name: name() });\n      }\n    }, {\n      key: "reduceSpreadElement",\n      value: function reduceSpreadElement(node, _ref58) {\n        var expression = _ref58.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSpreadElement", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceSpreadProperty",\n      value: function reduceSpreadProperty(node, _ref59) {\n        var expression = _ref59.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSpreadProperty", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceStaticMemberAssignmentTarget",\n      value: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n        var object = _ref60.object;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticMemberAssignmentTarget", this).call(this, node, { object: object() });\n      }\n    }, {\n      key: "reduceStaticMemberExpression",\n      value: function reduceStaticMemberExpression(node, _ref61) {\n        var object = _ref61.object;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticMemberExpression", this).call(this, node, { object: object() });\n      }\n    }, {\n      key: "reduceStaticPropertyName",\n      value: function reduceStaticPropertyName(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticPropertyName", this).call(this, node);\n      }\n    }, {\n      key: "reduceSuper",\n      value: function reduceSuper(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSuper", this).call(this, node);\n      }\n    }, {\n      key: "reduceSwitchCase",\n      value: function reduceSwitchCase(node, _ref62) {\n        var test = _ref62.test,\n            consequent = _ref62.consequent;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchCase", this).call(this, node, { test: test(), consequent: consequent.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceSwitchDefault",\n      value: function reduceSwitchDefault(node, _ref63) {\n        var consequent = _ref63.consequent;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchDefault", this).call(this, node, { consequent: consequent.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceSwitchStatement",\n      value: function reduceSwitchStatement(node, _ref64) {\n        var discriminant = _ref64.discriminant,\n            cases = _ref64.cases;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchStatement", this).call(this, node, { discriminant: discriminant(), cases: cases.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceSwitchStatementWithDefault",\n      value: function reduceSwitchStatementWithDefault(node, _ref65) {\n        var discriminant = _ref65.discriminant,\n            preDefaultCases = _ref65.preDefaultCases,\n            defaultCase = _ref65.defaultCase,\n            postDefaultCases = _ref65.postDefaultCases;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchStatementWithDefault", this).call(this, node, { discriminant: discriminant(), preDefaultCases: preDefaultCases.map(function (n) {\n            return n();\n          }), defaultCase: defaultCase(), postDefaultCases: postDefaultCases.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceTemplateElement",\n      value: function reduceTemplateElement(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTemplateElement", this).call(this, node);\n      }\n    }, {\n      key: "reduceTemplateExpression",\n      value: function reduceTemplateExpression(node, _ref66) {\n        var tag = _ref66.tag,\n            elements = _ref66.elements;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTemplateExpression", this).call(this, node, { tag: tag == null ? null : tag(), elements: elements.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceThisExpression",\n      value: function reduceThisExpression(node) {\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceThisExpression", this).call(this, node);\n      }\n    }, {\n      key: "reduceThrowStatement",\n      value: function reduceThrowStatement(node, _ref67) {\n        var expression = _ref67.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceThrowStatement", this).call(this, node, { expression: expression() });\n      }\n    }, {\n      key: "reduceTryCatchStatement",\n      value: function reduceTryCatchStatement(node, _ref68) {\n        var body = _ref68.body,\n            catchClause = _ref68.catchClause;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTryCatchStatement", this).call(this, node, { body: body(), catchClause: catchClause() });\n      }\n    }, {\n      key: "reduceTryFinallyStatement",\n      value: function reduceTryFinallyStatement(node, _ref69) {\n        var body = _ref69.body,\n            catchClause = _ref69.catchClause,\n            finalizer = _ref69.finalizer;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTryFinallyStatement", this).call(this, node, { body: body(), catchClause: catchClause == null ? null : catchClause(), finalizer: finalizer() });\n      }\n    }, {\n      key: "reduceUnaryExpression",\n      value: function reduceUnaryExpression(node, _ref70) {\n        var operand = _ref70.operand;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceUnaryExpression", this).call(this, node, { operand: operand() });\n      }\n    }, {\n      key: "reduceUpdateExpression",\n      value: function reduceUpdateExpression(node, _ref71) {\n        var operand = _ref71.operand;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceUpdateExpression", this).call(this, node, { operand: operand() });\n      }\n    }, {\n      key: "reduceVariableDeclaration",\n      value: function reduceVariableDeclaration(node, _ref72) {\n        var declarators = _ref72.declarators;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclaration", this).call(this, node, { declarators: declarators.map(function (n) {\n            return n();\n          }) });\n      }\n    }, {\n      key: "reduceVariableDeclarationStatement",\n      value: function reduceVariableDeclarationStatement(node, _ref73) {\n        var declaration = _ref73.declaration;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclarationStatement", this).call(this, node, { declaration: declaration() });\n      }\n    }, {\n      key: "reduceVariableDeclarator",\n      value: function reduceVariableDeclarator(node, _ref74) {\n        var binding = _ref74.binding,\n            init = _ref74.init;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclarator", this).call(this, node, { binding: binding(), init: init == null ? null : init() });\n      }\n    }, {\n      key: "reduceWhileStatement",\n      value: function reduceWhileStatement(node, _ref75) {\n        var test = _ref75.test,\n            body = _ref75.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceWhileStatement", this).call(this, node, { test: test(), body: body() });\n      }\n    }, {\n      key: "reduceWithStatement",\n      value: function reduceWithStatement(node, _ref76) {\n        var object = _ref76.object,\n            body = _ref76.body;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceWithStatement", this).call(this, node, { object: object(), body: body() });\n      }\n    }, {\n      key: "reduceYieldExpression",\n      value: function reduceYieldExpression(node, _ref77) {\n        var expression = _ref77.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceYieldExpression", this).call(this, node, { expression: expression == null ? null : expression() });\n      }\n    }, {\n      key: "reduceYieldGeneratorExpression",\n      value: function reduceYieldGeneratorExpression(node, _ref78) {\n        var expression = _ref78.expression;\n\n        return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceYieldGeneratorExpression", this).call(this, node, { expression: expression() });\n      }\n    }]);\n\n    return _class;\n  }(reducerClass);\n}\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/thunkify-class.js?')},"./node_modules/shift-reducer/dist/thunkify.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.default = thunkify;\n// Generated by generate-thunkify.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction thunkify(reducer) {\n  return {\n    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, _ref) {\n      var elements = _ref.elements,\n          rest = _ref.rest;\n\n      return reducer.reduceArrayAssignmentTarget(node, { elements: elements.map(function (n) {\n          return n == null ? null : n();\n        }), rest: rest == null ? null : rest() });\n    },\n    reduceArrayBinding: function reduceArrayBinding(node, _ref2) {\n      var elements = _ref2.elements,\n          rest = _ref2.rest;\n\n      return reducer.reduceArrayBinding(node, { elements: elements.map(function (n) {\n          return n == null ? null : n();\n        }), rest: rest == null ? null : rest() });\n    },\n    reduceArrayExpression: function reduceArrayExpression(node, _ref3) {\n      var elements = _ref3.elements;\n\n      return reducer.reduceArrayExpression(node, { elements: elements.map(function (n) {\n          return n == null ? null : n();\n        }) });\n    },\n    reduceArrowExpression: function reduceArrowExpression(node, _ref4) {\n      var params = _ref4.params,\n          body = _ref4.body;\n\n      return reducer.reduceArrowExpression(node, { params: params(), body: body() });\n    },\n    reduceAssignmentExpression: function reduceAssignmentExpression(node, _ref5) {\n      var binding = _ref5.binding,\n          expression = _ref5.expression;\n\n      return reducer.reduceAssignmentExpression(node, { binding: binding(), expression: expression() });\n    },\n    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {\n      return reducer.reduceAssignmentTargetIdentifier(node);\n    },\n    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {\n      var binding = _ref6.binding,\n          init = _ref6.init;\n\n      return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });\n    },\n    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, _ref7) {\n      var name = _ref7.name,\n          binding = _ref7.binding;\n\n      return reducer.reduceAssignmentTargetPropertyProperty(node, { name: name(), binding: binding() });\n    },\n    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, _ref8) {\n      var binding = _ref8.binding,\n          init = _ref8.init;\n\n      return reducer.reduceAssignmentTargetWithDefault(node, { binding: binding(), init: init() });\n    },\n    reduceAwaitExpression: function reduceAwaitExpression(node, _ref9) {\n      var expression = _ref9.expression;\n\n      return reducer.reduceAwaitExpression(node, { expression: expression() });\n    },\n    reduceBinaryExpression: function reduceBinaryExpression(node, _ref10) {\n      var left = _ref10.left,\n          right = _ref10.right;\n\n      return reducer.reduceBinaryExpression(node, { left: left(), right: right() });\n    },\n    reduceBindingIdentifier: function reduceBindingIdentifier(node) {\n      return reducer.reduceBindingIdentifier(node);\n    },\n    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, _ref11) {\n      var binding = _ref11.binding,\n          init = _ref11.init;\n\n      return reducer.reduceBindingPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });\n    },\n    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, _ref12) {\n      var name = _ref12.name,\n          binding = _ref12.binding;\n\n      return reducer.reduceBindingPropertyProperty(node, { name: name(), binding: binding() });\n    },\n    reduceBindingWithDefault: function reduceBindingWithDefault(node, _ref13) {\n      var binding = _ref13.binding,\n          init = _ref13.init;\n\n      return reducer.reduceBindingWithDefault(node, { binding: binding(), init: init() });\n    },\n    reduceBlock: function reduceBlock(node, _ref14) {\n      var statements = _ref14.statements;\n\n      return reducer.reduceBlock(node, { statements: statements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceBlockStatement: function reduceBlockStatement(node, _ref15) {\n      var block = _ref15.block;\n\n      return reducer.reduceBlockStatement(node, { block: block() });\n    },\n    reduceBreakStatement: function reduceBreakStatement(node) {\n      return reducer.reduceBreakStatement(node);\n    },\n    reduceCallExpression: function reduceCallExpression(node, _ref16) {\n      var callee = _ref16.callee,\n          _arguments = _ref16.arguments;\n\n      return reducer.reduceCallExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceCatchClause: function reduceCatchClause(node, _ref17) {\n      var binding = _ref17.binding,\n          body = _ref17.body;\n\n      return reducer.reduceCatchClause(node, { binding: binding(), body: body() });\n    },\n    reduceClassDeclaration: function reduceClassDeclaration(node, _ref18) {\n      var name = _ref18.name,\n          _super = _ref18.super,\n          elements = _ref18.elements;\n\n      return reducer.reduceClassDeclaration(node, { name: name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceClassElement: function reduceClassElement(node, _ref19) {\n      var method = _ref19.method;\n\n      return reducer.reduceClassElement(node, { method: method() });\n    },\n    reduceClassExpression: function reduceClassExpression(node, _ref20) {\n      var name = _ref20.name,\n          _super = _ref20.super,\n          elements = _ref20.elements;\n\n      return reducer.reduceClassExpression(node, { name: name == null ? null : name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, _ref21) {\n      var binding = _ref21.binding,\n          expression = _ref21.expression;\n\n      return reducer.reduceCompoundAssignmentExpression(node, { binding: binding(), expression: expression() });\n    },\n    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, _ref22) {\n      var object = _ref22.object,\n          expression = _ref22.expression;\n\n      return reducer.reduceComputedMemberAssignmentTarget(node, { object: object(), expression: expression() });\n    },\n    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, _ref23) {\n      var object = _ref23.object,\n          expression = _ref23.expression;\n\n      return reducer.reduceComputedMemberExpression(node, { object: object(), expression: expression() });\n    },\n    reduceComputedPropertyName: function reduceComputedPropertyName(node, _ref24) {\n      var expression = _ref24.expression;\n\n      return reducer.reduceComputedPropertyName(node, { expression: expression() });\n    },\n    reduceConditionalExpression: function reduceConditionalExpression(node, _ref25) {\n      var test = _ref25.test,\n          consequent = _ref25.consequent,\n          alternate = _ref25.alternate;\n\n      return reducer.reduceConditionalExpression(node, { test: test(), consequent: consequent(), alternate: alternate() });\n    },\n    reduceContinueStatement: function reduceContinueStatement(node) {\n      return reducer.reduceContinueStatement(node);\n    },\n    reduceDataProperty: function reduceDataProperty(node, _ref26) {\n      var name = _ref26.name,\n          expression = _ref26.expression;\n\n      return reducer.reduceDataProperty(node, { name: name(), expression: expression() });\n    },\n    reduceDebuggerStatement: function reduceDebuggerStatement(node) {\n      return reducer.reduceDebuggerStatement(node);\n    },\n    reduceDirective: function reduceDirective(node) {\n      return reducer.reduceDirective(node);\n    },\n    reduceDoWhileStatement: function reduceDoWhileStatement(node, _ref27) {\n      var body = _ref27.body,\n          test = _ref27.test;\n\n      return reducer.reduceDoWhileStatement(node, { body: body(), test: test() });\n    },\n    reduceEmptyStatement: function reduceEmptyStatement(node) {\n      return reducer.reduceEmptyStatement(node);\n    },\n    reduceExport: function reduceExport(node, _ref28) {\n      var declaration = _ref28.declaration;\n\n      return reducer.reduceExport(node, { declaration: declaration() });\n    },\n    reduceExportAllFrom: function reduceExportAllFrom(node) {\n      return reducer.reduceExportAllFrom(node);\n    },\n    reduceExportDefault: function reduceExportDefault(node, _ref29) {\n      var body = _ref29.body;\n\n      return reducer.reduceExportDefault(node, { body: body() });\n    },\n    reduceExportFrom: function reduceExportFrom(node, _ref30) {\n      var namedExports = _ref30.namedExports;\n\n      return reducer.reduceExportFrom(node, { namedExports: namedExports.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {\n      return reducer.reduceExportFromSpecifier(node);\n    },\n    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, _ref31) {\n      var name = _ref31.name;\n\n      return reducer.reduceExportLocalSpecifier(node, { name: name() });\n    },\n    reduceExportLocals: function reduceExportLocals(node, _ref32) {\n      var namedExports = _ref32.namedExports;\n\n      return reducer.reduceExportLocals(node, { namedExports: namedExports.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceExpressionStatement: function reduceExpressionStatement(node, _ref33) {\n      var expression = _ref33.expression;\n\n      return reducer.reduceExpressionStatement(node, { expression: expression() });\n    },\n    reduceForAwaitStatement: function reduceForAwaitStatement(node, _ref34) {\n      var left = _ref34.left,\n          right = _ref34.right,\n          body = _ref34.body;\n\n      return reducer.reduceForAwaitStatement(node, { left: left(), right: right(), body: body() });\n    },\n    reduceForInStatement: function reduceForInStatement(node, _ref35) {\n      var left = _ref35.left,\n          right = _ref35.right,\n          body = _ref35.body;\n\n      return reducer.reduceForInStatement(node, { left: left(), right: right(), body: body() });\n    },\n    reduceForOfStatement: function reduceForOfStatement(node, _ref36) {\n      var left = _ref36.left,\n          right = _ref36.right,\n          body = _ref36.body;\n\n      return reducer.reduceForOfStatement(node, { left: left(), right: right(), body: body() });\n    },\n    reduceForStatement: function reduceForStatement(node, _ref37) {\n      var init = _ref37.init,\n          test = _ref37.test,\n          update = _ref37.update,\n          body = _ref37.body;\n\n      return reducer.reduceForStatement(node, { init: init == null ? null : init(), test: test == null ? null : test(), update: update == null ? null : update(), body: body() });\n    },\n    reduceFormalParameters: function reduceFormalParameters(node, _ref38) {\n      var items = _ref38.items,\n          rest = _ref38.rest;\n\n      return reducer.reduceFormalParameters(node, { items: items.map(function (n) {\n          return n();\n        }), rest: rest == null ? null : rest() });\n    },\n    reduceFunctionBody: function reduceFunctionBody(node, _ref39) {\n      var directives = _ref39.directives,\n          statements = _ref39.statements;\n\n      return reducer.reduceFunctionBody(node, { directives: directives.map(function (n) {\n          return n();\n        }), statements: statements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, _ref40) {\n      var name = _ref40.name,\n          params = _ref40.params,\n          body = _ref40.body;\n\n      return reducer.reduceFunctionDeclaration(node, { name: name(), params: params(), body: body() });\n    },\n    reduceFunctionExpression: function reduceFunctionExpression(node, _ref41) {\n      var name = _ref41.name,\n          params = _ref41.params,\n          body = _ref41.body;\n\n      return reducer.reduceFunctionExpression(node, { name: name == null ? null : name(), params: params(), body: body() });\n    },\n    reduceGetter: function reduceGetter(node, _ref42) {\n      var name = _ref42.name,\n          body = _ref42.body;\n\n      return reducer.reduceGetter(node, { name: name(), body: body() });\n    },\n    reduceIdentifierExpression: function reduceIdentifierExpression(node) {\n      return reducer.reduceIdentifierExpression(node);\n    },\n    reduceIfStatement: function reduceIfStatement(node, _ref43) {\n      var test = _ref43.test,\n          consequent = _ref43.consequent,\n          alternate = _ref43.alternate;\n\n      return reducer.reduceIfStatement(node, { test: test(), consequent: consequent(), alternate: alternate == null ? null : alternate() });\n    },\n    reduceImport: function reduceImport(node, _ref44) {\n      var defaultBinding = _ref44.defaultBinding,\n          namedImports = _ref44.namedImports;\n\n      return reducer.reduceImport(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namedImports: namedImports.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceImportNamespace: function reduceImportNamespace(node, _ref45) {\n      var defaultBinding = _ref45.defaultBinding,\n          namespaceBinding = _ref45.namespaceBinding;\n\n      return reducer.reduceImportNamespace(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namespaceBinding: namespaceBinding() });\n    },\n    reduceImportSpecifier: function reduceImportSpecifier(node, _ref46) {\n      var binding = _ref46.binding;\n\n      return reducer.reduceImportSpecifier(node, { binding: binding() });\n    },\n    reduceLabeledStatement: function reduceLabeledStatement(node, _ref47) {\n      var body = _ref47.body;\n\n      return reducer.reduceLabeledStatement(node, { body: body() });\n    },\n    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {\n      return reducer.reduceLiteralBooleanExpression(node);\n    },\n    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {\n      return reducer.reduceLiteralInfinityExpression(node);\n    },\n    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {\n      return reducer.reduceLiteralNullExpression(node);\n    },\n    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {\n      return reducer.reduceLiteralNumericExpression(node);\n    },\n    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {\n      return reducer.reduceLiteralRegExpExpression(node);\n    },\n    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {\n      return reducer.reduceLiteralStringExpression(node);\n    },\n    reduceMethod: function reduceMethod(node, _ref48) {\n      var name = _ref48.name,\n          params = _ref48.params,\n          body = _ref48.body;\n\n      return reducer.reduceMethod(node, { name: name(), params: params(), body: body() });\n    },\n    reduceModule: function reduceModule(node, _ref49) {\n      var directives = _ref49.directives,\n          items = _ref49.items;\n\n      return reducer.reduceModule(node, { directives: directives.map(function (n) {\n          return n();\n        }), items: items.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceNewExpression: function reduceNewExpression(node, _ref50) {\n      var callee = _ref50.callee,\n          _arguments = _ref50.arguments;\n\n      return reducer.reduceNewExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceNewTargetExpression: function reduceNewTargetExpression(node) {\n      return reducer.reduceNewTargetExpression(node);\n    },\n    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, _ref51) {\n      var properties = _ref51.properties,\n          rest = _ref51.rest;\n\n      return reducer.reduceObjectAssignmentTarget(node, { properties: properties.map(function (n) {\n          return n();\n        }), rest: rest == null ? null : rest() });\n    },\n    reduceObjectBinding: function reduceObjectBinding(node, _ref52) {\n      var properties = _ref52.properties,\n          rest = _ref52.rest;\n\n      return reducer.reduceObjectBinding(node, { properties: properties.map(function (n) {\n          return n();\n        }), rest: rest == null ? null : rest() });\n    },\n    reduceObjectExpression: function reduceObjectExpression(node, _ref53) {\n      var properties = _ref53.properties;\n\n      return reducer.reduceObjectExpression(node, { properties: properties.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceReturnStatement: function reduceReturnStatement(node, _ref54) {\n      var expression = _ref54.expression;\n\n      return reducer.reduceReturnStatement(node, { expression: expression == null ? null : expression() });\n    },\n    reduceScript: function reduceScript(node, _ref55) {\n      var directives = _ref55.directives,\n          statements = _ref55.statements;\n\n      return reducer.reduceScript(node, { directives: directives.map(function (n) {\n          return n();\n        }), statements: statements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceSetter: function reduceSetter(node, _ref56) {\n      var name = _ref56.name,\n          param = _ref56.param,\n          body = _ref56.body;\n\n      return reducer.reduceSetter(node, { name: name(), param: param(), body: body() });\n    },\n    reduceShorthandProperty: function reduceShorthandProperty(node, _ref57) {\n      var name = _ref57.name;\n\n      return reducer.reduceShorthandProperty(node, { name: name() });\n    },\n    reduceSpreadElement: function reduceSpreadElement(node, _ref58) {\n      var expression = _ref58.expression;\n\n      return reducer.reduceSpreadElement(node, { expression: expression() });\n    },\n    reduceSpreadProperty: function reduceSpreadProperty(node, _ref59) {\n      var expression = _ref59.expression;\n\n      return reducer.reduceSpreadProperty(node, { expression: expression() });\n    },\n    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, _ref60) {\n      var object = _ref60.object;\n\n      return reducer.reduceStaticMemberAssignmentTarget(node, { object: object() });\n    },\n    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, _ref61) {\n      var object = _ref61.object;\n\n      return reducer.reduceStaticMemberExpression(node, { object: object() });\n    },\n    reduceStaticPropertyName: function reduceStaticPropertyName(node) {\n      return reducer.reduceStaticPropertyName(node);\n    },\n    reduceSuper: function reduceSuper(node) {\n      return reducer.reduceSuper(node);\n    },\n    reduceSwitchCase: function reduceSwitchCase(node, _ref62) {\n      var test = _ref62.test,\n          consequent = _ref62.consequent;\n\n      return reducer.reduceSwitchCase(node, { test: test(), consequent: consequent.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceSwitchDefault: function reduceSwitchDefault(node, _ref63) {\n      var consequent = _ref63.consequent;\n\n      return reducer.reduceSwitchDefault(node, { consequent: consequent.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceSwitchStatement: function reduceSwitchStatement(node, _ref64) {\n      var discriminant = _ref64.discriminant,\n          cases = _ref64.cases;\n\n      return reducer.reduceSwitchStatement(node, { discriminant: discriminant(), cases: cases.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, _ref65) {\n      var discriminant = _ref65.discriminant,\n          preDefaultCases = _ref65.preDefaultCases,\n          defaultCase = _ref65.defaultCase,\n          postDefaultCases = _ref65.postDefaultCases;\n\n      return reducer.reduceSwitchStatementWithDefault(node, { discriminant: discriminant(), preDefaultCases: preDefaultCases.map(function (n) {\n          return n();\n        }), defaultCase: defaultCase(), postDefaultCases: postDefaultCases.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceTemplateElement: function reduceTemplateElement(node) {\n      return reducer.reduceTemplateElement(node);\n    },\n    reduceTemplateExpression: function reduceTemplateExpression(node, _ref66) {\n      var tag = _ref66.tag,\n          elements = _ref66.elements;\n\n      return reducer.reduceTemplateExpression(node, { tag: tag == null ? null : tag(), elements: elements.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceThisExpression: function reduceThisExpression(node) {\n      return reducer.reduceThisExpression(node);\n    },\n    reduceThrowStatement: function reduceThrowStatement(node, _ref67) {\n      var expression = _ref67.expression;\n\n      return reducer.reduceThrowStatement(node, { expression: expression() });\n    },\n    reduceTryCatchStatement: function reduceTryCatchStatement(node, _ref68) {\n      var body = _ref68.body,\n          catchClause = _ref68.catchClause;\n\n      return reducer.reduceTryCatchStatement(node, { body: body(), catchClause: catchClause() });\n    },\n    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, _ref69) {\n      var body = _ref69.body,\n          catchClause = _ref69.catchClause,\n          finalizer = _ref69.finalizer;\n\n      return reducer.reduceTryFinallyStatement(node, { body: body(), catchClause: catchClause == null ? null : catchClause(), finalizer: finalizer() });\n    },\n    reduceUnaryExpression: function reduceUnaryExpression(node, _ref70) {\n      var operand = _ref70.operand;\n\n      return reducer.reduceUnaryExpression(node, { operand: operand() });\n    },\n    reduceUpdateExpression: function reduceUpdateExpression(node, _ref71) {\n      var operand = _ref71.operand;\n\n      return reducer.reduceUpdateExpression(node, { operand: operand() });\n    },\n    reduceVariableDeclaration: function reduceVariableDeclaration(node, _ref72) {\n      var declarators = _ref72.declarators;\n\n      return reducer.reduceVariableDeclaration(node, { declarators: declarators.map(function (n) {\n          return n();\n        }) });\n    },\n    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, _ref73) {\n      var declaration = _ref73.declaration;\n\n      return reducer.reduceVariableDeclarationStatement(node, { declaration: declaration() });\n    },\n    reduceVariableDeclarator: function reduceVariableDeclarator(node, _ref74) {\n      var binding = _ref74.binding,\n          init = _ref74.init;\n\n      return reducer.reduceVariableDeclarator(node, { binding: binding(), init: init == null ? null : init() });\n    },\n    reduceWhileStatement: function reduceWhileStatement(node, _ref75) {\n      var test = _ref75.test,\n          body = _ref75.body;\n\n      return reducer.reduceWhileStatement(node, { test: test(), body: body() });\n    },\n    reduceWithStatement: function reduceWithStatement(node, _ref76) {\n      var object = _ref76.object,\n          body = _ref76.body;\n\n      return reducer.reduceWithStatement(node, { object: object(), body: body() });\n    },\n    reduceYieldExpression: function reduceYieldExpression(node, _ref77) {\n      var expression = _ref77.expression;\n\n      return reducer.reduceYieldExpression(node, { expression: expression == null ? null : expression() });\n    },\n    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, _ref78) {\n      var expression = _ref78.expression;\n\n      return reducer.reduceYieldGeneratorExpression(node, { expression: expression() });\n    }\n  };\n}\n\n//# sourceURL=webpack:///./node_modules/shift-reducer/dist/thunkify.js?')},"./node_modules/shift-regexp-acceptor/dist/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nopyright 2018 Shape Security, Inc.\nnicensed under the Apache License, Version 2.0 (the \"License\")\nyou may not use this file except in compliance with the License.\nou may obtain a copy of the License at\nnhttp://www.apache.org/licenses/LICENSE-2.0\nnnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\neither express or implied.\nee the License for the specific language governing permissions and\nlimitations under the License.\nn\n/* eslint-disable no-use-before-define */\n\nvar _unicodeMatchPropertyValueEcmascript = __webpack_require__(\"./node_modules/unicode-match-property-value-ecmascript/index.js\");\n\nvar _unicodeMatchPropertyValueEcmascript2 = _interopRequireDefault(_unicodeMatchPropertyValueEcmascript);\n\nvar _mappings = __webpack_require__(\"./node_modules/unicode-match-property-value-ecmascript/data/mappings.js\");\n\nvar _mappings2 = _interopRequireDefault(_mappings);\n\nvar _unicodeMatchPropertyEcmascript = __webpack_require__(\"./node_modules/unicode-match-property-ecmascript/index.js\");\n\nvar _unicodeMatchPropertyEcmascript2 = _interopRequireDefault(_unicodeMatchPropertyEcmascript);\n\nvar _unicodePropertyAliasesEcmascript = __webpack_require__(\"./node_modules/unicode-property-aliases-ecmascript/index.js\");\n\nvar _unicodePropertyAliasesEcmascript2 = _interopRequireDefault(_unicodePropertyAliasesEcmascript);\n\nvar _unicode = __webpack_require__(\"./node_modules/shift-regexp-acceptor/dist/unicode.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar catchIsFalse = function catchIsFalse(predicate) {\n  try {\n    return !!predicate();\n  } catch (e) {\n    return false;\n  }\n};\n\nvar syntaxCharacters = '^$\\\\.*+?()[]{}|'.split('');\nvar extendedSyntaxCharacters = '^$\\\\.*+?()[|'.split('');\n\nvar controlEscapeCharacters = 'fnrtv'.split('');\nvar controlEscapeCharacterValues = { 'f': '\\f'.charCodeAt(0), 'n': '\\n'.charCodeAt(0), 'r': '\\r'.charCodeAt(0), 't': '\\t'.charCodeAt(0), 'v': '\\v'.charCodeAt(0) };\n\nvar controlCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nvar hexDigits = '0123456789abcdefABCDEF'.split('');\nvar decimalDigits = '0123456789'.split('');\nvar octalDigits = '01234567'.split('');\n\nvar INVALID_NAMED_BACKREFERENCE_SENTINEL = { INVALID_NAMED_BACKREFERENCE_SENTINE: true };\n\nfunction isIdentifierStart(ch) {\n  return ch < 128 ? _unicode.idStartBool[ch] : _unicode.idStartLargeRegex.test(String.fromCodePoint(ch));\n}\n\nfunction isIdentifierPart(ch) {\n  return ch < 128 ? _unicode.idContinueBool[ch] : _unicode.idContinueLargeRegex.test(String.fromCodePoint(ch));\n}\n\nvar PatternAcceptorState = function () {\n  function PatternAcceptorState(pattern, unicode) {\n    _classCallCheck(this, PatternAcceptorState);\n\n    this.pattern = pattern;\n    this.unicode = unicode;\n    this.index = 0;\n    this.backreferences = [];\n    this.backreferenceNames = [];\n    this.groupingNames = [];\n    this.capturingGroups = 0;\n  }\n\n  _createClass(PatternAcceptorState, [{\n    key: 'empty',\n    value: function empty() {\n      return this.index >= this.pattern.length;\n    }\n  }, {\n    key: 'nextCodePoint',\n    value: function nextCodePoint() {\n      if (this.empty()) {\n        return null;\n      }\n      if (this.unicode) {\n        return String.fromCodePoint(this.pattern.codePointAt(this.index));\n      }\n      return this.pattern.charAt(this.index);\n    }\n  }, {\n    key: 'skipCodePoint',\n    value: function skipCodePoint() {\n      this.index += this.nextCodePoint().length;\n    }\n  }, {\n    key: 'eat',\n    value: function eat(str) {\n      if (this.index + str.length > this.pattern.length || this.pattern.slice(this.index, this.index + str.length) !== str) {\n        return false;\n      }\n      this.index += str.length;\n      return true;\n    }\n  }, {\n    key: 'eatIdentifierCodePoint',\n    value: function eatIdentifierCodePoint() {\n      var characterValue = void 0;\n      var originalIndex = this.index;\n      var character = void 0;\n      if (this.match('\\\\u')) {\n        this.skipCodePoint();\n        characterValue = acceptUnicodeEscape(this);\n        if (!characterValue.matched) {\n          this.index = originalIndex;\n          return null;\n        }\n        characterValue = characterValue.value;\n        character = String.fromCodePoint(characterValue);\n      } else {\n        character = this.nextCodePoint();\n        if (character == null) {\n          this.index = originalIndex;\n          return null;\n        }\n        this.index += character.length;\n        characterValue = character.codePointAt(0);\n      }\n      return { character: character, characterValue: characterValue };\n    }\n  }, {\n    key: 'eatIdentifierStart',\n    value: function eatIdentifierStart() {\n      var originalIndex = this.index;\n      var codePoint = this.eatIdentifierCodePoint();\n      if (codePoint === null) {\n        this.index = originalIndex;\n        return null;\n      }\n      if (codePoint.character === '_' || codePoint.character === '$' || isIdentifierStart(codePoint.characterValue)) {\n        return codePoint.character;\n      }\n      this.index = originalIndex;\n      return null;\n    }\n  }, {\n    key: 'eatIdentifierPart',\n    value: function eatIdentifierPart() {\n      var originalIndex = this.index;\n      var codePoint = this.eatIdentifierCodePoint();\n      if (codePoint === null) {\n        this.index = originalIndex;\n        return null;\n      }\n      // ZWNJ / ZWJ\n      if (codePoint.character === '\\u200C' || codePoint.character === '\\u200D' || codePoint.character === '$' || isIdentifierPart(codePoint.characterValue)) {\n        return codePoint.character;\n      }\n      this.index = originalIndex;\n      return null;\n    }\n  }, {\n    key: 'eatAny',\n    value: function eatAny() {\n      for (var _len = arguments.length, strs = Array(_len), _key = 0; _key < _len; _key++) {\n        strs[_key] = arguments[_key];\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = strs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var str = _step.value;\n\n          if (this.eat(str)) {\n            return str;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'match',\n    value: function match(str) {\n      return this.index + str.length <= this.pattern.length && this.pattern.slice(this.index, this.index + str.length) === str;\n    }\n  }, {\n    key: 'matchAny',\n    value: function matchAny() {\n      for (var _len2 = arguments.length, strs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        strs[_key2] = arguments[_key2];\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = strs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var str = _step2.value;\n\n          if (this.match(str)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'eatNaturalNumber',\n    value: function eatNaturalNumber() {\n      var _this = this;\n\n      var characters = [];\n      var eatNumber = function eatNumber() {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = decimalDigits[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var str = _step3.value;\n\n            if (_this.eat(str)) {\n              characters.push(str);\n              return true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        return false;\n      };\n      while (eatNumber()) {}\n      return characters.length === 0 ? null : characters.join('');\n    }\n  }]);\n\n  return PatternAcceptorState;\n}();\n\n// acceptRegex\n\n\nexports.default = function (pattern) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$unicode = _ref.unicode,\n      unicode = _ref$unicode === undefined ? false : _ref$unicode;\n\n  var state = new PatternAcceptorState(pattern, unicode);\n  var accepted = acceptDisjunction(state);\n  if (accepted.matched) {\n    if (state.unicode) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = state.backreferences[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var backreference = _step4.value;\n\n          if (backreference > state.capturingGroups) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n    if (state.groupingNames.length > 0 || state.unicode) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = state.backreferenceNames[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var backreferenceName = _step5.value;\n\n          if (state.groupingNames.indexOf(backreferenceName) === -1) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    }\n  }\n  return accepted.matched;\n};\n\nvar backtrackOnFailure = function backtrackOnFailure(func) {\n  return function (state) {\n    var savedIndex = state.index;\n    var oldBackreferences = state.backreferences.slice(0);\n    var oldCapturingGroups = state.capturingGroups;\n    var val = func(state);\n    if (!val.matched) {\n      state.index = savedIndex;\n      state.backreferences = oldBackreferences;\n      state.capturingGroups = oldCapturingGroups;\n    }\n    return val;\n  };\n};\n\nvar acceptUnicodeEscape = backtrackOnFailure(function (state) {\n  if (!state.eat('u')) {\n    return { matched: false };\n  }\n  if (state.unicode && state.eat('{')) {\n    var _digits = [];\n    while (!state.eat('}')) {\n      var digit = state.eatAny.apply(state, _toConsumableArray(hexDigits));\n      if (digit === null) {\n        return { matched: false };\n      }\n      _digits.push(digit);\n    }\n    var _value = parseInt(_digits.join(''), 16);\n    return _value > 0x10FFFF ? { matched: false } : { matched: true, value: _value };\n  }\n  var digits = [0, 0, 0, 0].map(function () {\n    return state.eatAny.apply(state, _toConsumableArray(hexDigits));\n  });\n  if (digits.some(function (digit) {\n    return digit === null;\n  })) {\n    return { matched: false };\n  }\n  var value = parseInt(digits.join(''), 16);\n  if (state.unicode && value >= 0xD800 && value <= 0xDBFF) {\n    var surrogatePairValue = backtrackOnFailure(function (subState) {\n      if (!subState.eat('\\\\u')) {\n        return { matched: false };\n      }\n      var digits2 = [0, 0, 0, 0].map(function () {\n        return subState.eatAny.apply(subState, _toConsumableArray(hexDigits));\n      });\n      if (digits2.some(function (digit) {\n        return digit === null;\n      })) {\n        return { matched: false };\n      }\n      var value2 = parseInt(digits2.join(''), 16);\n      if (value2 < 0xDC00 || value2 >= 0xE000) {\n        return { matched: false };\n      }\n      return { matched: true, value: 0x10000 + ((value & 0x03FF) << 10) + (value2 & 0x03FF) };\n    })(state);\n    if (surrogatePairValue.matched) {\n      return surrogatePairValue;\n    }\n  }\n  return { matched: true, value: value };\n});\n\nvar acceptDisjunction = function acceptDisjunction(state, terminator) {\n  do {\n    if (terminator !== void 0 && state.eat(terminator)) {\n      return { matched: true };\n    } else if (state.match('|')) {\n      continue;\n    }\n    if (!acceptAlternative(state, terminator).matched) {\n      return { matched: false };\n    }\n  } while (state.eat('|'));\n  return { matched: terminator === void 0 || !!state.eat(terminator) };\n};\n\nvar acceptAlternative = function acceptAlternative(state, terminator) {\n  while (!state.match('|') && !state.empty() && (terminator === void 0 || !state.match(terminator))) {\n    if (!acceptTerm(state).matched) {\n      return { matched: false };\n    }\n  }\n  return { matched: true };\n};\n\nvar anyOf = function anyOf() {\n  for (var _len3 = arguments.length, acceptors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    acceptors[_key3] = arguments[_key3];\n  }\n\n  return function (state) {\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n      for (var _iterator6 = acceptors[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n        var predicate = _step6.value;\n\n        var value = predicate(state);\n        if (value.matched) {\n          return value;\n        }\n      }\n    } catch (err) {\n      _didIteratorError6 = true;\n      _iteratorError6 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n          _iterator6.return();\n        }\n      } finally {\n        if (_didIteratorError6) {\n          throw _iteratorError6;\n        }\n      }\n    }\n\n    return { matched: false };\n  };\n};\n\nvar acceptTerm = function acceptTerm(state) {\n  // non-quantified references are rolled into quantified accepts to improve performance significantly.\n  if (state.unicode) {\n    return anyOf(acceptAssertion, acceptQuantified(acceptAtom))(state);\n  }\n  return anyOf(acceptQuantified(acceptQuantifiableAssertion), acceptAssertion, acceptQuantified(acceptAtom))(state);\n};\n\nvar acceptLabeledGroup = function acceptLabeledGroup(predicate) {\n  return backtrackOnFailure(function (state) {\n    if (!state.eat('(')) {\n      return { matched: false };\n    }\n    if (predicate(state)) {\n      return acceptDisjunction(state, ')');\n    }\n    return { matched: false };\n  });\n};\n\nvar acceptQuantifiableAssertion = acceptLabeledGroup(function (state) {\n  return !!state.eatAny('?=', '?!');\n});\n\nvar acceptAssertion = function acceptAssertion(state) {\n  if (state.eatAny('^', '$', '\\\\b', '\\\\B')) {\n    return { matched: true };\n  }\n  return acceptLabeledGroup(function (subState) {\n    return subState.unicode ? !!subState.eatAny('?=', '?!', '?<=', '?<!') : !!subState.eatAny('?<=', '?<!');\n  })(state);\n};\n\nvar acceptDecimal = function acceptDecimal(state) {\n  return { matched: state.eatNaturalNumber() !== null };\n};\n\nvar acceptQuantified = function acceptQuantified(acceptor) {\n  return backtrackOnFailure(function (state) {\n    if (!acceptor(state).matched) {\n      return { matched: false };\n    }\n    if (state.match('{')) {\n      var value = backtrackOnFailure(function (subState) {\n        subState.eat('{');\n        var num1 = subState.eatNaturalNumber();\n        if (num1 === null) {\n          return { matched: false };\n        }\n        if (subState.eat(',') && subState.matchAny.apply(subState, _toConsumableArray(decimalDigits))) {\n          var num2 = subState.eatNaturalNumber();\n          if (num2 === null || parseInt(num1) > parseInt(num2)) {\n            return { matched: false };\n          }\n        }\n        if (!subState.eat('}')) {\n          return { matched: false };\n        }\n        subState.eat('?');\n        return { matched: true };\n      })(state);\n      if (!value.matched) {\n        return { matched: !state.unicode };\n      }\n      return value;\n    } else if (state.eatAny('*', '+', '?')) {\n      state.eat('?');\n    }\n    return { matched: true };\n  });\n};\n\nvar acceptCharacterExcept = function acceptCharacterExcept(characters) {\n  return function (state) {\n    var nextCodePoint = state.nextCodePoint();\n    if (nextCodePoint === null || characters.indexOf(nextCodePoint) !== -1) {\n      return { matched: false };\n    }\n    state.skipCodePoint();\n    return { matched: true };\n  };\n};\n\nvar acceptPatternCharacter = acceptCharacterExcept(syntaxCharacters);\n\nvar acceptExtendedPatternCharacter = acceptCharacterExcept(extendedSyntaxCharacters);\n\nvar acceptInvalidBracedQuantifier = function acceptInvalidBracedQuantifier(state) {\n  return backtrackOnFailure(function (subState) {\n    return { matched: !!(subState.eat('{') && acceptDecimal(subState).matched && (!subState.eat(',') || subState.match('}') || acceptDecimal(subState).matched) && subState.eat('}')) };\n  })(state);\n};\n\nvar acceptAtom = function acceptAtom(state) {\n  if (state.unicode) {\n    return anyOf(acceptPatternCharacter, function (subState) {\n      return { matched: !!subState.eat('.') };\n    }, backtrackOnFailure(function (subState) {\n      return subState.eat('\\\\') ? acceptAtomEscape(subState) : { matched: false };\n    }), acceptCharacterClass, acceptLabeledGroup(function (subState) {\n      return subState.eat('?:');\n    }), acceptGrouping)(state);\n  }\n  var matched = anyOf(function (subState) {\n    return { matched: !!subState.eat('.') };\n  }, backtrackOnFailure(function (subState) {\n    return subState.eat('\\\\') ? acceptAtomEscape(subState) : { matched: false };\n  }), backtrackOnFailure(function (subState) {\n    return { matched: subState.eat('\\\\') && subState.match('c') };\n  }), acceptCharacterClass, acceptLabeledGroup(function (subState) {\n    return subState.eat('?:');\n  }), acceptGrouping)(state);\n  if (!matched.matched && acceptInvalidBracedQuantifier(state).matched) {\n    return { matched: false };\n  }\n  return matched.matched ? matched : acceptExtendedPatternCharacter(state);\n};\n\nvar acceptGrouping = backtrackOnFailure(function (state) {\n  if (!state.eat('(')) {\n    return { matched: false };\n  }\n  var groupName = backtrackOnFailure(function (subState) {\n    if (!state.eat('?')) {\n      return { matched: false };\n    }\n    return acceptGroupName(subState);\n  })(state);\n  if (!acceptDisjunction(state, ')').matched) {\n    return { matched: false };\n  }\n  if (groupName.matched) {\n    if (state.groupingNames.indexOf(groupName.data) !== -1) {\n      return { matched: false };\n    }\n    state.groupingNames.push(groupName.data);\n  }\n  state.capturingGroups++;\n  return { matched: true };\n});\n\nvar acceptDecimalEscape = backtrackOnFailure(function (state) {\n  var firstDecimal = state.eatAny.apply(state, _toConsumableArray(decimalDigits.slice(1)));\n  if (firstDecimal === null) {\n    return { matched: false };\n  }\n  // we also accept octal escapes here, but it is impossible to tell if it is a octal escape until all parsing is complete.\n  // octal escapes are handled in acceptCharacterEscape for classes\n  state.backreferences.push(parseInt(firstDecimal + (state.eatNaturalNumber() || '')));\n  return { matched: true };\n});\n\nvar acceptCharacterClassEscape = function acceptCharacterClassEscape(state) {\n  if (state.eatAny('d', 'D', 's', 'S', 'w', 'W')) {\n    return { matched: true };\n  }\n  if (state.unicode) {\n    return backtrackOnFailure(function (subState) {\n      if (!subState.eat('p{') && !subState.eat('P{')) {\n        return { matched: false };\n      }\n      if (!acceptUnicodePropertyValueExpression(subState).matched) {\n        return { matched: false };\n      }\n      return { matched: !!subState.eat('}') };\n    })(state);\n  }\n  return { matched: false };\n};\n\nvar acceptUnicodePropertyName = function acceptUnicodePropertyName(state) {\n  var characters = [];\n  var character = void 0;\n  while (character = state.eatAny.apply(state, _toConsumableArray(controlCharacters).concat(['_']))) {\n    // eslint-disable-line no-cond-assign\n    characters.push(character);\n  }\n  return { matched: characters.length > 0, data: characters.join('') };\n};\n\nvar acceptUnicodePropertyValue = function acceptUnicodePropertyValue(state) {\n  var characters = [];\n  var character = void 0;\n  while (character = state.eatAny.apply(state, _toConsumableArray(controlCharacters).concat(_toConsumableArray(decimalDigits), ['_']))) {\n    // eslint-disable-line no-cond-assign\n    characters.push(character);\n  }\n  return { matched: characters.length > 0, data: characters.join('') };\n};\n\n// excluding nonbinary properties from mathias' list\n// https://www.ecma-international.org/ecma-262/9.0/index.html#table-nonbinary-unicode-properties\nvar illegalLoneUnicodePropertyNames = ['General_Category', 'Script', 'Script_Extensions', 'scx', 'sc', 'gc'];\n\nvar generalCategoryValues = _mappings2.default.get('General_Category');\n\nvar acceptLoneUnicodePropertyNameOrValue = function acceptLoneUnicodePropertyNameOrValue(state) {\n  var loneValue = acceptUnicodePropertyValue(state);\n  if (!loneValue.matched || illegalLoneUnicodePropertyNames.includes(loneValue.data)) {\n    return { matched: false };\n  }\n\n  return { matched: catchIsFalse(function () {\n      return (0, _unicodeMatchPropertyEcmascript2.default)(loneValue.data);\n    }) || generalCategoryValues.get(loneValue.data) != null };\n};\n\nvar acceptUnicodePropertyValueExpression = function acceptUnicodePropertyValueExpression(state) {\n  return anyOf(backtrackOnFailure(function (subState) {\n    var name = acceptUnicodePropertyName(subState);\n    if (!name.matched || !subState.eat('=')) {\n      return { matched: false };\n    }\n    var value = acceptUnicodePropertyValue(subState);\n    if (!value.matched) {\n      return { matched: false };\n    }\n    return { matched: catchIsFalse(function () {\n        return (0, _unicodeMatchPropertyValueEcmascript2.default)(_unicodePropertyAliasesEcmascript2.default.get(name.data) || name.data, value.data);\n      }) };\n  }), backtrackOnFailure(acceptLoneUnicodePropertyNameOrValue))(state);\n};\n\nvar acceptCharacterEscape = anyOf(function (state) {\n  var eaten = state.eatAny.apply(state, _toConsumableArray(controlEscapeCharacters));\n  if (eaten === null) {\n    return { matched: false };\n  }\n  return { matched: true, value: controlEscapeCharacterValues[eaten] };\n}, backtrackOnFailure(function (state) {\n  if (!state.eat('c')) {\n    return { matched: false };\n  }\n  var character = state.eatAny.apply(state, _toConsumableArray(controlCharacters));\n  if (character === null) {\n    return { matched: false };\n  }\n  return { matched: true, value: character.charCodeAt(0) % 32 };\n}), backtrackOnFailure(function (state) {\n  if (!state.eat('0') || state.eatAny.apply(state, _toConsumableArray(decimalDigits))) {\n    return { matched: false };\n  }\n  return { matched: true, value: 0 };\n}), backtrackOnFailure(function (state) {\n  if (!state.eat('x')) {\n    return { matched: false };\n  }\n  var digits = [0, 0].map(function () {\n    return state.eatAny.apply(state, _toConsumableArray(hexDigits));\n  });\n  if (digits.some(function (value) {\n    return value === null;\n  })) {\n    return { matched: false };\n  }\n  return { matched: true, value: parseInt(digits.join(''), 16) };\n}), acceptUnicodeEscape, backtrackOnFailure(function (state) {\n  if (state.unicode) {\n    return { matched: false };\n  }\n  var octal1 = state.eatAny.apply(state, _toConsumableArray(octalDigits));\n  if (octal1 === null) {\n    return { matched: false };\n  }\n  var octal1Value = parseInt(octal1, 8);\n  if (octalDigits.indexOf(state.nextCodePoint()) === -1) {\n    return { matched: true, value: octal1Value };\n  }\n  var octal2 = state.eatAny.apply(state, _toConsumableArray(octalDigits));\n  var octal2Value = parseInt(octal2, 8);\n  if (octal1Value < 4) {\n    if (octalDigits.indexOf(state.nextCodePoint()) === -1) {\n      return { matched: true, value: octal1Value << 3 | octal2Value };\n    }\n    var octal3 = state.eatAny.apply(state, _toConsumableArray(octalDigits));\n    var octal3Value = parseInt(octal3, 8);\n    return { matched: true, value: octal1Value << 6 | octal2Value << 3 | octal3Value };\n  }\n  return { matched: true, value: octal1Value << 3 | octal2Value };\n}), backtrackOnFailure(function (state) {\n  if (!state.unicode) {\n    return { matched: false };\n  }\n  var value = state.eatAny.apply(state, _toConsumableArray(syntaxCharacters));\n  if (value === null) {\n    return { matched: false };\n  }\n  return { matched: true, value: value.charCodeAt(0) };\n}), function (state) {\n  if (!state.unicode || !state.eat('/')) {\n    return { matched: false };\n  }\n  return { matched: true, value: '/'.charCodeAt(0) };\n}, backtrackOnFailure(function (state) {\n  if (state.unicode) {\n    return { matched: false };\n  }\n  var next = state.nextCodePoint();\n  if (next !== null && next !== 'c' && next !== 'k') {\n    state.skipCodePoint();\n    return { matched: true, value: next.codePointAt(0) };\n  }\n  return { matched: false };\n}));\n\nvar acceptGroupNameBackreference = backtrackOnFailure(function (state) {\n  if (!state.eat('k')) {\n    return { matched: false };\n  }\n  var name = acceptGroupName(state);\n  if (!name.matched) {\n    state.backreferenceNames.push(INVALID_NAMED_BACKREFERENCE_SENTINEL);\n    return { matched: true };\n  }\n  state.backreferenceNames.push(name.data);\n  return { matched: true };\n});\n\nvar acceptGroupName = backtrackOnFailure(function (state) {\n  if (!state.eat('<')) {\n    return { matched: false };\n  }\n  var characters = [];\n  var start = state.eatIdentifierStart();\n  if (!start) {\n    return { matched: false };\n  }\n  characters.push(start);\n  var part = void 0;\n  while (part = state.eatIdentifierPart()) {\n    // eslint-disable-line no-cond-assign\n    characters.push(part);\n  }\n  if (!state.eat('>')) {\n    return { matched: false };\n  }\n  return { matched: characters.length > 0, data: characters.join('') };\n});\n\nvar acceptAtomEscape = anyOf(acceptDecimalEscape, acceptCharacterClassEscape, acceptCharacterEscape, acceptGroupNameBackreference);\n\nvar acceptCharacterClass = backtrackOnFailure(function (state) {\n  if (!state.eat('[')) {\n    return { matched: false };\n  }\n  state.eat('^');\n\n  var acceptClassEscape = anyOf(function (subState) {\n    return { matched: !!subState.eat('b'), value: 0x0008 };\n  }, function (subState) {\n    if (!subState.unicode) {\n      return { matched: false };\n    }\n    return acceptDecimalEscape(subState);\n  }, function (subState) {\n    return { matched: subState.unicode && !!subState.eat('-'), value: '-'.charCodeAt(0) };\n  }, backtrackOnFailure(function (subState) {\n    if (subState.unicode || !subState.eat('c')) {\n      return { matched: false };\n    }\n    var character = subState.eatAny.apply(subState, _toConsumableArray(decimalDigits).concat(['_']));\n    if (character === null) {\n      return { matched: false };\n    }\n    return { matched: true, value: character.charCodeAt(0) % 32 };\n  }), acceptCharacterClassEscape, acceptCharacterEscape);\n\n  var acceptClassAtomNoDash = function acceptClassAtomNoDash(localState) {\n    var nextCodePoint = localState.nextCodePoint();\n    if (nextCodePoint === ']' || nextCodePoint === '-' || nextCodePoint === null) {\n      return { matched: false };\n    }\n    if (nextCodePoint !== '\\\\') {\n      localState.skipCodePoint();\n      return { matched: true, value: nextCodePoint.codePointAt(0) };\n    }\n    localState.eat('\\\\');\n    var classEscape = acceptClassEscape(localState);\n    if (!classEscape.matched && localState.nextCodePoint() === 'c' && !localState.unicode) {\n      return { matched: true, value: '\\\\'.charCodeAt(0) };\n    }\n    return classEscape;\n  };\n\n  var acceptClassAtom = function acceptClassAtom(localState) {\n    if (localState.eat('-')) {\n      return { matched: true, value: '-'.charCodeAt(0) };\n    }\n    return acceptClassAtomNoDash(localState);\n  };\n\n  var finishClassRange = function finishClassRange(localState, atom) {\n    var isUnvaluedPassedAtom = function isUnvaluedPassedAtom(subAtom) {\n      return subAtom.value === void 0 && subAtom.matched;\n    };\n    if (localState.eat('-')) {\n      if (localState.match(']')) {\n        return { matched: true };\n      }\n      var otherAtom = acceptClassAtom(localState);\n      if (!otherAtom.matched) {\n        return { matched: false };\n      }\n      if (localState.unicode && (isUnvaluedPassedAtom(atom) || isUnvaluedPassedAtom(otherAtom))) {\n        return { matched: false };\n      } else if (!(!localState.unicode && (isUnvaluedPassedAtom(atom) || isUnvaluedPassedAtom(otherAtom))) && atom.value > otherAtom.value) {\n        return { matched: false };\n      } else if (localState.match(']')) {\n        return { matched: true };\n      }\n      return acceptNonEmptyClassRanges(localState);\n    }\n    if (localState.match(']')) {\n      return { matched: true };\n    }\n    return acceptNonEmptyClassRangesNoDash(localState);\n  };\n\n  var acceptNonEmptyClassRanges = function acceptNonEmptyClassRanges(localState) {\n    var atom = acceptClassAtom(localState);\n    return atom.matched ? finishClassRange(localState, atom) : { matched: false };\n  };\n\n  var acceptNonEmptyClassRangesNoDash = function acceptNonEmptyClassRangesNoDash(localState) {\n    var atom = acceptClassAtomNoDash(localState);\n    return atom.matched ? finishClassRange(localState, atom) : { matched: false };\n  };\n\n  if (state.eat(']')) {\n    return { matched: true };\n  }\n\n  var value = acceptNonEmptyClassRanges(state);\n  if (value.matched) {\n    state.eat(']'); // cannot fail, as above will not return matched if it is not seen in advance\n  }\n\n  return value;\n});\n\n//# sourceURL=webpack:///./node_modules/shift-regexp-acceptor/dist/index.js?")},"./node_modules/shift-regexp-acceptor/dist/unicode.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n// Generated by shift-parser-js/scripts/generate-unicode-data.js\n\nvar whitespaceArray = exports.whitespaceArray = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];\nvar whitespaceBool = exports.whitespaceBool = [false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];\n\nvar idStartLargeRegex = exports.idStartLargeRegex = /^[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]$/;\nvar idStartBool = exports.idStartBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];\n\nvar idContinueLargeRegex = exports.idContinueLargeRegex = /^[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]$/;\nvar idContinueBool = exports.idContinueBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];\n\n//# sourceURL=webpack:///./node_modules/shift-regexp-acceptor/dist/unicode.js?')},"./node_modules/unicode-canonical-property-names-ecmascript/index.js":function(module,exports){eval("module.exports = new Set([\n\t// Non-binary properties:\n\t'General_Category',\n\t'Script',\n\t'Script_Extensions',\n\t// Binary properties:\n\t'Alphabetic',\n\t'Any',\n\t'ASCII',\n\t'ASCII_Hex_Digit',\n\t'Assigned',\n\t'Bidi_Control',\n\t'Bidi_Mirrored',\n\t'Case_Ignorable',\n\t'Cased',\n\t'Changes_When_Casefolded',\n\t'Changes_When_Casemapped',\n\t'Changes_When_Lowercased',\n\t'Changes_When_NFKC_Casefolded',\n\t'Changes_When_Titlecased',\n\t'Changes_When_Uppercased',\n\t'Dash',\n\t'Default_Ignorable_Code_Point',\n\t'Deprecated',\n\t'Diacritic',\n\t'Emoji',\n\t'Emoji_Component',\n\t'Emoji_Modifier',\n\t'Emoji_Modifier_Base',\n\t'Emoji_Presentation',\n\t'Extended_Pictographic',\n\t'Extender',\n\t'Grapheme_Base',\n\t'Grapheme_Extend',\n\t'Hex_Digit',\n\t'ID_Continue',\n\t'ID_Start',\n\t'Ideographic',\n\t'IDS_Binary_Operator',\n\t'IDS_Trinary_Operator',\n\t'Join_Control',\n\t'Logical_Order_Exception',\n\t'Lowercase',\n\t'Math',\n\t'Noncharacter_Code_Point',\n\t'Pattern_Syntax',\n\t'Pattern_White_Space',\n\t'Quotation_Mark',\n\t'Radical',\n\t'Regional_Indicator',\n\t'Sentence_Terminal',\n\t'Soft_Dotted',\n\t'Terminal_Punctuation',\n\t'Unified_Ideograph',\n\t'Uppercase',\n\t'Variation_Selector',\n\t'White_Space',\n\t'XID_Continue',\n\t'XID_Start'\n]);\n\n\n//# sourceURL=webpack:///./node_modules/unicode-canonical-property-names-ecmascript/index.js?")},"./node_modules/unicode-match-property-ecmascript/index.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nconst canonicalProperties = __webpack_require__("./node_modules/unicode-canonical-property-names-ecmascript/index.js");\nconst propertyAliases = __webpack_require__("./node_modules/unicode-match-property-ecmascript/node_modules/unicode-property-aliases-ecmascript/index.js");\n\nconst matchProperty = function(property) {\n\tif (canonicalProperties.has(property)) {\n\t\treturn property;\n\t}\n\tif (propertyAliases.has(property)) {\n\t\treturn propertyAliases.get(property);\n\t}\n\tthrow new Error(`Unknown property: ${ property }`);\n};\n\nmodule.exports = matchProperty;\n\n\n//# sourceURL=webpack:///./node_modules/unicode-match-property-ecmascript/index.js?')},"./node_modules/unicode-match-property-ecmascript/node_modules/unicode-property-aliases-ecmascript/index.js":function(module,exports){eval("// Generated using `npm run build`. Do not edit!\nmodule.exports = new Map([\n\t['scx', 'Script_Extensions'],\n\t['sc', 'Script'],\n\t['gc', 'General_Category'],\n\t['AHex', 'ASCII_Hex_Digit'],\n\t['Alpha', 'Alphabetic'],\n\t['Bidi_C', 'Bidi_Control'],\n\t['Bidi_M', 'Bidi_Mirrored'],\n\t['Cased', 'Cased'],\n\t['CI', 'Case_Ignorable'],\n\t['CWCF', 'Changes_When_Casefolded'],\n\t['CWCM', 'Changes_When_Casemapped'],\n\t['CWKCF', 'Changes_When_NFKC_Casefolded'],\n\t['CWL', 'Changes_When_Lowercased'],\n\t['CWT', 'Changes_When_Titlecased'],\n\t['CWU', 'Changes_When_Uppercased'],\n\t['Dash', 'Dash'],\n\t['Dep', 'Deprecated'],\n\t['DI', 'Default_Ignorable_Code_Point'],\n\t['Dia', 'Diacritic'],\n\t['EBase', 'Emoji_Modifier_Base'],\n\t['EComp', 'Emoji_Component'],\n\t['EMod', 'Emoji_Modifier'],\n\t['Emoji', 'Emoji'],\n\t['EPres', 'Emoji_Presentation'],\n\t['Ext', 'Extender'],\n\t['ExtPict', 'Extended_Pictographic'],\n\t['Gr_Base', 'Grapheme_Base'],\n\t['Gr_Ext', 'Grapheme_Extend'],\n\t['Hex', 'Hex_Digit'],\n\t['IDC', 'ID_Continue'],\n\t['Ideo', 'Ideographic'],\n\t['IDS', 'ID_Start'],\n\t['IDSB', 'IDS_Binary_Operator'],\n\t['IDST', 'IDS_Trinary_Operator'],\n\t['Join_C', 'Join_Control'],\n\t['LOE', 'Logical_Order_Exception'],\n\t['Lower', 'Lowercase'],\n\t['Math', 'Math'],\n\t['NChar', 'Noncharacter_Code_Point'],\n\t['Pat_Syn', 'Pattern_Syntax'],\n\t['Pat_WS', 'Pattern_White_Space'],\n\t['QMark', 'Quotation_Mark'],\n\t['Radical', 'Radical'],\n\t['RI', 'Regional_Indicator'],\n\t['SD', 'Soft_Dotted'],\n\t['STerm', 'Sentence_Terminal'],\n\t['Term', 'Terminal_Punctuation'],\n\t['UIdeo', 'Unified_Ideograph'],\n\t['Upper', 'Uppercase'],\n\t['VS', 'Variation_Selector'],\n\t['WSpace', 'White_Space'],\n\t['space', 'White_Space'],\n\t['XIDC', 'XID_Continue'],\n\t['XIDS', 'XID_Start']\n]);\n\n\n//# sourceURL=webpack:///./node_modules/unicode-match-property-ecmascript/node_modules/unicode-property-aliases-ecmascript/index.js?")},"./node_modules/unicode-match-property-value-ecmascript/data/mappings.js":function(module,exports){eval("module.exports = new Map([\n\t['General_Category', new Map([\n\t\t['C', 'Other'],\n\t\t['Cc', 'Control'],\n\t\t['cntrl', 'Control'],\n\t\t['Cf', 'Format'],\n\t\t['Cn', 'Unassigned'],\n\t\t['Co', 'Private_Use'],\n\t\t['Cs', 'Surrogate'],\n\t\t['L', 'Letter'],\n\t\t['LC', 'Cased_Letter'],\n\t\t['Ll', 'Lowercase_Letter'],\n\t\t['Lm', 'Modifier_Letter'],\n\t\t['Lo', 'Other_Letter'],\n\t\t['Lt', 'Titlecase_Letter'],\n\t\t['Lu', 'Uppercase_Letter'],\n\t\t['M', 'Mark'],\n\t\t['Combining_Mark', 'Mark'],\n\t\t['Mc', 'Spacing_Mark'],\n\t\t['Me', 'Enclosing_Mark'],\n\t\t['Mn', 'Nonspacing_Mark'],\n\t\t['N', 'Number'],\n\t\t['Nd', 'Decimal_Number'],\n\t\t['digit', 'Decimal_Number'],\n\t\t['Nl', 'Letter_Number'],\n\t\t['No', 'Other_Number'],\n\t\t['P', 'Punctuation'],\n\t\t['punct', 'Punctuation'],\n\t\t['Pc', 'Connector_Punctuation'],\n\t\t['Pd', 'Dash_Punctuation'],\n\t\t['Pe', 'Close_Punctuation'],\n\t\t['Pf', 'Final_Punctuation'],\n\t\t['Pi', 'Initial_Punctuation'],\n\t\t['Po', 'Other_Punctuation'],\n\t\t['Ps', 'Open_Punctuation'],\n\t\t['S', 'Symbol'],\n\t\t['Sc', 'Currency_Symbol'],\n\t\t['Sk', 'Modifier_Symbol'],\n\t\t['Sm', 'Math_Symbol'],\n\t\t['So', 'Other_Symbol'],\n\t\t['Z', 'Separator'],\n\t\t['Zl', 'Line_Separator'],\n\t\t['Zp', 'Paragraph_Separator'],\n\t\t['Zs', 'Space_Separator'],\n\t\t['Other', 'Other'],\n\t\t['Control', 'Control'],\n\t\t['Format', 'Format'],\n\t\t['Unassigned', 'Unassigned'],\n\t\t['Private_Use', 'Private_Use'],\n\t\t['Surrogate', 'Surrogate'],\n\t\t['Letter', 'Letter'],\n\t\t['Cased_Letter', 'Cased_Letter'],\n\t\t['Lowercase_Letter', 'Lowercase_Letter'],\n\t\t['Modifier_Letter', 'Modifier_Letter'],\n\t\t['Other_Letter', 'Other_Letter'],\n\t\t['Titlecase_Letter', 'Titlecase_Letter'],\n\t\t['Uppercase_Letter', 'Uppercase_Letter'],\n\t\t['Mark', 'Mark'],\n\t\t['Spacing_Mark', 'Spacing_Mark'],\n\t\t['Enclosing_Mark', 'Enclosing_Mark'],\n\t\t['Nonspacing_Mark', 'Nonspacing_Mark'],\n\t\t['Number', 'Number'],\n\t\t['Decimal_Number', 'Decimal_Number'],\n\t\t['Letter_Number', 'Letter_Number'],\n\t\t['Other_Number', 'Other_Number'],\n\t\t['Punctuation', 'Punctuation'],\n\t\t['Connector_Punctuation', 'Connector_Punctuation'],\n\t\t['Dash_Punctuation', 'Dash_Punctuation'],\n\t\t['Close_Punctuation', 'Close_Punctuation'],\n\t\t['Final_Punctuation', 'Final_Punctuation'],\n\t\t['Initial_Punctuation', 'Initial_Punctuation'],\n\t\t['Other_Punctuation', 'Other_Punctuation'],\n\t\t['Open_Punctuation', 'Open_Punctuation'],\n\t\t['Symbol', 'Symbol'],\n\t\t['Currency_Symbol', 'Currency_Symbol'],\n\t\t['Modifier_Symbol', 'Modifier_Symbol'],\n\t\t['Math_Symbol', 'Math_Symbol'],\n\t\t['Other_Symbol', 'Other_Symbol'],\n\t\t['Separator', 'Separator'],\n\t\t['Line_Separator', 'Line_Separator'],\n\t\t['Paragraph_Separator', 'Paragraph_Separator'],\n\t\t['Space_Separator', 'Space_Separator']\n\t])],\n\t['Script', new Map([\n\t\t['Adlm', 'Adlam'],\n\t\t['Aghb', 'Caucasian_Albanian'],\n\t\t['Ahom', 'Ahom'],\n\t\t['Arab', 'Arabic'],\n\t\t['Armi', 'Imperial_Aramaic'],\n\t\t['Armn', 'Armenian'],\n\t\t['Avst', 'Avestan'],\n\t\t['Bali', 'Balinese'],\n\t\t['Bamu', 'Bamum'],\n\t\t['Bass', 'Bassa_Vah'],\n\t\t['Batk', 'Batak'],\n\t\t['Beng', 'Bengali'],\n\t\t['Bhks', 'Bhaiksuki'],\n\t\t['Bopo', 'Bopomofo'],\n\t\t['Brah', 'Brahmi'],\n\t\t['Brai', 'Braille'],\n\t\t['Bugi', 'Buginese'],\n\t\t['Buhd', 'Buhid'],\n\t\t['Cakm', 'Chakma'],\n\t\t['Cans', 'Canadian_Aboriginal'],\n\t\t['Cari', 'Carian'],\n\t\t['Cham', 'Cham'],\n\t\t['Cher', 'Cherokee'],\n\t\t['Copt', 'Coptic'],\n\t\t['Qaac', 'Coptic'],\n\t\t['Cprt', 'Cypriot'],\n\t\t['Cyrl', 'Cyrillic'],\n\t\t['Deva', 'Devanagari'],\n\t\t['Dogr', 'Dogra'],\n\t\t['Dsrt', 'Deseret'],\n\t\t['Dupl', 'Duployan'],\n\t\t['Egyp', 'Egyptian_Hieroglyphs'],\n\t\t['Elba', 'Elbasan'],\n\t\t['Ethi', 'Ethiopic'],\n\t\t['Geor', 'Georgian'],\n\t\t['Glag', 'Glagolitic'],\n\t\t['Gong', 'Gunjala_Gondi'],\n\t\t['Gonm', 'Masaram_Gondi'],\n\t\t['Goth', 'Gothic'],\n\t\t['Gran', 'Grantha'],\n\t\t['Grek', 'Greek'],\n\t\t['Gujr', 'Gujarati'],\n\t\t['Guru', 'Gurmukhi'],\n\t\t['Hang', 'Hangul'],\n\t\t['Hani', 'Han'],\n\t\t['Hano', 'Hanunoo'],\n\t\t['Hatr', 'Hatran'],\n\t\t['Hebr', 'Hebrew'],\n\t\t['Hira', 'Hiragana'],\n\t\t['Hluw', 'Anatolian_Hieroglyphs'],\n\t\t['Hmng', 'Pahawh_Hmong'],\n\t\t['Hrkt', 'Katakana_Or_Hiragana'],\n\t\t['Hung', 'Old_Hungarian'],\n\t\t['Ital', 'Old_Italic'],\n\t\t['Java', 'Javanese'],\n\t\t['Kali', 'Kayah_Li'],\n\t\t['Kana', 'Katakana'],\n\t\t['Khar', 'Kharoshthi'],\n\t\t['Khmr', 'Khmer'],\n\t\t['Khoj', 'Khojki'],\n\t\t['Knda', 'Kannada'],\n\t\t['Kthi', 'Kaithi'],\n\t\t['Lana', 'Tai_Tham'],\n\t\t['Laoo', 'Lao'],\n\t\t['Latn', 'Latin'],\n\t\t['Lepc', 'Lepcha'],\n\t\t['Limb', 'Limbu'],\n\t\t['Lina', 'Linear_A'],\n\t\t['Linb', 'Linear_B'],\n\t\t['Lisu', 'Lisu'],\n\t\t['Lyci', 'Lycian'],\n\t\t['Lydi', 'Lydian'],\n\t\t['Mahj', 'Mahajani'],\n\t\t['Maka', 'Makasar'],\n\t\t['Mand', 'Mandaic'],\n\t\t['Mani', 'Manichaean'],\n\t\t['Marc', 'Marchen'],\n\t\t['Medf', 'Medefaidrin'],\n\t\t['Mend', 'Mende_Kikakui'],\n\t\t['Merc', 'Meroitic_Cursive'],\n\t\t['Mero', 'Meroitic_Hieroglyphs'],\n\t\t['Mlym', 'Malayalam'],\n\t\t['Modi', 'Modi'],\n\t\t['Mong', 'Mongolian'],\n\t\t['Mroo', 'Mro'],\n\t\t['Mtei', 'Meetei_Mayek'],\n\t\t['Mult', 'Multani'],\n\t\t['Mymr', 'Myanmar'],\n\t\t['Narb', 'Old_North_Arabian'],\n\t\t['Nbat', 'Nabataean'],\n\t\t['Newa', 'Newa'],\n\t\t['Nkoo', 'Nko'],\n\t\t['Nshu', 'Nushu'],\n\t\t['Ogam', 'Ogham'],\n\t\t['Olck', 'Ol_Chiki'],\n\t\t['Orkh', 'Old_Turkic'],\n\t\t['Orya', 'Oriya'],\n\t\t['Osge', 'Osage'],\n\t\t['Osma', 'Osmanya'],\n\t\t['Palm', 'Palmyrene'],\n\t\t['Pauc', 'Pau_Cin_Hau'],\n\t\t['Perm', 'Old_Permic'],\n\t\t['Phag', 'Phags_Pa'],\n\t\t['Phli', 'Inscriptional_Pahlavi'],\n\t\t['Phlp', 'Psalter_Pahlavi'],\n\t\t['Phnx', 'Phoenician'],\n\t\t['Plrd', 'Miao'],\n\t\t['Prti', 'Inscriptional_Parthian'],\n\t\t['Rjng', 'Rejang'],\n\t\t['Rohg', 'Hanifi_Rohingya'],\n\t\t['Runr', 'Runic'],\n\t\t['Samr', 'Samaritan'],\n\t\t['Sarb', 'Old_South_Arabian'],\n\t\t['Saur', 'Saurashtra'],\n\t\t['Sgnw', 'SignWriting'],\n\t\t['Shaw', 'Shavian'],\n\t\t['Shrd', 'Sharada'],\n\t\t['Sidd', 'Siddham'],\n\t\t['Sind', 'Khudawadi'],\n\t\t['Sinh', 'Sinhala'],\n\t\t['Sogd', 'Sogdian'],\n\t\t['Sogo', 'Old_Sogdian'],\n\t\t['Sora', 'Sora_Sompeng'],\n\t\t['Soyo', 'Soyombo'],\n\t\t['Sund', 'Sundanese'],\n\t\t['Sylo', 'Syloti_Nagri'],\n\t\t['Syrc', 'Syriac'],\n\t\t['Tagb', 'Tagbanwa'],\n\t\t['Takr', 'Takri'],\n\t\t['Tale', 'Tai_Le'],\n\t\t['Talu', 'New_Tai_Lue'],\n\t\t['Taml', 'Tamil'],\n\t\t['Tang', 'Tangut'],\n\t\t['Tavt', 'Tai_Viet'],\n\t\t['Telu', 'Telugu'],\n\t\t['Tfng', 'Tifinagh'],\n\t\t['Tglg', 'Tagalog'],\n\t\t['Thaa', 'Thaana'],\n\t\t['Thai', 'Thai'],\n\t\t['Tibt', 'Tibetan'],\n\t\t['Tirh', 'Tirhuta'],\n\t\t['Ugar', 'Ugaritic'],\n\t\t['Vaii', 'Vai'],\n\t\t['Wara', 'Warang_Citi'],\n\t\t['Xpeo', 'Old_Persian'],\n\t\t['Xsux', 'Cuneiform'],\n\t\t['Yiii', 'Yi'],\n\t\t['Zanb', 'Zanabazar_Square'],\n\t\t['Zinh', 'Inherited'],\n\t\t['Qaai', 'Inherited'],\n\t\t['Zyyy', 'Common'],\n\t\t['Zzzz', 'Unknown'],\n\t\t['Adlam', 'Adlam'],\n\t\t['Caucasian_Albanian', 'Caucasian_Albanian'],\n\t\t['Arabic', 'Arabic'],\n\t\t['Imperial_Aramaic', 'Imperial_Aramaic'],\n\t\t['Armenian', 'Armenian'],\n\t\t['Avestan', 'Avestan'],\n\t\t['Balinese', 'Balinese'],\n\t\t['Bamum', 'Bamum'],\n\t\t['Bassa_Vah', 'Bassa_Vah'],\n\t\t['Batak', 'Batak'],\n\t\t['Bengali', 'Bengali'],\n\t\t['Bhaiksuki', 'Bhaiksuki'],\n\t\t['Bopomofo', 'Bopomofo'],\n\t\t['Brahmi', 'Brahmi'],\n\t\t['Braille', 'Braille'],\n\t\t['Buginese', 'Buginese'],\n\t\t['Buhid', 'Buhid'],\n\t\t['Chakma', 'Chakma'],\n\t\t['Canadian_Aboriginal', 'Canadian_Aboriginal'],\n\t\t['Carian', 'Carian'],\n\t\t['Cherokee', 'Cherokee'],\n\t\t['Coptic', 'Coptic'],\n\t\t['Cypriot', 'Cypriot'],\n\t\t['Cyrillic', 'Cyrillic'],\n\t\t['Devanagari', 'Devanagari'],\n\t\t['Dogra', 'Dogra'],\n\t\t['Deseret', 'Deseret'],\n\t\t['Duployan', 'Duployan'],\n\t\t['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],\n\t\t['Elbasan', 'Elbasan'],\n\t\t['Ethiopic', 'Ethiopic'],\n\t\t['Georgian', 'Georgian'],\n\t\t['Glagolitic', 'Glagolitic'],\n\t\t['Gunjala_Gondi', 'Gunjala_Gondi'],\n\t\t['Masaram_Gondi', 'Masaram_Gondi'],\n\t\t['Gothic', 'Gothic'],\n\t\t['Grantha', 'Grantha'],\n\t\t['Greek', 'Greek'],\n\t\t['Gujarati', 'Gujarati'],\n\t\t['Gurmukhi', 'Gurmukhi'],\n\t\t['Hangul', 'Hangul'],\n\t\t['Han', 'Han'],\n\t\t['Hanunoo', 'Hanunoo'],\n\t\t['Hatran', 'Hatran'],\n\t\t['Hebrew', 'Hebrew'],\n\t\t['Hiragana', 'Hiragana'],\n\t\t['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],\n\t\t['Pahawh_Hmong', 'Pahawh_Hmong'],\n\t\t['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],\n\t\t['Old_Hungarian', 'Old_Hungarian'],\n\t\t['Old_Italic', 'Old_Italic'],\n\t\t['Javanese', 'Javanese'],\n\t\t['Kayah_Li', 'Kayah_Li'],\n\t\t['Katakana', 'Katakana'],\n\t\t['Kharoshthi', 'Kharoshthi'],\n\t\t['Khmer', 'Khmer'],\n\t\t['Khojki', 'Khojki'],\n\t\t['Kannada', 'Kannada'],\n\t\t['Kaithi', 'Kaithi'],\n\t\t['Tai_Tham', 'Tai_Tham'],\n\t\t['Lao', 'Lao'],\n\t\t['Latin', 'Latin'],\n\t\t['Lepcha', 'Lepcha'],\n\t\t['Limbu', 'Limbu'],\n\t\t['Linear_A', 'Linear_A'],\n\t\t['Linear_B', 'Linear_B'],\n\t\t['Lycian', 'Lycian'],\n\t\t['Lydian', 'Lydian'],\n\t\t['Mahajani', 'Mahajani'],\n\t\t['Makasar', 'Makasar'],\n\t\t['Mandaic', 'Mandaic'],\n\t\t['Manichaean', 'Manichaean'],\n\t\t['Marchen', 'Marchen'],\n\t\t['Medefaidrin', 'Medefaidrin'],\n\t\t['Mende_Kikakui', 'Mende_Kikakui'],\n\t\t['Meroitic_Cursive', 'Meroitic_Cursive'],\n\t\t['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],\n\t\t['Malayalam', 'Malayalam'],\n\t\t['Mongolian', 'Mongolian'],\n\t\t['Mro', 'Mro'],\n\t\t['Meetei_Mayek', 'Meetei_Mayek'],\n\t\t['Multani', 'Multani'],\n\t\t['Myanmar', 'Myanmar'],\n\t\t['Old_North_Arabian', 'Old_North_Arabian'],\n\t\t['Nabataean', 'Nabataean'],\n\t\t['Nko', 'Nko'],\n\t\t['Nushu', 'Nushu'],\n\t\t['Ogham', 'Ogham'],\n\t\t['Ol_Chiki', 'Ol_Chiki'],\n\t\t['Old_Turkic', 'Old_Turkic'],\n\t\t['Oriya', 'Oriya'],\n\t\t['Osage', 'Osage'],\n\t\t['Osmanya', 'Osmanya'],\n\t\t['Palmyrene', 'Palmyrene'],\n\t\t['Pau_Cin_Hau', 'Pau_Cin_Hau'],\n\t\t['Old_Permic', 'Old_Permic'],\n\t\t['Phags_Pa', 'Phags_Pa'],\n\t\t['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],\n\t\t['Psalter_Pahlavi', 'Psalter_Pahlavi'],\n\t\t['Phoenician', 'Phoenician'],\n\t\t['Miao', 'Miao'],\n\t\t['Inscriptional_Parthian', 'Inscriptional_Parthian'],\n\t\t['Rejang', 'Rejang'],\n\t\t['Hanifi_Rohingya', 'Hanifi_Rohingya'],\n\t\t['Runic', 'Runic'],\n\t\t['Samaritan', 'Samaritan'],\n\t\t['Old_South_Arabian', 'Old_South_Arabian'],\n\t\t['Saurashtra', 'Saurashtra'],\n\t\t['SignWriting', 'SignWriting'],\n\t\t['Shavian', 'Shavian'],\n\t\t['Sharada', 'Sharada'],\n\t\t['Siddham', 'Siddham'],\n\t\t['Khudawadi', 'Khudawadi'],\n\t\t['Sinhala', 'Sinhala'],\n\t\t['Sogdian', 'Sogdian'],\n\t\t['Old_Sogdian', 'Old_Sogdian'],\n\t\t['Sora_Sompeng', 'Sora_Sompeng'],\n\t\t['Soyombo', 'Soyombo'],\n\t\t['Sundanese', 'Sundanese'],\n\t\t['Syloti_Nagri', 'Syloti_Nagri'],\n\t\t['Syriac', 'Syriac'],\n\t\t['Tagbanwa', 'Tagbanwa'],\n\t\t['Takri', 'Takri'],\n\t\t['Tai_Le', 'Tai_Le'],\n\t\t['New_Tai_Lue', 'New_Tai_Lue'],\n\t\t['Tamil', 'Tamil'],\n\t\t['Tangut', 'Tangut'],\n\t\t['Tai_Viet', 'Tai_Viet'],\n\t\t['Telugu', 'Telugu'],\n\t\t['Tifinagh', 'Tifinagh'],\n\t\t['Tagalog', 'Tagalog'],\n\t\t['Thaana', 'Thaana'],\n\t\t['Tibetan', 'Tibetan'],\n\t\t['Tirhuta', 'Tirhuta'],\n\t\t['Ugaritic', 'Ugaritic'],\n\t\t['Vai', 'Vai'],\n\t\t['Warang_Citi', 'Warang_Citi'],\n\t\t['Old_Persian', 'Old_Persian'],\n\t\t['Cuneiform', 'Cuneiform'],\n\t\t['Yi', 'Yi'],\n\t\t['Zanabazar_Square', 'Zanabazar_Square'],\n\t\t['Inherited', 'Inherited'],\n\t\t['Common', 'Common'],\n\t\t['Unknown', 'Unknown']\n\t])],\n\t['Script_Extensions', new Map([\n\t\t['Adlm', 'Adlam'],\n\t\t['Aghb', 'Caucasian_Albanian'],\n\t\t['Ahom', 'Ahom'],\n\t\t['Arab', 'Arabic'],\n\t\t['Armi', 'Imperial_Aramaic'],\n\t\t['Armn', 'Armenian'],\n\t\t['Avst', 'Avestan'],\n\t\t['Bali', 'Balinese'],\n\t\t['Bamu', 'Bamum'],\n\t\t['Bass', 'Bassa_Vah'],\n\t\t['Batk', 'Batak'],\n\t\t['Beng', 'Bengali'],\n\t\t['Bhks', 'Bhaiksuki'],\n\t\t['Bopo', 'Bopomofo'],\n\t\t['Brah', 'Brahmi'],\n\t\t['Brai', 'Braille'],\n\t\t['Bugi', 'Buginese'],\n\t\t['Buhd', 'Buhid'],\n\t\t['Cakm', 'Chakma'],\n\t\t['Cans', 'Canadian_Aboriginal'],\n\t\t['Cari', 'Carian'],\n\t\t['Cham', 'Cham'],\n\t\t['Cher', 'Cherokee'],\n\t\t['Copt', 'Coptic'],\n\t\t['Qaac', 'Coptic'],\n\t\t['Cprt', 'Cypriot'],\n\t\t['Cyrl', 'Cyrillic'],\n\t\t['Deva', 'Devanagari'],\n\t\t['Dogr', 'Dogra'],\n\t\t['Dsrt', 'Deseret'],\n\t\t['Dupl', 'Duployan'],\n\t\t['Egyp', 'Egyptian_Hieroglyphs'],\n\t\t['Elba', 'Elbasan'],\n\t\t['Ethi', 'Ethiopic'],\n\t\t['Geor', 'Georgian'],\n\t\t['Glag', 'Glagolitic'],\n\t\t['Gong', 'Gunjala_Gondi'],\n\t\t['Gonm', 'Masaram_Gondi'],\n\t\t['Goth', 'Gothic'],\n\t\t['Gran', 'Grantha'],\n\t\t['Grek', 'Greek'],\n\t\t['Gujr', 'Gujarati'],\n\t\t['Guru', 'Gurmukhi'],\n\t\t['Hang', 'Hangul'],\n\t\t['Hani', 'Han'],\n\t\t['Hano', 'Hanunoo'],\n\t\t['Hatr', 'Hatran'],\n\t\t['Hebr', 'Hebrew'],\n\t\t['Hira', 'Hiragana'],\n\t\t['Hluw', 'Anatolian_Hieroglyphs'],\n\t\t['Hmng', 'Pahawh_Hmong'],\n\t\t['Hrkt', 'Katakana_Or_Hiragana'],\n\t\t['Hung', 'Old_Hungarian'],\n\t\t['Ital', 'Old_Italic'],\n\t\t['Java', 'Javanese'],\n\t\t['Kali', 'Kayah_Li'],\n\t\t['Kana', 'Katakana'],\n\t\t['Khar', 'Kharoshthi'],\n\t\t['Khmr', 'Khmer'],\n\t\t['Khoj', 'Khojki'],\n\t\t['Knda', 'Kannada'],\n\t\t['Kthi', 'Kaithi'],\n\t\t['Lana', 'Tai_Tham'],\n\t\t['Laoo', 'Lao'],\n\t\t['Latn', 'Latin'],\n\t\t['Lepc', 'Lepcha'],\n\t\t['Limb', 'Limbu'],\n\t\t['Lina', 'Linear_A'],\n\t\t['Linb', 'Linear_B'],\n\t\t['Lisu', 'Lisu'],\n\t\t['Lyci', 'Lycian'],\n\t\t['Lydi', 'Lydian'],\n\t\t['Mahj', 'Mahajani'],\n\t\t['Maka', 'Makasar'],\n\t\t['Mand', 'Mandaic'],\n\t\t['Mani', 'Manichaean'],\n\t\t['Marc', 'Marchen'],\n\t\t['Medf', 'Medefaidrin'],\n\t\t['Mend', 'Mende_Kikakui'],\n\t\t['Merc', 'Meroitic_Cursive'],\n\t\t['Mero', 'Meroitic_Hieroglyphs'],\n\t\t['Mlym', 'Malayalam'],\n\t\t['Modi', 'Modi'],\n\t\t['Mong', 'Mongolian'],\n\t\t['Mroo', 'Mro'],\n\t\t['Mtei', 'Meetei_Mayek'],\n\t\t['Mult', 'Multani'],\n\t\t['Mymr', 'Myanmar'],\n\t\t['Narb', 'Old_North_Arabian'],\n\t\t['Nbat', 'Nabataean'],\n\t\t['Newa', 'Newa'],\n\t\t['Nkoo', 'Nko'],\n\t\t['Nshu', 'Nushu'],\n\t\t['Ogam', 'Ogham'],\n\t\t['Olck', 'Ol_Chiki'],\n\t\t['Orkh', 'Old_Turkic'],\n\t\t['Orya', 'Oriya'],\n\t\t['Osge', 'Osage'],\n\t\t['Osma', 'Osmanya'],\n\t\t['Palm', 'Palmyrene'],\n\t\t['Pauc', 'Pau_Cin_Hau'],\n\t\t['Perm', 'Old_Permic'],\n\t\t['Phag', 'Phags_Pa'],\n\t\t['Phli', 'Inscriptional_Pahlavi'],\n\t\t['Phlp', 'Psalter_Pahlavi'],\n\t\t['Phnx', 'Phoenician'],\n\t\t['Plrd', 'Miao'],\n\t\t['Prti', 'Inscriptional_Parthian'],\n\t\t['Rjng', 'Rejang'],\n\t\t['Rohg', 'Hanifi_Rohingya'],\n\t\t['Runr', 'Runic'],\n\t\t['Samr', 'Samaritan'],\n\t\t['Sarb', 'Old_South_Arabian'],\n\t\t['Saur', 'Saurashtra'],\n\t\t['Sgnw', 'SignWriting'],\n\t\t['Shaw', 'Shavian'],\n\t\t['Shrd', 'Sharada'],\n\t\t['Sidd', 'Siddham'],\n\t\t['Sind', 'Khudawadi'],\n\t\t['Sinh', 'Sinhala'],\n\t\t['Sogd', 'Sogdian'],\n\t\t['Sogo', 'Old_Sogdian'],\n\t\t['Sora', 'Sora_Sompeng'],\n\t\t['Soyo', 'Soyombo'],\n\t\t['Sund', 'Sundanese'],\n\t\t['Sylo', 'Syloti_Nagri'],\n\t\t['Syrc', 'Syriac'],\n\t\t['Tagb', 'Tagbanwa'],\n\t\t['Takr', 'Takri'],\n\t\t['Tale', 'Tai_Le'],\n\t\t['Talu', 'New_Tai_Lue'],\n\t\t['Taml', 'Tamil'],\n\t\t['Tang', 'Tangut'],\n\t\t['Tavt', 'Tai_Viet'],\n\t\t['Telu', 'Telugu'],\n\t\t['Tfng', 'Tifinagh'],\n\t\t['Tglg', 'Tagalog'],\n\t\t['Thaa', 'Thaana'],\n\t\t['Thai', 'Thai'],\n\t\t['Tibt', 'Tibetan'],\n\t\t['Tirh', 'Tirhuta'],\n\t\t['Ugar', 'Ugaritic'],\n\t\t['Vaii', 'Vai'],\n\t\t['Wara', 'Warang_Citi'],\n\t\t['Xpeo', 'Old_Persian'],\n\t\t['Xsux', 'Cuneiform'],\n\t\t['Yiii', 'Yi'],\n\t\t['Zanb', 'Zanabazar_Square'],\n\t\t['Zinh', 'Inherited'],\n\t\t['Qaai', 'Inherited'],\n\t\t['Zyyy', 'Common'],\n\t\t['Zzzz', 'Unknown'],\n\t\t['Adlam', 'Adlam'],\n\t\t['Caucasian_Albanian', 'Caucasian_Albanian'],\n\t\t['Arabic', 'Arabic'],\n\t\t['Imperial_Aramaic', 'Imperial_Aramaic'],\n\t\t['Armenian', 'Armenian'],\n\t\t['Avestan', 'Avestan'],\n\t\t['Balinese', 'Balinese'],\n\t\t['Bamum', 'Bamum'],\n\t\t['Bassa_Vah', 'Bassa_Vah'],\n\t\t['Batak', 'Batak'],\n\t\t['Bengali', 'Bengali'],\n\t\t['Bhaiksuki', 'Bhaiksuki'],\n\t\t['Bopomofo', 'Bopomofo'],\n\t\t['Brahmi', 'Brahmi'],\n\t\t['Braille', 'Braille'],\n\t\t['Buginese', 'Buginese'],\n\t\t['Buhid', 'Buhid'],\n\t\t['Chakma', 'Chakma'],\n\t\t['Canadian_Aboriginal', 'Canadian_Aboriginal'],\n\t\t['Carian', 'Carian'],\n\t\t['Cherokee', 'Cherokee'],\n\t\t['Coptic', 'Coptic'],\n\t\t['Cypriot', 'Cypriot'],\n\t\t['Cyrillic', 'Cyrillic'],\n\t\t['Devanagari', 'Devanagari'],\n\t\t['Dogra', 'Dogra'],\n\t\t['Deseret', 'Deseret'],\n\t\t['Duployan', 'Duployan'],\n\t\t['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],\n\t\t['Elbasan', 'Elbasan'],\n\t\t['Ethiopic', 'Ethiopic'],\n\t\t['Georgian', 'Georgian'],\n\t\t['Glagolitic', 'Glagolitic'],\n\t\t['Gunjala_Gondi', 'Gunjala_Gondi'],\n\t\t['Masaram_Gondi', 'Masaram_Gondi'],\n\t\t['Gothic', 'Gothic'],\n\t\t['Grantha', 'Grantha'],\n\t\t['Greek', 'Greek'],\n\t\t['Gujarati', 'Gujarati'],\n\t\t['Gurmukhi', 'Gurmukhi'],\n\t\t['Hangul', 'Hangul'],\n\t\t['Han', 'Han'],\n\t\t['Hanunoo', 'Hanunoo'],\n\t\t['Hatran', 'Hatran'],\n\t\t['Hebrew', 'Hebrew'],\n\t\t['Hiragana', 'Hiragana'],\n\t\t['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],\n\t\t['Pahawh_Hmong', 'Pahawh_Hmong'],\n\t\t['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],\n\t\t['Old_Hungarian', 'Old_Hungarian'],\n\t\t['Old_Italic', 'Old_Italic'],\n\t\t['Javanese', 'Javanese'],\n\t\t['Kayah_Li', 'Kayah_Li'],\n\t\t['Katakana', 'Katakana'],\n\t\t['Kharoshthi', 'Kharoshthi'],\n\t\t['Khmer', 'Khmer'],\n\t\t['Khojki', 'Khojki'],\n\t\t['Kannada', 'Kannada'],\n\t\t['Kaithi', 'Kaithi'],\n\t\t['Tai_Tham', 'Tai_Tham'],\n\t\t['Lao', 'Lao'],\n\t\t['Latin', 'Latin'],\n\t\t['Lepcha', 'Lepcha'],\n\t\t['Limbu', 'Limbu'],\n\t\t['Linear_A', 'Linear_A'],\n\t\t['Linear_B', 'Linear_B'],\n\t\t['Lycian', 'Lycian'],\n\t\t['Lydian', 'Lydian'],\n\t\t['Mahajani', 'Mahajani'],\n\t\t['Makasar', 'Makasar'],\n\t\t['Mandaic', 'Mandaic'],\n\t\t['Manichaean', 'Manichaean'],\n\t\t['Marchen', 'Marchen'],\n\t\t['Medefaidrin', 'Medefaidrin'],\n\t\t['Mende_Kikakui', 'Mende_Kikakui'],\n\t\t['Meroitic_Cursive', 'Meroitic_Cursive'],\n\t\t['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],\n\t\t['Malayalam', 'Malayalam'],\n\t\t['Mongolian', 'Mongolian'],\n\t\t['Mro', 'Mro'],\n\t\t['Meetei_Mayek', 'Meetei_Mayek'],\n\t\t['Multani', 'Multani'],\n\t\t['Myanmar', 'Myanmar'],\n\t\t['Old_North_Arabian', 'Old_North_Arabian'],\n\t\t['Nabataean', 'Nabataean'],\n\t\t['Nko', 'Nko'],\n\t\t['Nushu', 'Nushu'],\n\t\t['Ogham', 'Ogham'],\n\t\t['Ol_Chiki', 'Ol_Chiki'],\n\t\t['Old_Turkic', 'Old_Turkic'],\n\t\t['Oriya', 'Oriya'],\n\t\t['Osage', 'Osage'],\n\t\t['Osmanya', 'Osmanya'],\n\t\t['Palmyrene', 'Palmyrene'],\n\t\t['Pau_Cin_Hau', 'Pau_Cin_Hau'],\n\t\t['Old_Permic', 'Old_Permic'],\n\t\t['Phags_Pa', 'Phags_Pa'],\n\t\t['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],\n\t\t['Psalter_Pahlavi', 'Psalter_Pahlavi'],\n\t\t['Phoenician', 'Phoenician'],\n\t\t['Miao', 'Miao'],\n\t\t['Inscriptional_Parthian', 'Inscriptional_Parthian'],\n\t\t['Rejang', 'Rejang'],\n\t\t['Hanifi_Rohingya', 'Hanifi_Rohingya'],\n\t\t['Runic', 'Runic'],\n\t\t['Samaritan', 'Samaritan'],\n\t\t['Old_South_Arabian', 'Old_South_Arabian'],\n\t\t['Saurashtra', 'Saurashtra'],\n\t\t['SignWriting', 'SignWriting'],\n\t\t['Shavian', 'Shavian'],\n\t\t['Sharada', 'Sharada'],\n\t\t['Siddham', 'Siddham'],\n\t\t['Khudawadi', 'Khudawadi'],\n\t\t['Sinhala', 'Sinhala'],\n\t\t['Sogdian', 'Sogdian'],\n\t\t['Old_Sogdian', 'Old_Sogdian'],\n\t\t['Sora_Sompeng', 'Sora_Sompeng'],\n\t\t['Soyombo', 'Soyombo'],\n\t\t['Sundanese', 'Sundanese'],\n\t\t['Syloti_Nagri', 'Syloti_Nagri'],\n\t\t['Syriac', 'Syriac'],\n\t\t['Tagbanwa', 'Tagbanwa'],\n\t\t['Takri', 'Takri'],\n\t\t['Tai_Le', 'Tai_Le'],\n\t\t['New_Tai_Lue', 'New_Tai_Lue'],\n\t\t['Tamil', 'Tamil'],\n\t\t['Tangut', 'Tangut'],\n\t\t['Tai_Viet', 'Tai_Viet'],\n\t\t['Telugu', 'Telugu'],\n\t\t['Tifinagh', 'Tifinagh'],\n\t\t['Tagalog', 'Tagalog'],\n\t\t['Thaana', 'Thaana'],\n\t\t['Tibetan', 'Tibetan'],\n\t\t['Tirhuta', 'Tirhuta'],\n\t\t['Ugaritic', 'Ugaritic'],\n\t\t['Vai', 'Vai'],\n\t\t['Warang_Citi', 'Warang_Citi'],\n\t\t['Old_Persian', 'Old_Persian'],\n\t\t['Cuneiform', 'Cuneiform'],\n\t\t['Yi', 'Yi'],\n\t\t['Zanabazar_Square', 'Zanabazar_Square'],\n\t\t['Inherited', 'Inherited'],\n\t\t['Common', 'Common'],\n\t\t['Unknown', 'Unknown']\n\t])]\n]);\n\n\n//# sourceURL=webpack:///./node_modules/unicode-match-property-value-ecmascript/data/mappings.js?")},"./node_modules/unicode-match-property-value-ecmascript/index.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nconst propertyToValueAliases = __webpack_require__("./node_modules/unicode-match-property-value-ecmascript/data/mappings.js");\n\nconst matchPropertyValue = function(property, value) {\n\tconst aliasToValue = propertyToValueAliases.get(property);\n\tif (!aliasToValue) {\n\t\tthrow new Error(`Unknown property \\`${ property }\\`.`);\n\t}\n\tconst canonicalValue = aliasToValue.get(value);\n\tif (canonicalValue) {\n\t\treturn canonicalValue;\n\t}\n\tthrow new Error(\n\t\t`Unknown value \\`${ value }\\` for property \\`${ property }\\`.`\n\t);\n};\n\nmodule.exports = matchPropertyValue;\n\n\n//# sourceURL=webpack:///./node_modules/unicode-match-property-value-ecmascript/index.js?')},"./node_modules/unicode-property-aliases-ecmascript/index.js":function(module,exports){eval("// Generated using `npm run build`. Do not edit!\nmodule.exports = new Map([\n\t['scx', 'Script_Extensions'],\n\t['sc', 'Script'],\n\t['gc', 'General_Category'],\n\t['AHex', 'ASCII_Hex_Digit'],\n\t['Alpha', 'Alphabetic'],\n\t['Bidi_C', 'Bidi_Control'],\n\t['Bidi_M', 'Bidi_Mirrored'],\n\t['Cased', 'Cased'],\n\t['CI', 'Case_Ignorable'],\n\t['CWCF', 'Changes_When_Casefolded'],\n\t['CWCM', 'Changes_When_Casemapped'],\n\t['CWKCF', 'Changes_When_NFKC_Casefolded'],\n\t['CWL', 'Changes_When_Lowercased'],\n\t['CWT', 'Changes_When_Titlecased'],\n\t['CWU', 'Changes_When_Uppercased'],\n\t['Dash', 'Dash'],\n\t['Dep', 'Deprecated'],\n\t['DI', 'Default_Ignorable_Code_Point'],\n\t['Dia', 'Diacritic'],\n\t['Ext', 'Extender'],\n\t['Gr_Base', 'Grapheme_Base'],\n\t['Gr_Ext', 'Grapheme_Extend'],\n\t['Hex', 'Hex_Digit'],\n\t['IDC', 'ID_Continue'],\n\t['Ideo', 'Ideographic'],\n\t['IDS', 'ID_Start'],\n\t['IDSB', 'IDS_Binary_Operator'],\n\t['IDST', 'IDS_Trinary_Operator'],\n\t['Join_C', 'Join_Control'],\n\t['LOE', 'Logical_Order_Exception'],\n\t['Lower', 'Lowercase'],\n\t['Math', 'Math'],\n\t['NChar', 'Noncharacter_Code_Point'],\n\t['Pat_Syn', 'Pattern_Syntax'],\n\t['Pat_WS', 'Pattern_White_Space'],\n\t['QMark', 'Quotation_Mark'],\n\t['Radical', 'Radical'],\n\t['RI', 'Regional_Indicator'],\n\t['SD', 'Soft_Dotted'],\n\t['STerm', 'Sentence_Terminal'],\n\t['Term', 'Terminal_Punctuation'],\n\t['UIdeo', 'Unified_Ideograph'],\n\t['Upper', 'Uppercase'],\n\t['VS', 'Variation_Selector'],\n\t['WSpace', 'White_Space'],\n\t['space', 'White_Space'],\n\t['XIDC', 'XID_Continue'],\n\t['XIDS', 'XID_Start']\n]);\n\n\n//# sourceURL=webpack:///./node_modules/unicode-property-aliases-ecmascript/index.js?")}}]);