(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{"./node_modules/events/events.js":function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?")},"./node_modules/inherits/inherits_browser.js":function(module,exports){eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/inherits/inherits_browser.js?")},"./node_modules/posthtml-parser/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nvar Parser = __webpack_require__(\"./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Parser.js\");\n\n/**\n * @see https://github.com/fb55/htmlparser2/wiki/Parser-options\n */\nvar defaultOptions = {lowerCaseTags: false, lowerCaseAttributeNames: false};\n\nvar defaultDirectives = [{name: '!doctype', start: '<', end: '>'}];\n\n/**\n * Parse html to PostHTMLTree\n * @param  {String} html\n * @param  {Object} [options=defaultOptions]\n * @return {PostHTMLTree}\n */\nfunction postHTMLParser(html, options) {\n    var bufArray = [],\n        results = [];\n\n    bufArray.last = function() {\n        return this[this.length - 1];\n    };\n\n    function isDirective(directive, tag) {\n        if (directive.name instanceof RegExp) {\n            var regex = RegExp(directive.name.source, 'i');\n\n            return regex.test(tag);\n        }\n\n        if (tag !== directive.name) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function parserDirective(name, data) {\n        var directives = [].concat(defaultDirectives, options.directives || []);\n        var last = bufArray.last();\n\n        for (var i = 0; i < directives.length; i++) {\n            var directive = directives[i];\n            var directiveText = directive.start + data + directive.end;\n\n            name = name.toLowerCase();\n            if (isDirective(directive, name)) {\n                if (!last) {\n                    results.push(directiveText);\n                    return;\n                }\n\n                last.content || (last.content = []);\n                last.content.push(directiveText);\n            }\n        }\n    }\n\n    function normalizeArributes(attrs) {\n        var result = {};\n        Object.keys(attrs).forEach(function(key) {\n            var obj = {};\n                obj[key] = attrs[key].replace(/&quot;/g, '\"');\n            Object.assign(result, obj);\n        });\n\n        return result;\n    }\n\n    var parser = new Parser({\n        onprocessinginstruction: parserDirective,\n        oncomment: function(data) {\n            var comment = '\x3c!--' + data + '--\x3e',\n                last = bufArray.last();\n\n            if (!last) {\n                results.push(comment);\n                return;\n            }\n\n            last.content || (last.content = []);\n            last.content.push(comment);\n        },\n        onopentag: function(tag, attrs) {\n            var buf = { tag: tag };\n\n            if (Object.keys(attrs).length) {\n                buf.attrs = normalizeArributes(attrs);\n            }\n\n            bufArray.push(buf);\n        },\n        onclosetag: function() {\n            var buf = bufArray.pop();\n\n            if (!bufArray.length) {\n                results.push(buf);\n                return;\n            }\n\n            var last = bufArray.last();\n            if (!Array.isArray(last.content)) {\n                last.content = [];\n            }\n\n            last.content.push(buf);\n        },\n        ontext: function(text) {\n            var last = bufArray.last();\n            if (!last) {\n                results.push(text);\n                return;\n            }\n\n            last.content || (last.content = []);\n            last.content.push(text);\n        }\n    }, options || defaultOptions);\n\n    parser.write(html);\n    parser.end();\n\n    return results;\n}\n\nfunction parserWrapper() {\n    var option;\n\n    function parser(html) {\n        var opt = Object.assign(defaultOptions, option);\n        return postHTMLParser(html, opt);\n    }\n\n    if (\n      arguments.length === 1 &&\n      Boolean(arguments[0]) &&\n      arguments[0].constructor.name === 'Object'\n    ) {\n        option = arguments[0];\n        return parser;\n    }\n\n    option = arguments[1];\n    return parser(arguments[0]);\n}\n\nmodule.exports = parserWrapper;\nmodule.exports.defaultOptions = defaultOptions;\nmodule.exports.defaultDirectives = defaultDirectives;\n\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/index.js?")},"./node_modules/posthtml-parser/node_modules/entities/lib/decode_codepoint.js":function(module,exports,__webpack_require__){eval('var decodeMap = __webpack_require__("./node_modules/posthtml-parser/node_modules/entities/maps/decode.json");\n\nmodule.exports = decodeCodePoint;\n\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return "\\uFFFD";\n    }\n\n    if (codePoint in decodeMap) {\n        codePoint = decodeMap[codePoint];\n    }\n\n    var output = "";\n\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n\n    output += String.fromCharCode(codePoint);\n    return output;\n}\n\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/entities/lib/decode_codepoint.js?')},"./node_modules/posthtml-parser/node_modules/entities/maps/decode.json":function(module){eval('module.exports = JSON.parse("{\\"0\\":65533,\\"128\\":8364,\\"130\\":8218,\\"131\\":402,\\"132\\":8222,\\"133\\":8230,\\"134\\":8224,\\"135\\":8225,\\"136\\":710,\\"137\\":8240,\\"138\\":352,\\"139\\":8249,\\"140\\":338,\\"142\\":381,\\"145\\":8216,\\"146\\":8217,\\"147\\":8220,\\"148\\":8221,\\"149\\":8226,\\"150\\":8211,\\"151\\":8212,\\"152\\":732,\\"153\\":8482,\\"154\\":353,\\"155\\":8250,\\"156\\":339,\\"158\\":382,\\"159\\":376}");\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/entities/maps/decode.json?')},"./node_modules/posthtml-parser/node_modules/entities/maps/entities.json":function(module){eval('module.exports = JSON.parse("{\\"Aacute\\":\\"Á\\",\\"aacute\\":\\"á\\",\\"Abreve\\":\\"Ă\\",\\"abreve\\":\\"ă\\",\\"ac\\":\\"∾\\",\\"acd\\":\\"∿\\",\\"acE\\":\\"∾̳\\",\\"Acirc\\":\\"Â\\",\\"acirc\\":\\"â\\",\\"acute\\":\\"´\\",\\"Acy\\":\\"А\\",\\"acy\\":\\"а\\",\\"AElig\\":\\"Æ\\",\\"aelig\\":\\"æ\\",\\"af\\":\\"⁡\\",\\"Afr\\":\\"𝔄\\",\\"afr\\":\\"𝔞\\",\\"Agrave\\":\\"À\\",\\"agrave\\":\\"à\\",\\"alefsym\\":\\"ℵ\\",\\"aleph\\":\\"ℵ\\",\\"Alpha\\":\\"Α\\",\\"alpha\\":\\"α\\",\\"Amacr\\":\\"Ā\\",\\"amacr\\":\\"ā\\",\\"amalg\\":\\"⨿\\",\\"amp\\":\\"&\\",\\"AMP\\":\\"&\\",\\"andand\\":\\"⩕\\",\\"And\\":\\"⩓\\",\\"and\\":\\"∧\\",\\"andd\\":\\"⩜\\",\\"andslope\\":\\"⩘\\",\\"andv\\":\\"⩚\\",\\"ang\\":\\"∠\\",\\"ange\\":\\"⦤\\",\\"angle\\":\\"∠\\",\\"angmsdaa\\":\\"⦨\\",\\"angmsdab\\":\\"⦩\\",\\"angmsdac\\":\\"⦪\\",\\"angmsdad\\":\\"⦫\\",\\"angmsdae\\":\\"⦬\\",\\"angmsdaf\\":\\"⦭\\",\\"angmsdag\\":\\"⦮\\",\\"angmsdah\\":\\"⦯\\",\\"angmsd\\":\\"∡\\",\\"angrt\\":\\"∟\\",\\"angrtvb\\":\\"⊾\\",\\"angrtvbd\\":\\"⦝\\",\\"angsph\\":\\"∢\\",\\"angst\\":\\"Å\\",\\"angzarr\\":\\"⍼\\",\\"Aogon\\":\\"Ą\\",\\"aogon\\":\\"ą\\",\\"Aopf\\":\\"𝔸\\",\\"aopf\\":\\"𝕒\\",\\"apacir\\":\\"⩯\\",\\"ap\\":\\"≈\\",\\"apE\\":\\"⩰\\",\\"ape\\":\\"≊\\",\\"apid\\":\\"≋\\",\\"apos\\":\\"\'\\",\\"ApplyFunction\\":\\"⁡\\",\\"approx\\":\\"≈\\",\\"approxeq\\":\\"≊\\",\\"Aring\\":\\"Å\\",\\"aring\\":\\"å\\",\\"Ascr\\":\\"𝒜\\",\\"ascr\\":\\"𝒶\\",\\"Assign\\":\\"≔\\",\\"ast\\":\\"*\\",\\"asymp\\":\\"≈\\",\\"asympeq\\":\\"≍\\",\\"Atilde\\":\\"Ã\\",\\"atilde\\":\\"ã\\",\\"Auml\\":\\"Ä\\",\\"auml\\":\\"ä\\",\\"awconint\\":\\"∳\\",\\"awint\\":\\"⨑\\",\\"backcong\\":\\"≌\\",\\"backepsilon\\":\\"϶\\",\\"backprime\\":\\"‵\\",\\"backsim\\":\\"∽\\",\\"backsimeq\\":\\"⋍\\",\\"Backslash\\":\\"∖\\",\\"Barv\\":\\"⫧\\",\\"barvee\\":\\"⊽\\",\\"barwed\\":\\"⌅\\",\\"Barwed\\":\\"⌆\\",\\"barwedge\\":\\"⌅\\",\\"bbrk\\":\\"⎵\\",\\"bbrktbrk\\":\\"⎶\\",\\"bcong\\":\\"≌\\",\\"Bcy\\":\\"Б\\",\\"bcy\\":\\"б\\",\\"bdquo\\":\\"„\\",\\"becaus\\":\\"∵\\",\\"because\\":\\"∵\\",\\"Because\\":\\"∵\\",\\"bemptyv\\":\\"⦰\\",\\"bepsi\\":\\"϶\\",\\"bernou\\":\\"ℬ\\",\\"Bernoullis\\":\\"ℬ\\",\\"Beta\\":\\"Β\\",\\"beta\\":\\"β\\",\\"beth\\":\\"ℶ\\",\\"between\\":\\"≬\\",\\"Bfr\\":\\"𝔅\\",\\"bfr\\":\\"𝔟\\",\\"bigcap\\":\\"⋂\\",\\"bigcirc\\":\\"◯\\",\\"bigcup\\":\\"⋃\\",\\"bigodot\\":\\"⨀\\",\\"bigoplus\\":\\"⨁\\",\\"bigotimes\\":\\"⨂\\",\\"bigsqcup\\":\\"⨆\\",\\"bigstar\\":\\"★\\",\\"bigtriangledown\\":\\"▽\\",\\"bigtriangleup\\":\\"△\\",\\"biguplus\\":\\"⨄\\",\\"bigvee\\":\\"⋁\\",\\"bigwedge\\":\\"⋀\\",\\"bkarow\\":\\"⤍\\",\\"blacklozenge\\":\\"⧫\\",\\"blacksquare\\":\\"▪\\",\\"blacktriangle\\":\\"▴\\",\\"blacktriangledown\\":\\"▾\\",\\"blacktriangleleft\\":\\"◂\\",\\"blacktriangleright\\":\\"▸\\",\\"blank\\":\\"␣\\",\\"blk12\\":\\"▒\\",\\"blk14\\":\\"░\\",\\"blk34\\":\\"▓\\",\\"block\\":\\"█\\",\\"bne\\":\\"=⃥\\",\\"bnequiv\\":\\"≡⃥\\",\\"bNot\\":\\"⫭\\",\\"bnot\\":\\"⌐\\",\\"Bopf\\":\\"𝔹\\",\\"bopf\\":\\"𝕓\\",\\"bot\\":\\"⊥\\",\\"bottom\\":\\"⊥\\",\\"bowtie\\":\\"⋈\\",\\"boxbox\\":\\"⧉\\",\\"boxdl\\":\\"┐\\",\\"boxdL\\":\\"╕\\",\\"boxDl\\":\\"╖\\",\\"boxDL\\":\\"╗\\",\\"boxdr\\":\\"┌\\",\\"boxdR\\":\\"╒\\",\\"boxDr\\":\\"╓\\",\\"boxDR\\":\\"╔\\",\\"boxh\\":\\"─\\",\\"boxH\\":\\"═\\",\\"boxhd\\":\\"┬\\",\\"boxHd\\":\\"╤\\",\\"boxhD\\":\\"╥\\",\\"boxHD\\":\\"╦\\",\\"boxhu\\":\\"┴\\",\\"boxHu\\":\\"╧\\",\\"boxhU\\":\\"╨\\",\\"boxHU\\":\\"╩\\",\\"boxminus\\":\\"⊟\\",\\"boxplus\\":\\"⊞\\",\\"boxtimes\\":\\"⊠\\",\\"boxul\\":\\"┘\\",\\"boxuL\\":\\"╛\\",\\"boxUl\\":\\"╜\\",\\"boxUL\\":\\"╝\\",\\"boxur\\":\\"└\\",\\"boxuR\\":\\"╘\\",\\"boxUr\\":\\"╙\\",\\"boxUR\\":\\"╚\\",\\"boxv\\":\\"│\\",\\"boxV\\":\\"║\\",\\"boxvh\\":\\"┼\\",\\"boxvH\\":\\"╪\\",\\"boxVh\\":\\"╫\\",\\"boxVH\\":\\"╬\\",\\"boxvl\\":\\"┤\\",\\"boxvL\\":\\"╡\\",\\"boxVl\\":\\"╢\\",\\"boxVL\\":\\"╣\\",\\"boxvr\\":\\"├\\",\\"boxvR\\":\\"╞\\",\\"boxVr\\":\\"╟\\",\\"boxVR\\":\\"╠\\",\\"bprime\\":\\"‵\\",\\"breve\\":\\"˘\\",\\"Breve\\":\\"˘\\",\\"brvbar\\":\\"¦\\",\\"bscr\\":\\"𝒷\\",\\"Bscr\\":\\"ℬ\\",\\"bsemi\\":\\"⁏\\",\\"bsim\\":\\"∽\\",\\"bsime\\":\\"⋍\\",\\"bsolb\\":\\"⧅\\",\\"bsol\\":\\"\\\\\\\\\\",\\"bsolhsub\\":\\"⟈\\",\\"bull\\":\\"•\\",\\"bullet\\":\\"•\\",\\"bump\\":\\"≎\\",\\"bumpE\\":\\"⪮\\",\\"bumpe\\":\\"≏\\",\\"Bumpeq\\":\\"≎\\",\\"bumpeq\\":\\"≏\\",\\"Cacute\\":\\"Ć\\",\\"cacute\\":\\"ć\\",\\"capand\\":\\"⩄\\",\\"capbrcup\\":\\"⩉\\",\\"capcap\\":\\"⩋\\",\\"cap\\":\\"∩\\",\\"Cap\\":\\"⋒\\",\\"capcup\\":\\"⩇\\",\\"capdot\\":\\"⩀\\",\\"CapitalDifferentialD\\":\\"ⅅ\\",\\"caps\\":\\"∩︀\\",\\"caret\\":\\"⁁\\",\\"caron\\":\\"ˇ\\",\\"Cayleys\\":\\"ℭ\\",\\"ccaps\\":\\"⩍\\",\\"Ccaron\\":\\"Č\\",\\"ccaron\\":\\"č\\",\\"Ccedil\\":\\"Ç\\",\\"ccedil\\":\\"ç\\",\\"Ccirc\\":\\"Ĉ\\",\\"ccirc\\":\\"ĉ\\",\\"Cconint\\":\\"∰\\",\\"ccups\\":\\"⩌\\",\\"ccupssm\\":\\"⩐\\",\\"Cdot\\":\\"Ċ\\",\\"cdot\\":\\"ċ\\",\\"cedil\\":\\"¸\\",\\"Cedilla\\":\\"¸\\",\\"cemptyv\\":\\"⦲\\",\\"cent\\":\\"¢\\",\\"centerdot\\":\\"·\\",\\"CenterDot\\":\\"·\\",\\"cfr\\":\\"𝔠\\",\\"Cfr\\":\\"ℭ\\",\\"CHcy\\":\\"Ч\\",\\"chcy\\":\\"ч\\",\\"check\\":\\"✓\\",\\"checkmark\\":\\"✓\\",\\"Chi\\":\\"Χ\\",\\"chi\\":\\"χ\\",\\"circ\\":\\"ˆ\\",\\"circeq\\":\\"≗\\",\\"circlearrowleft\\":\\"↺\\",\\"circlearrowright\\":\\"↻\\",\\"circledast\\":\\"⊛\\",\\"circledcirc\\":\\"⊚\\",\\"circleddash\\":\\"⊝\\",\\"CircleDot\\":\\"⊙\\",\\"circledR\\":\\"®\\",\\"circledS\\":\\"Ⓢ\\",\\"CircleMinus\\":\\"⊖\\",\\"CirclePlus\\":\\"⊕\\",\\"CircleTimes\\":\\"⊗\\",\\"cir\\":\\"○\\",\\"cirE\\":\\"⧃\\",\\"cire\\":\\"≗\\",\\"cirfnint\\":\\"⨐\\",\\"cirmid\\":\\"⫯\\",\\"cirscir\\":\\"⧂\\",\\"ClockwiseContourIntegral\\":\\"∲\\",\\"CloseCurlyDoubleQuote\\":\\"”\\",\\"CloseCurlyQuote\\":\\"’\\",\\"clubs\\":\\"♣\\",\\"clubsuit\\":\\"♣\\",\\"colon\\":\\":\\",\\"Colon\\":\\"∷\\",\\"Colone\\":\\"⩴\\",\\"colone\\":\\"≔\\",\\"coloneq\\":\\"≔\\",\\"comma\\":\\",\\",\\"commat\\":\\"@\\",\\"comp\\":\\"∁\\",\\"compfn\\":\\"∘\\",\\"complement\\":\\"∁\\",\\"complexes\\":\\"ℂ\\",\\"cong\\":\\"≅\\",\\"congdot\\":\\"⩭\\",\\"Congruent\\":\\"≡\\",\\"conint\\":\\"∮\\",\\"Conint\\":\\"∯\\",\\"ContourIntegral\\":\\"∮\\",\\"copf\\":\\"𝕔\\",\\"Copf\\":\\"ℂ\\",\\"coprod\\":\\"∐\\",\\"Coproduct\\":\\"∐\\",\\"copy\\":\\"©\\",\\"COPY\\":\\"©\\",\\"copysr\\":\\"℗\\",\\"CounterClockwiseContourIntegral\\":\\"∳\\",\\"crarr\\":\\"↵\\",\\"cross\\":\\"✗\\",\\"Cross\\":\\"⨯\\",\\"Cscr\\":\\"𝒞\\",\\"cscr\\":\\"𝒸\\",\\"csub\\":\\"⫏\\",\\"csube\\":\\"⫑\\",\\"csup\\":\\"⫐\\",\\"csupe\\":\\"⫒\\",\\"ctdot\\":\\"⋯\\",\\"cudarrl\\":\\"⤸\\",\\"cudarrr\\":\\"⤵\\",\\"cuepr\\":\\"⋞\\",\\"cuesc\\":\\"⋟\\",\\"cularr\\":\\"↶\\",\\"cularrp\\":\\"⤽\\",\\"cupbrcap\\":\\"⩈\\",\\"cupcap\\":\\"⩆\\",\\"CupCap\\":\\"≍\\",\\"cup\\":\\"∪\\",\\"Cup\\":\\"⋓\\",\\"cupcup\\":\\"⩊\\",\\"cupdot\\":\\"⊍\\",\\"cupor\\":\\"⩅\\",\\"cups\\":\\"∪︀\\",\\"curarr\\":\\"↷\\",\\"curarrm\\":\\"⤼\\",\\"curlyeqprec\\":\\"⋞\\",\\"curlyeqsucc\\":\\"⋟\\",\\"curlyvee\\":\\"⋎\\",\\"curlywedge\\":\\"⋏\\",\\"curren\\":\\"¤\\",\\"curvearrowleft\\":\\"↶\\",\\"curvearrowright\\":\\"↷\\",\\"cuvee\\":\\"⋎\\",\\"cuwed\\":\\"⋏\\",\\"cwconint\\":\\"∲\\",\\"cwint\\":\\"∱\\",\\"cylcty\\":\\"⌭\\",\\"dagger\\":\\"†\\",\\"Dagger\\":\\"‡\\",\\"daleth\\":\\"ℸ\\",\\"darr\\":\\"↓\\",\\"Darr\\":\\"↡\\",\\"dArr\\":\\"⇓\\",\\"dash\\":\\"‐\\",\\"Dashv\\":\\"⫤\\",\\"dashv\\":\\"⊣\\",\\"dbkarow\\":\\"⤏\\",\\"dblac\\":\\"˝\\",\\"Dcaron\\":\\"Ď\\",\\"dcaron\\":\\"ď\\",\\"Dcy\\":\\"Д\\",\\"dcy\\":\\"д\\",\\"ddagger\\":\\"‡\\",\\"ddarr\\":\\"⇊\\",\\"DD\\":\\"ⅅ\\",\\"dd\\":\\"ⅆ\\",\\"DDotrahd\\":\\"⤑\\",\\"ddotseq\\":\\"⩷\\",\\"deg\\":\\"°\\",\\"Del\\":\\"∇\\",\\"Delta\\":\\"Δ\\",\\"delta\\":\\"δ\\",\\"demptyv\\":\\"⦱\\",\\"dfisht\\":\\"⥿\\",\\"Dfr\\":\\"𝔇\\",\\"dfr\\":\\"𝔡\\",\\"dHar\\":\\"⥥\\",\\"dharl\\":\\"⇃\\",\\"dharr\\":\\"⇂\\",\\"DiacriticalAcute\\":\\"´\\",\\"DiacriticalDot\\":\\"˙\\",\\"DiacriticalDoubleAcute\\":\\"˝\\",\\"DiacriticalGrave\\":\\"`\\",\\"DiacriticalTilde\\":\\"˜\\",\\"diam\\":\\"⋄\\",\\"diamond\\":\\"⋄\\",\\"Diamond\\":\\"⋄\\",\\"diamondsuit\\":\\"♦\\",\\"diams\\":\\"♦\\",\\"die\\":\\"¨\\",\\"DifferentialD\\":\\"ⅆ\\",\\"digamma\\":\\"ϝ\\",\\"disin\\":\\"⋲\\",\\"div\\":\\"÷\\",\\"divide\\":\\"÷\\",\\"divideontimes\\":\\"⋇\\",\\"divonx\\":\\"⋇\\",\\"DJcy\\":\\"Ђ\\",\\"djcy\\":\\"ђ\\",\\"dlcorn\\":\\"⌞\\",\\"dlcrop\\":\\"⌍\\",\\"dollar\\":\\"$\\",\\"Dopf\\":\\"𝔻\\",\\"dopf\\":\\"𝕕\\",\\"Dot\\":\\"¨\\",\\"dot\\":\\"˙\\",\\"DotDot\\":\\"⃜\\",\\"doteq\\":\\"≐\\",\\"doteqdot\\":\\"≑\\",\\"DotEqual\\":\\"≐\\",\\"dotminus\\":\\"∸\\",\\"dotplus\\":\\"∔\\",\\"dotsquare\\":\\"⊡\\",\\"doublebarwedge\\":\\"⌆\\",\\"DoubleContourIntegral\\":\\"∯\\",\\"DoubleDot\\":\\"¨\\",\\"DoubleDownArrow\\":\\"⇓\\",\\"DoubleLeftArrow\\":\\"⇐\\",\\"DoubleLeftRightArrow\\":\\"⇔\\",\\"DoubleLeftTee\\":\\"⫤\\",\\"DoubleLongLeftArrow\\":\\"⟸\\",\\"DoubleLongLeftRightArrow\\":\\"⟺\\",\\"DoubleLongRightArrow\\":\\"⟹\\",\\"DoubleRightArrow\\":\\"⇒\\",\\"DoubleRightTee\\":\\"⊨\\",\\"DoubleUpArrow\\":\\"⇑\\",\\"DoubleUpDownArrow\\":\\"⇕\\",\\"DoubleVerticalBar\\":\\"∥\\",\\"DownArrowBar\\":\\"⤓\\",\\"downarrow\\":\\"↓\\",\\"DownArrow\\":\\"↓\\",\\"Downarrow\\":\\"⇓\\",\\"DownArrowUpArrow\\":\\"⇵\\",\\"DownBreve\\":\\"̑\\",\\"downdownarrows\\":\\"⇊\\",\\"downharpoonleft\\":\\"⇃\\",\\"downharpoonright\\":\\"⇂\\",\\"DownLeftRightVector\\":\\"⥐\\",\\"DownLeftTeeVector\\":\\"⥞\\",\\"DownLeftVectorBar\\":\\"⥖\\",\\"DownLeftVector\\":\\"↽\\",\\"DownRightTeeVector\\":\\"⥟\\",\\"DownRightVectorBar\\":\\"⥗\\",\\"DownRightVector\\":\\"⇁\\",\\"DownTeeArrow\\":\\"↧\\",\\"DownTee\\":\\"⊤\\",\\"drbkarow\\":\\"⤐\\",\\"drcorn\\":\\"⌟\\",\\"drcrop\\":\\"⌌\\",\\"Dscr\\":\\"𝒟\\",\\"dscr\\":\\"𝒹\\",\\"DScy\\":\\"Ѕ\\",\\"dscy\\":\\"ѕ\\",\\"dsol\\":\\"⧶\\",\\"Dstrok\\":\\"Đ\\",\\"dstrok\\":\\"đ\\",\\"dtdot\\":\\"⋱\\",\\"dtri\\":\\"▿\\",\\"dtrif\\":\\"▾\\",\\"duarr\\":\\"⇵\\",\\"duhar\\":\\"⥯\\",\\"dwangle\\":\\"⦦\\",\\"DZcy\\":\\"Џ\\",\\"dzcy\\":\\"џ\\",\\"dzigrarr\\":\\"⟿\\",\\"Eacute\\":\\"É\\",\\"eacute\\":\\"é\\",\\"easter\\":\\"⩮\\",\\"Ecaron\\":\\"Ě\\",\\"ecaron\\":\\"ě\\",\\"Ecirc\\":\\"Ê\\",\\"ecirc\\":\\"ê\\",\\"ecir\\":\\"≖\\",\\"ecolon\\":\\"≕\\",\\"Ecy\\":\\"Э\\",\\"ecy\\":\\"э\\",\\"eDDot\\":\\"⩷\\",\\"Edot\\":\\"Ė\\",\\"edot\\":\\"ė\\",\\"eDot\\":\\"≑\\",\\"ee\\":\\"ⅇ\\",\\"efDot\\":\\"≒\\",\\"Efr\\":\\"𝔈\\",\\"efr\\":\\"𝔢\\",\\"eg\\":\\"⪚\\",\\"Egrave\\":\\"È\\",\\"egrave\\":\\"è\\",\\"egs\\":\\"⪖\\",\\"egsdot\\":\\"⪘\\",\\"el\\":\\"⪙\\",\\"Element\\":\\"∈\\",\\"elinters\\":\\"⏧\\",\\"ell\\":\\"ℓ\\",\\"els\\":\\"⪕\\",\\"elsdot\\":\\"⪗\\",\\"Emacr\\":\\"Ē\\",\\"emacr\\":\\"ē\\",\\"empty\\":\\"∅\\",\\"emptyset\\":\\"∅\\",\\"EmptySmallSquare\\":\\"◻\\",\\"emptyv\\":\\"∅\\",\\"EmptyVerySmallSquare\\":\\"▫\\",\\"emsp13\\":\\" \\",\\"emsp14\\":\\" \\",\\"emsp\\":\\" \\",\\"ENG\\":\\"Ŋ\\",\\"eng\\":\\"ŋ\\",\\"ensp\\":\\" \\",\\"Eogon\\":\\"Ę\\",\\"eogon\\":\\"ę\\",\\"Eopf\\":\\"𝔼\\",\\"eopf\\":\\"𝕖\\",\\"epar\\":\\"⋕\\",\\"eparsl\\":\\"⧣\\",\\"eplus\\":\\"⩱\\",\\"epsi\\":\\"ε\\",\\"Epsilon\\":\\"Ε\\",\\"epsilon\\":\\"ε\\",\\"epsiv\\":\\"ϵ\\",\\"eqcirc\\":\\"≖\\",\\"eqcolon\\":\\"≕\\",\\"eqsim\\":\\"≂\\",\\"eqslantgtr\\":\\"⪖\\",\\"eqslantless\\":\\"⪕\\",\\"Equal\\":\\"⩵\\",\\"equals\\":\\"=\\",\\"EqualTilde\\":\\"≂\\",\\"equest\\":\\"≟\\",\\"Equilibrium\\":\\"⇌\\",\\"equiv\\":\\"≡\\",\\"equivDD\\":\\"⩸\\",\\"eqvparsl\\":\\"⧥\\",\\"erarr\\":\\"⥱\\",\\"erDot\\":\\"≓\\",\\"escr\\":\\"ℯ\\",\\"Escr\\":\\"ℰ\\",\\"esdot\\":\\"≐\\",\\"Esim\\":\\"⩳\\",\\"esim\\":\\"≂\\",\\"Eta\\":\\"Η\\",\\"eta\\":\\"η\\",\\"ETH\\":\\"Ð\\",\\"eth\\":\\"ð\\",\\"Euml\\":\\"Ë\\",\\"euml\\":\\"ë\\",\\"euro\\":\\"€\\",\\"excl\\":\\"!\\",\\"exist\\":\\"∃\\",\\"Exists\\":\\"∃\\",\\"expectation\\":\\"ℰ\\",\\"exponentiale\\":\\"ⅇ\\",\\"ExponentialE\\":\\"ⅇ\\",\\"fallingdotseq\\":\\"≒\\",\\"Fcy\\":\\"Ф\\",\\"fcy\\":\\"ф\\",\\"female\\":\\"♀\\",\\"ffilig\\":\\"ﬃ\\",\\"fflig\\":\\"ﬀ\\",\\"ffllig\\":\\"ﬄ\\",\\"Ffr\\":\\"𝔉\\",\\"ffr\\":\\"𝔣\\",\\"filig\\":\\"ﬁ\\",\\"FilledSmallSquare\\":\\"◼\\",\\"FilledVerySmallSquare\\":\\"▪\\",\\"fjlig\\":\\"fj\\",\\"flat\\":\\"♭\\",\\"fllig\\":\\"ﬂ\\",\\"fltns\\":\\"▱\\",\\"fnof\\":\\"ƒ\\",\\"Fopf\\":\\"𝔽\\",\\"fopf\\":\\"𝕗\\",\\"forall\\":\\"∀\\",\\"ForAll\\":\\"∀\\",\\"fork\\":\\"⋔\\",\\"forkv\\":\\"⫙\\",\\"Fouriertrf\\":\\"ℱ\\",\\"fpartint\\":\\"⨍\\",\\"frac12\\":\\"½\\",\\"frac13\\":\\"⅓\\",\\"frac14\\":\\"¼\\",\\"frac15\\":\\"⅕\\",\\"frac16\\":\\"⅙\\",\\"frac18\\":\\"⅛\\",\\"frac23\\":\\"⅔\\",\\"frac25\\":\\"⅖\\",\\"frac34\\":\\"¾\\",\\"frac35\\":\\"⅗\\",\\"frac38\\":\\"⅜\\",\\"frac45\\":\\"⅘\\",\\"frac56\\":\\"⅚\\",\\"frac58\\":\\"⅝\\",\\"frac78\\":\\"⅞\\",\\"frasl\\":\\"⁄\\",\\"frown\\":\\"⌢\\",\\"fscr\\":\\"𝒻\\",\\"Fscr\\":\\"ℱ\\",\\"gacute\\":\\"ǵ\\",\\"Gamma\\":\\"Γ\\",\\"gamma\\":\\"γ\\",\\"Gammad\\":\\"Ϝ\\",\\"gammad\\":\\"ϝ\\",\\"gap\\":\\"⪆\\",\\"Gbreve\\":\\"Ğ\\",\\"gbreve\\":\\"ğ\\",\\"Gcedil\\":\\"Ģ\\",\\"Gcirc\\":\\"Ĝ\\",\\"gcirc\\":\\"ĝ\\",\\"Gcy\\":\\"Г\\",\\"gcy\\":\\"г\\",\\"Gdot\\":\\"Ġ\\",\\"gdot\\":\\"ġ\\",\\"ge\\":\\"≥\\",\\"gE\\":\\"≧\\",\\"gEl\\":\\"⪌\\",\\"gel\\":\\"⋛\\",\\"geq\\":\\"≥\\",\\"geqq\\":\\"≧\\",\\"geqslant\\":\\"⩾\\",\\"gescc\\":\\"⪩\\",\\"ges\\":\\"⩾\\",\\"gesdot\\":\\"⪀\\",\\"gesdoto\\":\\"⪂\\",\\"gesdotol\\":\\"⪄\\",\\"gesl\\":\\"⋛︀\\",\\"gesles\\":\\"⪔\\",\\"Gfr\\":\\"𝔊\\",\\"gfr\\":\\"𝔤\\",\\"gg\\":\\"≫\\",\\"Gg\\":\\"⋙\\",\\"ggg\\":\\"⋙\\",\\"gimel\\":\\"ℷ\\",\\"GJcy\\":\\"Ѓ\\",\\"gjcy\\":\\"ѓ\\",\\"gla\\":\\"⪥\\",\\"gl\\":\\"≷\\",\\"glE\\":\\"⪒\\",\\"glj\\":\\"⪤\\",\\"gnap\\":\\"⪊\\",\\"gnapprox\\":\\"⪊\\",\\"gne\\":\\"⪈\\",\\"gnE\\":\\"≩\\",\\"gneq\\":\\"⪈\\",\\"gneqq\\":\\"≩\\",\\"gnsim\\":\\"⋧\\",\\"Gopf\\":\\"𝔾\\",\\"gopf\\":\\"𝕘\\",\\"grave\\":\\"`\\",\\"GreaterEqual\\":\\"≥\\",\\"GreaterEqualLess\\":\\"⋛\\",\\"GreaterFullEqual\\":\\"≧\\",\\"GreaterGreater\\":\\"⪢\\",\\"GreaterLess\\":\\"≷\\",\\"GreaterSlantEqual\\":\\"⩾\\",\\"GreaterTilde\\":\\"≳\\",\\"Gscr\\":\\"𝒢\\",\\"gscr\\":\\"ℊ\\",\\"gsim\\":\\"≳\\",\\"gsime\\":\\"⪎\\",\\"gsiml\\":\\"⪐\\",\\"gtcc\\":\\"⪧\\",\\"gtcir\\":\\"⩺\\",\\"gt\\":\\">\\",\\"GT\\":\\">\\",\\"Gt\\":\\"≫\\",\\"gtdot\\":\\"⋗\\",\\"gtlPar\\":\\"⦕\\",\\"gtquest\\":\\"⩼\\",\\"gtrapprox\\":\\"⪆\\",\\"gtrarr\\":\\"⥸\\",\\"gtrdot\\":\\"⋗\\",\\"gtreqless\\":\\"⋛\\",\\"gtreqqless\\":\\"⪌\\",\\"gtrless\\":\\"≷\\",\\"gtrsim\\":\\"≳\\",\\"gvertneqq\\":\\"≩︀\\",\\"gvnE\\":\\"≩︀\\",\\"Hacek\\":\\"ˇ\\",\\"hairsp\\":\\" \\",\\"half\\":\\"½\\",\\"hamilt\\":\\"ℋ\\",\\"HARDcy\\":\\"Ъ\\",\\"hardcy\\":\\"ъ\\",\\"harrcir\\":\\"⥈\\",\\"harr\\":\\"↔\\",\\"hArr\\":\\"⇔\\",\\"harrw\\":\\"↭\\",\\"Hat\\":\\"^\\",\\"hbar\\":\\"ℏ\\",\\"Hcirc\\":\\"Ĥ\\",\\"hcirc\\":\\"ĥ\\",\\"hearts\\":\\"♥\\",\\"heartsuit\\":\\"♥\\",\\"hellip\\":\\"…\\",\\"hercon\\":\\"⊹\\",\\"hfr\\":\\"𝔥\\",\\"Hfr\\":\\"ℌ\\",\\"HilbertSpace\\":\\"ℋ\\",\\"hksearow\\":\\"⤥\\",\\"hkswarow\\":\\"⤦\\",\\"hoarr\\":\\"⇿\\",\\"homtht\\":\\"∻\\",\\"hookleftarrow\\":\\"↩\\",\\"hookrightarrow\\":\\"↪\\",\\"hopf\\":\\"𝕙\\",\\"Hopf\\":\\"ℍ\\",\\"horbar\\":\\"―\\",\\"HorizontalLine\\":\\"─\\",\\"hscr\\":\\"𝒽\\",\\"Hscr\\":\\"ℋ\\",\\"hslash\\":\\"ℏ\\",\\"Hstrok\\":\\"Ħ\\",\\"hstrok\\":\\"ħ\\",\\"HumpDownHump\\":\\"≎\\",\\"HumpEqual\\":\\"≏\\",\\"hybull\\":\\"⁃\\",\\"hyphen\\":\\"‐\\",\\"Iacute\\":\\"Í\\",\\"iacute\\":\\"í\\",\\"ic\\":\\"⁣\\",\\"Icirc\\":\\"Î\\",\\"icirc\\":\\"î\\",\\"Icy\\":\\"И\\",\\"icy\\":\\"и\\",\\"Idot\\":\\"İ\\",\\"IEcy\\":\\"Е\\",\\"iecy\\":\\"е\\",\\"iexcl\\":\\"¡\\",\\"iff\\":\\"⇔\\",\\"ifr\\":\\"𝔦\\",\\"Ifr\\":\\"ℑ\\",\\"Igrave\\":\\"Ì\\",\\"igrave\\":\\"ì\\",\\"ii\\":\\"ⅈ\\",\\"iiiint\\":\\"⨌\\",\\"iiint\\":\\"∭\\",\\"iinfin\\":\\"⧜\\",\\"iiota\\":\\"℩\\",\\"IJlig\\":\\"Ĳ\\",\\"ijlig\\":\\"ĳ\\",\\"Imacr\\":\\"Ī\\",\\"imacr\\":\\"ī\\",\\"image\\":\\"ℑ\\",\\"ImaginaryI\\":\\"ⅈ\\",\\"imagline\\":\\"ℐ\\",\\"imagpart\\":\\"ℑ\\",\\"imath\\":\\"ı\\",\\"Im\\":\\"ℑ\\",\\"imof\\":\\"⊷\\",\\"imped\\":\\"Ƶ\\",\\"Implies\\":\\"⇒\\",\\"incare\\":\\"℅\\",\\"in\\":\\"∈\\",\\"infin\\":\\"∞\\",\\"infintie\\":\\"⧝\\",\\"inodot\\":\\"ı\\",\\"intcal\\":\\"⊺\\",\\"int\\":\\"∫\\",\\"Int\\":\\"∬\\",\\"integers\\":\\"ℤ\\",\\"Integral\\":\\"∫\\",\\"intercal\\":\\"⊺\\",\\"Intersection\\":\\"⋂\\",\\"intlarhk\\":\\"⨗\\",\\"intprod\\":\\"⨼\\",\\"InvisibleComma\\":\\"⁣\\",\\"InvisibleTimes\\":\\"⁢\\",\\"IOcy\\":\\"Ё\\",\\"iocy\\":\\"ё\\",\\"Iogon\\":\\"Į\\",\\"iogon\\":\\"į\\",\\"Iopf\\":\\"𝕀\\",\\"iopf\\":\\"𝕚\\",\\"Iota\\":\\"Ι\\",\\"iota\\":\\"ι\\",\\"iprod\\":\\"⨼\\",\\"iquest\\":\\"¿\\",\\"iscr\\":\\"𝒾\\",\\"Iscr\\":\\"ℐ\\",\\"isin\\":\\"∈\\",\\"isindot\\":\\"⋵\\",\\"isinE\\":\\"⋹\\",\\"isins\\":\\"⋴\\",\\"isinsv\\":\\"⋳\\",\\"isinv\\":\\"∈\\",\\"it\\":\\"⁢\\",\\"Itilde\\":\\"Ĩ\\",\\"itilde\\":\\"ĩ\\",\\"Iukcy\\":\\"І\\",\\"iukcy\\":\\"і\\",\\"Iuml\\":\\"Ï\\",\\"iuml\\":\\"ï\\",\\"Jcirc\\":\\"Ĵ\\",\\"jcirc\\":\\"ĵ\\",\\"Jcy\\":\\"Й\\",\\"jcy\\":\\"й\\",\\"Jfr\\":\\"𝔍\\",\\"jfr\\":\\"𝔧\\",\\"jmath\\":\\"ȷ\\",\\"Jopf\\":\\"𝕁\\",\\"jopf\\":\\"𝕛\\",\\"Jscr\\":\\"𝒥\\",\\"jscr\\":\\"𝒿\\",\\"Jsercy\\":\\"Ј\\",\\"jsercy\\":\\"ј\\",\\"Jukcy\\":\\"Є\\",\\"jukcy\\":\\"є\\",\\"Kappa\\":\\"Κ\\",\\"kappa\\":\\"κ\\",\\"kappav\\":\\"ϰ\\",\\"Kcedil\\":\\"Ķ\\",\\"kcedil\\":\\"ķ\\",\\"Kcy\\":\\"К\\",\\"kcy\\":\\"к\\",\\"Kfr\\":\\"𝔎\\",\\"kfr\\":\\"𝔨\\",\\"kgreen\\":\\"ĸ\\",\\"KHcy\\":\\"Х\\",\\"khcy\\":\\"х\\",\\"KJcy\\":\\"Ќ\\",\\"kjcy\\":\\"ќ\\",\\"Kopf\\":\\"𝕂\\",\\"kopf\\":\\"𝕜\\",\\"Kscr\\":\\"𝒦\\",\\"kscr\\":\\"𝓀\\",\\"lAarr\\":\\"⇚\\",\\"Lacute\\":\\"Ĺ\\",\\"lacute\\":\\"ĺ\\",\\"laemptyv\\":\\"⦴\\",\\"lagran\\":\\"ℒ\\",\\"Lambda\\":\\"Λ\\",\\"lambda\\":\\"λ\\",\\"lang\\":\\"⟨\\",\\"Lang\\":\\"⟪\\",\\"langd\\":\\"⦑\\",\\"langle\\":\\"⟨\\",\\"lap\\":\\"⪅\\",\\"Laplacetrf\\":\\"ℒ\\",\\"laquo\\":\\"«\\",\\"larrb\\":\\"⇤\\",\\"larrbfs\\":\\"⤟\\",\\"larr\\":\\"←\\",\\"Larr\\":\\"↞\\",\\"lArr\\":\\"⇐\\",\\"larrfs\\":\\"⤝\\",\\"larrhk\\":\\"↩\\",\\"larrlp\\":\\"↫\\",\\"larrpl\\":\\"⤹\\",\\"larrsim\\":\\"⥳\\",\\"larrtl\\":\\"↢\\",\\"latail\\":\\"⤙\\",\\"lAtail\\":\\"⤛\\",\\"lat\\":\\"⪫\\",\\"late\\":\\"⪭\\",\\"lates\\":\\"⪭︀\\",\\"lbarr\\":\\"⤌\\",\\"lBarr\\":\\"⤎\\",\\"lbbrk\\":\\"❲\\",\\"lbrace\\":\\"{\\",\\"lbrack\\":\\"[\\",\\"lbrke\\":\\"⦋\\",\\"lbrksld\\":\\"⦏\\",\\"lbrkslu\\":\\"⦍\\",\\"Lcaron\\":\\"Ľ\\",\\"lcaron\\":\\"ľ\\",\\"Lcedil\\":\\"Ļ\\",\\"lcedil\\":\\"ļ\\",\\"lceil\\":\\"⌈\\",\\"lcub\\":\\"{\\",\\"Lcy\\":\\"Л\\",\\"lcy\\":\\"л\\",\\"ldca\\":\\"⤶\\",\\"ldquo\\":\\"“\\",\\"ldquor\\":\\"„\\",\\"ldrdhar\\":\\"⥧\\",\\"ldrushar\\":\\"⥋\\",\\"ldsh\\":\\"↲\\",\\"le\\":\\"≤\\",\\"lE\\":\\"≦\\",\\"LeftAngleBracket\\":\\"⟨\\",\\"LeftArrowBar\\":\\"⇤\\",\\"leftarrow\\":\\"←\\",\\"LeftArrow\\":\\"←\\",\\"Leftarrow\\":\\"⇐\\",\\"LeftArrowRightArrow\\":\\"⇆\\",\\"leftarrowtail\\":\\"↢\\",\\"LeftCeiling\\":\\"⌈\\",\\"LeftDoubleBracket\\":\\"⟦\\",\\"LeftDownTeeVector\\":\\"⥡\\",\\"LeftDownVectorBar\\":\\"⥙\\",\\"LeftDownVector\\":\\"⇃\\",\\"LeftFloor\\":\\"⌊\\",\\"leftharpoondown\\":\\"↽\\",\\"leftharpoonup\\":\\"↼\\",\\"leftleftarrows\\":\\"⇇\\",\\"leftrightarrow\\":\\"↔\\",\\"LeftRightArrow\\":\\"↔\\",\\"Leftrightarrow\\":\\"⇔\\",\\"leftrightarrows\\":\\"⇆\\",\\"leftrightharpoons\\":\\"⇋\\",\\"leftrightsquigarrow\\":\\"↭\\",\\"LeftRightVector\\":\\"⥎\\",\\"LeftTeeArrow\\":\\"↤\\",\\"LeftTee\\":\\"⊣\\",\\"LeftTeeVector\\":\\"⥚\\",\\"leftthreetimes\\":\\"⋋\\",\\"LeftTriangleBar\\":\\"⧏\\",\\"LeftTriangle\\":\\"⊲\\",\\"LeftTriangleEqual\\":\\"⊴\\",\\"LeftUpDownVector\\":\\"⥑\\",\\"LeftUpTeeVector\\":\\"⥠\\",\\"LeftUpVectorBar\\":\\"⥘\\",\\"LeftUpVector\\":\\"↿\\",\\"LeftVectorBar\\":\\"⥒\\",\\"LeftVector\\":\\"↼\\",\\"lEg\\":\\"⪋\\",\\"leg\\":\\"⋚\\",\\"leq\\":\\"≤\\",\\"leqq\\":\\"≦\\",\\"leqslant\\":\\"⩽\\",\\"lescc\\":\\"⪨\\",\\"les\\":\\"⩽\\",\\"lesdot\\":\\"⩿\\",\\"lesdoto\\":\\"⪁\\",\\"lesdotor\\":\\"⪃\\",\\"lesg\\":\\"⋚︀\\",\\"lesges\\":\\"⪓\\",\\"lessapprox\\":\\"⪅\\",\\"lessdot\\":\\"⋖\\",\\"lesseqgtr\\":\\"⋚\\",\\"lesseqqgtr\\":\\"⪋\\",\\"LessEqualGreater\\":\\"⋚\\",\\"LessFullEqual\\":\\"≦\\",\\"LessGreater\\":\\"≶\\",\\"lessgtr\\":\\"≶\\",\\"LessLess\\":\\"⪡\\",\\"lesssim\\":\\"≲\\",\\"LessSlantEqual\\":\\"⩽\\",\\"LessTilde\\":\\"≲\\",\\"lfisht\\":\\"⥼\\",\\"lfloor\\":\\"⌊\\",\\"Lfr\\":\\"𝔏\\",\\"lfr\\":\\"𝔩\\",\\"lg\\":\\"≶\\",\\"lgE\\":\\"⪑\\",\\"lHar\\":\\"⥢\\",\\"lhard\\":\\"↽\\",\\"lharu\\":\\"↼\\",\\"lharul\\":\\"⥪\\",\\"lhblk\\":\\"▄\\",\\"LJcy\\":\\"Љ\\",\\"ljcy\\":\\"љ\\",\\"llarr\\":\\"⇇\\",\\"ll\\":\\"≪\\",\\"Ll\\":\\"⋘\\",\\"llcorner\\":\\"⌞\\",\\"Lleftarrow\\":\\"⇚\\",\\"llhard\\":\\"⥫\\",\\"lltri\\":\\"◺\\",\\"Lmidot\\":\\"Ŀ\\",\\"lmidot\\":\\"ŀ\\",\\"lmoustache\\":\\"⎰\\",\\"lmoust\\":\\"⎰\\",\\"lnap\\":\\"⪉\\",\\"lnapprox\\":\\"⪉\\",\\"lne\\":\\"⪇\\",\\"lnE\\":\\"≨\\",\\"lneq\\":\\"⪇\\",\\"lneqq\\":\\"≨\\",\\"lnsim\\":\\"⋦\\",\\"loang\\":\\"⟬\\",\\"loarr\\":\\"⇽\\",\\"lobrk\\":\\"⟦\\",\\"longleftarrow\\":\\"⟵\\",\\"LongLeftArrow\\":\\"⟵\\",\\"Longleftarrow\\":\\"⟸\\",\\"longleftrightarrow\\":\\"⟷\\",\\"LongLeftRightArrow\\":\\"⟷\\",\\"Longleftrightarrow\\":\\"⟺\\",\\"longmapsto\\":\\"⟼\\",\\"longrightarrow\\":\\"⟶\\",\\"LongRightArrow\\":\\"⟶\\",\\"Longrightarrow\\":\\"⟹\\",\\"looparrowleft\\":\\"↫\\",\\"looparrowright\\":\\"↬\\",\\"lopar\\":\\"⦅\\",\\"Lopf\\":\\"𝕃\\",\\"lopf\\":\\"𝕝\\",\\"loplus\\":\\"⨭\\",\\"lotimes\\":\\"⨴\\",\\"lowast\\":\\"∗\\",\\"lowbar\\":\\"_\\",\\"LowerLeftArrow\\":\\"↙\\",\\"LowerRightArrow\\":\\"↘\\",\\"loz\\":\\"◊\\",\\"lozenge\\":\\"◊\\",\\"lozf\\":\\"⧫\\",\\"lpar\\":\\"(\\",\\"lparlt\\":\\"⦓\\",\\"lrarr\\":\\"⇆\\",\\"lrcorner\\":\\"⌟\\",\\"lrhar\\":\\"⇋\\",\\"lrhard\\":\\"⥭\\",\\"lrm\\":\\"‎\\",\\"lrtri\\":\\"⊿\\",\\"lsaquo\\":\\"‹\\",\\"lscr\\":\\"𝓁\\",\\"Lscr\\":\\"ℒ\\",\\"lsh\\":\\"↰\\",\\"Lsh\\":\\"↰\\",\\"lsim\\":\\"≲\\",\\"lsime\\":\\"⪍\\",\\"lsimg\\":\\"⪏\\",\\"lsqb\\":\\"[\\",\\"lsquo\\":\\"‘\\",\\"lsquor\\":\\"‚\\",\\"Lstrok\\":\\"Ł\\",\\"lstrok\\":\\"ł\\",\\"ltcc\\":\\"⪦\\",\\"ltcir\\":\\"⩹\\",\\"lt\\":\\"<\\",\\"LT\\":\\"<\\",\\"Lt\\":\\"≪\\",\\"ltdot\\":\\"⋖\\",\\"lthree\\":\\"⋋\\",\\"ltimes\\":\\"⋉\\",\\"ltlarr\\":\\"⥶\\",\\"ltquest\\":\\"⩻\\",\\"ltri\\":\\"◃\\",\\"ltrie\\":\\"⊴\\",\\"ltrif\\":\\"◂\\",\\"ltrPar\\":\\"⦖\\",\\"lurdshar\\":\\"⥊\\",\\"luruhar\\":\\"⥦\\",\\"lvertneqq\\":\\"≨︀\\",\\"lvnE\\":\\"≨︀\\",\\"macr\\":\\"¯\\",\\"male\\":\\"♂\\",\\"malt\\":\\"✠\\",\\"maltese\\":\\"✠\\",\\"Map\\":\\"⤅\\",\\"map\\":\\"↦\\",\\"mapsto\\":\\"↦\\",\\"mapstodown\\":\\"↧\\",\\"mapstoleft\\":\\"↤\\",\\"mapstoup\\":\\"↥\\",\\"marker\\":\\"▮\\",\\"mcomma\\":\\"⨩\\",\\"Mcy\\":\\"М\\",\\"mcy\\":\\"м\\",\\"mdash\\":\\"—\\",\\"mDDot\\":\\"∺\\",\\"measuredangle\\":\\"∡\\",\\"MediumSpace\\":\\" \\",\\"Mellintrf\\":\\"ℳ\\",\\"Mfr\\":\\"𝔐\\",\\"mfr\\":\\"𝔪\\",\\"mho\\":\\"℧\\",\\"micro\\":\\"µ\\",\\"midast\\":\\"*\\",\\"midcir\\":\\"⫰\\",\\"mid\\":\\"∣\\",\\"middot\\":\\"·\\",\\"minusb\\":\\"⊟\\",\\"minus\\":\\"−\\",\\"minusd\\":\\"∸\\",\\"minusdu\\":\\"⨪\\",\\"MinusPlus\\":\\"∓\\",\\"mlcp\\":\\"⫛\\",\\"mldr\\":\\"…\\",\\"mnplus\\":\\"∓\\",\\"models\\":\\"⊧\\",\\"Mopf\\":\\"𝕄\\",\\"mopf\\":\\"𝕞\\",\\"mp\\":\\"∓\\",\\"mscr\\":\\"𝓂\\",\\"Mscr\\":\\"ℳ\\",\\"mstpos\\":\\"∾\\",\\"Mu\\":\\"Μ\\",\\"mu\\":\\"μ\\",\\"multimap\\":\\"⊸\\",\\"mumap\\":\\"⊸\\",\\"nabla\\":\\"∇\\",\\"Nacute\\":\\"Ń\\",\\"nacute\\":\\"ń\\",\\"nang\\":\\"∠⃒\\",\\"nap\\":\\"≉\\",\\"napE\\":\\"⩰̸\\",\\"napid\\":\\"≋̸\\",\\"napos\\":\\"ŉ\\",\\"napprox\\":\\"≉\\",\\"natural\\":\\"♮\\",\\"naturals\\":\\"ℕ\\",\\"natur\\":\\"♮\\",\\"nbsp\\":\\" \\",\\"nbump\\":\\"≎̸\\",\\"nbumpe\\":\\"≏̸\\",\\"ncap\\":\\"⩃\\",\\"Ncaron\\":\\"Ň\\",\\"ncaron\\":\\"ň\\",\\"Ncedil\\":\\"Ņ\\",\\"ncedil\\":\\"ņ\\",\\"ncong\\":\\"≇\\",\\"ncongdot\\":\\"⩭̸\\",\\"ncup\\":\\"⩂\\",\\"Ncy\\":\\"Н\\",\\"ncy\\":\\"н\\",\\"ndash\\":\\"–\\",\\"nearhk\\":\\"⤤\\",\\"nearr\\":\\"↗\\",\\"neArr\\":\\"⇗\\",\\"nearrow\\":\\"↗\\",\\"ne\\":\\"≠\\",\\"nedot\\":\\"≐̸\\",\\"NegativeMediumSpace\\":\\"​\\",\\"NegativeThickSpace\\":\\"​\\",\\"NegativeThinSpace\\":\\"​\\",\\"NegativeVeryThinSpace\\":\\"​\\",\\"nequiv\\":\\"≢\\",\\"nesear\\":\\"⤨\\",\\"nesim\\":\\"≂̸\\",\\"NestedGreaterGreater\\":\\"≫\\",\\"NestedLessLess\\":\\"≪\\",\\"NewLine\\":\\"\\\\n\\",\\"nexist\\":\\"∄\\",\\"nexists\\":\\"∄\\",\\"Nfr\\":\\"𝔑\\",\\"nfr\\":\\"𝔫\\",\\"ngE\\":\\"≧̸\\",\\"nge\\":\\"≱\\",\\"ngeq\\":\\"≱\\",\\"ngeqq\\":\\"≧̸\\",\\"ngeqslant\\":\\"⩾̸\\",\\"nges\\":\\"⩾̸\\",\\"nGg\\":\\"⋙̸\\",\\"ngsim\\":\\"≵\\",\\"nGt\\":\\"≫⃒\\",\\"ngt\\":\\"≯\\",\\"ngtr\\":\\"≯\\",\\"nGtv\\":\\"≫̸\\",\\"nharr\\":\\"↮\\",\\"nhArr\\":\\"⇎\\",\\"nhpar\\":\\"⫲\\",\\"ni\\":\\"∋\\",\\"nis\\":\\"⋼\\",\\"nisd\\":\\"⋺\\",\\"niv\\":\\"∋\\",\\"NJcy\\":\\"Њ\\",\\"njcy\\":\\"њ\\",\\"nlarr\\":\\"↚\\",\\"nlArr\\":\\"⇍\\",\\"nldr\\":\\"‥\\",\\"nlE\\":\\"≦̸\\",\\"nle\\":\\"≰\\",\\"nleftarrow\\":\\"↚\\",\\"nLeftarrow\\":\\"⇍\\",\\"nleftrightarrow\\":\\"↮\\",\\"nLeftrightarrow\\":\\"⇎\\",\\"nleq\\":\\"≰\\",\\"nleqq\\":\\"≦̸\\",\\"nleqslant\\":\\"⩽̸\\",\\"nles\\":\\"⩽̸\\",\\"nless\\":\\"≮\\",\\"nLl\\":\\"⋘̸\\",\\"nlsim\\":\\"≴\\",\\"nLt\\":\\"≪⃒\\",\\"nlt\\":\\"≮\\",\\"nltri\\":\\"⋪\\",\\"nltrie\\":\\"⋬\\",\\"nLtv\\":\\"≪̸\\",\\"nmid\\":\\"∤\\",\\"NoBreak\\":\\"⁠\\",\\"NonBreakingSpace\\":\\" \\",\\"nopf\\":\\"𝕟\\",\\"Nopf\\":\\"ℕ\\",\\"Not\\":\\"⫬\\",\\"not\\":\\"¬\\",\\"NotCongruent\\":\\"≢\\",\\"NotCupCap\\":\\"≭\\",\\"NotDoubleVerticalBar\\":\\"∦\\",\\"NotElement\\":\\"∉\\",\\"NotEqual\\":\\"≠\\",\\"NotEqualTilde\\":\\"≂̸\\",\\"NotExists\\":\\"∄\\",\\"NotGreater\\":\\"≯\\",\\"NotGreaterEqual\\":\\"≱\\",\\"NotGreaterFullEqual\\":\\"≧̸\\",\\"NotGreaterGreater\\":\\"≫̸\\",\\"NotGreaterLess\\":\\"≹\\",\\"NotGreaterSlantEqual\\":\\"⩾̸\\",\\"NotGreaterTilde\\":\\"≵\\",\\"NotHumpDownHump\\":\\"≎̸\\",\\"NotHumpEqual\\":\\"≏̸\\",\\"notin\\":\\"∉\\",\\"notindot\\":\\"⋵̸\\",\\"notinE\\":\\"⋹̸\\",\\"notinva\\":\\"∉\\",\\"notinvb\\":\\"⋷\\",\\"notinvc\\":\\"⋶\\",\\"NotLeftTriangleBar\\":\\"⧏̸\\",\\"NotLeftTriangle\\":\\"⋪\\",\\"NotLeftTriangleEqual\\":\\"⋬\\",\\"NotLess\\":\\"≮\\",\\"NotLessEqual\\":\\"≰\\",\\"NotLessGreater\\":\\"≸\\",\\"NotLessLess\\":\\"≪̸\\",\\"NotLessSlantEqual\\":\\"⩽̸\\",\\"NotLessTilde\\":\\"≴\\",\\"NotNestedGreaterGreater\\":\\"⪢̸\\",\\"NotNestedLessLess\\":\\"⪡̸\\",\\"notni\\":\\"∌\\",\\"notniva\\":\\"∌\\",\\"notnivb\\":\\"⋾\\",\\"notnivc\\":\\"⋽\\",\\"NotPrecedes\\":\\"⊀\\",\\"NotPrecedesEqual\\":\\"⪯̸\\",\\"NotPrecedesSlantEqual\\":\\"⋠\\",\\"NotReverseElement\\":\\"∌\\",\\"NotRightTriangleBar\\":\\"⧐̸\\",\\"NotRightTriangle\\":\\"⋫\\",\\"NotRightTriangleEqual\\":\\"⋭\\",\\"NotSquareSubset\\":\\"⊏̸\\",\\"NotSquareSubsetEqual\\":\\"⋢\\",\\"NotSquareSuperset\\":\\"⊐̸\\",\\"NotSquareSupersetEqual\\":\\"⋣\\",\\"NotSubset\\":\\"⊂⃒\\",\\"NotSubsetEqual\\":\\"⊈\\",\\"NotSucceeds\\":\\"⊁\\",\\"NotSucceedsEqual\\":\\"⪰̸\\",\\"NotSucceedsSlantEqual\\":\\"⋡\\",\\"NotSucceedsTilde\\":\\"≿̸\\",\\"NotSuperset\\":\\"⊃⃒\\",\\"NotSupersetEqual\\":\\"⊉\\",\\"NotTilde\\":\\"≁\\",\\"NotTildeEqual\\":\\"≄\\",\\"NotTildeFullEqual\\":\\"≇\\",\\"NotTildeTilde\\":\\"≉\\",\\"NotVerticalBar\\":\\"∤\\",\\"nparallel\\":\\"∦\\",\\"npar\\":\\"∦\\",\\"nparsl\\":\\"⫽⃥\\",\\"npart\\":\\"∂̸\\",\\"npolint\\":\\"⨔\\",\\"npr\\":\\"⊀\\",\\"nprcue\\":\\"⋠\\",\\"nprec\\":\\"⊀\\",\\"npreceq\\":\\"⪯̸\\",\\"npre\\":\\"⪯̸\\",\\"nrarrc\\":\\"⤳̸\\",\\"nrarr\\":\\"↛\\",\\"nrArr\\":\\"⇏\\",\\"nrarrw\\":\\"↝̸\\",\\"nrightarrow\\":\\"↛\\",\\"nRightarrow\\":\\"⇏\\",\\"nrtri\\":\\"⋫\\",\\"nrtrie\\":\\"⋭\\",\\"nsc\\":\\"⊁\\",\\"nsccue\\":\\"⋡\\",\\"nsce\\":\\"⪰̸\\",\\"Nscr\\":\\"𝒩\\",\\"nscr\\":\\"𝓃\\",\\"nshortmid\\":\\"∤\\",\\"nshortparallel\\":\\"∦\\",\\"nsim\\":\\"≁\\",\\"nsime\\":\\"≄\\",\\"nsimeq\\":\\"≄\\",\\"nsmid\\":\\"∤\\",\\"nspar\\":\\"∦\\",\\"nsqsube\\":\\"⋢\\",\\"nsqsupe\\":\\"⋣\\",\\"nsub\\":\\"⊄\\",\\"nsubE\\":\\"⫅̸\\",\\"nsube\\":\\"⊈\\",\\"nsubset\\":\\"⊂⃒\\",\\"nsubseteq\\":\\"⊈\\",\\"nsubseteqq\\":\\"⫅̸\\",\\"nsucc\\":\\"⊁\\",\\"nsucceq\\":\\"⪰̸\\",\\"nsup\\":\\"⊅\\",\\"nsupE\\":\\"⫆̸\\",\\"nsupe\\":\\"⊉\\",\\"nsupset\\":\\"⊃⃒\\",\\"nsupseteq\\":\\"⊉\\",\\"nsupseteqq\\":\\"⫆̸\\",\\"ntgl\\":\\"≹\\",\\"Ntilde\\":\\"Ñ\\",\\"ntilde\\":\\"ñ\\",\\"ntlg\\":\\"≸\\",\\"ntriangleleft\\":\\"⋪\\",\\"ntrianglelefteq\\":\\"⋬\\",\\"ntriangleright\\":\\"⋫\\",\\"ntrianglerighteq\\":\\"⋭\\",\\"Nu\\":\\"Ν\\",\\"nu\\":\\"ν\\",\\"num\\":\\"#\\",\\"numero\\":\\"№\\",\\"numsp\\":\\" \\",\\"nvap\\":\\"≍⃒\\",\\"nvdash\\":\\"⊬\\",\\"nvDash\\":\\"⊭\\",\\"nVdash\\":\\"⊮\\",\\"nVDash\\":\\"⊯\\",\\"nvge\\":\\"≥⃒\\",\\"nvgt\\":\\">⃒\\",\\"nvHarr\\":\\"⤄\\",\\"nvinfin\\":\\"⧞\\",\\"nvlArr\\":\\"⤂\\",\\"nvle\\":\\"≤⃒\\",\\"nvlt\\":\\"<⃒\\",\\"nvltrie\\":\\"⊴⃒\\",\\"nvrArr\\":\\"⤃\\",\\"nvrtrie\\":\\"⊵⃒\\",\\"nvsim\\":\\"∼⃒\\",\\"nwarhk\\":\\"⤣\\",\\"nwarr\\":\\"↖\\",\\"nwArr\\":\\"⇖\\",\\"nwarrow\\":\\"↖\\",\\"nwnear\\":\\"⤧\\",\\"Oacute\\":\\"Ó\\",\\"oacute\\":\\"ó\\",\\"oast\\":\\"⊛\\",\\"Ocirc\\":\\"Ô\\",\\"ocirc\\":\\"ô\\",\\"ocir\\":\\"⊚\\",\\"Ocy\\":\\"О\\",\\"ocy\\":\\"о\\",\\"odash\\":\\"⊝\\",\\"Odblac\\":\\"Ő\\",\\"odblac\\":\\"ő\\",\\"odiv\\":\\"⨸\\",\\"odot\\":\\"⊙\\",\\"odsold\\":\\"⦼\\",\\"OElig\\":\\"Œ\\",\\"oelig\\":\\"œ\\",\\"ofcir\\":\\"⦿\\",\\"Ofr\\":\\"𝔒\\",\\"ofr\\":\\"𝔬\\",\\"ogon\\":\\"˛\\",\\"Ograve\\":\\"Ò\\",\\"ograve\\":\\"ò\\",\\"ogt\\":\\"⧁\\",\\"ohbar\\":\\"⦵\\",\\"ohm\\":\\"Ω\\",\\"oint\\":\\"∮\\",\\"olarr\\":\\"↺\\",\\"olcir\\":\\"⦾\\",\\"olcross\\":\\"⦻\\",\\"oline\\":\\"‾\\",\\"olt\\":\\"⧀\\",\\"Omacr\\":\\"Ō\\",\\"omacr\\":\\"ō\\",\\"Omega\\":\\"Ω\\",\\"omega\\":\\"ω\\",\\"Omicron\\":\\"Ο\\",\\"omicron\\":\\"ο\\",\\"omid\\":\\"⦶\\",\\"ominus\\":\\"⊖\\",\\"Oopf\\":\\"𝕆\\",\\"oopf\\":\\"𝕠\\",\\"opar\\":\\"⦷\\",\\"OpenCurlyDoubleQuote\\":\\"“\\",\\"OpenCurlyQuote\\":\\"‘\\",\\"operp\\":\\"⦹\\",\\"oplus\\":\\"⊕\\",\\"orarr\\":\\"↻\\",\\"Or\\":\\"⩔\\",\\"or\\":\\"∨\\",\\"ord\\":\\"⩝\\",\\"order\\":\\"ℴ\\",\\"orderof\\":\\"ℴ\\",\\"ordf\\":\\"ª\\",\\"ordm\\":\\"º\\",\\"origof\\":\\"⊶\\",\\"oror\\":\\"⩖\\",\\"orslope\\":\\"⩗\\",\\"orv\\":\\"⩛\\",\\"oS\\":\\"Ⓢ\\",\\"Oscr\\":\\"𝒪\\",\\"oscr\\":\\"ℴ\\",\\"Oslash\\":\\"Ø\\",\\"oslash\\":\\"ø\\",\\"osol\\":\\"⊘\\",\\"Otilde\\":\\"Õ\\",\\"otilde\\":\\"õ\\",\\"otimesas\\":\\"⨶\\",\\"Otimes\\":\\"⨷\\",\\"otimes\\":\\"⊗\\",\\"Ouml\\":\\"Ö\\",\\"ouml\\":\\"ö\\",\\"ovbar\\":\\"⌽\\",\\"OverBar\\":\\"‾\\",\\"OverBrace\\":\\"⏞\\",\\"OverBracket\\":\\"⎴\\",\\"OverParenthesis\\":\\"⏜\\",\\"para\\":\\"¶\\",\\"parallel\\":\\"∥\\",\\"par\\":\\"∥\\",\\"parsim\\":\\"⫳\\",\\"parsl\\":\\"⫽\\",\\"part\\":\\"∂\\",\\"PartialD\\":\\"∂\\",\\"Pcy\\":\\"П\\",\\"pcy\\":\\"п\\",\\"percnt\\":\\"%\\",\\"period\\":\\".\\",\\"permil\\":\\"‰\\",\\"perp\\":\\"⊥\\",\\"pertenk\\":\\"‱\\",\\"Pfr\\":\\"𝔓\\",\\"pfr\\":\\"𝔭\\",\\"Phi\\":\\"Φ\\",\\"phi\\":\\"φ\\",\\"phiv\\":\\"ϕ\\",\\"phmmat\\":\\"ℳ\\",\\"phone\\":\\"☎\\",\\"Pi\\":\\"Π\\",\\"pi\\":\\"π\\",\\"pitchfork\\":\\"⋔\\",\\"piv\\":\\"ϖ\\",\\"planck\\":\\"ℏ\\",\\"planckh\\":\\"ℎ\\",\\"plankv\\":\\"ℏ\\",\\"plusacir\\":\\"⨣\\",\\"plusb\\":\\"⊞\\",\\"pluscir\\":\\"⨢\\",\\"plus\\":\\"+\\",\\"plusdo\\":\\"∔\\",\\"plusdu\\":\\"⨥\\",\\"pluse\\":\\"⩲\\",\\"PlusMinus\\":\\"±\\",\\"plusmn\\":\\"±\\",\\"plussim\\":\\"⨦\\",\\"plustwo\\":\\"⨧\\",\\"pm\\":\\"±\\",\\"Poincareplane\\":\\"ℌ\\",\\"pointint\\":\\"⨕\\",\\"popf\\":\\"𝕡\\",\\"Popf\\":\\"ℙ\\",\\"pound\\":\\"£\\",\\"prap\\":\\"⪷\\",\\"Pr\\":\\"⪻\\",\\"pr\\":\\"≺\\",\\"prcue\\":\\"≼\\",\\"precapprox\\":\\"⪷\\",\\"prec\\":\\"≺\\",\\"preccurlyeq\\":\\"≼\\",\\"Precedes\\":\\"≺\\",\\"PrecedesEqual\\":\\"⪯\\",\\"PrecedesSlantEqual\\":\\"≼\\",\\"PrecedesTilde\\":\\"≾\\",\\"preceq\\":\\"⪯\\",\\"precnapprox\\":\\"⪹\\",\\"precneqq\\":\\"⪵\\",\\"precnsim\\":\\"⋨\\",\\"pre\\":\\"⪯\\",\\"prE\\":\\"⪳\\",\\"precsim\\":\\"≾\\",\\"prime\\":\\"′\\",\\"Prime\\":\\"″\\",\\"primes\\":\\"ℙ\\",\\"prnap\\":\\"⪹\\",\\"prnE\\":\\"⪵\\",\\"prnsim\\":\\"⋨\\",\\"prod\\":\\"∏\\",\\"Product\\":\\"∏\\",\\"profalar\\":\\"⌮\\",\\"profline\\":\\"⌒\\",\\"profsurf\\":\\"⌓\\",\\"prop\\":\\"∝\\",\\"Proportional\\":\\"∝\\",\\"Proportion\\":\\"∷\\",\\"propto\\":\\"∝\\",\\"prsim\\":\\"≾\\",\\"prurel\\":\\"⊰\\",\\"Pscr\\":\\"𝒫\\",\\"pscr\\":\\"𝓅\\",\\"Psi\\":\\"Ψ\\",\\"psi\\":\\"ψ\\",\\"puncsp\\":\\" \\",\\"Qfr\\":\\"𝔔\\",\\"qfr\\":\\"𝔮\\",\\"qint\\":\\"⨌\\",\\"qopf\\":\\"𝕢\\",\\"Qopf\\":\\"ℚ\\",\\"qprime\\":\\"⁗\\",\\"Qscr\\":\\"𝒬\\",\\"qscr\\":\\"𝓆\\",\\"quaternions\\":\\"ℍ\\",\\"quatint\\":\\"⨖\\",\\"quest\\":\\"?\\",\\"questeq\\":\\"≟\\",\\"quot\\":\\"\\\\\\"\\",\\"QUOT\\":\\"\\\\\\"\\",\\"rAarr\\":\\"⇛\\",\\"race\\":\\"∽̱\\",\\"Racute\\":\\"Ŕ\\",\\"racute\\":\\"ŕ\\",\\"radic\\":\\"√\\",\\"raemptyv\\":\\"⦳\\",\\"rang\\":\\"⟩\\",\\"Rang\\":\\"⟫\\",\\"rangd\\":\\"⦒\\",\\"range\\":\\"⦥\\",\\"rangle\\":\\"⟩\\",\\"raquo\\":\\"»\\",\\"rarrap\\":\\"⥵\\",\\"rarrb\\":\\"⇥\\",\\"rarrbfs\\":\\"⤠\\",\\"rarrc\\":\\"⤳\\",\\"rarr\\":\\"→\\",\\"Rarr\\":\\"↠\\",\\"rArr\\":\\"⇒\\",\\"rarrfs\\":\\"⤞\\",\\"rarrhk\\":\\"↪\\",\\"rarrlp\\":\\"↬\\",\\"rarrpl\\":\\"⥅\\",\\"rarrsim\\":\\"⥴\\",\\"Rarrtl\\":\\"⤖\\",\\"rarrtl\\":\\"↣\\",\\"rarrw\\":\\"↝\\",\\"ratail\\":\\"⤚\\",\\"rAtail\\":\\"⤜\\",\\"ratio\\":\\"∶\\",\\"rationals\\":\\"ℚ\\",\\"rbarr\\":\\"⤍\\",\\"rBarr\\":\\"⤏\\",\\"RBarr\\":\\"⤐\\",\\"rbbrk\\":\\"❳\\",\\"rbrace\\":\\"}\\",\\"rbrack\\":\\"]\\",\\"rbrke\\":\\"⦌\\",\\"rbrksld\\":\\"⦎\\",\\"rbrkslu\\":\\"⦐\\",\\"Rcaron\\":\\"Ř\\",\\"rcaron\\":\\"ř\\",\\"Rcedil\\":\\"Ŗ\\",\\"rcedil\\":\\"ŗ\\",\\"rceil\\":\\"⌉\\",\\"rcub\\":\\"}\\",\\"Rcy\\":\\"Р\\",\\"rcy\\":\\"р\\",\\"rdca\\":\\"⤷\\",\\"rdldhar\\":\\"⥩\\",\\"rdquo\\":\\"”\\",\\"rdquor\\":\\"”\\",\\"rdsh\\":\\"↳\\",\\"real\\":\\"ℜ\\",\\"realine\\":\\"ℛ\\",\\"realpart\\":\\"ℜ\\",\\"reals\\":\\"ℝ\\",\\"Re\\":\\"ℜ\\",\\"rect\\":\\"▭\\",\\"reg\\":\\"®\\",\\"REG\\":\\"®\\",\\"ReverseElement\\":\\"∋\\",\\"ReverseEquilibrium\\":\\"⇋\\",\\"ReverseUpEquilibrium\\":\\"⥯\\",\\"rfisht\\":\\"⥽\\",\\"rfloor\\":\\"⌋\\",\\"rfr\\":\\"𝔯\\",\\"Rfr\\":\\"ℜ\\",\\"rHar\\":\\"⥤\\",\\"rhard\\":\\"⇁\\",\\"rharu\\":\\"⇀\\",\\"rharul\\":\\"⥬\\",\\"Rho\\":\\"Ρ\\",\\"rho\\":\\"ρ\\",\\"rhov\\":\\"ϱ\\",\\"RightAngleBracket\\":\\"⟩\\",\\"RightArrowBar\\":\\"⇥\\",\\"rightarrow\\":\\"→\\",\\"RightArrow\\":\\"→\\",\\"Rightarrow\\":\\"⇒\\",\\"RightArrowLeftArrow\\":\\"⇄\\",\\"rightarrowtail\\":\\"↣\\",\\"RightCeiling\\":\\"⌉\\",\\"RightDoubleBracket\\":\\"⟧\\",\\"RightDownTeeVector\\":\\"⥝\\",\\"RightDownVectorBar\\":\\"⥕\\",\\"RightDownVector\\":\\"⇂\\",\\"RightFloor\\":\\"⌋\\",\\"rightharpoondown\\":\\"⇁\\",\\"rightharpoonup\\":\\"⇀\\",\\"rightleftarrows\\":\\"⇄\\",\\"rightleftharpoons\\":\\"⇌\\",\\"rightrightarrows\\":\\"⇉\\",\\"rightsquigarrow\\":\\"↝\\",\\"RightTeeArrow\\":\\"↦\\",\\"RightTee\\":\\"⊢\\",\\"RightTeeVector\\":\\"⥛\\",\\"rightthreetimes\\":\\"⋌\\",\\"RightTriangleBar\\":\\"⧐\\",\\"RightTriangle\\":\\"⊳\\",\\"RightTriangleEqual\\":\\"⊵\\",\\"RightUpDownVector\\":\\"⥏\\",\\"RightUpTeeVector\\":\\"⥜\\",\\"RightUpVectorBar\\":\\"⥔\\",\\"RightUpVector\\":\\"↾\\",\\"RightVectorBar\\":\\"⥓\\",\\"RightVector\\":\\"⇀\\",\\"ring\\":\\"˚\\",\\"risingdotseq\\":\\"≓\\",\\"rlarr\\":\\"⇄\\",\\"rlhar\\":\\"⇌\\",\\"rlm\\":\\"‏\\",\\"rmoustache\\":\\"⎱\\",\\"rmoust\\":\\"⎱\\",\\"rnmid\\":\\"⫮\\",\\"roang\\":\\"⟭\\",\\"roarr\\":\\"⇾\\",\\"robrk\\":\\"⟧\\",\\"ropar\\":\\"⦆\\",\\"ropf\\":\\"𝕣\\",\\"Ropf\\":\\"ℝ\\",\\"roplus\\":\\"⨮\\",\\"rotimes\\":\\"⨵\\",\\"RoundImplies\\":\\"⥰\\",\\"rpar\\":\\")\\",\\"rpargt\\":\\"⦔\\",\\"rppolint\\":\\"⨒\\",\\"rrarr\\":\\"⇉\\",\\"Rrightarrow\\":\\"⇛\\",\\"rsaquo\\":\\"›\\",\\"rscr\\":\\"𝓇\\",\\"Rscr\\":\\"ℛ\\",\\"rsh\\":\\"↱\\",\\"Rsh\\":\\"↱\\",\\"rsqb\\":\\"]\\",\\"rsquo\\":\\"’\\",\\"rsquor\\":\\"’\\",\\"rthree\\":\\"⋌\\",\\"rtimes\\":\\"⋊\\",\\"rtri\\":\\"▹\\",\\"rtrie\\":\\"⊵\\",\\"rtrif\\":\\"▸\\",\\"rtriltri\\":\\"⧎\\",\\"RuleDelayed\\":\\"⧴\\",\\"ruluhar\\":\\"⥨\\",\\"rx\\":\\"℞\\",\\"Sacute\\":\\"Ś\\",\\"sacute\\":\\"ś\\",\\"sbquo\\":\\"‚\\",\\"scap\\":\\"⪸\\",\\"Scaron\\":\\"Š\\",\\"scaron\\":\\"š\\",\\"Sc\\":\\"⪼\\",\\"sc\\":\\"≻\\",\\"sccue\\":\\"≽\\",\\"sce\\":\\"⪰\\",\\"scE\\":\\"⪴\\",\\"Scedil\\":\\"Ş\\",\\"scedil\\":\\"ş\\",\\"Scirc\\":\\"Ŝ\\",\\"scirc\\":\\"ŝ\\",\\"scnap\\":\\"⪺\\",\\"scnE\\":\\"⪶\\",\\"scnsim\\":\\"⋩\\",\\"scpolint\\":\\"⨓\\",\\"scsim\\":\\"≿\\",\\"Scy\\":\\"С\\",\\"scy\\":\\"с\\",\\"sdotb\\":\\"⊡\\",\\"sdot\\":\\"⋅\\",\\"sdote\\":\\"⩦\\",\\"searhk\\":\\"⤥\\",\\"searr\\":\\"↘\\",\\"seArr\\":\\"⇘\\",\\"searrow\\":\\"↘\\",\\"sect\\":\\"§\\",\\"semi\\":\\";\\",\\"seswar\\":\\"⤩\\",\\"setminus\\":\\"∖\\",\\"setmn\\":\\"∖\\",\\"sext\\":\\"✶\\",\\"Sfr\\":\\"𝔖\\",\\"sfr\\":\\"𝔰\\",\\"sfrown\\":\\"⌢\\",\\"sharp\\":\\"♯\\",\\"SHCHcy\\":\\"Щ\\",\\"shchcy\\":\\"щ\\",\\"SHcy\\":\\"Ш\\",\\"shcy\\":\\"ш\\",\\"ShortDownArrow\\":\\"↓\\",\\"ShortLeftArrow\\":\\"←\\",\\"shortmid\\":\\"∣\\",\\"shortparallel\\":\\"∥\\",\\"ShortRightArrow\\":\\"→\\",\\"ShortUpArrow\\":\\"↑\\",\\"shy\\":\\"­\\",\\"Sigma\\":\\"Σ\\",\\"sigma\\":\\"σ\\",\\"sigmaf\\":\\"ς\\",\\"sigmav\\":\\"ς\\",\\"sim\\":\\"∼\\",\\"simdot\\":\\"⩪\\",\\"sime\\":\\"≃\\",\\"simeq\\":\\"≃\\",\\"simg\\":\\"⪞\\",\\"simgE\\":\\"⪠\\",\\"siml\\":\\"⪝\\",\\"simlE\\":\\"⪟\\",\\"simne\\":\\"≆\\",\\"simplus\\":\\"⨤\\",\\"simrarr\\":\\"⥲\\",\\"slarr\\":\\"←\\",\\"SmallCircle\\":\\"∘\\",\\"smallsetminus\\":\\"∖\\",\\"smashp\\":\\"⨳\\",\\"smeparsl\\":\\"⧤\\",\\"smid\\":\\"∣\\",\\"smile\\":\\"⌣\\",\\"smt\\":\\"⪪\\",\\"smte\\":\\"⪬\\",\\"smtes\\":\\"⪬︀\\",\\"SOFTcy\\":\\"Ь\\",\\"softcy\\":\\"ь\\",\\"solbar\\":\\"⌿\\",\\"solb\\":\\"⧄\\",\\"sol\\":\\"/\\",\\"Sopf\\":\\"𝕊\\",\\"sopf\\":\\"𝕤\\",\\"spades\\":\\"♠\\",\\"spadesuit\\":\\"♠\\",\\"spar\\":\\"∥\\",\\"sqcap\\":\\"⊓\\",\\"sqcaps\\":\\"⊓︀\\",\\"sqcup\\":\\"⊔\\",\\"sqcups\\":\\"⊔︀\\",\\"Sqrt\\":\\"√\\",\\"sqsub\\":\\"⊏\\",\\"sqsube\\":\\"⊑\\",\\"sqsubset\\":\\"⊏\\",\\"sqsubseteq\\":\\"⊑\\",\\"sqsup\\":\\"⊐\\",\\"sqsupe\\":\\"⊒\\",\\"sqsupset\\":\\"⊐\\",\\"sqsupseteq\\":\\"⊒\\",\\"square\\":\\"□\\",\\"Square\\":\\"□\\",\\"SquareIntersection\\":\\"⊓\\",\\"SquareSubset\\":\\"⊏\\",\\"SquareSubsetEqual\\":\\"⊑\\",\\"SquareSuperset\\":\\"⊐\\",\\"SquareSupersetEqual\\":\\"⊒\\",\\"SquareUnion\\":\\"⊔\\",\\"squarf\\":\\"▪\\",\\"squ\\":\\"□\\",\\"squf\\":\\"▪\\",\\"srarr\\":\\"→\\",\\"Sscr\\":\\"𝒮\\",\\"sscr\\":\\"𝓈\\",\\"ssetmn\\":\\"∖\\",\\"ssmile\\":\\"⌣\\",\\"sstarf\\":\\"⋆\\",\\"Star\\":\\"⋆\\",\\"star\\":\\"☆\\",\\"starf\\":\\"★\\",\\"straightepsilon\\":\\"ϵ\\",\\"straightphi\\":\\"ϕ\\",\\"strns\\":\\"¯\\",\\"sub\\":\\"⊂\\",\\"Sub\\":\\"⋐\\",\\"subdot\\":\\"⪽\\",\\"subE\\":\\"⫅\\",\\"sube\\":\\"⊆\\",\\"subedot\\":\\"⫃\\",\\"submult\\":\\"⫁\\",\\"subnE\\":\\"⫋\\",\\"subne\\":\\"⊊\\",\\"subplus\\":\\"⪿\\",\\"subrarr\\":\\"⥹\\",\\"subset\\":\\"⊂\\",\\"Subset\\":\\"⋐\\",\\"subseteq\\":\\"⊆\\",\\"subseteqq\\":\\"⫅\\",\\"SubsetEqual\\":\\"⊆\\",\\"subsetneq\\":\\"⊊\\",\\"subsetneqq\\":\\"⫋\\",\\"subsim\\":\\"⫇\\",\\"subsub\\":\\"⫕\\",\\"subsup\\":\\"⫓\\",\\"succapprox\\":\\"⪸\\",\\"succ\\":\\"≻\\",\\"succcurlyeq\\":\\"≽\\",\\"Succeeds\\":\\"≻\\",\\"SucceedsEqual\\":\\"⪰\\",\\"SucceedsSlantEqual\\":\\"≽\\",\\"SucceedsTilde\\":\\"≿\\",\\"succeq\\":\\"⪰\\",\\"succnapprox\\":\\"⪺\\",\\"succneqq\\":\\"⪶\\",\\"succnsim\\":\\"⋩\\",\\"succsim\\":\\"≿\\",\\"SuchThat\\":\\"∋\\",\\"sum\\":\\"∑\\",\\"Sum\\":\\"∑\\",\\"sung\\":\\"♪\\",\\"sup1\\":\\"¹\\",\\"sup2\\":\\"²\\",\\"sup3\\":\\"³\\",\\"sup\\":\\"⊃\\",\\"Sup\\":\\"⋑\\",\\"supdot\\":\\"⪾\\",\\"supdsub\\":\\"⫘\\",\\"supE\\":\\"⫆\\",\\"supe\\":\\"⊇\\",\\"supedot\\":\\"⫄\\",\\"Superset\\":\\"⊃\\",\\"SupersetEqual\\":\\"⊇\\",\\"suphsol\\":\\"⟉\\",\\"suphsub\\":\\"⫗\\",\\"suplarr\\":\\"⥻\\",\\"supmult\\":\\"⫂\\",\\"supnE\\":\\"⫌\\",\\"supne\\":\\"⊋\\",\\"supplus\\":\\"⫀\\",\\"supset\\":\\"⊃\\",\\"Supset\\":\\"⋑\\",\\"supseteq\\":\\"⊇\\",\\"supseteqq\\":\\"⫆\\",\\"supsetneq\\":\\"⊋\\",\\"supsetneqq\\":\\"⫌\\",\\"supsim\\":\\"⫈\\",\\"supsub\\":\\"⫔\\",\\"supsup\\":\\"⫖\\",\\"swarhk\\":\\"⤦\\",\\"swarr\\":\\"↙\\",\\"swArr\\":\\"⇙\\",\\"swarrow\\":\\"↙\\",\\"swnwar\\":\\"⤪\\",\\"szlig\\":\\"ß\\",\\"Tab\\":\\"\\\\t\\",\\"target\\":\\"⌖\\",\\"Tau\\":\\"Τ\\",\\"tau\\":\\"τ\\",\\"tbrk\\":\\"⎴\\",\\"Tcaron\\":\\"Ť\\",\\"tcaron\\":\\"ť\\",\\"Tcedil\\":\\"Ţ\\",\\"tcedil\\":\\"ţ\\",\\"Tcy\\":\\"Т\\",\\"tcy\\":\\"т\\",\\"tdot\\":\\"⃛\\",\\"telrec\\":\\"⌕\\",\\"Tfr\\":\\"𝔗\\",\\"tfr\\":\\"𝔱\\",\\"there4\\":\\"∴\\",\\"therefore\\":\\"∴\\",\\"Therefore\\":\\"∴\\",\\"Theta\\":\\"Θ\\",\\"theta\\":\\"θ\\",\\"thetasym\\":\\"ϑ\\",\\"thetav\\":\\"ϑ\\",\\"thickapprox\\":\\"≈\\",\\"thicksim\\":\\"∼\\",\\"ThickSpace\\":\\"  \\",\\"ThinSpace\\":\\" \\",\\"thinsp\\":\\" \\",\\"thkap\\":\\"≈\\",\\"thksim\\":\\"∼\\",\\"THORN\\":\\"Þ\\",\\"thorn\\":\\"þ\\",\\"tilde\\":\\"˜\\",\\"Tilde\\":\\"∼\\",\\"TildeEqual\\":\\"≃\\",\\"TildeFullEqual\\":\\"≅\\",\\"TildeTilde\\":\\"≈\\",\\"timesbar\\":\\"⨱\\",\\"timesb\\":\\"⊠\\",\\"times\\":\\"×\\",\\"timesd\\":\\"⨰\\",\\"tint\\":\\"∭\\",\\"toea\\":\\"⤨\\",\\"topbot\\":\\"⌶\\",\\"topcir\\":\\"⫱\\",\\"top\\":\\"⊤\\",\\"Topf\\":\\"𝕋\\",\\"topf\\":\\"𝕥\\",\\"topfork\\":\\"⫚\\",\\"tosa\\":\\"⤩\\",\\"tprime\\":\\"‴\\",\\"trade\\":\\"™\\",\\"TRADE\\":\\"™\\",\\"triangle\\":\\"▵\\",\\"triangledown\\":\\"▿\\",\\"triangleleft\\":\\"◃\\",\\"trianglelefteq\\":\\"⊴\\",\\"triangleq\\":\\"≜\\",\\"triangleright\\":\\"▹\\",\\"trianglerighteq\\":\\"⊵\\",\\"tridot\\":\\"◬\\",\\"trie\\":\\"≜\\",\\"triminus\\":\\"⨺\\",\\"TripleDot\\":\\"⃛\\",\\"triplus\\":\\"⨹\\",\\"trisb\\":\\"⧍\\",\\"tritime\\":\\"⨻\\",\\"trpezium\\":\\"⏢\\",\\"Tscr\\":\\"𝒯\\",\\"tscr\\":\\"𝓉\\",\\"TScy\\":\\"Ц\\",\\"tscy\\":\\"ц\\",\\"TSHcy\\":\\"Ћ\\",\\"tshcy\\":\\"ћ\\",\\"Tstrok\\":\\"Ŧ\\",\\"tstrok\\":\\"ŧ\\",\\"twixt\\":\\"≬\\",\\"twoheadleftarrow\\":\\"↞\\",\\"twoheadrightarrow\\":\\"↠\\",\\"Uacute\\":\\"Ú\\",\\"uacute\\":\\"ú\\",\\"uarr\\":\\"↑\\",\\"Uarr\\":\\"↟\\",\\"uArr\\":\\"⇑\\",\\"Uarrocir\\":\\"⥉\\",\\"Ubrcy\\":\\"Ў\\",\\"ubrcy\\":\\"ў\\",\\"Ubreve\\":\\"Ŭ\\",\\"ubreve\\":\\"ŭ\\",\\"Ucirc\\":\\"Û\\",\\"ucirc\\":\\"û\\",\\"Ucy\\":\\"У\\",\\"ucy\\":\\"у\\",\\"udarr\\":\\"⇅\\",\\"Udblac\\":\\"Ű\\",\\"udblac\\":\\"ű\\",\\"udhar\\":\\"⥮\\",\\"ufisht\\":\\"⥾\\",\\"Ufr\\":\\"𝔘\\",\\"ufr\\":\\"𝔲\\",\\"Ugrave\\":\\"Ù\\",\\"ugrave\\":\\"ù\\",\\"uHar\\":\\"⥣\\",\\"uharl\\":\\"↿\\",\\"uharr\\":\\"↾\\",\\"uhblk\\":\\"▀\\",\\"ulcorn\\":\\"⌜\\",\\"ulcorner\\":\\"⌜\\",\\"ulcrop\\":\\"⌏\\",\\"ultri\\":\\"◸\\",\\"Umacr\\":\\"Ū\\",\\"umacr\\":\\"ū\\",\\"uml\\":\\"¨\\",\\"UnderBar\\":\\"_\\",\\"UnderBrace\\":\\"⏟\\",\\"UnderBracket\\":\\"⎵\\",\\"UnderParenthesis\\":\\"⏝\\",\\"Union\\":\\"⋃\\",\\"UnionPlus\\":\\"⊎\\",\\"Uogon\\":\\"Ų\\",\\"uogon\\":\\"ų\\",\\"Uopf\\":\\"𝕌\\",\\"uopf\\":\\"𝕦\\",\\"UpArrowBar\\":\\"⤒\\",\\"uparrow\\":\\"↑\\",\\"UpArrow\\":\\"↑\\",\\"Uparrow\\":\\"⇑\\",\\"UpArrowDownArrow\\":\\"⇅\\",\\"updownarrow\\":\\"↕\\",\\"UpDownArrow\\":\\"↕\\",\\"Updownarrow\\":\\"⇕\\",\\"UpEquilibrium\\":\\"⥮\\",\\"upharpoonleft\\":\\"↿\\",\\"upharpoonright\\":\\"↾\\",\\"uplus\\":\\"⊎\\",\\"UpperLeftArrow\\":\\"↖\\",\\"UpperRightArrow\\":\\"↗\\",\\"upsi\\":\\"υ\\",\\"Upsi\\":\\"ϒ\\",\\"upsih\\":\\"ϒ\\",\\"Upsilon\\":\\"Υ\\",\\"upsilon\\":\\"υ\\",\\"UpTeeArrow\\":\\"↥\\",\\"UpTee\\":\\"⊥\\",\\"upuparrows\\":\\"⇈\\",\\"urcorn\\":\\"⌝\\",\\"urcorner\\":\\"⌝\\",\\"urcrop\\":\\"⌎\\",\\"Uring\\":\\"Ů\\",\\"uring\\":\\"ů\\",\\"urtri\\":\\"◹\\",\\"Uscr\\":\\"𝒰\\",\\"uscr\\":\\"𝓊\\",\\"utdot\\":\\"⋰\\",\\"Utilde\\":\\"Ũ\\",\\"utilde\\":\\"ũ\\",\\"utri\\":\\"▵\\",\\"utrif\\":\\"▴\\",\\"uuarr\\":\\"⇈\\",\\"Uuml\\":\\"Ü\\",\\"uuml\\":\\"ü\\",\\"uwangle\\":\\"⦧\\",\\"vangrt\\":\\"⦜\\",\\"varepsilon\\":\\"ϵ\\",\\"varkappa\\":\\"ϰ\\",\\"varnothing\\":\\"∅\\",\\"varphi\\":\\"ϕ\\",\\"varpi\\":\\"ϖ\\",\\"varpropto\\":\\"∝\\",\\"varr\\":\\"↕\\",\\"vArr\\":\\"⇕\\",\\"varrho\\":\\"ϱ\\",\\"varsigma\\":\\"ς\\",\\"varsubsetneq\\":\\"⊊︀\\",\\"varsubsetneqq\\":\\"⫋︀\\",\\"varsupsetneq\\":\\"⊋︀\\",\\"varsupsetneqq\\":\\"⫌︀\\",\\"vartheta\\":\\"ϑ\\",\\"vartriangleleft\\":\\"⊲\\",\\"vartriangleright\\":\\"⊳\\",\\"vBar\\":\\"⫨\\",\\"Vbar\\":\\"⫫\\",\\"vBarv\\":\\"⫩\\",\\"Vcy\\":\\"В\\",\\"vcy\\":\\"в\\",\\"vdash\\":\\"⊢\\",\\"vDash\\":\\"⊨\\",\\"Vdash\\":\\"⊩\\",\\"VDash\\":\\"⊫\\",\\"Vdashl\\":\\"⫦\\",\\"veebar\\":\\"⊻\\",\\"vee\\":\\"∨\\",\\"Vee\\":\\"⋁\\",\\"veeeq\\":\\"≚\\",\\"vellip\\":\\"⋮\\",\\"verbar\\":\\"|\\",\\"Verbar\\":\\"‖\\",\\"vert\\":\\"|\\",\\"Vert\\":\\"‖\\",\\"VerticalBar\\":\\"∣\\",\\"VerticalLine\\":\\"|\\",\\"VerticalSeparator\\":\\"❘\\",\\"VerticalTilde\\":\\"≀\\",\\"VeryThinSpace\\":\\" \\",\\"Vfr\\":\\"𝔙\\",\\"vfr\\":\\"𝔳\\",\\"vltri\\":\\"⊲\\",\\"vnsub\\":\\"⊂⃒\\",\\"vnsup\\":\\"⊃⃒\\",\\"Vopf\\":\\"𝕍\\",\\"vopf\\":\\"𝕧\\",\\"vprop\\":\\"∝\\",\\"vrtri\\":\\"⊳\\",\\"Vscr\\":\\"𝒱\\",\\"vscr\\":\\"𝓋\\",\\"vsubnE\\":\\"⫋︀\\",\\"vsubne\\":\\"⊊︀\\",\\"vsupnE\\":\\"⫌︀\\",\\"vsupne\\":\\"⊋︀\\",\\"Vvdash\\":\\"⊪\\",\\"vzigzag\\":\\"⦚\\",\\"Wcirc\\":\\"Ŵ\\",\\"wcirc\\":\\"ŵ\\",\\"wedbar\\":\\"⩟\\",\\"wedge\\":\\"∧\\",\\"Wedge\\":\\"⋀\\",\\"wedgeq\\":\\"≙\\",\\"weierp\\":\\"℘\\",\\"Wfr\\":\\"𝔚\\",\\"wfr\\":\\"𝔴\\",\\"Wopf\\":\\"𝕎\\",\\"wopf\\":\\"𝕨\\",\\"wp\\":\\"℘\\",\\"wr\\":\\"≀\\",\\"wreath\\":\\"≀\\",\\"Wscr\\":\\"𝒲\\",\\"wscr\\":\\"𝓌\\",\\"xcap\\":\\"⋂\\",\\"xcirc\\":\\"◯\\",\\"xcup\\":\\"⋃\\",\\"xdtri\\":\\"▽\\",\\"Xfr\\":\\"𝔛\\",\\"xfr\\":\\"𝔵\\",\\"xharr\\":\\"⟷\\",\\"xhArr\\":\\"⟺\\",\\"Xi\\":\\"Ξ\\",\\"xi\\":\\"ξ\\",\\"xlarr\\":\\"⟵\\",\\"xlArr\\":\\"⟸\\",\\"xmap\\":\\"⟼\\",\\"xnis\\":\\"⋻\\",\\"xodot\\":\\"⨀\\",\\"Xopf\\":\\"𝕏\\",\\"xopf\\":\\"𝕩\\",\\"xoplus\\":\\"⨁\\",\\"xotime\\":\\"⨂\\",\\"xrarr\\":\\"⟶\\",\\"xrArr\\":\\"⟹\\",\\"Xscr\\":\\"𝒳\\",\\"xscr\\":\\"𝓍\\",\\"xsqcup\\":\\"⨆\\",\\"xuplus\\":\\"⨄\\",\\"xutri\\":\\"△\\",\\"xvee\\":\\"⋁\\",\\"xwedge\\":\\"⋀\\",\\"Yacute\\":\\"Ý\\",\\"yacute\\":\\"ý\\",\\"YAcy\\":\\"Я\\",\\"yacy\\":\\"я\\",\\"Ycirc\\":\\"Ŷ\\",\\"ycirc\\":\\"ŷ\\",\\"Ycy\\":\\"Ы\\",\\"ycy\\":\\"ы\\",\\"yen\\":\\"¥\\",\\"Yfr\\":\\"𝔜\\",\\"yfr\\":\\"𝔶\\",\\"YIcy\\":\\"Ї\\",\\"yicy\\":\\"ї\\",\\"Yopf\\":\\"𝕐\\",\\"yopf\\":\\"𝕪\\",\\"Yscr\\":\\"𝒴\\",\\"yscr\\":\\"𝓎\\",\\"YUcy\\":\\"Ю\\",\\"yucy\\":\\"ю\\",\\"yuml\\":\\"ÿ\\",\\"Yuml\\":\\"Ÿ\\",\\"Zacute\\":\\"Ź\\",\\"zacute\\":\\"ź\\",\\"Zcaron\\":\\"Ž\\",\\"zcaron\\":\\"ž\\",\\"Zcy\\":\\"З\\",\\"zcy\\":\\"з\\",\\"Zdot\\":\\"Ż\\",\\"zdot\\":\\"ż\\",\\"zeetrf\\":\\"ℨ\\",\\"ZeroWidthSpace\\":\\"​\\",\\"Zeta\\":\\"Ζ\\",\\"zeta\\":\\"ζ\\",\\"zfr\\":\\"𝔷\\",\\"Zfr\\":\\"ℨ\\",\\"ZHcy\\":\\"Ж\\",\\"zhcy\\":\\"ж\\",\\"zigrarr\\":\\"⇝\\",\\"zopf\\":\\"𝕫\\",\\"Zopf\\":\\"ℤ\\",\\"Zscr\\":\\"𝒵\\",\\"zscr\\":\\"𝓏\\",\\"zwj\\":\\"‍\\",\\"zwnj\\":\\"‌\\"}");\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/entities/maps/entities.json?')},"./node_modules/posthtml-parser/node_modules/entities/maps/legacy.json":function(module){eval('module.exports = JSON.parse("{\\"Aacute\\":\\"Á\\",\\"aacute\\":\\"á\\",\\"Acirc\\":\\"Â\\",\\"acirc\\":\\"â\\",\\"acute\\":\\"´\\",\\"AElig\\":\\"Æ\\",\\"aelig\\":\\"æ\\",\\"Agrave\\":\\"À\\",\\"agrave\\":\\"à\\",\\"amp\\":\\"&\\",\\"AMP\\":\\"&\\",\\"Aring\\":\\"Å\\",\\"aring\\":\\"å\\",\\"Atilde\\":\\"Ã\\",\\"atilde\\":\\"ã\\",\\"Auml\\":\\"Ä\\",\\"auml\\":\\"ä\\",\\"brvbar\\":\\"¦\\",\\"Ccedil\\":\\"Ç\\",\\"ccedil\\":\\"ç\\",\\"cedil\\":\\"¸\\",\\"cent\\":\\"¢\\",\\"copy\\":\\"©\\",\\"COPY\\":\\"©\\",\\"curren\\":\\"¤\\",\\"deg\\":\\"°\\",\\"divide\\":\\"÷\\",\\"Eacute\\":\\"É\\",\\"eacute\\":\\"é\\",\\"Ecirc\\":\\"Ê\\",\\"ecirc\\":\\"ê\\",\\"Egrave\\":\\"È\\",\\"egrave\\":\\"è\\",\\"ETH\\":\\"Ð\\",\\"eth\\":\\"ð\\",\\"Euml\\":\\"Ë\\",\\"euml\\":\\"ë\\",\\"frac12\\":\\"½\\",\\"frac14\\":\\"¼\\",\\"frac34\\":\\"¾\\",\\"gt\\":\\">\\",\\"GT\\":\\">\\",\\"Iacute\\":\\"Í\\",\\"iacute\\":\\"í\\",\\"Icirc\\":\\"Î\\",\\"icirc\\":\\"î\\",\\"iexcl\\":\\"¡\\",\\"Igrave\\":\\"Ì\\",\\"igrave\\":\\"ì\\",\\"iquest\\":\\"¿\\",\\"Iuml\\":\\"Ï\\",\\"iuml\\":\\"ï\\",\\"laquo\\":\\"«\\",\\"lt\\":\\"<\\",\\"LT\\":\\"<\\",\\"macr\\":\\"¯\\",\\"micro\\":\\"µ\\",\\"middot\\":\\"·\\",\\"nbsp\\":\\" \\",\\"not\\":\\"¬\\",\\"Ntilde\\":\\"Ñ\\",\\"ntilde\\":\\"ñ\\",\\"Oacute\\":\\"Ó\\",\\"oacute\\":\\"ó\\",\\"Ocirc\\":\\"Ô\\",\\"ocirc\\":\\"ô\\",\\"Ograve\\":\\"Ò\\",\\"ograve\\":\\"ò\\",\\"ordf\\":\\"ª\\",\\"ordm\\":\\"º\\",\\"Oslash\\":\\"Ø\\",\\"oslash\\":\\"ø\\",\\"Otilde\\":\\"Õ\\",\\"otilde\\":\\"õ\\",\\"Ouml\\":\\"Ö\\",\\"ouml\\":\\"ö\\",\\"para\\":\\"¶\\",\\"plusmn\\":\\"±\\",\\"pound\\":\\"£\\",\\"quot\\":\\"\\\\\\"\\",\\"QUOT\\":\\"\\\\\\"\\",\\"raquo\\":\\"»\\",\\"reg\\":\\"®\\",\\"REG\\":\\"®\\",\\"sect\\":\\"§\\",\\"shy\\":\\"­\\",\\"sup1\\":\\"¹\\",\\"sup2\\":\\"²\\",\\"sup3\\":\\"³\\",\\"szlig\\":\\"ß\\",\\"THORN\\":\\"Þ\\",\\"thorn\\":\\"þ\\",\\"times\\":\\"×\\",\\"Uacute\\":\\"Ú\\",\\"uacute\\":\\"ú\\",\\"Ucirc\\":\\"Û\\",\\"ucirc\\":\\"û\\",\\"Ugrave\\":\\"Ù\\",\\"ugrave\\":\\"ù\\",\\"uml\\":\\"¨\\",\\"Uuml\\":\\"Ü\\",\\"uuml\\":\\"ü\\",\\"Yacute\\":\\"Ý\\",\\"yacute\\":\\"ý\\",\\"yen\\":\\"¥\\",\\"yuml\\":\\"ÿ\\"}");\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/entities/maps/legacy.json?')},"./node_modules/posthtml-parser/node_modules/entities/maps/xml.json":function(module){eval('module.exports = JSON.parse("{\\"amp\\":\\"&\\",\\"apos\\":\\"\'\\",\\"gt\\":\\">\\",\\"lt\\":\\"<\\",\\"quot\\":\\"\\\\\\"\\"}");\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/entities/maps/xml.json?')},"./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Parser.js":function(module,exports,__webpack_require__){eval('var Tokenizer = __webpack_require__("./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Tokenizer.js");\n\n/*\n\tOptions:\n\n\txmlMode: Disables the special behavior for script/style tags (false by default)\n\tlowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)\n\tlowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)\n*/\n\n/*\n\tCallbacks:\n\n\toncdataend,\n\toncdatastart,\n\tonclosetag,\n\toncomment,\n\toncommentend,\n\tonerror,\n\tonopentag,\n\tonprocessinginstruction,\n\tonreset,\n\tontext\n*/\n\nvar formTags = {\n    input: true,\n    option: true,\n    optgroup: true,\n    select: true,\n    button: true,\n    datalist: true,\n    textarea: true\n};\n\nvar openImpliesClose = {\n    tr: { tr: true, th: true, td: true },\n    th: { th: true },\n    td: { thead: true, th: true, td: true },\n    body: { head: true, link: true, script: true },\n    li: { li: true },\n    p: { p: true },\n    h1: { p: true },\n    h2: { p: true },\n    h3: { p: true },\n    h4: { p: true },\n    h5: { p: true },\n    h6: { p: true },\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: { option: true },\n    optgroup: { optgroup: true }\n};\n\nvar voidElements = {\n    __proto__: null,\n    area: true,\n    base: true,\n    basefont: true,\n    br: true,\n    col: true,\n    command: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    isindex: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\n\nvar foreignContextElements = {\n    __proto__: null,\n    math: true,\n    svg: true\n};\nvar htmlIntegrationElements = {\n    __proto__: null,\n    mi: true,\n    mo: true,\n    mn: true,\n    ms: true,\n    mtext: true,\n    "annotation-xml": true,\n    foreignObject: true,\n    desc: true,\n    title: true\n};\n\nvar re_nameEnd = /\\s|\\//;\n\nfunction Parser(cbs, options) {\n    this._options = options || {};\n    this._cbs = cbs || {};\n\n    this._tagname = "";\n    this._attribname = "";\n    this._attribvalue = "";\n    this._attribs = null;\n    this._stack = [];\n    this._foreignContext = [];\n\n    this.startIndex = 0;\n    this.endIndex = null;\n\n    this._lowerCaseTagNames =\n        "lowerCaseTags" in this._options\n            ? !!this._options.lowerCaseTags\n            : !this._options.xmlMode;\n    this._lowerCaseAttributeNames =\n        "lowerCaseAttributeNames" in this._options\n            ? !!this._options.lowerCaseAttributeNames\n            : !this._options.xmlMode;\n\n    if (this._options.Tokenizer) {\n        Tokenizer = this._options.Tokenizer;\n    }\n    this._tokenizer = new Tokenizer(this._options, this);\n\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n}\n\n__webpack_require__("./node_modules/inherits/inherits_browser.js")(Parser, __webpack_require__("./node_modules/events/events.js").EventEmitter);\n\nParser.prototype._updatePosition = function(initialOffset) {\n    if (this.endIndex === null) {\n        if (this._tokenizer._sectionStart <= initialOffset) {\n            this.startIndex = 0;\n        } else {\n            this.startIndex = this._tokenizer._sectionStart - initialOffset;\n        }\n    } else this.startIndex = this.endIndex + 1;\n    this.endIndex = this._tokenizer.getAbsoluteIndex();\n};\n\n//Tokenizer event handlers\nParser.prototype.ontext = function(data) {\n    this._updatePosition(1);\n    this.endIndex--;\n\n    if (this._cbs.ontext) this._cbs.ontext(data);\n};\n\nParser.prototype.onopentagname = function(name) {\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n\n    this._tagname = name;\n\n    if (!this._options.xmlMode && name in openImpliesClose) {\n        for (\n            var el;\n            (el = this._stack[this._stack.length - 1]) in\n            openImpliesClose[name];\n            this.onclosetag(el)\n        );\n    }\n\n    if (this._options.xmlMode || !(name in voidElements)) {\n        this._stack.push(name);\n        if (name in foreignContextElements) this._foreignContext.push(true);\n        else if (name in htmlIntegrationElements)\n            this._foreignContext.push(false);\n    }\n\n    if (this._cbs.onopentagname) this._cbs.onopentagname(name);\n    if (this._cbs.onopentag) this._attribs = {};\n};\n\nParser.prototype.onopentagend = function() {\n    this._updatePosition(1);\n\n    if (this._attribs) {\n        if (this._cbs.onopentag)\n            this._cbs.onopentag(this._tagname, this._attribs);\n        this._attribs = null;\n    }\n\n    if (\n        !this._options.xmlMode &&\n        this._cbs.onclosetag &&\n        this._tagname in voidElements\n    ) {\n        this._cbs.onclosetag(this._tagname);\n    }\n\n    this._tagname = "";\n};\n\nParser.prototype.onclosetag = function(name) {\n    this._updatePosition(1);\n\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n    \n    if (name in foreignContextElements || name in htmlIntegrationElements) {\n        this._foreignContext.pop();\n    }\n\n    if (\n        this._stack.length &&\n        (!(name in voidElements) || this._options.xmlMode)\n    ) {\n        var pos = this._stack.lastIndexOf(name);\n        if (pos !== -1) {\n            if (this._cbs.onclosetag) {\n                pos = this._stack.length - pos;\n                while (pos--) this._cbs.onclosetag(this._stack.pop());\n            } else this._stack.length = pos;\n        } else if (name === "p" && !this._options.xmlMode) {\n            this.onopentagname(name);\n            this._closeCurrentTag();\n        }\n    } else if (!this._options.xmlMode && (name === "br" || name === "p")) {\n        this.onopentagname(name);\n        this._closeCurrentTag();\n    }\n};\n\nParser.prototype.onselfclosingtag = function() {\n    if (\n        this._options.xmlMode ||\n        this._options.recognizeSelfClosing ||\n        this._foreignContext[this._foreignContext.length - 1]\n    ) {\n        this._closeCurrentTag();\n    } else {\n        this.onopentagend();\n    }\n};\n\nParser.prototype._closeCurrentTag = function() {\n    var name = this._tagname;\n\n    this.onopentagend();\n\n    //self-closing tags will be on the top of the stack\n    //(cheaper check than in onclosetag)\n    if (this._stack[this._stack.length - 1] === name) {\n        if (this._cbs.onclosetag) {\n            this._cbs.onclosetag(name);\n        }\n        this._stack.pop();\n        \n    }\n};\n\nParser.prototype.onattribname = function(name) {\n    if (this._lowerCaseAttributeNames) {\n        name = name.toLowerCase();\n    }\n    this._attribname = name;\n};\n\nParser.prototype.onattribdata = function(value) {\n    this._attribvalue += value;\n};\n\nParser.prototype.onattribend = function() {\n    if (this._cbs.onattribute)\n        this._cbs.onattribute(this._attribname, this._attribvalue);\n    if (\n        this._attribs &&\n        !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)\n    ) {\n        this._attribs[this._attribname] = this._attribvalue;\n    }\n    this._attribname = "";\n    this._attribvalue = "";\n};\n\nParser.prototype._getInstructionName = function(value) {\n    var idx = value.search(re_nameEnd),\n        name = idx < 0 ? value : value.substr(0, idx);\n\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n\n    return name;\n};\n\nParser.prototype.ondeclaration = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction("!" + name, "!" + value);\n    }\n};\n\nParser.prototype.onprocessinginstruction = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction("?" + name, "?" + value);\n    }\n};\n\nParser.prototype.oncomment = function(value) {\n    this._updatePosition(4);\n\n    if (this._cbs.oncomment) this._cbs.oncomment(value);\n    if (this._cbs.oncommentend) this._cbs.oncommentend();\n};\n\nParser.prototype.oncdata = function(value) {\n    this._updatePosition(1);\n\n    if (this._options.xmlMode || this._options.recognizeCDATA) {\n        if (this._cbs.oncdatastart) this._cbs.oncdatastart();\n        if (this._cbs.ontext) this._cbs.ontext(value);\n        if (this._cbs.oncdataend) this._cbs.oncdataend();\n    } else {\n        this.oncomment("[CDATA[" + value + "]]");\n    }\n};\n\nParser.prototype.onerror = function(err) {\n    if (this._cbs.onerror) this._cbs.onerror(err);\n};\n\nParser.prototype.onend = function() {\n    if (this._cbs.onclosetag) {\n        for (\n            var i = this._stack.length;\n            i > 0;\n            this._cbs.onclosetag(this._stack[--i])\n        );\n    }\n    if (this._cbs.onend) this._cbs.onend();\n};\n\n//Resets the parser to a blank state, ready to parse a new HTML document\nParser.prototype.reset = function() {\n    if (this._cbs.onreset) this._cbs.onreset();\n    this._tokenizer.reset();\n\n    this._tagname = "";\n    this._attribname = "";\n    this._attribs = null;\n    this._stack = [];\n\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n};\n\n//Parses a complete HTML document and pushes it to the handler\nParser.prototype.parseComplete = function(data) {\n    this.reset();\n    this.end(data);\n};\n\nParser.prototype.write = function(chunk) {\n    this._tokenizer.write(chunk);\n};\n\nParser.prototype.end = function(chunk) {\n    this._tokenizer.end(chunk);\n};\n\nParser.prototype.pause = function() {\n    this._tokenizer.pause();\n};\n\nParser.prototype.resume = function() {\n    this._tokenizer.resume();\n};\n\n//alias for backwards compat\nParser.prototype.parseChunk = Parser.prototype.write;\nParser.prototype.done = Parser.prototype.end;\n\nmodule.exports = Parser;\n\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Parser.js?')},"./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Tokenizer.js":function(module,exports,__webpack_require__){eval('module.exports = Tokenizer;\n\nvar decodeCodePoint = __webpack_require__("./node_modules/posthtml-parser/node_modules/entities/lib/decode_codepoint.js");\nvar entityMap = __webpack_require__("./node_modules/posthtml-parser/node_modules/entities/maps/entities.json");\nvar legacyMap = __webpack_require__("./node_modules/posthtml-parser/node_modules/entities/maps/legacy.json");\nvar xmlMap = __webpack_require__("./node_modules/posthtml-parser/node_modules/entities/maps/xml.json");\n\nvar i = 0;\n\nvar TEXT = i++;\nvar BEFORE_TAG_NAME = i++; //after <\nvar IN_TAG_NAME = i++;\nvar IN_SELF_CLOSING_TAG = i++;\nvar BEFORE_CLOSING_TAG_NAME = i++;\nvar IN_CLOSING_TAG_NAME = i++;\nvar AFTER_CLOSING_TAG_NAME = i++;\n\n//attributes\nvar BEFORE_ATTRIBUTE_NAME = i++;\nvar IN_ATTRIBUTE_NAME = i++;\nvar AFTER_ATTRIBUTE_NAME = i++;\nvar BEFORE_ATTRIBUTE_VALUE = i++;\nvar IN_ATTRIBUTE_VALUE_DQ = i++; // "\nvar IN_ATTRIBUTE_VALUE_SQ = i++; // \'\nvar IN_ATTRIBUTE_VALUE_NQ = i++;\n\n//declarations\nvar BEFORE_DECLARATION = i++; // !\nvar IN_DECLARATION = i++;\n\n//processing instructions\nvar IN_PROCESSING_INSTRUCTION = i++; // ?\n\n//comments\nvar BEFORE_COMMENT = i++;\nvar IN_COMMENT = i++;\nvar AFTER_COMMENT_1 = i++;\nvar AFTER_COMMENT_2 = i++;\n\n//cdata\nvar BEFORE_CDATA_1 = i++; // [\nvar BEFORE_CDATA_2 = i++; // C\nvar BEFORE_CDATA_3 = i++; // D\nvar BEFORE_CDATA_4 = i++; // A\nvar BEFORE_CDATA_5 = i++; // T\nvar BEFORE_CDATA_6 = i++; // A\nvar IN_CDATA = i++; // [\nvar AFTER_CDATA_1 = i++; // ]\nvar AFTER_CDATA_2 = i++; // ]\n\n//special tags\nvar BEFORE_SPECIAL = i++; //S\nvar BEFORE_SPECIAL_END = i++; //S\n\nvar BEFORE_SCRIPT_1 = i++; //C\nvar BEFORE_SCRIPT_2 = i++; //R\nvar BEFORE_SCRIPT_3 = i++; //I\nvar BEFORE_SCRIPT_4 = i++; //P\nvar BEFORE_SCRIPT_5 = i++; //T\nvar AFTER_SCRIPT_1 = i++; //C\nvar AFTER_SCRIPT_2 = i++; //R\nvar AFTER_SCRIPT_3 = i++; //I\nvar AFTER_SCRIPT_4 = i++; //P\nvar AFTER_SCRIPT_5 = i++; //T\n\nvar BEFORE_STYLE_1 = i++; //T\nvar BEFORE_STYLE_2 = i++; //Y\nvar BEFORE_STYLE_3 = i++; //L\nvar BEFORE_STYLE_4 = i++; //E\nvar AFTER_STYLE_1 = i++; //T\nvar AFTER_STYLE_2 = i++; //Y\nvar AFTER_STYLE_3 = i++; //L\nvar AFTER_STYLE_4 = i++; //E\n\nvar BEFORE_ENTITY = i++; //&\nvar BEFORE_NUMERIC_ENTITY = i++; //#\nvar IN_NAMED_ENTITY = i++;\nvar IN_NUMERIC_ENTITY = i++;\nvar IN_HEX_ENTITY = i++; //X\n\nvar j = 0;\n\nvar SPECIAL_NONE = j++;\nvar SPECIAL_SCRIPT = j++;\nvar SPECIAL_STYLE = j++;\n\nfunction whitespace(c) {\n    return c === " " || c === "\\n" || c === "\\t" || c === "\\f" || c === "\\r";\n}\n\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n\n    if (upper === lower) {\n        return function(c) {\n            if (c === lower) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    } else {\n        return function(c) {\n            if (c === lower || c === upper) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    }\n}\n\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n\n    return function(c) {\n        if (c === lower || c === upper) {\n            this._state = NEXT_STATE;\n        } else {\n            this._state = IN_TAG_NAME;\n            this._index--; //consume the token again\n        }\n    };\n}\n\nfunction Tokenizer(options, cbs) {\n    this._state = TEXT;\n    this._buffer = "";\n    this._sectionStart = 0;\n    this._index = 0;\n    this._bufferOffset = 0; //chars removed from _buffer\n    this._baseState = TEXT;\n    this._special = SPECIAL_NONE;\n    this._cbs = cbs;\n    this._running = true;\n    this._ended = false;\n    this._xmlMode = !!(options && options.xmlMode);\n    this._decodeEntities = !!(options && options.decodeEntities);\n}\n\nTokenizer.prototype._stateText = function(c) {\n    if (c === "<") {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._state = BEFORE_TAG_NAME;\n        this._sectionStart = this._index;\n    } else if (\n        this._decodeEntities &&\n        this._special === SPECIAL_NONE &&\n        c === "&"\n    ) {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._baseState = TEXT;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeTagName = function(c) {\n    if (c === "/") {\n        this._state = BEFORE_CLOSING_TAG_NAME;\n    } else if (c === "<") {\n        this._cbs.ontext(this._getSection());\n        this._sectionStart = this._index;\n    } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {\n        this._state = TEXT;\n    } else if (c === "!") {\n        this._state = BEFORE_DECLARATION;\n        this._sectionStart = this._index + 1;\n    } else if (c === "?") {\n        this._state = IN_PROCESSING_INSTRUCTION;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state =\n            !this._xmlMode && (c === "s" || c === "S")\n                ? BEFORE_SPECIAL\n                : IN_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInTagName = function(c) {\n    if (c === "/" || c === ">" || whitespace(c)) {\n        this._emitToken("onopentagname");\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateBeforeCloseingTagName = function(c) {\n    if (whitespace(c));\n    else if (c === ">") {\n        this._state = TEXT;\n    } else if (this._special !== SPECIAL_NONE) {\n        if (c === "s" || c === "S") {\n            this._state = BEFORE_SPECIAL_END;\n        } else {\n            this._state = TEXT;\n            this._index--;\n        }\n    } else {\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInCloseingTagName = function(c) {\n    if (c === ">" || whitespace(c)) {\n        this._emitToken("onclosetag");\n        this._state = AFTER_CLOSING_TAG_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateAfterCloseingTagName = function(c) {\n    //skip everything until ">"\n    if (c === ">") {\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateBeforeAttributeName = function(c) {\n    if (c === ">") {\n        this._cbs.onopentagend();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c === "/") {\n        this._state = IN_SELF_CLOSING_TAG;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInSelfClosingTag = function(c) {\n    if (c === ">") {\n        this._cbs.onselfclosingtag();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInAttributeName = function(c) {\n    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {\n        this._cbs.onattribname(this._getSection());\n        this._sectionStart = -1;\n        this._state = AFTER_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateAfterAttributeName = function(c) {\n    if (c === "=") {\n        this._state = BEFORE_ATTRIBUTE_VALUE;\n    } else if (c === "/" || c === ">") {\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (!whitespace(c)) {\n        this._cbs.onattribend();\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeAttributeValue = function(c) {\n    if (c === \'"\') {\n        this._state = IN_ATTRIBUTE_VALUE_DQ;\n        this._sectionStart = this._index + 1;\n    } else if (c === "\'") {\n        this._state = IN_ATTRIBUTE_VALUE_SQ;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_VALUE_NQ;\n        this._sectionStart = this._index;\n        this._index--; //reconsume token\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {\n    if (c === \'"\') {\n        this._emitToken("onattribdata");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === "&") {\n        this._emitToken("onattribdata");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {\n    if (c === "\'") {\n        this._emitToken("onattribdata");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === "&") {\n        this._emitToken("onattribdata");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {\n    if (whitespace(c) || c === ">") {\n        this._emitToken("onattribdata");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (this._decodeEntities && c === "&") {\n        this._emitToken("onattribdata");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\n\nTokenizer.prototype._stateBeforeDeclaration = function(c) {\n    this._state =\n        c === "["\n            ? BEFORE_CDATA_1\n            : c === "-"\n                ? BEFORE_COMMENT\n                : IN_DECLARATION;\n};\n\nTokenizer.prototype._stateInDeclaration = function(c) {\n    if (c === ">") {\n        this._cbs.ondeclaration(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateInProcessingInstruction = function(c) {\n    if (c === ">") {\n        this._cbs.onprocessinginstruction(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\n\nTokenizer.prototype._stateBeforeComment = function(c) {\n    if (c === "-") {\n        this._state = IN_COMMENT;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n    }\n};\n\nTokenizer.prototype._stateInComment = function(c) {\n    if (c === "-") this._state = AFTER_COMMENT_1;\n};\n\nTokenizer.prototype._stateAfterComment1 = function(c) {\n    if (c === "-") {\n        this._state = AFTER_COMMENT_2;\n    } else {\n        this._state = IN_COMMENT;\n    }\n};\n\nTokenizer.prototype._stateAfterComment2 = function(c) {\n    if (c === ">") {\n        //remove 2 trailing chars\n        this._cbs.oncomment(\n            this._buffer.substring(this._sectionStart, this._index - 2)\n        );\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== "-") {\n        this._state = IN_COMMENT;\n    }\n    // else: stay in AFTER_COMMENT_2 (`---\x3e`)\n};\n\nTokenizer.prototype._stateBeforeCdata1 = ifElseState(\n    "C",\n    BEFORE_CDATA_2,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata2 = ifElseState(\n    "D",\n    BEFORE_CDATA_3,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata3 = ifElseState(\n    "A",\n    BEFORE_CDATA_4,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata4 = ifElseState(\n    "T",\n    BEFORE_CDATA_5,\n    IN_DECLARATION\n);\nTokenizer.prototype._stateBeforeCdata5 = ifElseState(\n    "A",\n    BEFORE_CDATA_6,\n    IN_DECLARATION\n);\n\nTokenizer.prototype._stateBeforeCdata6 = function(c) {\n    if (c === "[") {\n        this._state = IN_CDATA;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInCdata = function(c) {\n    if (c === "]") this._state = AFTER_CDATA_1;\n};\n\nTokenizer.prototype._stateAfterCdata1 = function(c) {\n    if (c === "]") this._state = AFTER_CDATA_2;\n    else this._state = IN_CDATA;\n};\n\nTokenizer.prototype._stateAfterCdata2 = function(c) {\n    if (c === ">") {\n        //remove 2 trailing chars\n        this._cbs.oncdata(\n            this._buffer.substring(this._sectionStart, this._index - 2)\n        );\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== "]") {\n        this._state = IN_CDATA;\n    }\n    //else: stay in AFTER_CDATA_2 (`]]]>`)\n};\n\nTokenizer.prototype._stateBeforeSpecial = function(c) {\n    if (c === "c" || c === "C") {\n        this._state = BEFORE_SCRIPT_1;\n    } else if (c === "t" || c === "T") {\n        this._state = BEFORE_STYLE_1;\n    } else {\n        this._state = IN_TAG_NAME;\n        this._index--; //consume the token again\n    }\n};\n\nTokenizer.prototype._stateBeforeSpecialEnd = function(c) {\n    if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {\n        this._state = AFTER_SCRIPT_1;\n    } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {\n        this._state = AFTER_STYLE_1;\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(\n    "R",\n    BEFORE_SCRIPT_2\n);\nTokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(\n    "I",\n    BEFORE_SCRIPT_3\n);\nTokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(\n    "P",\n    BEFORE_SCRIPT_4\n);\nTokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(\n    "T",\n    BEFORE_SCRIPT_5\n);\n\nTokenizer.prototype._stateBeforeScript5 = function(c) {\n    if (c === "/" || c === ">" || whitespace(c)) {\n        this._special = SPECIAL_SCRIPT;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);\nTokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);\nTokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);\nTokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);\n\nTokenizer.prototype._stateAfterScript5 = function(c) {\n    if (c === ">" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 6;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(\n    "Y",\n    BEFORE_STYLE_2\n);\nTokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(\n    "L",\n    BEFORE_STYLE_3\n);\nTokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(\n    "E",\n    BEFORE_STYLE_4\n);\n\nTokenizer.prototype._stateBeforeStyle4 = function(c) {\n    if (c === "/" || c === ">" || whitespace(c)) {\n        this._special = SPECIAL_STYLE;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);\nTokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);\nTokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);\n\nTokenizer.prototype._stateAfterStyle4 = function(c) {\n    if (c === ">" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 5;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeEntity = ifElseState(\n    "#",\n    BEFORE_NUMERIC_ENTITY,\n    IN_NAMED_ENTITY\n);\nTokenizer.prototype._stateBeforeNumericEntity = ifElseState(\n    "X",\n    IN_HEX_ENTITY,\n    IN_NUMERIC_ENTITY\n);\n\n//for entities terminated with a semicolon\nTokenizer.prototype._parseNamedEntityStrict = function() {\n    //offset = 1\n    if (this._sectionStart + 1 < this._index) {\n        var entity = this._buffer.substring(\n                this._sectionStart + 1,\n                this._index\n            ),\n            map = this._xmlMode ? xmlMap : entityMap;\n\n        if (map.hasOwnProperty(entity)) {\n            this._emitPartial(map[entity]);\n            this._sectionStart = this._index + 1;\n        }\n    }\n};\n\n//parses legacy entities (without trailing semicolon)\nTokenizer.prototype._parseLegacyEntity = function() {\n    var start = this._sectionStart + 1,\n        limit = this._index - start;\n\n    if (limit > 6) limit = 6; //the max length of legacy entities is 6\n\n    while (limit >= 2) {\n        //the min length of legacy entities is 2\n        var entity = this._buffer.substr(start, limit);\n\n        if (legacyMap.hasOwnProperty(entity)) {\n            this._emitPartial(legacyMap[entity]);\n            this._sectionStart += limit + 1;\n            return;\n        } else {\n            limit--;\n        }\n    }\n};\n\nTokenizer.prototype._stateInNamedEntity = function(c) {\n    if (c === ";") {\n        this._parseNamedEntityStrict();\n        if (this._sectionStart + 1 < this._index && !this._xmlMode) {\n            this._parseLegacyEntity();\n        }\n        this._state = this._baseState;\n    } else if (\n        (c < "a" || c > "z") &&\n        (c < "A" || c > "Z") &&\n        (c < "0" || c > "9")\n    ) {\n        if (this._xmlMode);\n        else if (this._sectionStart + 1 === this._index);\n        else if (this._baseState !== TEXT) {\n            if (c !== "=") {\n                this._parseNamedEntityStrict();\n            }\n        } else {\n            this._parseLegacyEntity();\n        }\n\n        this._state = this._baseState;\n        this._index--;\n    }\n};\n\nTokenizer.prototype._decodeNumericEntity = function(offset, base) {\n    var sectionStart = this._sectionStart + offset;\n\n    if (sectionStart !== this._index) {\n        //parse entity\n        var entity = this._buffer.substring(sectionStart, this._index);\n        var parsed = parseInt(entity, base);\n\n        this._emitPartial(decodeCodePoint(parsed));\n        this._sectionStart = this._index;\n    } else {\n        this._sectionStart--;\n    }\n\n    this._state = this._baseState;\n};\n\nTokenizer.prototype._stateInNumericEntity = function(c) {\n    if (c === ";") {\n        this._decodeNumericEntity(2, 10);\n        this._sectionStart++;\n    } else if (c < "0" || c > "9") {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(2, 10);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\n\nTokenizer.prototype._stateInHexEntity = function(c) {\n    if (c === ";") {\n        this._decodeNumericEntity(3, 16);\n        this._sectionStart++;\n    } else if (\n        (c < "a" || c > "f") &&\n        (c < "A" || c > "F") &&\n        (c < "0" || c > "9")\n    ) {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(3, 16);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\n\nTokenizer.prototype._cleanup = function() {\n    if (this._sectionStart < 0) {\n        this._buffer = "";\n        this._bufferOffset += this._index;\n        this._index = 0;\n    } else if (this._running) {\n        if (this._state === TEXT) {\n            if (this._sectionStart !== this._index) {\n                this._cbs.ontext(this._buffer.substr(this._sectionStart));\n            }\n            this._buffer = "";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else if (this._sectionStart === this._index) {\n            //the section just started\n            this._buffer = "";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else {\n            //remove everything unnecessary\n            this._buffer = this._buffer.substr(this._sectionStart);\n            this._index -= this._sectionStart;\n            this._bufferOffset += this._sectionStart;\n        }\n\n        this._sectionStart = 0;\n    }\n};\n\n//TODO make events conditional\nTokenizer.prototype.write = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(".write() after done!"));\n\n    this._buffer += chunk;\n    this._parse();\n};\n\nTokenizer.prototype._parse = function() {\n    while (this._index < this._buffer.length && this._running) {\n        var c = this._buffer.charAt(this._index);\n        if (this._state === TEXT) {\n            this._stateText(c);\n        } else if (this._state === BEFORE_TAG_NAME) {\n            this._stateBeforeTagName(c);\n        } else if (this._state === IN_TAG_NAME) {\n            this._stateInTagName(c);\n        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {\n            this._stateBeforeCloseingTagName(c);\n        } else if (this._state === IN_CLOSING_TAG_NAME) {\n            this._stateInCloseingTagName(c);\n        } else if (this._state === AFTER_CLOSING_TAG_NAME) {\n            this._stateAfterCloseingTagName(c);\n        } else if (this._state === IN_SELF_CLOSING_TAG) {\n            this._stateInSelfClosingTag(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {\n\n        /*\n\t\t*\tattributes\n\t\t*/\n            this._stateBeforeAttributeName(c);\n        } else if (this._state === IN_ATTRIBUTE_NAME) {\n            this._stateInAttributeName(c);\n        } else if (this._state === AFTER_ATTRIBUTE_NAME) {\n            this._stateAfterAttributeName(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {\n            this._stateBeforeAttributeValue(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {\n            this._stateInAttributeValueDoubleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {\n            this._stateInAttributeValueSingleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {\n            this._stateInAttributeValueNoQuotes(c);\n        } else if (this._state === BEFORE_DECLARATION) {\n\n        /*\n\t\t*\tdeclarations\n\t\t*/\n            this._stateBeforeDeclaration(c);\n        } else if (this._state === IN_DECLARATION) {\n            this._stateInDeclaration(c);\n        } else if (this._state === IN_PROCESSING_INSTRUCTION) {\n\n        /*\n\t\t*\tprocessing instructions\n\t\t*/\n            this._stateInProcessingInstruction(c);\n        } else if (this._state === BEFORE_COMMENT) {\n\n        /*\n\t\t*\tcomments\n\t\t*/\n            this._stateBeforeComment(c);\n        } else if (this._state === IN_COMMENT) {\n            this._stateInComment(c);\n        } else if (this._state === AFTER_COMMENT_1) {\n            this._stateAfterComment1(c);\n        } else if (this._state === AFTER_COMMENT_2) {\n            this._stateAfterComment2(c);\n        } else if (this._state === BEFORE_CDATA_1) {\n\n        /*\n\t\t*\tcdata\n\t\t*/\n            this._stateBeforeCdata1(c);\n        } else if (this._state === BEFORE_CDATA_2) {\n            this._stateBeforeCdata2(c);\n        } else if (this._state === BEFORE_CDATA_3) {\n            this._stateBeforeCdata3(c);\n        } else if (this._state === BEFORE_CDATA_4) {\n            this._stateBeforeCdata4(c);\n        } else if (this._state === BEFORE_CDATA_5) {\n            this._stateBeforeCdata5(c);\n        } else if (this._state === BEFORE_CDATA_6) {\n            this._stateBeforeCdata6(c);\n        } else if (this._state === IN_CDATA) {\n            this._stateInCdata(c);\n        } else if (this._state === AFTER_CDATA_1) {\n            this._stateAfterCdata1(c);\n        } else if (this._state === AFTER_CDATA_2) {\n            this._stateAfterCdata2(c);\n        } else if (this._state === BEFORE_SPECIAL) {\n\n        /*\n\t\t* special tags\n\t\t*/\n            this._stateBeforeSpecial(c);\n        } else if (this._state === BEFORE_SPECIAL_END) {\n            this._stateBeforeSpecialEnd(c);\n        } else if (this._state === BEFORE_SCRIPT_1) {\n\n        /*\n\t\t* script\n\t\t*/\n            this._stateBeforeScript1(c);\n        } else if (this._state === BEFORE_SCRIPT_2) {\n            this._stateBeforeScript2(c);\n        } else if (this._state === BEFORE_SCRIPT_3) {\n            this._stateBeforeScript3(c);\n        } else if (this._state === BEFORE_SCRIPT_4) {\n            this._stateBeforeScript4(c);\n        } else if (this._state === BEFORE_SCRIPT_5) {\n            this._stateBeforeScript5(c);\n        } else if (this._state === AFTER_SCRIPT_1) {\n            this._stateAfterScript1(c);\n        } else if (this._state === AFTER_SCRIPT_2) {\n            this._stateAfterScript2(c);\n        } else if (this._state === AFTER_SCRIPT_3) {\n            this._stateAfterScript3(c);\n        } else if (this._state === AFTER_SCRIPT_4) {\n            this._stateAfterScript4(c);\n        } else if (this._state === AFTER_SCRIPT_5) {\n            this._stateAfterScript5(c);\n        } else if (this._state === BEFORE_STYLE_1) {\n\n        /*\n\t\t* style\n\t\t*/\n            this._stateBeforeStyle1(c);\n        } else if (this._state === BEFORE_STYLE_2) {\n            this._stateBeforeStyle2(c);\n        } else if (this._state === BEFORE_STYLE_3) {\n            this._stateBeforeStyle3(c);\n        } else if (this._state === BEFORE_STYLE_4) {\n            this._stateBeforeStyle4(c);\n        } else if (this._state === AFTER_STYLE_1) {\n            this._stateAfterStyle1(c);\n        } else if (this._state === AFTER_STYLE_2) {\n            this._stateAfterStyle2(c);\n        } else if (this._state === AFTER_STYLE_3) {\n            this._stateAfterStyle3(c);\n        } else if (this._state === AFTER_STYLE_4) {\n            this._stateAfterStyle4(c);\n        } else if (this._state === BEFORE_ENTITY) {\n\n        /*\n\t\t* entities\n\t\t*/\n            this._stateBeforeEntity(c);\n        } else if (this._state === BEFORE_NUMERIC_ENTITY) {\n            this._stateBeforeNumericEntity(c);\n        } else if (this._state === IN_NAMED_ENTITY) {\n            this._stateInNamedEntity(c);\n        } else if (this._state === IN_NUMERIC_ENTITY) {\n            this._stateInNumericEntity(c);\n        } else if (this._state === IN_HEX_ENTITY) {\n            this._stateInHexEntity(c);\n        } else {\n            this._cbs.onerror(Error("unknown _state"), this._state);\n        }\n\n        this._index++;\n    }\n\n    this._cleanup();\n};\n\nTokenizer.prototype.pause = function() {\n    this._running = false;\n};\nTokenizer.prototype.resume = function() {\n    this._running = true;\n\n    if (this._index < this._buffer.length) {\n        this._parse();\n    }\n    if (this._ended) {\n        this._finish();\n    }\n};\n\nTokenizer.prototype.end = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(".end() after done!"));\n    if (chunk) this.write(chunk);\n\n    this._ended = true;\n\n    if (this._running) this._finish();\n};\n\nTokenizer.prototype._finish = function() {\n    //if there is remaining data, emit it in a reasonable way\n    if (this._sectionStart < this._index) {\n        this._handleTrailingData();\n    }\n\n    this._cbs.onend();\n};\n\nTokenizer.prototype._handleTrailingData = function() {\n    var data = this._buffer.substr(this._sectionStart);\n\n    if (\n        this._state === IN_CDATA ||\n        this._state === AFTER_CDATA_1 ||\n        this._state === AFTER_CDATA_2\n    ) {\n        this._cbs.oncdata(data);\n    } else if (\n        this._state === IN_COMMENT ||\n        this._state === AFTER_COMMENT_1 ||\n        this._state === AFTER_COMMENT_2\n    ) {\n        this._cbs.oncomment(data);\n    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {\n        this._parseLegacyEntity();\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(2, 10);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(3, 16);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (\n        this._state !== IN_TAG_NAME &&\n        this._state !== BEFORE_ATTRIBUTE_NAME &&\n        this._state !== BEFORE_ATTRIBUTE_VALUE &&\n        this._state !== AFTER_ATTRIBUTE_NAME &&\n        this._state !== IN_ATTRIBUTE_NAME &&\n        this._state !== IN_ATTRIBUTE_VALUE_SQ &&\n        this._state !== IN_ATTRIBUTE_VALUE_DQ &&\n        this._state !== IN_ATTRIBUTE_VALUE_NQ &&\n        this._state !== IN_CLOSING_TAG_NAME\n    ) {\n        this._cbs.ontext(data);\n    }\n    //else, ignore remaining data\n    //TODO add a way to remove current tag\n};\n\nTokenizer.prototype.reset = function() {\n    Tokenizer.call(\n        this,\n        { xmlMode: this._xmlMode, decodeEntities: this._decodeEntities },\n        this._cbs\n    );\n};\n\nTokenizer.prototype.getAbsoluteIndex = function() {\n    return this._bufferOffset + this._index;\n};\n\nTokenizer.prototype._getSection = function() {\n    return this._buffer.substring(this._sectionStart, this._index);\n};\n\nTokenizer.prototype._emitToken = function(name) {\n    this._cbs[name](this._getSection());\n    this._sectionStart = -1;\n};\n\nTokenizer.prototype._emitPartial = function(value) {\n    if (this._baseState !== TEXT) {\n        this._cbs.onattribdata(value); //TODO implement the new event\n    } else {\n        this._cbs.ontext(value);\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/posthtml-parser/node_modules/htmlparser2/lib/Tokenizer.js?')}}]);